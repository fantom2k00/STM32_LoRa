
BBBeacon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fd4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08006164  08006164  00016164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800654c  0800654c  00020128  2**0
                  CONTENTS
  4 .ARM          00000000  0800654c  0800654c  00020128  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800654c  0800654c  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800654c  0800654c  0001654c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006550  08006550  00016550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  08006554  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000128  0800667c  00020128  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  0800667c  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000edcd  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002024  00000000  00000000  0002ef25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  00030f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a60  00000000  00000000  00031a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c326  00000000  00000000  000324d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f222  00000000  00000000  0004e7fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6e90  00000000  00000000  0005da20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001048b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003704  00000000  00000000  00104900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000128 	.word	0x20000128
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800614c 	.word	0x0800614c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000012c 	.word	0x2000012c
 80001cc:	0800614c 	.word	0x0800614c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000278:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800027c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000280:	f003 0301 	and.w	r3, r3, #1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d013      	beq.n	80002b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000288:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800028c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000290:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000294:	2b00      	cmp	r3, #0
 8000296:	d00b      	beq.n	80002b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000298:	e000      	b.n	800029c <ITM_SendChar+0x2c>
    {
      __NOP();
 800029a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800029c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d0f9      	beq.n	800029a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	b2d2      	uxtb	r2, r2
 80002ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002b0:	687b      	ldr	r3, [r7, #4]
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr

080002be <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 80002be:	b580      	push	{r7, lr}
 80002c0:	b086      	sub	sp, #24
 80002c2:	af00      	add	r7, sp, #0
 80002c4:	60f8      	str	r0, [r7, #12]
 80002c6:	60b9      	str	r1, [r7, #8]
 80002c8:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
 80002ce:	e009      	b.n	80002e4 <_write+0x26>
	{
	  ITM_SendChar(*ptr++);
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	60ba      	str	r2, [r7, #8]
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	4618      	mov	r0, r3
 80002da:	f7ff ffc9 	bl	8000270 <ITM_SendChar>
	for (int i = 0; i < len; i++)
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	3301      	adds	r3, #1
 80002e2:	617b      	str	r3, [r7, #20]
 80002e4:	697a      	ldr	r2, [r7, #20]
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	429a      	cmp	r2, r3
 80002ea:	dbf1      	blt.n	80002d0 <_write+0x12>
	}
	return len;
 80002ec:	687b      	ldr	r3, [r7, #4]
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	3718      	adds	r7, #24
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002fe:	f000 fe73 	bl	8000fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000302:	f000 f855 	bl	80003b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000306:	f000 f979 	bl	80005fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800030a:	f000 f947 	bl	800059c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800030e:	f000 f8ab 	bl	8000468 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000312:	f000 f905 	bl	8000520 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  printf("\n\r");
 8000316:	4820      	ldr	r0, [pc, #128]	; (8000398 <main+0xa0>)
 8000318:	f005 fa2c 	bl	8005774 <iprintf>

  // Initialise RFM95 module.
  if (!rfm95_init(&rfm95_handle)) {
 800031c:	481f      	ldr	r0, [pc, #124]	; (800039c <main+0xa4>)
 800031e:	f000 fb37 	bl	8000990 <rfm95_init>
 8000322:	4603      	mov	r3, r0
 8000324:	f083 0301 	eor.w	r3, r3, #1
 8000328:	b2db      	uxtb	r3, r3
 800032a:	2b00      	cmp	r3, #0
 800032c:	d003      	beq.n	8000336 <main+0x3e>
	  printf("LoRa RFM95: Init FAIL\n\r");
 800032e:	481c      	ldr	r0, [pc, #112]	; (80003a0 <main+0xa8>)
 8000330:	f005 fa20 	bl	8005774 <iprintf>
 8000334:	e002      	b.n	800033c <main+0x44>
  }
  else {
	  printf("LoRa RFM95: LoRa SUCCESS\n\r");
 8000336:	481b      	ldr	r0, [pc, #108]	; (80003a4 <main+0xac>)
 8000338:	f005 fa1c 	bl	8005774 <iprintf>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  //Example ADC
	  HAL_ADC_Start(&hadc1);
 800033c:	481a      	ldr	r0, [pc, #104]	; (80003a8 <main+0xb0>)
 800033e:	f001 f863 	bl	8001408 <HAL_ADC_Start>
	  uint8_t val_analogue;
	  if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8000342:	210a      	movs	r1, #10
 8000344:	4818      	ldr	r0, [pc, #96]	; (80003a8 <main+0xb0>)
 8000346:	f001 f901 	bl	800154c <HAL_ADC_PollForConversion>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d104      	bne.n	800035a <main+0x62>
		  val_analogue = HAL_ADC_GetValue(&hadc1);
 8000350:	4815      	ldr	r0, [pc, #84]	; (80003a8 <main+0xb0>)
 8000352:	f001 f9b9 	bl	80016c8 <HAL_ADC_GetValue>
 8000356:	4603      	mov	r3, r0
 8000358:	71fb      	strb	r3, [r7, #7]
	  }
	  HAL_ADC_Stop(&hadc1);
 800035a:	4813      	ldr	r0, [pc, #76]	; (80003a8 <main+0xb0>)
 800035c:	f001 f8c1 	bl	80014e2 <HAL_ADC_Stop>
	  printf("ADC1: %d\n", val_analogue);
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	4619      	mov	r1, r3
 8000364:	4811      	ldr	r0, [pc, #68]	; (80003ac <main+0xb4>)
 8000366:	f005 fa05 	bl	8005774 <iprintf>

	  //Example GPIO
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800036a:	2201      	movs	r2, #1
 800036c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000374:	f002 f844 	bl	8002400 <HAL_GPIO_WritePin>
	  HAL_Delay(2000);
 8000378:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800037c:	f000 fe9a 	bl	80010b4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038a:	f002 f839 	bl	8002400 <HAL_GPIO_WritePin>
	  HAL_Delay(2000);
 800038e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000392:	f000 fe8f 	bl	80010b4 <HAL_Delay>
  {
 8000396:	e7d1      	b.n	800033c <main+0x44>
 8000398:	08006164 	.word	0x08006164
 800039c:	20000000 	.word	0x20000000
 80003a0:	08006168 	.word	0x08006168
 80003a4:	08006180 	.word	0x08006180
 80003a8:	20000144 	.word	0x20000144
 80003ac:	0800619c 	.word	0x0800619c

080003b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b09c      	sub	sp, #112	; 0x70
 80003b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003ba:	2228      	movs	r2, #40	; 0x28
 80003bc:	2100      	movs	r1, #0
 80003be:	4618      	mov	r0, r3
 80003c0:	f004 fee2 	bl	8005188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
 80003cc:	605a      	str	r2, [r3, #4]
 80003ce:	609a      	str	r2, [r3, #8]
 80003d0:	60da      	str	r2, [r3, #12]
 80003d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003d4:	463b      	mov	r3, r7
 80003d6:	2234      	movs	r2, #52	; 0x34
 80003d8:	2100      	movs	r1, #0
 80003da:	4618      	mov	r0, r3
 80003dc:	f004 fed4 	bl	8005188 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003e0:	2301      	movs	r3, #1
 80003e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80003e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003ea:	2300      	movs	r3, #0
 80003ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ee:	2301      	movs	r3, #1
 80003f0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f2:	2302      	movs	r3, #2
 80003f4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003fa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003fc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000400:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000402:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000406:	4618      	mov	r0, r3
 8000408:	f002 f812 	bl	8002430 <HAL_RCC_OscConfig>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000412:	f000 f959 	bl	80006c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000416:	230f      	movs	r3, #15
 8000418:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800041a:	2302      	movs	r3, #2
 800041c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800041e:	2300      	movs	r3, #0
 8000420:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000426:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000428:	2300      	movs	r3, #0
 800042a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800042c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000430:	2102      	movs	r1, #2
 8000432:	4618      	mov	r0, r3
 8000434:	f003 f83a 	bl	80034ac <HAL_RCC_ClockConfig>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800043e:	f000 f943 	bl	80006c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC1;
 8000442:	2380      	movs	r3, #128	; 0x80
 8000444:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000446:	f44f 7380 	mov.w	r3, #256	; 0x100
 800044a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800044c:	463b      	mov	r3, r7
 800044e:	4618      	mov	r0, r3
 8000450:	f003 fa62 	bl	8003918 <HAL_RCCEx_PeriphCLKConfig>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800045a:	f000 f935 	bl	80006c8 <Error_Handler>
  }
}
 800045e:	bf00      	nop
 8000460:	3770      	adds	r7, #112	; 0x70
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800046e:	463b      	mov	r3, r7
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
 8000474:	605a      	str	r2, [r3, #4]
 8000476:	609a      	str	r2, [r3, #8]
 8000478:	60da      	str	r2, [r3, #12]
 800047a:	611a      	str	r2, [r3, #16]
 800047c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800047e:	4b27      	ldr	r3, [pc, #156]	; (800051c <MX_ADC1_Init+0xb4>)
 8000480:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000484:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000486:	4b25      	ldr	r3, [pc, #148]	; (800051c <MX_ADC1_Init+0xb4>)
 8000488:	2200      	movs	r2, #0
 800048a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800048c:	4b23      	ldr	r3, [pc, #140]	; (800051c <MX_ADC1_Init+0xb4>)
 800048e:	2210      	movs	r2, #16
 8000490:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000492:	4b22      	ldr	r3, [pc, #136]	; (800051c <MX_ADC1_Init+0xb4>)
 8000494:	2200      	movs	r2, #0
 8000496:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000498:	4b20      	ldr	r3, [pc, #128]	; (800051c <MX_ADC1_Init+0xb4>)
 800049a:	2200      	movs	r2, #0
 800049c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800049e:	4b1f      	ldr	r3, [pc, #124]	; (800051c <MX_ADC1_Init+0xb4>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004a6:	4b1d      	ldr	r3, [pc, #116]	; (800051c <MX_ADC1_Init+0xb4>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004ac:	4b1b      	ldr	r3, [pc, #108]	; (800051c <MX_ADC1_Init+0xb4>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004b2:	4b1a      	ldr	r3, [pc, #104]	; (800051c <MX_ADC1_Init+0xb4>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80004b8:	4b18      	ldr	r3, [pc, #96]	; (800051c <MX_ADC1_Init+0xb4>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004be:	4b17      	ldr	r3, [pc, #92]	; (800051c <MX_ADC1_Init+0xb4>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004c6:	4b15      	ldr	r3, [pc, #84]	; (800051c <MX_ADC1_Init+0xb4>)
 80004c8:	2204      	movs	r2, #4
 80004ca:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004cc:	4b13      	ldr	r3, [pc, #76]	; (800051c <MX_ADC1_Init+0xb4>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004d2:	4b12      	ldr	r3, [pc, #72]	; (800051c <MX_ADC1_Init+0xb4>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004d8:	4810      	ldr	r0, [pc, #64]	; (800051c <MX_ADC1_Init+0xb4>)
 80004da:	f000 fe0f 	bl	80010fc <HAL_ADC_Init>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80004e4:	f000 f8f0 	bl	80006c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004e8:	2301      	movs	r3, #1
 80004ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004ec:	2301      	movs	r3, #1
 80004ee:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004f8:	2300      	movs	r3, #0
 80004fa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000500:	463b      	mov	r3, r7
 8000502:	4619      	mov	r1, r3
 8000504:	4805      	ldr	r0, [pc, #20]	; (800051c <MX_ADC1_Init+0xb4>)
 8000506:	f001 f8ed 	bl	80016e4 <HAL_ADC_ConfigChannel>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000510:	f000 f8da 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000514:	bf00      	nop
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20000144 	.word	0x20000144

08000520 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000524:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <MX_SPI2_Init+0x74>)
 8000526:	4a1c      	ldr	r2, [pc, #112]	; (8000598 <MX_SPI2_Init+0x78>)
 8000528:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800052a:	4b1a      	ldr	r3, [pc, #104]	; (8000594 <MX_SPI2_Init+0x74>)
 800052c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000530:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000532:	4b18      	ldr	r3, [pc, #96]	; (8000594 <MX_SPI2_Init+0x74>)
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000538:	4b16      	ldr	r3, [pc, #88]	; (8000594 <MX_SPI2_Init+0x74>)
 800053a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800053e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000540:	4b14      	ldr	r3, [pc, #80]	; (8000594 <MX_SPI2_Init+0x74>)
 8000542:	2200      	movs	r2, #0
 8000544:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000546:	4b13      	ldr	r3, [pc, #76]	; (8000594 <MX_SPI2_Init+0x74>)
 8000548:	2200      	movs	r2, #0
 800054a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800054c:	4b11      	ldr	r3, [pc, #68]	; (8000594 <MX_SPI2_Init+0x74>)
 800054e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000552:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000554:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <MX_SPI2_Init+0x74>)
 8000556:	2200      	movs	r2, #0
 8000558:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <MX_SPI2_Init+0x74>)
 800055c:	2200      	movs	r2, #0
 800055e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <MX_SPI2_Init+0x74>)
 8000562:	2200      	movs	r2, #0
 8000564:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000566:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <MX_SPI2_Init+0x74>)
 8000568:	2200      	movs	r2, #0
 800056a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800056c:	4b09      	ldr	r3, [pc, #36]	; (8000594 <MX_SPI2_Init+0x74>)
 800056e:	2207      	movs	r2, #7
 8000570:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <MX_SPI2_Init+0x74>)
 8000574:	2200      	movs	r2, #0
 8000576:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <MX_SPI2_Init+0x74>)
 800057a:	2208      	movs	r2, #8
 800057c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800057e:	4805      	ldr	r0, [pc, #20]	; (8000594 <MX_SPI2_Init+0x74>)
 8000580:	f003 fb5c 	bl	8003c3c <HAL_SPI_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800058a:	f000 f89d 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000194 	.word	0x20000194
 8000598:	40003800 	.word	0x40003800

0800059c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005a2:	4a15      	ldr	r2, [pc, #84]	; (80005f8 <MX_USART2_UART_Init+0x5c>)
 80005a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80005a6:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005a8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80005ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005c2:	220c      	movs	r2, #12
 80005c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005da:	2200      	movs	r2, #0
 80005dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005de:	4805      	ldr	r0, [pc, #20]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005e0:	f004 fa44 	bl	8004a6c <HAL_UART_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005ea:	f000 f86d 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	200001f8 	.word	0x200001f8
 80005f8:	40004400 	.word	0x40004400

080005fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	; 0x28
 8000600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	4b2b      	ldr	r3, [pc, #172]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	4a2a      	ldr	r2, [pc, #168]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000618:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800061c:	6153      	str	r3, [r2, #20]
 800061e:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000626:	613b      	str	r3, [r7, #16]
 8000628:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800062a:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <MX_GPIO_Init+0xc4>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	4a24      	ldr	r2, [pc, #144]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000630:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000634:	6153      	str	r3, [r2, #20]
 8000636:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a1e      	ldr	r2, [pc, #120]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	6153      	str	r3, [r2, #20]
 800064e:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065a:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <MX_GPIO_Init+0xc4>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	4a18      	ldr	r2, [pc, #96]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000664:	6153      	str	r3, [r2, #20]
 8000666:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RFM95_DIO5_Pin|RFM95_DIO1_Pin|RFM95_DIO0_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000678:	4812      	ldr	r0, [pc, #72]	; (80006c4 <MX_GPIO_Init+0xc8>)
 800067a:	f001 fec1 	bl	8002400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800067e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000684:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4619      	mov	r1, r3
 8000694:	480b      	ldr	r0, [pc, #44]	; (80006c4 <MX_GPIO_Init+0xc8>)
 8000696:	f001 fd41 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : RFM95_DIO5_Pin RFM95_DIO1_Pin RFM95_DIO0_Pin */
  GPIO_InitStruct.Pin = RFM95_DIO5_Pin|RFM95_DIO1_Pin|RFM95_DIO0_Pin;
 800069a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800069e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	2300      	movs	r3, #0
 80006aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4619      	mov	r1, r3
 80006b2:	4804      	ldr	r0, [pc, #16]	; (80006c4 <MX_GPIO_Init+0xc8>)
 80006b4:	f001 fd32 	bl	800211c <HAL_GPIO_Init>

}
 80006b8:	bf00      	nop
 80006ba:	3728      	adds	r7, #40	; 0x28
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000
 80006c4:	48000800 	.word	0x48000800

080006c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
}
 80006ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <Error_Handler+0x8>

080006d2 <read_register>:

#define RFM95_REGISTER_INVERT_IQ_1_RX                    		0x67
#define RFM95_REGISTER_INVERT_IQ_2_RX							0x19

static bool read_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t *buffer, size_t length)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b086      	sub	sp, #24
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	60f8      	str	r0, [r7, #12]
 80006da:	607a      	str	r2, [r7, #4]
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	460b      	mov	r3, r1
 80006e0:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	6858      	ldr	r0, [r3, #4]
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	891b      	ldrh	r3, [r3, #8]
 80006ea:	2200      	movs	r2, #0
 80006ec:	4619      	mov	r1, r3
 80006ee:	f001 fe87 	bl	8002400 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer = (uint8_t)reg & 0x7fu;
 80006f2:	7afb      	ldrb	r3, [r7, #11]
 80006f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	75fb      	strb	r3, [r7, #23]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	6818      	ldr	r0, [r3, #0]
 8000700:	f107 0117 	add.w	r1, r7, #23
 8000704:	230a      	movs	r3, #10
 8000706:	2201      	movs	r2, #1
 8000708:	f003 fb43 	bl	8003d92 <HAL_SPI_Transmit>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <read_register+0x44>
		return false;
 8000712:	2300      	movs	r3, #0
 8000714:	e015      	b.n	8000742 <read_register+0x70>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, length, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	6818      	ldr	r0, [r3, #0]
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	b29a      	uxth	r2, r3
 800071e:	230a      	movs	r3, #10
 8000720:	6879      	ldr	r1, [r7, #4]
 8000722:	f003 fca4 	bl	800406e <HAL_SPI_Receive>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <read_register+0x5e>
		return false;
 800072c:	2300      	movs	r3, #0
 800072e:	e008      	b.n	8000742 <read_register+0x70>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	6858      	ldr	r0, [r3, #4]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	891b      	ldrh	r3, [r3, #8]
 8000738:	2201      	movs	r2, #1
 800073a:	4619      	mov	r1, r3
 800073c:	f001 fe60 	bl	8002400 <HAL_GPIO_WritePin>

	return true;
 8000740:	2301      	movs	r3, #1
}
 8000742:	4618      	mov	r0, r3
 8000744:	3718      	adds	r7, #24
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <write_register>:

static bool write_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t value)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	b084      	sub	sp, #16
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
 8000752:	460b      	mov	r3, r1
 8000754:	70fb      	strb	r3, [r7, #3]
 8000756:	4613      	mov	r3, r2
 8000758:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	6858      	ldr	r0, [r3, #4]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	891b      	ldrh	r3, [r3, #8]
 8000762:	2200      	movs	r2, #0
 8000764:	4619      	mov	r1, r3
 8000766:	f001 fe4b 	bl	8002400 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = {((uint8_t)reg | 0x80u), value};
 800076a:	78fb      	ldrb	r3, [r7, #3]
 800076c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000770:	b2db      	uxtb	r3, r3
 8000772:	733b      	strb	r3, [r7, #12]
 8000774:	78bb      	ldrb	r3, [r7, #2]
 8000776:	737b      	strb	r3, [r7, #13]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6818      	ldr	r0, [r3, #0]
 800077c:	f107 010c 	add.w	r1, r7, #12
 8000780:	230a      	movs	r3, #10
 8000782:	2202      	movs	r2, #2
 8000784:	f003 fb05 	bl	8003d92 <HAL_SPI_Transmit>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <write_register+0x48>
		return false;
 800078e:	2300      	movs	r3, #0
 8000790:	e008      	b.n	80007a4 <write_register+0x5a>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6858      	ldr	r0, [r3, #4]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	891b      	ldrh	r3, [r3, #8]
 800079a:	2201      	movs	r2, #1
 800079c:	4619      	mov	r1, r3
 800079e:	f001 fe2f 	bl	8002400 <HAL_GPIO_WritePin>

	return true;
 80007a2:	2301      	movs	r3, #1
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <config_set_channel>:

static void config_set_channel(rfm95_handle_t *handle, uint8_t channel_index, uint32_t frequency)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	460b      	mov	r3, r1
 80007b6:	607a      	str	r2, [r7, #4]
 80007b8:	72fb      	strb	r3, [r7, #11]
	assert(channel_index < 16);
 80007ba:	7afb      	ldrb	r3, [r7, #11]
 80007bc:	2b0f      	cmp	r3, #15
 80007be:	d905      	bls.n	80007cc <config_set_channel+0x20>
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <config_set_channel+0x54>)
 80007c2:	4a10      	ldr	r2, [pc, #64]	; (8000804 <config_set_channel+0x58>)
 80007c4:	216e      	movs	r1, #110	; 0x6e
 80007c6:	4810      	ldr	r0, [pc, #64]	; (8000808 <config_set_channel+0x5c>)
 80007c8:	f004 fc84 	bl	80050d4 <__assert_func>
	handle->config.channels[channel_index].frequency = frequency;
 80007cc:	7afa      	ldrb	r2, [r7, #11]
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	321a      	adds	r2, #26
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	handle->config.channel_mask |= (1 << channel_index);
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80007de:	b21a      	sxth	r2, r3
 80007e0:	7afb      	ldrb	r3, [r7, #11]
 80007e2:	2101      	movs	r1, #1
 80007e4:	fa01 f303 	lsl.w	r3, r1, r3
 80007e8:	b21b      	sxth	r3, r3
 80007ea:	4313      	orrs	r3, r2
 80007ec:	b21b      	sxth	r3, r3
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	080061a8 	.word	0x080061a8
 8000804:	08006410 	.word	0x08006410
 8000808:	080061bc 	.word	0x080061bc

0800080c <config_load_default>:

static void config_load_default(rfm95_handle_t *handle)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	handle->config.magic = RFM95_EEPROM_CONFIG_MAGIC;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f64a 3267 	movw	r2, #43879	; 0xab67
 800081a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	handle->config.tx_frame_count = 0;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	handle->config.rx_frame_count = 0;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2200      	movs	r2, #0
 800082a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	handle->config.rx1_delay = 1;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2201      	movs	r2, #1
 8000832:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	handle->config.channel_mask = 0;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2200      	movs	r2, #0
 800083a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	config_set_channel(handle, 0, 868100000);
 800083e:	4a09      	ldr	r2, [pc, #36]	; (8000864 <config_load_default+0x58>)
 8000840:	2100      	movs	r1, #0
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff ffb2 	bl	80007ac <config_set_channel>
	config_set_channel(handle, 1, 868300000);
 8000848:	4a07      	ldr	r2, [pc, #28]	; (8000868 <config_load_default+0x5c>)
 800084a:	2101      	movs	r1, #1
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff ffad 	bl	80007ac <config_set_channel>
	config_set_channel(handle, 2, 868500000);
 8000852:	4a06      	ldr	r2, [pc, #24]	; (800086c <config_load_default+0x60>)
 8000854:	2102      	movs	r1, #2
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f7ff ffa8 	bl	80007ac <config_set_channel>
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	33be27a0 	.word	0x33be27a0
 8000868:	33c134e0 	.word	0x33c134e0
 800086c:	33c44220 	.word	0x33c44220

08000870 <reset>:

static void reset(rfm95_handle_t *handle)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	68d8      	ldr	r0, [r3, #12]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	8a1b      	ldrh	r3, [r3, #16]
 8000880:	2200      	movs	r2, #0
 8000882:	4619      	mov	r1, r3
 8000884:	f001 fdbc 	bl	8002400 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 0.1ms would theoretically be enough
 8000888:	2001      	movs	r0, #1
 800088a:	f000 fc13 	bl	80010b4 <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	68d8      	ldr	r0, [r3, #12]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	8a1b      	ldrh	r3, [r3, #16]
 8000896:	2201      	movs	r2, #1
 8000898:	4619      	mov	r1, r3
 800089a:	f001 fdb1 	bl	8002400 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800089e:	2005      	movs	r0, #5
 80008a0:	f000 fc08 	bl	80010b4 <HAL_Delay>
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <rfm95_set_power>:

	return handle->interrupt_times[RFM95_INTERRUPT_DIO0] != 0;
}

bool rfm95_set_power(rfm95_handle_t *handle, int8_t power)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	460b      	mov	r3, r1
 80008b6:	70fb      	strb	r3, [r7, #3]
	assert((power >= 2 && power <= 17) || power == 20);
 80008b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	dd03      	ble.n	80008c8 <rfm95_set_power+0x1c>
 80008c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008c4:	2b11      	cmp	r3, #17
 80008c6:	dd09      	ble.n	80008dc <rfm95_set_power+0x30>
 80008c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008cc:	2b14      	cmp	r3, #20
 80008ce:	d005      	beq.n	80008dc <rfm95_set_power+0x30>
 80008d0:	4b2c      	ldr	r3, [pc, #176]	; (8000984 <rfm95_set_power+0xd8>)
 80008d2:	4a2d      	ldr	r2, [pc, #180]	; (8000988 <rfm95_set_power+0xdc>)
 80008d4:	21b6      	movs	r1, #182	; 0xb6
 80008d6:	482d      	ldr	r0, [pc, #180]	; (800098c <rfm95_set_power+0xe0>)
 80008d8:	f004 fbfc 	bl	80050d4 <__assert_func>

	rfm95_register_pa_config_t pa_config = {0};
 80008dc:	2300      	movs	r3, #0
 80008de:	733b      	strb	r3, [r7, #12]
	uint8_t pa_dac_config = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	73fb      	strb	r3, [r7, #15]

	if (power >= 2 && power <= 17) {
 80008e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	dd18      	ble.n	800091e <rfm95_set_power+0x72>
 80008ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008f0:	2b11      	cmp	r3, #17
 80008f2:	dc14      	bgt.n	800091e <rfm95_set_power+0x72>
		pa_config.max_power = 7;
 80008f4:	7b3b      	ldrb	r3, [r7, #12]
 80008f6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80008fa:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 80008fc:	7b3b      	ldrb	r3, [r7, #12]
 80008fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000902:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = (power - 2);
 8000904:	78fb      	ldrb	r3, [r7, #3]
 8000906:	3b02      	subs	r3, #2
 8000908:	b2db      	uxtb	r3, r3
 800090a:	f003 030f 	and.w	r3, r3, #15
 800090e:	b2da      	uxtb	r2, r3
 8000910:	7b3b      	ldrb	r3, [r7, #12]
 8000912:	f362 0303 	bfi	r3, r2, #0, #4
 8000916:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER;
 8000918:	2384      	movs	r3, #132	; 0x84
 800091a:	73fb      	strb	r3, [r7, #15]
 800091c:	e011      	b.n	8000942 <rfm95_set_power+0x96>

	} else if (power == 20) {
 800091e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000922:	2b14      	cmp	r3, #20
 8000924:	d10d      	bne.n	8000942 <rfm95_set_power+0x96>
		pa_config.max_power = 7;
 8000926:	7b3b      	ldrb	r3, [r7, #12]
 8000928:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800092c:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 800092e:	7b3b      	ldrb	r3, [r7, #12]
 8000930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000934:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = 15;
 8000936:	7b3b      	ldrb	r3, [r7, #12]
 8000938:	f043 030f 	orr.w	r3, r3, #15
 800093c:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 800093e:	2387      	movs	r3, #135	; 0x87
 8000940:	73fb      	strb	r3, [r7, #15]
	}

	if (!write_register(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer)) return false;
 8000942:	7b3b      	ldrb	r3, [r7, #12]
 8000944:	461a      	mov	r2, r3
 8000946:	2109      	movs	r1, #9
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f7ff fefe 	bl	800074a <write_register>
 800094e:	4603      	mov	r3, r0
 8000950:	f083 0301 	eor.w	r3, r3, #1
 8000954:	b2db      	uxtb	r3, r3
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <rfm95_set_power+0xb2>
 800095a:	2300      	movs	r3, #0
 800095c:	e00e      	b.n	800097c <rfm95_set_power+0xd0>
	if (!write_register(handle, RFM95_REGISTER_PA_DAC, pa_dac_config)) return false;
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	461a      	mov	r2, r3
 8000962:	214d      	movs	r1, #77	; 0x4d
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f7ff fef0 	bl	800074a <write_register>
 800096a:	4603      	mov	r3, r0
 800096c:	f083 0301 	eor.w	r3, r3, #1
 8000970:	b2db      	uxtb	r3, r3
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <rfm95_set_power+0xce>
 8000976:	2300      	movs	r3, #0
 8000978:	e000      	b.n	800097c <rfm95_set_power+0xd0>

	return true;
 800097a:	2301      	movs	r3, #1
}
 800097c:	4618      	mov	r0, r3
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	08006204 	.word	0x08006204
 8000988:	08006424 	.word	0x08006424
 800098c:	080061bc 	.word	0x080061bc

08000990 <rfm95_init>:

bool rfm95_init(rfm95_handle_t *handle)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80009a2:	d005      	beq.n	80009b0 <rfm95_init+0x20>
 80009a4:	4b8b      	ldr	r3, [pc, #556]	; (8000bd4 <rfm95_init+0x244>)
 80009a6:	4a8c      	ldr	r2, [pc, #560]	; (8000bd8 <rfm95_init+0x248>)
 80009a8:	21d0      	movs	r1, #208	; 0xd0
 80009aa:	488c      	ldr	r0, [pc, #560]	; (8000bdc <rfm95_init+0x24c>)
 80009ac:	f004 fb92 	bl	80050d4 <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d005      	beq.n	80009c6 <rfm95_init+0x36>
 80009ba:	4b89      	ldr	r3, [pc, #548]	; (8000be0 <rfm95_init+0x250>)
 80009bc:	4a86      	ldr	r2, [pc, #536]	; (8000bd8 <rfm95_init+0x248>)
 80009be:	21d1      	movs	r1, #209	; 0xd1
 80009c0:	4886      	ldr	r0, [pc, #536]	; (8000bdc <rfm95_init+0x24c>)
 80009c2:	f004 fb87 	bl	80050d4 <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80009d0:	d005      	beq.n	80009de <rfm95_init+0x4e>
 80009d2:	4b84      	ldr	r3, [pc, #528]	; (8000be4 <rfm95_init+0x254>)
 80009d4:	4a80      	ldr	r2, [pc, #512]	; (8000bd8 <rfm95_init+0x248>)
 80009d6:	21d2      	movs	r1, #210	; 0xd2
 80009d8:	4880      	ldr	r0, [pc, #512]	; (8000bdc <rfm95_init+0x24c>)
 80009da:	f004 fb7b 	bl	80050d4 <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	691b      	ldr	r3, [r3, #16]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d005      	beq.n	80009f4 <rfm95_init+0x64>
 80009e8:	4b7f      	ldr	r3, [pc, #508]	; (8000be8 <rfm95_init+0x258>)
 80009ea:	4a7b      	ldr	r2, [pc, #492]	; (8000bd8 <rfm95_init+0x248>)
 80009ec:	21d3      	movs	r1, #211	; 0xd3
 80009ee:	487b      	ldr	r0, [pc, #492]	; (8000bdc <rfm95_init+0x24c>)
 80009f0:	f004 fb70 	bl	80050d4 <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d005      	beq.n	8000a0a <rfm95_init+0x7a>
 80009fe:	4b7b      	ldr	r3, [pc, #492]	; (8000bec <rfm95_init+0x25c>)
 8000a00:	4a75      	ldr	r2, [pc, #468]	; (8000bd8 <rfm95_init+0x248>)
 8000a02:	21d4      	movs	r1, #212	; 0xd4
 8000a04:	4875      	ldr	r0, [pc, #468]	; (8000bdc <rfm95_init+0x24c>)
 8000a06:	f004 fb65 	bl	80050d4 <__assert_func>
	//assert(handle->get_precision_tick != NULL);
	//assert(handle->random_int != NULL);
	//assert(handle->precision_sleep_until != NULL);
	//assert(handle->precision_tick_frequency > 10000);

	reset(handle);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff ff30 	bl	8000870 <reset>

	// If there is reload function or the reload was unsuccessful or the magic does not match restore default.
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d012      	beq.n	8000a3e <rfm95_init+0xae>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	3260      	adds	r2, #96	; 0x60
 8000a20:	4610      	mov	r0, r2
 8000a22:	4798      	blx	r3
 8000a24:	4603      	mov	r3, r0
 8000a26:	f083 0301 	eor.w	r3, r3, #1
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d106      	bne.n	8000a3e <rfm95_init+0xae>
	    handle->config.magic != RFM95_EEPROM_CONFIG_MAGIC) {
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 8000a36:	f64a 3267 	movw	r2, #43879	; 0xab67
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d002      	beq.n	8000a44 <rfm95_init+0xb4>
		config_load_default(handle);
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f7ff fee4 	bl	800080c <config_load_default>
	}

	// Check for correct version.
	uint8_t version;
	if (!read_register(handle, RFM95_REGISTER_VERSION, &version, 1)) {
 8000a44:	f107 020f 	add.w	r2, r7, #15
 8000a48:	2301      	movs	r3, #1
 8000a4a:	2142      	movs	r1, #66	; 0x42
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff fe40 	bl	80006d2 <read_register>
 8000a52:	4603      	mov	r3, r0
 8000a54:	f083 0301 	eor.w	r3, r3, #1
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d004      	beq.n	8000a68 <rfm95_init+0xd8>
		printf("Could not read register\n\r");
 8000a5e:	4864      	ldr	r0, [pc, #400]	; (8000bf0 <rfm95_init+0x260>)
 8000a60:	f004 fe88 	bl	8005774 <iprintf>
		return false;
 8000a64:	2300      	movs	r3, #0
 8000a66:	e0b0      	b.n	8000bca <rfm95_init+0x23a>
	}

	if (version != RFM9x_VER) {
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	2b12      	cmp	r3, #18
 8000a6c:	d00a      	beq.n	8000a84 <rfm95_init+0xf4>
		printf("Wrong version, expected %d, got %d\n\r.", RFM9x_VER, version);
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	461a      	mov	r2, r3
 8000a72:	2112      	movs	r1, #18
 8000a74:	485f      	ldr	r0, [pc, #380]	; (8000bf4 <rfm95_init+0x264>)
 8000a76:	f004 fe7d 	bl	8005774 <iprintf>
		printf("Make sure to use RFM9x module or check your SPI connections\n\r");
 8000a7a:	485f      	ldr	r0, [pc, #380]	; (8000bf8 <rfm95_init+0x268>)
 8000a7c:	f004 fe7a 	bl	8005774 <iprintf>
		return false;
 8000a80:	2300      	movs	r3, #0
 8000a82:	e0a2      	b.n	8000bca <rfm95_init+0x23a>
	}

	// Module must be placed in sleep mode before switching to lora.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP))
 8000a84:	2200      	movs	r2, #0
 8000a86:	2101      	movs	r1, #1
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff fe5e 	bl	800074a <write_register>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	f083 0301 	eor.w	r3, r3, #1
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <rfm95_init+0x10e>
		return false;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e095      	b.n	8000bca <rfm95_init+0x23a>
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP))
 8000a9e:	2280      	movs	r2, #128	; 0x80
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff fe51 	bl	800074a <write_register>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	f083 0301 	eor.w	r3, r3, #1
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <rfm95_init+0x128>
		return false;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	e088      	b.n	8000bca <rfm95_init+0x23a>

	// Default interrupt configuration, must be done to prevent DIO5 clock interrupts at 1Mhz
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE))
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2140      	movs	r1, #64	; 0x40
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f7ff fe44 	bl	800074a <write_register>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	f083 0301 	eor.w	r3, r3, #1
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <rfm95_init+0x142>
		return false;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e07b      	b.n	8000bca <rfm95_init+0x23a>

	if (handle->on_after_interrupts_configured != NULL) {
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d002      	beq.n	8000ae0 <rfm95_init+0x150>
		handle->on_after_interrupts_configured();
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ade:	4798      	blx	r3
	}

	// Set module power to 17dbm.
	if (!rfm95_set_power(handle, 17))
 8000ae0:	2111      	movs	r1, #17
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff fee2 	bl	80008ac <rfm95_set_power>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	f083 0301 	eor.w	r3, r3, #1
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <rfm95_init+0x168>
		return false;
 8000af4:	2300      	movs	r3, #0
 8000af6:	e068      	b.n	8000bca <rfm95_init+0x23a>

	// Set LNA to the highest gain with 150% boost.
	if (!write_register(handle, RFM95_REGISTER_LNA, 0x23))
 8000af8:	2223      	movs	r2, #35	; 0x23
 8000afa:	210c      	movs	r1, #12
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff fe24 	bl	800074a <write_register>
 8000b02:	4603      	mov	r3, r0
 8000b04:	f083 0301 	eor.w	r3, r3, #1
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <rfm95_init+0x182>
		return false;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e05b      	b.n	8000bca <rfm95_init+0x23a>

	// Preamble set to 8 + 4.25 = 12.25 symbols.
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00))
 8000b12:	2200      	movs	r2, #0
 8000b14:	2120      	movs	r1, #32
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff fe17 	bl	800074a <write_register>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	f083 0301 	eor.w	r3, r3, #1
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <rfm95_init+0x19c>
		return false;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e04e      	b.n	8000bca <rfm95_init+0x23a>
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x08))
 8000b2c:	2208      	movs	r2, #8
 8000b2e:	2121      	movs	r1, #33	; 0x21
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff fe0a 	bl	800074a <write_register>
 8000b36:	4603      	mov	r3, r0
 8000b38:	f083 0301 	eor.w	r3, r3, #1
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <rfm95_init+0x1b6>
		return false;
 8000b42:	2300      	movs	r3, #0
 8000b44:	e041      	b.n	8000bca <rfm95_init+0x23a>

	// Set TTN sync word 0x34.
	if (!write_register(handle, RFM95_REGISTER_SYNC_WORD, 0x34))
 8000b46:	2234      	movs	r2, #52	; 0x34
 8000b48:	2139      	movs	r1, #57	; 0x39
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff fdfd 	bl	800074a <write_register>
 8000b50:	4603      	mov	r3, r0
 8000b52:	f083 0301 	eor.w	r3, r3, #1
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <rfm95_init+0x1d0>
		return false;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	e034      	b.n	8000bca <rfm95_init+0x23a>

	// Set up TX and RX FIFO base addresses.
	if (!write_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80))
 8000b60:	2280      	movs	r2, #128	; 0x80
 8000b62:	210e      	movs	r1, #14
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff fdf0 	bl	800074a <write_register>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	f083 0301 	eor.w	r3, r3, #1
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <rfm95_init+0x1ea>
		return false;
 8000b76:	2300      	movs	r3, #0
 8000b78:	e027      	b.n	8000bca <rfm95_init+0x23a>
	if (!write_register(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00))
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	210f      	movs	r1, #15
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff fde3 	bl	800074a <write_register>
 8000b84:	4603      	mov	r3, r0
 8000b86:	f083 0301 	eor.w	r3, r3, #1
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <rfm95_init+0x204>
		return false;
 8000b90:	2300      	movs	r3, #0
 8000b92:	e01a      	b.n	8000bca <rfm95_init+0x23a>

	// Maximum payload length of the RFM95 is 64.
	if (!write_register(handle, RFM95_REGISTER_MAX_PAYLOAD_LENGTH, 64))
 8000b94:	2240      	movs	r2, #64	; 0x40
 8000b96:	2123      	movs	r1, #35	; 0x23
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff fdd6 	bl	800074a <write_register>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	f083 0301 	eor.w	r3, r3, #1
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <rfm95_init+0x21e>
		return false;
 8000baa:	2300      	movs	r3, #0
 8000bac:	e00d      	b.n	8000bca <rfm95_init+0x23a>

	// Let module sleep after initialisation.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP))
 8000bae:	2280      	movs	r2, #128	; 0x80
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff fdc9 	bl	800074a <write_register>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	f083 0301 	eor.w	r3, r3, #1
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <rfm95_init+0x238>
		return false;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	e000      	b.n	8000bca <rfm95_init+0x23a>

	return true;
 8000bc8:	2301      	movs	r3, #1
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	08006230 	.word	0x08006230
 8000bd8:	08006434 	.word	0x08006434
 8000bdc:	080061bc 	.word	0x080061bc
 8000be0:	08006264 	.word	0x08006264
 8000be4:	080062a0 	.word	0x080062a0
 8000be8:	080062d8 	.word	0x080062d8
 8000bec:	08006314 	.word	0x08006314
 8000bf0:	0800634c 	.word	0x0800634c
 8000bf4:	08006368 	.word	0x08006368
 8000bf8:	08006390 	.word	0x08006390

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_MspInit+0x44>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <HAL_MspInit+0x44>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6193      	str	r3, [r2, #24]
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_MspInit+0x44>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_MspInit+0x44>)
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <HAL_MspInit+0x44>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c24:	61d3      	str	r3, [r2, #28]
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_MspInit+0x44>)
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c32:	2007      	movs	r0, #7
 8000c34:	f001 fa3e 	bl	80020b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40021000 	.word	0x40021000

08000c44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c64:	d124      	bne.n	8000cb0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c66:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <HAL_ADC_MspInit+0x74>)
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	4a13      	ldr	r2, [pc, #76]	; (8000cb8 <HAL_ADC_MspInit+0x74>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c70:	6153      	str	r3, [r2, #20]
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <HAL_ADC_MspInit+0x74>)
 8000c74:	695b      	ldr	r3, [r3, #20]
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_ADC_MspInit+0x74>)
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	4a0d      	ldr	r2, [pc, #52]	; (8000cb8 <HAL_ADC_MspInit+0x74>)
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c88:	6153      	str	r3, [r2, #20]
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <HAL_ADC_MspInit+0x74>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c96:	2301      	movs	r3, #1
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cac:	f001 fa36 	bl	800211c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cb0:	bf00      	nop
 8000cb2:	3728      	adds	r7, #40	; 0x28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40021000 	.word	0x40021000

08000cbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a17      	ldr	r2, [pc, #92]	; (8000d38 <HAL_SPI_MspInit+0x7c>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d128      	bne.n	8000d30 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cde:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <HAL_SPI_MspInit+0x80>)
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	4a16      	ldr	r2, [pc, #88]	; (8000d3c <HAL_SPI_MspInit+0x80>)
 8000ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce8:	61d3      	str	r3, [r2, #28]
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <HAL_SPI_MspInit+0x80>)
 8000cec:	69db      	ldr	r3, [r3, #28]
 8000cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <HAL_SPI_MspInit+0x80>)
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <HAL_SPI_MspInit+0x80>)
 8000cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d00:	6153      	str	r3, [r2, #20]
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_SPI_MspInit+0x80>)
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d0e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d20:	2305      	movs	r3, #5
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <HAL_SPI_MspInit+0x84>)
 8000d2c:	f001 f9f6 	bl	800211c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d30:	bf00      	nop
 8000d32:	3728      	adds	r7, #40	; 0x28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40003800 	.word	0x40003800
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	48000400 	.word	0x48000400

08000d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a17      	ldr	r2, [pc, #92]	; (8000dc0 <HAL_UART_MspInit+0x7c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d128      	bne.n	8000db8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <HAL_UART_MspInit+0x80>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	4a16      	ldr	r2, [pc, #88]	; (8000dc4 <HAL_UART_MspInit+0x80>)
 8000d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d70:	61d3      	str	r3, [r2, #28]
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <HAL_UART_MspInit+0x80>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <HAL_UART_MspInit+0x80>)
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	4a10      	ldr	r2, [pc, #64]	; (8000dc4 <HAL_UART_MspInit+0x80>)
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d88:	6153      	str	r3, [r2, #20]
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_UART_MspInit+0x80>)
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d96:	230c      	movs	r3, #12
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000da6:	2307      	movs	r3, #7
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db4:	f001 f9b2 	bl	800211c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000db8:	bf00      	nop
 8000dba:	3728      	adds	r7, #40	; 0x28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40004400 	.word	0x40004400
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <NMI_Handler+0x4>

08000dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <HardFault_Handler+0x4>

08000dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <MemManage_Handler+0x4>

08000dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <BusFault_Handler+0x4>

08000de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <UsageFault_Handler+0x4>

08000de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e14:	f000 f92e 	bl	8001074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return 1;
 8000e20:	2301      	movs	r3, #1
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <_kill>:

int _kill(int pid, int sig)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e36:	f004 f96b 	bl	8005110 <__errno>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2216      	movs	r2, #22
 8000e3e:	601a      	str	r2, [r3, #0]
  return -1;
 8000e40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <_exit>:

void _exit (int status)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e54:	f04f 31ff 	mov.w	r1, #4294967295
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff ffe7 	bl	8000e2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e5e:	e7fe      	b.n	8000e5e <_exit+0x12>

08000e60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	e00a      	b.n	8000e88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e72:	f3af 8000 	nop.w
 8000e76:	4601      	mov	r1, r0
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	1c5a      	adds	r2, r3, #1
 8000e7c:	60ba      	str	r2, [r7, #8]
 8000e7e:	b2ca      	uxtb	r2, r1
 8000e80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	3301      	adds	r3, #1
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	dbf0      	blt.n	8000e72 <_read+0x12>
  }

  return len;
 8000e90:	687b      	ldr	r3, [r7, #4]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
 8000eba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ec2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <_isatty>:

int _isatty(int file)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eda:	2301      	movs	r3, #1
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f0c:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <_sbrk+0x5c>)
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <_sbrk+0x60>)
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <_sbrk+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <_sbrk+0x64>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <_sbrk+0x68>)
 8000f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d207      	bcs.n	8000f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f34:	f004 f8ec 	bl	8005110 <__errno>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f42:	e009      	b.n	8000f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4a:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <_sbrk+0x64>)
 8000f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f56:	68fb      	ldr	r3, [r7, #12]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20004000 	.word	0x20004000
 8000f64:	00000400 	.word	0x00000400
 8000f68:	2000027c 	.word	0x2000027c
 8000f6c:	20000298 	.word	0x20000298

08000f70 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <SystemInit+0x20>)
 8000f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7a:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <SystemInit+0x20>)
 8000f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fcc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f98:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f9a:	490e      	ldr	r1, [pc, #56]	; (8000fd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f9c:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <LoopForever+0xe>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa0:	e002      	b.n	8000fa8 <LoopCopyDataInit>

08000fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa6:	3304      	adds	r3, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fac:	d3f9      	bcc.n	8000fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fae:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb0:	4c0b      	ldr	r4, [pc, #44]	; (8000fe0 <LoopForever+0x16>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb4:	e001      	b.n	8000fba <LoopFillZerobss>

08000fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb8:	3204      	adds	r2, #4

08000fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fbc:	d3fb      	bcc.n	8000fb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fbe:	f7ff ffd7 	bl	8000f70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fc2:	f004 f8bd 	bl	8005140 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fc6:	f7ff f997 	bl	80002f8 <main>

08000fca <LoopForever>:

LoopForever:
    b LoopForever
 8000fca:	e7fe      	b.n	8000fca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fcc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd4:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8000fd8:	08006554 	.word	0x08006554
  ldr r2, =_sbss
 8000fdc:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8000fe0:	20000294 	.word	0x20000294

08000fe4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC1_IRQHandler>
	...

08000fe8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <HAL_Init+0x28>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a07      	ldr	r2, [pc, #28]	; (8001010 <HAL_Init+0x28>)
 8000ff2:	f043 0310 	orr.w	r3, r3, #16
 8000ff6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	f001 f85b 	bl	80020b4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f000 f808 	bl	8001014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001004:	f7ff fdfa 	bl	8000bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40022000 	.word	0x40022000

08001014 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_InitTick+0x54>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <HAL_InitTick+0x58>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4619      	mov	r1, r3
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	fbb3 f3f1 	udiv	r3, r3, r1
 800102e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f001 f865 	bl	8002102 <HAL_SYSTICK_Config>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e00e      	b.n	8001060 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b0f      	cmp	r3, #15
 8001046:	d80a      	bhi.n	800105e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001048:	2200      	movs	r2, #0
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f001 f83b 	bl	80020ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001054:	4a06      	ldr	r2, [pc, #24]	; (8001070 <HAL_InitTick+0x5c>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800105a:	2300      	movs	r3, #0
 800105c:	e000      	b.n	8001060 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200000b8 	.word	0x200000b8
 800106c:	200000c0 	.word	0x200000c0
 8001070:	200000bc 	.word	0x200000bc

08001074 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_IncTick+0x20>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_IncTick+0x24>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4413      	add	r3, r2
 8001084:	4a04      	ldr	r2, [pc, #16]	; (8001098 <HAL_IncTick+0x24>)
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	200000c0 	.word	0x200000c0
 8001098:	20000280 	.word	0x20000280

0800109c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return uwTick;  
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <HAL_GetTick+0x14>)
 80010a2:	681b      	ldr	r3, [r3, #0]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000280 	.word	0x20000280

080010b4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010bc:	f7ff ffee 	bl	800109c <HAL_GetTick>
 80010c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010cc:	d005      	beq.n	80010da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <HAL_Delay+0x44>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4413      	add	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80010da:	bf00      	nop
 80010dc:	f7ff ffde 	bl	800109c <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d8f7      	bhi.n	80010dc <HAL_Delay+0x28>
  {
  }
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200000c0 	.word	0x200000c0

080010fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b09a      	sub	sp, #104	; 0x68
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800110a:	2300      	movs	r3, #0
 800110c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e169      	b.n	80013f0 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f003 0310 	and.w	r3, r3, #16
 800112a:	2b00      	cmp	r3, #0
 800112c:	d176      	bne.n	800121c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	2b00      	cmp	r3, #0
 8001134:	d152      	bne.n	80011dc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff fd77 	bl	8000c44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d13b      	bne.n	80011dc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 fdd7 	bl	8001d18 <ADC_Disable>
 800116a:	4603      	mov	r3, r0
 800116c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	f003 0310 	and.w	r3, r3, #16
 8001178:	2b00      	cmp	r3, #0
 800117a:	d12f      	bne.n	80011dc <HAL_ADC_Init+0xe0>
 800117c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001180:	2b00      	cmp	r3, #0
 8001182:	d12b      	bne.n	80011dc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800118c:	f023 0302 	bic.w	r3, r3, #2
 8001190:	f043 0202 	orr.w	r2, r3, #2
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011a6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	689a      	ldr	r2, [r3, #8]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011b6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011b8:	4b8f      	ldr	r3, [pc, #572]	; (80013f8 <HAL_ADC_Init+0x2fc>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a8f      	ldr	r2, [pc, #572]	; (80013fc <HAL_ADC_Init+0x300>)
 80011be:	fba2 2303 	umull	r2, r3, r2, r3
 80011c2:	0c9a      	lsrs	r2, r3, #18
 80011c4:	4613      	mov	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4413      	add	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011ce:	e002      	b.n	80011d6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1f9      	bne.n	80011d0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d007      	beq.n	80011fa <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80011f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011f8:	d110      	bne.n	800121c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f023 0312 	bic.w	r3, r3, #18
 8001202:	f043 0210 	orr.w	r2, r3, #16
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	f043 0201 	orr.w	r2, r3, #1
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	f003 0310 	and.w	r3, r3, #16
 8001224:	2b00      	cmp	r3, #0
 8001226:	f040 80d6 	bne.w	80013d6 <HAL_ADC_Init+0x2da>
 800122a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800122e:	2b00      	cmp	r3, #0
 8001230:	f040 80d1 	bne.w	80013d6 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800123e:	2b00      	cmp	r3, #0
 8001240:	f040 80c9 	bne.w	80013d6 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800124c:	f043 0202 	orr.w	r2, r3, #2
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001254:	4b6a      	ldr	r3, [pc, #424]	; (8001400 <HAL_ADC_Init+0x304>)
 8001256:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	2b01      	cmp	r3, #1
 8001268:	d108      	bne.n	800127c <HAL_ADC_Init+0x180>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	2b01      	cmp	r3, #1
 8001276:	d101      	bne.n	800127c <HAL_ADC_Init+0x180>
 8001278:	2301      	movs	r3, #1
 800127a:	e000      	b.n	800127e <HAL_ADC_Init+0x182>
 800127c:	2300      	movs	r3, #0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d11c      	bne.n	80012bc <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001282:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001284:	2b00      	cmp	r3, #0
 8001286:	d010      	beq.n	80012aa <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b01      	cmp	r3, #1
 8001292:	d107      	bne.n	80012a4 <HAL_ADC_Init+0x1a8>
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b01      	cmp	r3, #1
 800129e:	d101      	bne.n	80012a4 <HAL_ADC_Init+0x1a8>
 80012a0:	2301      	movs	r3, #1
 80012a2:	e000      	b.n	80012a6 <HAL_ADC_Init+0x1aa>
 80012a4:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d108      	bne.n	80012bc <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80012aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	431a      	orrs	r2, r3
 80012b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012ba:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	7e5b      	ldrb	r3, [r3, #25]
 80012c0:	035b      	lsls	r3, r3, #13
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80012c6:	2a01      	cmp	r2, #1
 80012c8:	d002      	beq.n	80012d0 <HAL_ADC_Init+0x1d4>
 80012ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012ce:	e000      	b.n	80012d2 <HAL_ADC_Init+0x1d6>
 80012d0:	2200      	movs	r2, #0
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	431a      	orrs	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	4313      	orrs	r3, r2
 80012e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012e2:	4313      	orrs	r3, r2
 80012e4:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d11b      	bne.n	8001328 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	7e5b      	ldrb	r3, [r3, #25]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d109      	bne.n	800130c <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fc:	3b01      	subs	r3, #1
 80012fe:	045a      	lsls	r2, r3, #17
 8001300:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001302:	4313      	orrs	r3, r2
 8001304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001308:	663b      	str	r3, [r7, #96]	; 0x60
 800130a:	e00d      	b.n	8001328 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001314:	f043 0220 	orr.w	r2, r3, #32
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001320:	f043 0201 	orr.w	r2, r3, #1
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132c:	2b01      	cmp	r3, #1
 800132e:	d007      	beq.n	8001340 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	4313      	orrs	r3, r2
 800133a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800133c:	4313      	orrs	r3, r2
 800133e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 030c 	and.w	r3, r3, #12
 800134a:	2b00      	cmp	r3, #0
 800134c:	d114      	bne.n	8001378 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	6812      	ldr	r2, [r2, #0]
 8001358:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800135c:	f023 0302 	bic.w	r3, r3, #2
 8001360:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	7e1b      	ldrb	r3, [r3, #24]
 8001366:	039a      	lsls	r2, r3, #14
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4313      	orrs	r3, r2
 8001372:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001374:	4313      	orrs	r3, r2
 8001376:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	68da      	ldr	r2, [r3, #12]
 800137e:	4b21      	ldr	r3, [pc, #132]	; (8001404 <HAL_ADC_Init+0x308>)
 8001380:	4013      	ands	r3, r2
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	6812      	ldr	r2, [r2, #0]
 8001386:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001388:	430b      	orrs	r3, r1
 800138a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d10c      	bne.n	80013ae <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f023 010f 	bic.w	r1, r3, #15
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	1e5a      	subs	r2, r3, #1
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	631a      	str	r2, [r3, #48]	; 0x30
 80013ac:	e007      	b.n	80013be <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 020f 	bic.w	r2, r2, #15
 80013bc:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	f023 0303 	bic.w	r3, r3, #3
 80013cc:	f043 0201 	orr.w	r2, r3, #1
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	641a      	str	r2, [r3, #64]	; 0x40
 80013d4:	e00a      	b.n	80013ec <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f023 0312 	bic.w	r3, r3, #18
 80013de:	f043 0210 	orr.w	r2, r3, #16
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80013e6:	2301      	movs	r3, #1
 80013e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80013ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3768      	adds	r7, #104	; 0x68
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200000b8 	.word	0x200000b8
 80013fc:	431bde83 	.word	0x431bde83
 8001400:	50000300 	.word	0x50000300
 8001404:	fff0c007 	.word	0xfff0c007

08001408 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	2b00      	cmp	r3, #0
 8001420:	d158      	bne.n	80014d4 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001428:	2b01      	cmp	r3, #1
 800142a:	d101      	bne.n	8001430 <HAL_ADC_Start+0x28>
 800142c:	2302      	movs	r3, #2
 800142e:	e054      	b.n	80014da <HAL_ADC_Start+0xd2>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 fc09 	bl	8001c50 <ADC_Enable>
 800143e:	4603      	mov	r3, r0
 8001440:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d140      	bne.n	80014ca <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001450:	f023 0301 	bic.w	r3, r3, #1
 8001454:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d007      	beq.n	8001486 <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800147e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800148e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001492:	d106      	bne.n	80014a2 <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001498:	f023 0206 	bic.w	r2, r3, #6
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	645a      	str	r2, [r3, #68]	; 0x44
 80014a0:	e002      	b.n	80014a8 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	221c      	movs	r2, #28
 80014b6:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 0204 	orr.w	r2, r2, #4
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	e006      	b.n	80014d8 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80014d2:	e001      	b.n	80014d8 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014d4:	2302      	movs	r3, #2
 80014d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b084      	sub	sp, #16
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d101      	bne.n	80014fc <HAL_ADC_Stop+0x1a>
 80014f8:	2302      	movs	r3, #2
 80014fa:	e023      	b.n	8001544 <HAL_ADC_Stop+0x62>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001504:	216c      	movs	r1, #108	; 0x6c
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 fc6c 	bl	8001de4 <ADC_ConversionStop>
 800150c:	4603      	mov	r3, r0
 800150e:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d111      	bne.n	800153a <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 fbfe 	bl	8001d18 <ADC_Disable>
 800151c:	4603      	mov	r3, r0
 800151e:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d109      	bne.n	800153a <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800152e:	f023 0301 	bic.w	r3, r3, #1
 8001532:	f043 0201 	orr.w	r2, r3, #1
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001542:	7bfb      	ldrb	r3, [r7, #15]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	2b08      	cmp	r3, #8
 8001560:	d102      	bne.n	8001568 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001562:	2308      	movs	r3, #8
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	e02e      	b.n	80015c6 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001568:	4b56      	ldr	r3, [pc, #344]	; (80016c4 <HAL_ADC_PollForConversion+0x178>)
 800156a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 031f 	and.w	r3, r3, #31
 8001574:	2b00      	cmp	r3, #0
 8001576:	d112      	bne.n	800159e <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b01      	cmp	r3, #1
 8001584:	d11d      	bne.n	80015c2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f043 0220 	orr.w	r2, r3, #32
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e08d      	b.n	80016ba <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00b      	beq.n	80015c2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f043 0220 	orr.w	r2, r3, #32
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e07b      	b.n	80016ba <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80015c2:	230c      	movs	r3, #12
 80015c4:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80015ce:	f7ff fd65 	bl	800109c <HAL_GetTick>
 80015d2:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80015d4:	e021      	b.n	800161a <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015dc:	d01d      	beq.n	800161a <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d007      	beq.n	80015f4 <HAL_ADC_PollForConversion+0xa8>
 80015e4:	f7ff fd5a 	bl	800109c <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d212      	bcs.n	800161a <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	4013      	ands	r3, r2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10b      	bne.n	800161a <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f043 0204 	orr.w	r2, r3, #4
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e04f      	b.n	80016ba <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	4013      	ands	r3, r2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0d6      	beq.n	80015d6 <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800163e:	2b00      	cmp	r3, #0
 8001640:	d131      	bne.n	80016a6 <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001648:	2b00      	cmp	r3, #0
 800164a:	d12c      	bne.n	80016a6 <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b08      	cmp	r3, #8
 8001658:	d125      	bne.n	80016a6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d112      	bne.n	800168e <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d112      	bne.n	80016a6 <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	f043 0201 	orr.w	r2, r3, #1
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	641a      	str	r2, [r3, #64]	; 0x40
 800168c:	e00b      	b.n	80016a6 <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f043 0220 	orr.w	r2, r3, #32
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	f043 0201 	orr.w	r2, r3, #1
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d103      	bne.n	80016b8 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	50000300 	.word	0x50000300

080016c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b09b      	sub	sp, #108	; 0x6c
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d101      	bne.n	8001706 <HAL_ADC_ConfigChannel+0x22>
 8001702:	2302      	movs	r3, #2
 8001704:	e299      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x556>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	f040 827d 	bne.w	8001c18 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b04      	cmp	r3, #4
 8001724:	d81c      	bhi.n	8001760 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	4613      	mov	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4413      	add	r3, r2
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	461a      	mov	r2, r3
 800173a:	231f      	movs	r3, #31
 800173c:	4093      	lsls	r3, r2
 800173e:	43db      	mvns	r3, r3
 8001740:	4019      	ands	r1, r3
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	6818      	ldr	r0, [r3, #0]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	4613      	mov	r3, r2
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	4413      	add	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	fa00 f203 	lsl.w	r2, r0, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	631a      	str	r2, [r3, #48]	; 0x30
 800175e:	e063      	b.n	8001828 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b09      	cmp	r3, #9
 8001766:	d81e      	bhi.n	80017a6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4413      	add	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	3b1e      	subs	r3, #30
 800177c:	221f      	movs	r2, #31
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	4019      	ands	r1, r3
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	6818      	ldr	r0, [r3, #0]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	4613      	mov	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	4413      	add	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	3b1e      	subs	r3, #30
 8001798:	fa00 f203 	lsl.w	r2, r0, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	635a      	str	r2, [r3, #52]	; 0x34
 80017a4:	e040      	b.n	8001828 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b0e      	cmp	r3, #14
 80017ac:	d81e      	bhi.n	80017ec <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	3b3c      	subs	r3, #60	; 0x3c
 80017c2:	221f      	movs	r2, #31
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	4019      	ands	r1, r3
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	6818      	ldr	r0, [r3, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	4613      	mov	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4413      	add	r3, r2
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	3b3c      	subs	r3, #60	; 0x3c
 80017de:	fa00 f203 	lsl.w	r2, r0, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	639a      	str	r2, [r3, #56]	; 0x38
 80017ea:	e01d      	b.n	8001828 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	3b5a      	subs	r3, #90	; 0x5a
 8001800:	221f      	movs	r2, #31
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	4019      	ands	r1, r3
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	3b5a      	subs	r3, #90	; 0x5a
 800181c:	fa00 f203 	lsl.w	r2, r0, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 030c 	and.w	r3, r3, #12
 8001832:	2b00      	cmp	r3, #0
 8001834:	f040 80e5 	bne.w	8001a02 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b09      	cmp	r3, #9
 800183e:	d91c      	bls.n	800187a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6999      	ldr	r1, [r3, #24]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	4613      	mov	r3, r2
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4413      	add	r3, r2
 8001850:	3b1e      	subs	r3, #30
 8001852:	2207      	movs	r2, #7
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	4019      	ands	r1, r3
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	6898      	ldr	r0, [r3, #8]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4613      	mov	r3, r2
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	4413      	add	r3, r2
 800186a:	3b1e      	subs	r3, #30
 800186c:	fa00 f203 	lsl.w	r2, r0, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	430a      	orrs	r2, r1
 8001876:	619a      	str	r2, [r3, #24]
 8001878:	e019      	b.n	80018ae <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6959      	ldr	r1, [r3, #20]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4613      	mov	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4413      	add	r3, r2
 800188a:	2207      	movs	r2, #7
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	4019      	ands	r1, r3
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	6898      	ldr	r0, [r3, #8]
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4613      	mov	r3, r2
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	4413      	add	r3, r2
 80018a2:	fa00 f203 	lsl.w	r2, r0, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	695a      	ldr	r2, [r3, #20]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	08db      	lsrs	r3, r3, #3
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d84f      	bhi.n	8001970 <HAL_ADC_ConfigChannel+0x28c>
 80018d0:	a201      	add	r2, pc, #4	; (adr r2, 80018d8 <HAL_ADC_ConfigChannel+0x1f4>)
 80018d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d6:	bf00      	nop
 80018d8:	080018e9 	.word	0x080018e9
 80018dc:	0800190b 	.word	0x0800190b
 80018e0:	0800192d 	.word	0x0800192d
 80018e4:	0800194f 	.word	0x0800194f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018ee:	4b99      	ldr	r3, [pc, #612]	; (8001b54 <HAL_ADC_ConfigChannel+0x470>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	6812      	ldr	r2, [r2, #0]
 80018f6:	0691      	lsls	r1, r2, #26
 80018f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018fa:	430a      	orrs	r2, r1
 80018fc:	431a      	orrs	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001906:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001908:	e07e      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001910:	4b90      	ldr	r3, [pc, #576]	; (8001b54 <HAL_ADC_ConfigChannel+0x470>)
 8001912:	4013      	ands	r3, r2
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	0691      	lsls	r1, r2, #26
 800191a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800191c:	430a      	orrs	r2, r1
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001928:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800192a:	e06d      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001932:	4b88      	ldr	r3, [pc, #544]	; (8001b54 <HAL_ADC_ConfigChannel+0x470>)
 8001934:	4013      	ands	r3, r2
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	6812      	ldr	r2, [r2, #0]
 800193a:	0691      	lsls	r1, r2, #26
 800193c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800193e:	430a      	orrs	r2, r1
 8001940:	431a      	orrs	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800194a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800194c:	e05c      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001954:	4b7f      	ldr	r3, [pc, #508]	; (8001b54 <HAL_ADC_ConfigChannel+0x470>)
 8001956:	4013      	ands	r3, r2
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	0691      	lsls	r1, r2, #26
 800195e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001960:	430a      	orrs	r2, r1
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800196c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800196e:	e04b      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001976:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	069b      	lsls	r3, r3, #26
 8001980:	429a      	cmp	r2, r3
 8001982:	d107      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001992:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800199a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	069b      	lsls	r3, r3, #26
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d107      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019b6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	069b      	lsls	r3, r3, #26
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d107      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019da:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	069b      	lsls	r3, r3, #26
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d10a      	bne.n	8001a06 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019fe:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001a00:	e001      	b.n	8001a06 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001a02:	bf00      	nop
 8001a04:	e000      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001a06:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d108      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x344>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x344>
 8001a24:	2301      	movs	r3, #1
 8001a26:	e000      	b.n	8001a2a <HAL_ADC_ConfigChannel+0x346>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f040 80ff 	bne.w	8001c2e <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d00f      	beq.n	8001a58 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2201      	movs	r2, #1
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43da      	mvns	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	400a      	ands	r2, r1
 8001a52:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001a56:	e049      	b.n	8001aec <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2201      	movs	r2, #1
 8001a66:	409a      	lsls	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b09      	cmp	r3, #9
 8001a78:	d91c      	bls.n	8001ab4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6999      	ldr	r1, [r3, #24]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4613      	mov	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4413      	add	r3, r2
 8001a8a:	3b1b      	subs	r3, #27
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	4019      	ands	r1, r3
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	6898      	ldr	r0, [r3, #8]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3b1b      	subs	r3, #27
 8001aa6:	fa00 f203 	lsl.w	r2, r0, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	619a      	str	r2, [r3, #24]
 8001ab2:	e01b      	b.n	8001aec <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6959      	ldr	r1, [r3, #20]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4413      	add	r3, r2
 8001ac6:	2207      	movs	r2, #7
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	4019      	ands	r1, r3
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	6898      	ldr	r0, [r3, #8]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	4613      	mov	r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	4413      	add	r3, r2
 8001ae0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <HAL_ADC_ConfigChannel+0x474>)
 8001aee:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b10      	cmp	r3, #16
 8001af6:	d105      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001af8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d014      	beq.n	8001b2e <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b08:	2b11      	cmp	r3, #17
 8001b0a:	d105      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00a      	beq.n	8001b2e <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b1c:	2b12      	cmp	r3, #18
 8001b1e:	f040 8086 	bne.w	8001c2e <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001b22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d17f      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d10d      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x478>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d106      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x478>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e005      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x47a>
 8001b52:	bf00      	nop
 8001b54:	83fff000 	.word	0x83fff000
 8001b58:	50000300 	.word	0x50000300
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d150      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b62:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d010      	beq.n	8001b8a <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d107      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x4a0>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x4a0>
 8001b80:	2301      	movs	r3, #1
 8001b82:	e000      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x4a2>
 8001b84:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d13c      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2b10      	cmp	r3, #16
 8001b90:	d11d      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x4ea>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b9a:	d118      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001b9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ba6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ba8:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <HAL_ADC_ConfigChannel+0x564>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a27      	ldr	r2, [pc, #156]	; (8001c4c <HAL_ADC_ConfigChannel+0x568>)
 8001bae:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb2:	0c9a      	lsrs	r2, r3, #18
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bbe:	e002      	b.n	8001bc6 <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1f9      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bcc:	e02e      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b11      	cmp	r3, #17
 8001bd4:	d10b      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x50a>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bde:	d106      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001be0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bea:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bec:	e01e      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b12      	cmp	r3, #18
 8001bf4:	d11a      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c00:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c02:	e013      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f043 0220 	orr.w	r2, r3, #32
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c16:	e00a      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	f043 0220 	orr.w	r2, r3, #32
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c2a:	e000      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c2c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	376c      	adds	r7, #108	; 0x6c
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	200000b8 	.word	0x200000b8
 8001c4c:	431bde83 	.word	0x431bde83

08001c50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d108      	bne.n	8001c7c <ADC_Enable+0x2c>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <ADC_Enable+0x2c>
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e000      	b.n	8001c7e <ADC_Enable+0x2e>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d143      	bne.n	8001d0a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	4b22      	ldr	r3, [pc, #136]	; (8001d14 <ADC_Enable+0xc4>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00d      	beq.n	8001cac <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	f043 0210 	orr.w	r2, r3, #16
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca0:	f043 0201 	orr.w	r2, r3, #1
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e02f      	b.n	8001d0c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0201 	orr.w	r2, r2, #1
 8001cba:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001cbc:	f7ff f9ee 	bl	800109c <HAL_GetTick>
 8001cc0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001cc2:	e01b      	b.n	8001cfc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cc4:	f7ff f9ea 	bl	800109c <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d914      	bls.n	8001cfc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d00d      	beq.n	8001cfc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	f043 0210 	orr.w	r2, r3, #16
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf0:	f043 0201 	orr.w	r2, r3, #1
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e007      	b.n	8001d0c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d1dc      	bne.n	8001cc4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	8000003f 	.word	0x8000003f

08001d18 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d108      	bne.n	8001d44 <ADC_Disable+0x2c>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <ADC_Disable+0x2c>
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <ADC_Disable+0x2e>
 8001d44:	2300      	movs	r3, #0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d047      	beq.n	8001dda <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 030d 	and.w	r3, r3, #13
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d10f      	bne.n	8001d78 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0202 	orr.w	r2, r2, #2
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001d70:	f7ff f994 	bl	800109c <HAL_GetTick>
 8001d74:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d76:	e029      	b.n	8001dcc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	f043 0210 	orr.w	r2, r3, #16
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d88:	f043 0201 	orr.w	r2, r3, #1
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e023      	b.n	8001ddc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d94:	f7ff f982 	bl	800109c <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d914      	bls.n	8001dcc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d10d      	bne.n	8001dcc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	f043 0210 	orr.w	r2, r3, #16
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc0:	f043 0201 	orr.w	r2, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e007      	b.n	8001ddc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d0dc      	beq.n	8001d94 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 809b 	beq.w	8001f40 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e18:	d12a      	bne.n	8001e70 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d126      	bne.n	8001e70 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d122      	bne.n	8001e70 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8001e2a:	230c      	movs	r3, #12
 8001e2c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001e2e:	e014      	b.n	8001e5a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4a46      	ldr	r2, [pc, #280]	; (8001f4c <ADC_ConversionStop+0x168>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d90d      	bls.n	8001e54 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	f043 0210 	orr.w	r2, r3, #16
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e48:	f043 0201 	orr.w	r2, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e076      	b.n	8001f42 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	3301      	adds	r3, #1
 8001e58:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e64:	2b40      	cmp	r3, #64	; 0x40
 8001e66:	d1e3      	bne.n	8001e30 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2240      	movs	r2, #64	; 0x40
 8001e6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	2b60      	cmp	r3, #96	; 0x60
 8001e74:	d015      	beq.n	8001ea2 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d10e      	bne.n	8001ea2 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d107      	bne.n	8001ea2 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f042 0210 	orr.w	r2, r2, #16
 8001ea0:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	2b0c      	cmp	r3, #12
 8001ea6:	d015      	beq.n	8001ed4 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d10e      	bne.n	8001ed4 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d107      	bne.n	8001ed4 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0220 	orr.w	r2, r2, #32
 8001ed2:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	2b60      	cmp	r3, #96	; 0x60
 8001ed8:	d005      	beq.n	8001ee6 <ADC_ConversionStop+0x102>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	2b6c      	cmp	r3, #108	; 0x6c
 8001ede:	d105      	bne.n	8001eec <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001ee0:	230c      	movs	r3, #12
 8001ee2:	617b      	str	r3, [r7, #20]
        break;
 8001ee4:	e005      	b.n	8001ef2 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001ee6:	2308      	movs	r3, #8
 8001ee8:	617b      	str	r3, [r7, #20]
        break;
 8001eea:	e002      	b.n	8001ef2 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001eec:	2304      	movs	r3, #4
 8001eee:	617b      	str	r3, [r7, #20]
        break;
 8001ef0:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001ef2:	f7ff f8d3 	bl	800109c <HAL_GetTick>
 8001ef6:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001ef8:	e01b      	b.n	8001f32 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001efa:	f7ff f8cf 	bl	800109c <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b0b      	cmp	r3, #11
 8001f06:	d914      	bls.n	8001f32 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00d      	beq.n	8001f32 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f043 0210 	orr.w	r2, r3, #16
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	f043 0201 	orr.w	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e007      	b.n	8001f42 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1dc      	bne.n	8001efa <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	000993ff 	.word	0x000993ff

08001f50 <__NVIC_SetPriorityGrouping>:
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <__NVIC_SetPriorityGrouping+0x44>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f82:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <__NVIC_SetPriorityGrouping+0x44>)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	60d3      	str	r3, [r2, #12]
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <__NVIC_GetPriorityGrouping>:
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	0a1b      	lsrs	r3, r3, #8
 8001fa2:	f003 0307 	and.w	r3, r3, #7
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <__NVIC_SetPriority>:
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	6039      	str	r1, [r7, #0]
 8001fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	db0a      	blt.n	8001fde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	490c      	ldr	r1, [pc, #48]	; (8002000 <__NVIC_SetPriority+0x4c>)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	0112      	lsls	r2, r2, #4
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001fdc:	e00a      	b.n	8001ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4908      	ldr	r1, [pc, #32]	; (8002004 <__NVIC_SetPriority+0x50>)
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	3b04      	subs	r3, #4
 8001fec:	0112      	lsls	r2, r2, #4
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	761a      	strb	r2, [r3, #24]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000e100 	.word	0xe000e100
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <NVIC_EncodePriority>:
{
 8002008:	b480      	push	{r7}
 800200a:	b089      	sub	sp, #36	; 0x24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f1c3 0307 	rsb	r3, r3, #7
 8002022:	2b04      	cmp	r3, #4
 8002024:	bf28      	it	cs
 8002026:	2304      	movcs	r3, #4
 8002028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3304      	adds	r3, #4
 800202e:	2b06      	cmp	r3, #6
 8002030:	d902      	bls.n	8002038 <NVIC_EncodePriority+0x30>
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3b03      	subs	r3, #3
 8002036:	e000      	b.n	800203a <NVIC_EncodePriority+0x32>
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800203c:	f04f 32ff 	mov.w	r2, #4294967295
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43da      	mvns	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	401a      	ands	r2, r3
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002050:	f04f 31ff 	mov.w	r1, #4294967295
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	43d9      	mvns	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002060:	4313      	orrs	r3, r2
}
 8002062:	4618      	mov	r0, r3
 8002064:	3724      	adds	r7, #36	; 0x24
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
	...

08002070 <SysTick_Config>:
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002080:	d301      	bcc.n	8002086 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002082:	2301      	movs	r3, #1
 8002084:	e00f      	b.n	80020a6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002086:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <SysTick_Config+0x40>)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3b01      	subs	r3, #1
 800208c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800208e:	210f      	movs	r1, #15
 8002090:	f04f 30ff 	mov.w	r0, #4294967295
 8002094:	f7ff ff8e 	bl	8001fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <SysTick_Config+0x40>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209e:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <SysTick_Config+0x40>)
 80020a0:	2207      	movs	r2, #7
 80020a2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	e000e010 	.word	0xe000e010

080020b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff ff47 	bl	8001f50 <__NVIC_SetPriorityGrouping>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b086      	sub	sp, #24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020dc:	f7ff ff5c 	bl	8001f98 <__NVIC_GetPriorityGrouping>
 80020e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	6978      	ldr	r0, [r7, #20]
 80020e8:	f7ff ff8e 	bl	8002008 <NVIC_EncodePriority>
 80020ec:	4602      	mov	r2, r0
 80020ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff5d 	bl	8001fb4 <__NVIC_SetPriority>
}
 80020fa:	bf00      	nop
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff ffb0 	bl	8002070 <SysTick_Config>
 8002110:	4603      	mov	r3, r0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800211c:	b480      	push	{r7}
 800211e:	b087      	sub	sp, #28
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800212a:	e14e      	b.n	80023ca <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	2101      	movs	r1, #1
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	fa01 f303 	lsl.w	r3, r1, r3
 8002138:	4013      	ands	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 8140 	beq.w	80023c4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b01      	cmp	r3, #1
 800214e:	d005      	beq.n	800215c <HAL_GPIO_Init+0x40>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d130      	bne.n	80021be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	2203      	movs	r2, #3
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4013      	ands	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4313      	orrs	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002192:	2201      	movs	r2, #1
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	4013      	ands	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	091b      	lsrs	r3, r3, #4
 80021a8:	f003 0201 	and.w	r2, r3, #1
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d017      	beq.n	80021fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	2203      	movs	r2, #3
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4013      	ands	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d123      	bne.n	800224e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	08da      	lsrs	r2, r3, #3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3208      	adds	r2, #8
 800220e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002212:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	220f      	movs	r2, #15
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4013      	ands	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	08da      	lsrs	r2, r3, #3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3208      	adds	r2, #8
 8002248:	6939      	ldr	r1, [r7, #16]
 800224a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	2203      	movs	r2, #3
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	4013      	ands	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0203 	and.w	r2, r3, #3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 809a 	beq.w	80023c4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002290:	4b55      	ldr	r3, [pc, #340]	; (80023e8 <HAL_GPIO_Init+0x2cc>)
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	4a54      	ldr	r2, [pc, #336]	; (80023e8 <HAL_GPIO_Init+0x2cc>)
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	6193      	str	r3, [r2, #24]
 800229c:	4b52      	ldr	r3, [pc, #328]	; (80023e8 <HAL_GPIO_Init+0x2cc>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022a8:	4a50      	ldr	r2, [pc, #320]	; (80023ec <HAL_GPIO_Init+0x2d0>)
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	089b      	lsrs	r3, r3, #2
 80022ae:	3302      	adds	r3, #2
 80022b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	220f      	movs	r2, #15
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022d2:	d013      	beq.n	80022fc <HAL_GPIO_Init+0x1e0>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a46      	ldr	r2, [pc, #280]	; (80023f0 <HAL_GPIO_Init+0x2d4>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d00d      	beq.n	80022f8 <HAL_GPIO_Init+0x1dc>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a45      	ldr	r2, [pc, #276]	; (80023f4 <HAL_GPIO_Init+0x2d8>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d007      	beq.n	80022f4 <HAL_GPIO_Init+0x1d8>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a44      	ldr	r2, [pc, #272]	; (80023f8 <HAL_GPIO_Init+0x2dc>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d101      	bne.n	80022f0 <HAL_GPIO_Init+0x1d4>
 80022ec:	2303      	movs	r3, #3
 80022ee:	e006      	b.n	80022fe <HAL_GPIO_Init+0x1e2>
 80022f0:	2305      	movs	r3, #5
 80022f2:	e004      	b.n	80022fe <HAL_GPIO_Init+0x1e2>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e002      	b.n	80022fe <HAL_GPIO_Init+0x1e2>
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <HAL_GPIO_Init+0x1e2>
 80022fc:	2300      	movs	r3, #0
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	f002 0203 	and.w	r2, r2, #3
 8002304:	0092      	lsls	r2, r2, #2
 8002306:	4093      	lsls	r3, r2
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800230e:	4937      	ldr	r1, [pc, #220]	; (80023ec <HAL_GPIO_Init+0x2d0>)
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	089b      	lsrs	r3, r3, #2
 8002314:	3302      	adds	r3, #2
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800231c:	4b37      	ldr	r3, [pc, #220]	; (80023fc <HAL_GPIO_Init+0x2e0>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	43db      	mvns	r3, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4013      	ands	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002340:	4a2e      	ldr	r2, [pc, #184]	; (80023fc <HAL_GPIO_Init+0x2e0>)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002346:	4b2d      	ldr	r3, [pc, #180]	; (80023fc <HAL_GPIO_Init+0x2e0>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	43db      	mvns	r3, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4013      	ands	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4313      	orrs	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800236a:	4a24      	ldr	r2, [pc, #144]	; (80023fc <HAL_GPIO_Init+0x2e0>)
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002370:	4b22      	ldr	r3, [pc, #136]	; (80023fc <HAL_GPIO_Init+0x2e0>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	43db      	mvns	r3, r3
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4013      	ands	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002394:	4a19      	ldr	r2, [pc, #100]	; (80023fc <HAL_GPIO_Init+0x2e0>)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800239a:	4b18      	ldr	r3, [pc, #96]	; (80023fc <HAL_GPIO_Init+0x2e0>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	43db      	mvns	r3, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023be:	4a0f      	ldr	r2, [pc, #60]	; (80023fc <HAL_GPIO_Init+0x2e0>)
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	3301      	adds	r3, #1
 80023c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	fa22 f303 	lsr.w	r3, r2, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f47f aea9 	bne.w	800212c <HAL_GPIO_Init+0x10>
  }
}
 80023da:	bf00      	nop
 80023dc:	bf00      	nop
 80023de:	371c      	adds	r7, #28
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40010000 	.word	0x40010000
 80023f0:	48000400 	.word	0x48000400
 80023f4:	48000800 	.word	0x48000800
 80023f8:	48000c00 	.word	0x48000c00
 80023fc:	40010400 	.word	0x40010400

08002400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	807b      	strh	r3, [r7, #2]
 800240c:	4613      	mov	r3, r2
 800240e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002410:	787b      	ldrb	r3, [r7, #1]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002416:	887a      	ldrh	r2, [r7, #2]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800241c:	e002      	b.n	8002424 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002436:	af00      	add	r7, sp, #0
 8002438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002440:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002446:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d102      	bne.n	8002456 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	f001 b823 	b.w	800349c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 817d 	beq.w	8002766 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800246c:	4bbc      	ldr	r3, [pc, #752]	; (8002760 <HAL_RCC_OscConfig+0x330>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 030c 	and.w	r3, r3, #12
 8002474:	2b04      	cmp	r3, #4
 8002476:	d00c      	beq.n	8002492 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002478:	4bb9      	ldr	r3, [pc, #740]	; (8002760 <HAL_RCC_OscConfig+0x330>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 030c 	and.w	r3, r3, #12
 8002480:	2b08      	cmp	r3, #8
 8002482:	d15c      	bne.n	800253e <HAL_RCC_OscConfig+0x10e>
 8002484:	4bb6      	ldr	r3, [pc, #728]	; (8002760 <HAL_RCC_OscConfig+0x330>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002490:	d155      	bne.n	800253e <HAL_RCC_OscConfig+0x10e>
 8002492:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002496:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024a6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024aa:	fab3 f383 	clz	r3, r3
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	095b      	lsrs	r3, r3, #5
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d102      	bne.n	80024c4 <HAL_RCC_OscConfig+0x94>
 80024be:	4ba8      	ldr	r3, [pc, #672]	; (8002760 <HAL_RCC_OscConfig+0x330>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	e015      	b.n	80024f0 <HAL_RCC_OscConfig+0xc0>
 80024c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024c8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80024d0:	fa93 f3a3 	rbit	r3, r3
 80024d4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80024d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024dc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80024e0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80024e4:	fa93 f3a3 	rbit	r3, r3
 80024e8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80024ec:	4b9c      	ldr	r3, [pc, #624]	; (8002760 <HAL_RCC_OscConfig+0x330>)
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024f4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80024f8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80024fc:	fa92 f2a2 	rbit	r2, r2
 8002500:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002504:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002508:	fab2 f282 	clz	r2, r2
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	f042 0220 	orr.w	r2, r2, #32
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	f002 021f 	and.w	r2, r2, #31
 8002518:	2101      	movs	r1, #1
 800251a:	fa01 f202 	lsl.w	r2, r1, r2
 800251e:	4013      	ands	r3, r2
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 811f 	beq.w	8002764 <HAL_RCC_OscConfig+0x334>
 8002526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	f040 8116 	bne.w	8002764 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	f000 bfaf 	b.w	800349c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002542:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800254e:	d106      	bne.n	800255e <HAL_RCC_OscConfig+0x12e>
 8002550:	4b83      	ldr	r3, [pc, #524]	; (8002760 <HAL_RCC_OscConfig+0x330>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a82      	ldr	r2, [pc, #520]	; (8002760 <HAL_RCC_OscConfig+0x330>)
 8002556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	e036      	b.n	80025cc <HAL_RCC_OscConfig+0x19c>
 800255e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002562:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10c      	bne.n	8002588 <HAL_RCC_OscConfig+0x158>
 800256e:	4b7c      	ldr	r3, [pc, #496]	; (8002760 <HAL_RCC_OscConfig+0x330>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a7b      	ldr	r2, [pc, #492]	; (8002760 <HAL_RCC_OscConfig+0x330>)
 8002574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	4b79      	ldr	r3, [pc, #484]	; (8002760 <HAL_RCC_OscConfig+0x330>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a78      	ldr	r2, [pc, #480]	; (8002760 <HAL_RCC_OscConfig+0x330>)
 8002580:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	e021      	b.n	80025cc <HAL_RCC_OscConfig+0x19c>
 8002588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002598:	d10c      	bne.n	80025b4 <HAL_RCC_OscConfig+0x184>
 800259a:	4b71      	ldr	r3, [pc, #452]	; (8002760 <HAL_RCC_OscConfig+0x330>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a70      	ldr	r2, [pc, #448]	; (8002760 <HAL_RCC_OscConfig+0x330>)
 80025a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	4b6e      	ldr	r3, [pc, #440]	; (8002760 <HAL_RCC_OscConfig+0x330>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a6d      	ldr	r2, [pc, #436]	; (8002760 <HAL_RCC_OscConfig+0x330>)
 80025ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	e00b      	b.n	80025cc <HAL_RCC_OscConfig+0x19c>
 80025b4:	4b6a      	ldr	r3, [pc, #424]	; (8002760 <HAL_RCC_OscConfig+0x330>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a69      	ldr	r2, [pc, #420]	; (8002760 <HAL_RCC_OscConfig+0x330>)
 80025ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	4b67      	ldr	r3, [pc, #412]	; (8002760 <HAL_RCC_OscConfig+0x330>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a66      	ldr	r2, [pc, #408]	; (8002760 <HAL_RCC_OscConfig+0x330>)
 80025c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ca:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025cc:	4b64      	ldr	r3, [pc, #400]	; (8002760 <HAL_RCC_OscConfig+0x330>)
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	f023 020f 	bic.w	r2, r3, #15
 80025d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	495f      	ldr	r1, [pc, #380]	; (8002760 <HAL_RCC_OscConfig+0x330>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d059      	beq.n	80026aa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f6:	f7fe fd51 	bl	800109c <HAL_GetTick>
 80025fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fe:	e00a      	b.n	8002616 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002600:	f7fe fd4c 	bl	800109c <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b64      	cmp	r3, #100	; 0x64
 800260e:	d902      	bls.n	8002616 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	f000 bf43 	b.w	800349c <HAL_RCC_OscConfig+0x106c>
 8002616:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800261a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002622:	fa93 f3a3 	rbit	r3, r3
 8002626:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800262a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262e:	fab3 f383 	clz	r3, r3
 8002632:	b2db      	uxtb	r3, r3
 8002634:	095b      	lsrs	r3, r3, #5
 8002636:	b2db      	uxtb	r3, r3
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b01      	cmp	r3, #1
 8002640:	d102      	bne.n	8002648 <HAL_RCC_OscConfig+0x218>
 8002642:	4b47      	ldr	r3, [pc, #284]	; (8002760 <HAL_RCC_OscConfig+0x330>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	e015      	b.n	8002674 <HAL_RCC_OscConfig+0x244>
 8002648:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800264c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002654:	fa93 f3a3 	rbit	r3, r3
 8002658:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800265c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002660:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002664:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002668:	fa93 f3a3 	rbit	r3, r3
 800266c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002670:	4b3b      	ldr	r3, [pc, #236]	; (8002760 <HAL_RCC_OscConfig+0x330>)
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002678:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800267c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002680:	fa92 f2a2 	rbit	r2, r2
 8002684:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002688:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800268c:	fab2 f282 	clz	r2, r2
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	f042 0220 	orr.w	r2, r2, #32
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	f002 021f 	and.w	r2, r2, #31
 800269c:	2101      	movs	r1, #1
 800269e:	fa01 f202 	lsl.w	r2, r1, r2
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0ab      	beq.n	8002600 <HAL_RCC_OscConfig+0x1d0>
 80026a8:	e05d      	b.n	8002766 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026aa:	f7fe fcf7 	bl	800109c <HAL_GetTick>
 80026ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b2:	e00a      	b.n	80026ca <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b4:	f7fe fcf2 	bl	800109c <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b64      	cmp	r3, #100	; 0x64
 80026c2:	d902      	bls.n	80026ca <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	f000 bee9 	b.w	800349c <HAL_RCC_OscConfig+0x106c>
 80026ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026ce:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80026de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e2:	fab3 f383 	clz	r3, r3
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	095b      	lsrs	r3, r3, #5
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d102      	bne.n	80026fc <HAL_RCC_OscConfig+0x2cc>
 80026f6:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <HAL_RCC_OscConfig+0x330>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	e015      	b.n	8002728 <HAL_RCC_OscConfig+0x2f8>
 80026fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002700:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002704:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002708:	fa93 f3a3 	rbit	r3, r3
 800270c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002710:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002714:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002718:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002724:	4b0e      	ldr	r3, [pc, #56]	; (8002760 <HAL_RCC_OscConfig+0x330>)
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800272c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002730:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002734:	fa92 f2a2 	rbit	r2, r2
 8002738:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800273c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002740:	fab2 f282 	clz	r2, r2
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	f042 0220 	orr.w	r2, r2, #32
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	f002 021f 	and.w	r2, r2, #31
 8002750:	2101      	movs	r1, #1
 8002752:	fa01 f202 	lsl.w	r2, r1, r2
 8002756:	4013      	ands	r3, r2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1ab      	bne.n	80026b4 <HAL_RCC_OscConfig+0x284>
 800275c:	e003      	b.n	8002766 <HAL_RCC_OscConfig+0x336>
 800275e:	bf00      	nop
 8002760:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 817d 	beq.w	8002a76 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800277c:	4ba6      	ldr	r3, [pc, #664]	; (8002a18 <HAL_RCC_OscConfig+0x5e8>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 030c 	and.w	r3, r3, #12
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00b      	beq.n	80027a0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002788:	4ba3      	ldr	r3, [pc, #652]	; (8002a18 <HAL_RCC_OscConfig+0x5e8>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 030c 	and.w	r3, r3, #12
 8002790:	2b08      	cmp	r3, #8
 8002792:	d172      	bne.n	800287a <HAL_RCC_OscConfig+0x44a>
 8002794:	4ba0      	ldr	r3, [pc, #640]	; (8002a18 <HAL_RCC_OscConfig+0x5e8>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d16c      	bne.n	800287a <HAL_RCC_OscConfig+0x44a>
 80027a0:	2302      	movs	r3, #2
 80027a2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80027aa:	fa93 f3a3 	rbit	r3, r3
 80027ae:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80027b2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b6:	fab3 f383 	clz	r3, r3
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	095b      	lsrs	r3, r3, #5
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d102      	bne.n	80027d0 <HAL_RCC_OscConfig+0x3a0>
 80027ca:	4b93      	ldr	r3, [pc, #588]	; (8002a18 <HAL_RCC_OscConfig+0x5e8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	e013      	b.n	80027f8 <HAL_RCC_OscConfig+0x3c8>
 80027d0:	2302      	movs	r3, #2
 80027d2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80027da:	fa93 f3a3 	rbit	r3, r3
 80027de:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80027e2:	2302      	movs	r3, #2
 80027e4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80027e8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027ec:	fa93 f3a3 	rbit	r3, r3
 80027f0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80027f4:	4b88      	ldr	r3, [pc, #544]	; (8002a18 <HAL_RCC_OscConfig+0x5e8>)
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	2202      	movs	r2, #2
 80027fa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80027fe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002802:	fa92 f2a2 	rbit	r2, r2
 8002806:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800280a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800280e:	fab2 f282 	clz	r2, r2
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	f042 0220 	orr.w	r2, r2, #32
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	f002 021f 	and.w	r2, r2, #31
 800281e:	2101      	movs	r1, #1
 8002820:	fa01 f202 	lsl.w	r2, r1, r2
 8002824:	4013      	ands	r3, r2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00a      	beq.n	8002840 <HAL_RCC_OscConfig+0x410>
 800282a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d002      	beq.n	8002840 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	f000 be2e 	b.w	800349c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002840:	4b75      	ldr	r3, [pc, #468]	; (8002a18 <HAL_RCC_OscConfig+0x5e8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	21f8      	movs	r1, #248	; 0xf8
 8002856:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800285e:	fa91 f1a1 	rbit	r1, r1
 8002862:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002866:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800286a:	fab1 f181 	clz	r1, r1
 800286e:	b2c9      	uxtb	r1, r1
 8002870:	408b      	lsls	r3, r1
 8002872:	4969      	ldr	r1, [pc, #420]	; (8002a18 <HAL_RCC_OscConfig+0x5e8>)
 8002874:	4313      	orrs	r3, r2
 8002876:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002878:	e0fd      	b.n	8002a76 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800287a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 8088 	beq.w	800299c <HAL_RCC_OscConfig+0x56c>
 800288c:	2301      	movs	r3, #1
 800288e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002892:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002896:	fa93 f3a3 	rbit	r3, r3
 800289a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800289e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	461a      	mov	r2, r3
 80028b4:	2301      	movs	r3, #1
 80028b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b8:	f7fe fbf0 	bl	800109c <HAL_GetTick>
 80028bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c0:	e00a      	b.n	80028d8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028c2:	f7fe fbeb 	bl	800109c <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d902      	bls.n	80028d8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	f000 bde2 	b.w	800349c <HAL_RCC_OscConfig+0x106c>
 80028d8:	2302      	movs	r3, #2
 80028da:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80028e2:	fa93 f3a3 	rbit	r3, r3
 80028e6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80028ea:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ee:	fab3 f383 	clz	r3, r3
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	095b      	lsrs	r3, r3, #5
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d102      	bne.n	8002908 <HAL_RCC_OscConfig+0x4d8>
 8002902:	4b45      	ldr	r3, [pc, #276]	; (8002a18 <HAL_RCC_OscConfig+0x5e8>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	e013      	b.n	8002930 <HAL_RCC_OscConfig+0x500>
 8002908:	2302      	movs	r3, #2
 800290a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002912:	fa93 f3a3 	rbit	r3, r3
 8002916:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800291a:	2302      	movs	r3, #2
 800291c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002920:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002924:	fa93 f3a3 	rbit	r3, r3
 8002928:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800292c:	4b3a      	ldr	r3, [pc, #232]	; (8002a18 <HAL_RCC_OscConfig+0x5e8>)
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	2202      	movs	r2, #2
 8002932:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002936:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800293a:	fa92 f2a2 	rbit	r2, r2
 800293e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002942:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002946:	fab2 f282 	clz	r2, r2
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	f042 0220 	orr.w	r2, r2, #32
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	f002 021f 	and.w	r2, r2, #31
 8002956:	2101      	movs	r1, #1
 8002958:	fa01 f202 	lsl.w	r2, r1, r2
 800295c:	4013      	ands	r3, r2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0af      	beq.n	80028c2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002962:	4b2d      	ldr	r3, [pc, #180]	; (8002a18 <HAL_RCC_OscConfig+0x5e8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800296a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	21f8      	movs	r1, #248	; 0xf8
 8002978:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002980:	fa91 f1a1 	rbit	r1, r1
 8002984:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002988:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800298c:	fab1 f181 	clz	r1, r1
 8002990:	b2c9      	uxtb	r1, r1
 8002992:	408b      	lsls	r3, r1
 8002994:	4920      	ldr	r1, [pc, #128]	; (8002a18 <HAL_RCC_OscConfig+0x5e8>)
 8002996:	4313      	orrs	r3, r2
 8002998:	600b      	str	r3, [r1, #0]
 800299a:	e06c      	b.n	8002a76 <HAL_RCC_OscConfig+0x646>
 800299c:	2301      	movs	r3, #1
 800299e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80029a6:	fa93 f3a3 	rbit	r3, r3
 80029aa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80029ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	461a      	mov	r2, r3
 80029c4:	2300      	movs	r3, #0
 80029c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c8:	f7fe fb68 	bl	800109c <HAL_GetTick>
 80029cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d0:	e00a      	b.n	80029e8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d2:	f7fe fb63 	bl	800109c <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d902      	bls.n	80029e8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	f000 bd5a 	b.w	800349c <HAL_RCC_OscConfig+0x106c>
 80029e8:	2302      	movs	r3, #2
 80029ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80029f2:	fa93 f3a3 	rbit	r3, r3
 80029f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80029fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fe:	fab3 f383 	clz	r3, r3
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	095b      	lsrs	r3, r3, #5
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d104      	bne.n	8002a1c <HAL_RCC_OscConfig+0x5ec>
 8002a12:	4b01      	ldr	r3, [pc, #4]	; (8002a18 <HAL_RCC_OscConfig+0x5e8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	e015      	b.n	8002a44 <HAL_RCC_OscConfig+0x614>
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002a26:	fa93 f3a3 	rbit	r3, r3
 8002a2a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002a2e:	2302      	movs	r3, #2
 8002a30:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002a34:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002a38:	fa93 f3a3 	rbit	r3, r3
 8002a3c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002a40:	4bc8      	ldr	r3, [pc, #800]	; (8002d64 <HAL_RCC_OscConfig+0x934>)
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	2202      	movs	r2, #2
 8002a46:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002a4a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002a4e:	fa92 f2a2 	rbit	r2, r2
 8002a52:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002a56:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002a5a:	fab2 f282 	clz	r2, r2
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	f042 0220 	orr.w	r2, r2, #32
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	f002 021f 	and.w	r2, r2, #31
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1ad      	bne.n	80029d2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 8110 	beq.w	8002cac <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d079      	beq.n	8002b90 <HAL_RCC_OscConfig+0x760>
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ab2:	fab3 f383 	clz	r3, r3
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4bab      	ldr	r3, [pc, #684]	; (8002d68 <HAL_RCC_OscConfig+0x938>)
 8002abc:	4413      	add	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac6:	f7fe fae9 	bl	800109c <HAL_GetTick>
 8002aca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ace:	e00a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad0:	f7fe fae4 	bl	800109c <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d902      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	f000 bcdb 	b.w	800349c <HAL_RCC_OscConfig+0x106c>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002af0:	fa93 f3a3 	rbit	r3, r3
 8002af4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002b00:	2202      	movs	r2, #2
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b08:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	fa93 f2a3 	rbit	r2, r3
 8002b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002b24:	2202      	movs	r2, #2
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	fa93 f2a3 	rbit	r2, r3
 8002b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b3e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b40:	4b88      	ldr	r3, [pc, #544]	; (8002d64 <HAL_RCC_OscConfig+0x934>)
 8002b42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b48:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002b4c:	2102      	movs	r1, #2
 8002b4e:	6019      	str	r1, [r3, #0]
 8002b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b54:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	fa93 f1a3 	rbit	r1, r3
 8002b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b62:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002b66:	6019      	str	r1, [r3, #0]
  return result;
 8002b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	fab3 f383 	clz	r3, r3
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	f003 031f 	and.w	r3, r3, #31
 8002b82:	2101      	movs	r1, #1
 8002b84:	fa01 f303 	lsl.w	r3, r1, r3
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0a0      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x6a0>
 8002b8e:	e08d      	b.n	8002cac <HAL_RCC_OscConfig+0x87c>
 8002b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b94:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b98:	2201      	movs	r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	fa93 f2a3 	rbit	r2, r3
 8002baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002bb2:	601a      	str	r2, [r3, #0]
  return result;
 8002bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002bbc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b68      	ldr	r3, [pc, #416]	; (8002d68 <HAL_RCC_OscConfig+0x938>)
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	461a      	mov	r2, r3
 8002bce:	2300      	movs	r3, #0
 8002bd0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd2:	f7fe fa63 	bl	800109c <HAL_GetTick>
 8002bd6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bda:	e00a      	b.n	8002bf2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bdc:	f7fe fa5e 	bl	800109c <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d902      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	f000 bc55 	b.w	800349c <HAL_RCC_OscConfig+0x106c>
 8002bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c02:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	fa93 f2a3 	rbit	r2, r3
 8002c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c10:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002c1e:	2202      	movs	r2, #2
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c26:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	fa93 f2a3 	rbit	r2, r3
 8002c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002c42:	2202      	movs	r2, #2
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	fa93 f2a3 	rbit	r2, r3
 8002c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c58:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002c5c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c5e:	4b41      	ldr	r3, [pc, #260]	; (8002d64 <HAL_RCC_OscConfig+0x934>)
 8002c60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c66:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002c6a:	2102      	movs	r1, #2
 8002c6c:	6019      	str	r1, [r3, #0]
 8002c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c72:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	fa93 f1a3 	rbit	r1, r3
 8002c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c80:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002c84:	6019      	str	r1, [r3, #0]
  return result;
 8002c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	fab3 f383 	clz	r3, r3
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	f003 031f 	and.w	r3, r3, #31
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d197      	bne.n	8002bdc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 81a1 	beq.w	8003004 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cc8:	4b26      	ldr	r3, [pc, #152]	; (8002d64 <HAL_RCC_OscConfig+0x934>)
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d116      	bne.n	8002d02 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd4:	4b23      	ldr	r3, [pc, #140]	; (8002d64 <HAL_RCC_OscConfig+0x934>)
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	4a22      	ldr	r2, [pc, #136]	; (8002d64 <HAL_RCC_OscConfig+0x934>)
 8002cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cde:	61d3      	str	r3, [r2, #28]
 8002ce0:	4b20      	ldr	r3, [pc, #128]	; (8002d64 <HAL_RCC_OscConfig+0x934>)
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cec:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002cfa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d02:	4b1a      	ldr	r3, [pc, #104]	; (8002d6c <HAL_RCC_OscConfig+0x93c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d11a      	bne.n	8002d44 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d0e:	4b17      	ldr	r3, [pc, #92]	; (8002d6c <HAL_RCC_OscConfig+0x93c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a16      	ldr	r2, [pc, #88]	; (8002d6c <HAL_RCC_OscConfig+0x93c>)
 8002d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d18:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d1a:	f7fe f9bf 	bl	800109c <HAL_GetTick>
 8002d1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d22:	e009      	b.n	8002d38 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d24:	f7fe f9ba 	bl	800109c <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b64      	cmp	r3, #100	; 0x64
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e3b1      	b.n	800349c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d38:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <HAL_RCC_OscConfig+0x93c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0ef      	beq.n	8002d24 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d10d      	bne.n	8002d70 <HAL_RCC_OscConfig+0x940>
 8002d54:	4b03      	ldr	r3, [pc, #12]	; (8002d64 <HAL_RCC_OscConfig+0x934>)
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	4a02      	ldr	r2, [pc, #8]	; (8002d64 <HAL_RCC_OscConfig+0x934>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	6213      	str	r3, [r2, #32]
 8002d60:	e03c      	b.n	8002ddc <HAL_RCC_OscConfig+0x9ac>
 8002d62:	bf00      	nop
 8002d64:	40021000 	.word	0x40021000
 8002d68:	10908120 	.word	0x10908120
 8002d6c:	40007000 	.word	0x40007000
 8002d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10c      	bne.n	8002d9a <HAL_RCC_OscConfig+0x96a>
 8002d80:	4bc1      	ldr	r3, [pc, #772]	; (8003088 <HAL_RCC_OscConfig+0xc58>)
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	4ac0      	ldr	r2, [pc, #768]	; (8003088 <HAL_RCC_OscConfig+0xc58>)
 8002d86:	f023 0301 	bic.w	r3, r3, #1
 8002d8a:	6213      	str	r3, [r2, #32]
 8002d8c:	4bbe      	ldr	r3, [pc, #760]	; (8003088 <HAL_RCC_OscConfig+0xc58>)
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	4abd      	ldr	r2, [pc, #756]	; (8003088 <HAL_RCC_OscConfig+0xc58>)
 8002d92:	f023 0304 	bic.w	r3, r3, #4
 8002d96:	6213      	str	r3, [r2, #32]
 8002d98:	e020      	b.n	8002ddc <HAL_RCC_OscConfig+0x9ac>
 8002d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	2b05      	cmp	r3, #5
 8002da8:	d10c      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x994>
 8002daa:	4bb7      	ldr	r3, [pc, #732]	; (8003088 <HAL_RCC_OscConfig+0xc58>)
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	4ab6      	ldr	r2, [pc, #728]	; (8003088 <HAL_RCC_OscConfig+0xc58>)
 8002db0:	f043 0304 	orr.w	r3, r3, #4
 8002db4:	6213      	str	r3, [r2, #32]
 8002db6:	4bb4      	ldr	r3, [pc, #720]	; (8003088 <HAL_RCC_OscConfig+0xc58>)
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	4ab3      	ldr	r2, [pc, #716]	; (8003088 <HAL_RCC_OscConfig+0xc58>)
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	6213      	str	r3, [r2, #32]
 8002dc2:	e00b      	b.n	8002ddc <HAL_RCC_OscConfig+0x9ac>
 8002dc4:	4bb0      	ldr	r3, [pc, #704]	; (8003088 <HAL_RCC_OscConfig+0xc58>)
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	4aaf      	ldr	r2, [pc, #700]	; (8003088 <HAL_RCC_OscConfig+0xc58>)
 8002dca:	f023 0301 	bic.w	r3, r3, #1
 8002dce:	6213      	str	r3, [r2, #32]
 8002dd0:	4bad      	ldr	r3, [pc, #692]	; (8003088 <HAL_RCC_OscConfig+0xc58>)
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	4aac      	ldr	r2, [pc, #688]	; (8003088 <HAL_RCC_OscConfig+0xc58>)
 8002dd6:	f023 0304 	bic.w	r3, r3, #4
 8002dda:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 8081 	beq.w	8002ef0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dee:	f7fe f955 	bl	800109c <HAL_GetTick>
 8002df2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df6:	e00b      	b.n	8002e10 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df8:	f7fe f950 	bl	800109c <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e345      	b.n	800349c <HAL_RCC_OscConfig+0x106c>
 8002e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e14:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002e18:	2202      	movs	r2, #2
 8002e1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e20:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	fa93 f2a3 	rbit	r2, r3
 8002e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e38:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e44:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	fa93 f2a3 	rbit	r2, r3
 8002e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e52:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002e56:	601a      	str	r2, [r3, #0]
  return result;
 8002e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002e60:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e62:	fab3 f383 	clz	r3, r3
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	095b      	lsrs	r3, r3, #5
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	f043 0302 	orr.w	r3, r3, #2
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d102      	bne.n	8002e7c <HAL_RCC_OscConfig+0xa4c>
 8002e76:	4b84      	ldr	r3, [pc, #528]	; (8003088 <HAL_RCC_OscConfig+0xc58>)
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	e013      	b.n	8002ea4 <HAL_RCC_OscConfig+0xa74>
 8002e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e80:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002e84:	2202      	movs	r2, #2
 8002e86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	fa93 f2a3 	rbit	r2, r3
 8002e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	4b79      	ldr	r3, [pc, #484]	; (8003088 <HAL_RCC_OscConfig+0xc58>)
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ea8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002eac:	2102      	movs	r1, #2
 8002eae:	6011      	str	r1, [r2, #0]
 8002eb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eb4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	fa92 f1a2 	rbit	r1, r2
 8002ebe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ec2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002ec6:	6011      	str	r1, [r2, #0]
  return result;
 8002ec8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ecc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002ed0:	6812      	ldr	r2, [r2, #0]
 8002ed2:	fab2 f282 	clz	r2, r2
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	f002 021f 	and.w	r2, r2, #31
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d084      	beq.n	8002df8 <HAL_RCC_OscConfig+0x9c8>
 8002eee:	e07f      	b.n	8002ff0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef0:	f7fe f8d4 	bl	800109c <HAL_GetTick>
 8002ef4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef8:	e00b      	b.n	8002f12 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002efa:	f7fe f8cf 	bl	800109c <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e2c4      	b.n	800349c <HAL_RCC_OscConfig+0x106c>
 8002f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f16:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f22:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	fa93 f2a3 	rbit	r2, r3
 8002f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f30:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002f3e:	2202      	movs	r2, #2
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f46:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	fa93 f2a3 	rbit	r2, r3
 8002f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f54:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002f58:	601a      	str	r2, [r3, #0]
  return result;
 8002f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002f62:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f64:	fab3 f383 	clz	r3, r3
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	f043 0302 	orr.w	r3, r3, #2
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d102      	bne.n	8002f7e <HAL_RCC_OscConfig+0xb4e>
 8002f78:	4b43      	ldr	r3, [pc, #268]	; (8003088 <HAL_RCC_OscConfig+0xc58>)
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	e013      	b.n	8002fa6 <HAL_RCC_OscConfig+0xb76>
 8002f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f82:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002f86:	2202      	movs	r2, #2
 8002f88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	fa93 f2a3 	rbit	r2, r3
 8002f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	4b39      	ldr	r3, [pc, #228]	; (8003088 <HAL_RCC_OscConfig+0xc58>)
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002faa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002fae:	2102      	movs	r1, #2
 8002fb0:	6011      	str	r1, [r2, #0]
 8002fb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fb6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002fba:	6812      	ldr	r2, [r2, #0]
 8002fbc:	fa92 f1a2 	rbit	r1, r2
 8002fc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fc4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002fc8:	6011      	str	r1, [r2, #0]
  return result;
 8002fca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fce:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	fab2 f282 	clz	r2, r2
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	f002 021f 	and.w	r2, r2, #31
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d184      	bne.n	8002efa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ff0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d105      	bne.n	8003004 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff8:	4b23      	ldr	r3, [pc, #140]	; (8003088 <HAL_RCC_OscConfig+0xc58>)
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	4a22      	ldr	r2, [pc, #136]	; (8003088 <HAL_RCC_OscConfig+0xc58>)
 8002ffe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003002:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003008:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 8242 	beq.w	800349a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003016:	4b1c      	ldr	r3, [pc, #112]	; (8003088 <HAL_RCC_OscConfig+0xc58>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 030c 	and.w	r3, r3, #12
 800301e:	2b08      	cmp	r3, #8
 8003020:	f000 8213 	beq.w	800344a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003028:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	2b02      	cmp	r3, #2
 8003032:	f040 8162 	bne.w	80032fa <HAL_RCC_OscConfig+0xeca>
 8003036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800303e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003042:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003048:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	fa93 f2a3 	rbit	r2, r3
 8003052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003056:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800305a:	601a      	str	r2, [r3, #0]
  return result;
 800305c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003060:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003064:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003066:	fab3 f383 	clz	r3, r3
 800306a:	b2db      	uxtb	r3, r3
 800306c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003070:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	461a      	mov	r2, r3
 8003078:	2300      	movs	r3, #0
 800307a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307c:	f7fe f80e 	bl	800109c <HAL_GetTick>
 8003080:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003084:	e00c      	b.n	80030a0 <HAL_RCC_OscConfig+0xc70>
 8003086:	bf00      	nop
 8003088:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800308c:	f7fe f806 	bl	800109c <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e1fd      	b.n	800349c <HAL_RCC_OscConfig+0x106c>
 80030a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80030a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	fa93 f2a3 	rbit	r2, r3
 80030bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80030c4:	601a      	str	r2, [r3, #0]
  return result;
 80030c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ca:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80030ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030d0:	fab3 f383 	clz	r3, r3
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	095b      	lsrs	r3, r3, #5
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d102      	bne.n	80030ea <HAL_RCC_OscConfig+0xcba>
 80030e4:	4bb0      	ldr	r3, [pc, #704]	; (80033a8 <HAL_RCC_OscConfig+0xf78>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	e027      	b.n	800313a <HAL_RCC_OscConfig+0xd0a>
 80030ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ee:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80030f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	fa93 f2a3 	rbit	r2, r3
 8003106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003114:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003118:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003122:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	fa93 f2a3 	rbit	r2, r3
 800312c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003130:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	4b9c      	ldr	r3, [pc, #624]	; (80033a8 <HAL_RCC_OscConfig+0xf78>)
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800313e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003142:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003146:	6011      	str	r1, [r2, #0]
 8003148:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800314c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003150:	6812      	ldr	r2, [r2, #0]
 8003152:	fa92 f1a2 	rbit	r1, r2
 8003156:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800315a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800315e:	6011      	str	r1, [r2, #0]
  return result;
 8003160:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003164:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003168:	6812      	ldr	r2, [r2, #0]
 800316a:	fab2 f282 	clz	r2, r2
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	f042 0220 	orr.w	r2, r2, #32
 8003174:	b2d2      	uxtb	r2, r2
 8003176:	f002 021f 	and.w	r2, r2, #31
 800317a:	2101      	movs	r1, #1
 800317c:	fa01 f202 	lsl.w	r2, r1, r2
 8003180:	4013      	ands	r3, r2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d182      	bne.n	800308c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003186:	4b88      	ldr	r3, [pc, #544]	; (80033a8 <HAL_RCC_OscConfig+0xf78>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800318e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003192:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800319a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	430b      	orrs	r3, r1
 80031a8:	497f      	ldr	r1, [pc, #508]	; (80033a8 <HAL_RCC_OscConfig+0xf78>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	604b      	str	r3, [r1, #4]
 80031ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80031b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	fa93 f2a3 	rbit	r2, r3
 80031ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ce:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80031d2:	601a      	str	r2, [r3, #0]
  return result;
 80031d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80031dc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031de:	fab3 f383 	clz	r3, r3
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	461a      	mov	r2, r3
 80031f0:	2301      	movs	r3, #1
 80031f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f4:	f7fd ff52 	bl	800109c <HAL_GetTick>
 80031f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031fc:	e009      	b.n	8003212 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031fe:	f7fd ff4d 	bl	800109c <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e144      	b.n	800349c <HAL_RCC_OscConfig+0x106c>
 8003212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003216:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800321a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800321e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003224:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	fa93 f2a3 	rbit	r2, r3
 800322e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003232:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003236:	601a      	str	r2, [r3, #0]
  return result;
 8003238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003240:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003242:	fab3 f383 	clz	r3, r3
 8003246:	b2db      	uxtb	r3, r3
 8003248:	095b      	lsrs	r3, r3, #5
 800324a:	b2db      	uxtb	r3, r3
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b01      	cmp	r3, #1
 8003254:	d102      	bne.n	800325c <HAL_RCC_OscConfig+0xe2c>
 8003256:	4b54      	ldr	r3, [pc, #336]	; (80033a8 <HAL_RCC_OscConfig+0xf78>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	e027      	b.n	80032ac <HAL_RCC_OscConfig+0xe7c>
 800325c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003260:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003264:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003268:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	fa93 f2a3 	rbit	r2, r3
 8003278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003286:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800328a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003294:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	fa93 f2a3 	rbit	r2, r3
 800329e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	4b3f      	ldr	r3, [pc, #252]	; (80033a8 <HAL_RCC_OscConfig+0xf78>)
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032b0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80032b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032b8:	6011      	str	r1, [r2, #0]
 80032ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032be:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	fa92 f1a2 	rbit	r1, r2
 80032c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032cc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80032d0:	6011      	str	r1, [r2, #0]
  return result;
 80032d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032d6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80032da:	6812      	ldr	r2, [r2, #0]
 80032dc:	fab2 f282 	clz	r2, r2
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	f042 0220 	orr.w	r2, r2, #32
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	f002 021f 	and.w	r2, r2, #31
 80032ec:	2101      	movs	r1, #1
 80032ee:	fa01 f202 	lsl.w	r2, r1, r2
 80032f2:	4013      	ands	r3, r2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d082      	beq.n	80031fe <HAL_RCC_OscConfig+0xdce>
 80032f8:	e0cf      	b.n	800349a <HAL_RCC_OscConfig+0x106a>
 80032fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fe:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003302:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003306:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	fa93 f2a3 	rbit	r2, r3
 8003316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800331e:	601a      	str	r2, [r3, #0]
  return result;
 8003320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003324:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003328:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800332a:	fab3 f383 	clz	r3, r3
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003334:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	461a      	mov	r2, r3
 800333c:	2300      	movs	r3, #0
 800333e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003340:	f7fd feac 	bl	800109c <HAL_GetTick>
 8003344:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003348:	e009      	b.n	800335e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800334a:	f7fd fea7 	bl	800109c <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e09e      	b.n	800349c <HAL_RCC_OscConfig+0x106c>
 800335e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003362:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003366:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800336a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003370:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	fa93 f2a3 	rbit	r2, r3
 800337a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003382:	601a      	str	r2, [r3, #0]
  return result;
 8003384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003388:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800338c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800338e:	fab3 f383 	clz	r3, r3
 8003392:	b2db      	uxtb	r3, r3
 8003394:	095b      	lsrs	r3, r3, #5
 8003396:	b2db      	uxtb	r3, r3
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d104      	bne.n	80033ac <HAL_RCC_OscConfig+0xf7c>
 80033a2:	4b01      	ldr	r3, [pc, #4]	; (80033a8 <HAL_RCC_OscConfig+0xf78>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	e029      	b.n	80033fc <HAL_RCC_OscConfig+0xfcc>
 80033a8:	40021000 	.word	0x40021000
 80033ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80033b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033be:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	fa93 f2a3 	rbit	r2, r3
 80033c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033cc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80033da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	fa93 f2a3 	rbit	r2, r3
 80033ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	4b2b      	ldr	r3, [pc, #172]	; (80034a8 <HAL_RCC_OscConfig+0x1078>)
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003400:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003404:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003408:	6011      	str	r1, [r2, #0]
 800340a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800340e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003412:	6812      	ldr	r2, [r2, #0]
 8003414:	fa92 f1a2 	rbit	r1, r2
 8003418:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800341c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003420:	6011      	str	r1, [r2, #0]
  return result;
 8003422:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003426:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800342a:	6812      	ldr	r2, [r2, #0]
 800342c:	fab2 f282 	clz	r2, r2
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	f042 0220 	orr.w	r2, r2, #32
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	f002 021f 	and.w	r2, r2, #31
 800343c:	2101      	movs	r1, #1
 800343e:	fa01 f202 	lsl.w	r2, r1, r2
 8003442:	4013      	ands	r3, r2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d180      	bne.n	800334a <HAL_RCC_OscConfig+0xf1a>
 8003448:	e027      	b.n	800349a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800344a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e01e      	b.n	800349c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800345e:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <HAL_RCC_OscConfig+0x1078>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003466:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800346a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800346e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003472:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	429a      	cmp	r2, r3
 800347c:	d10b      	bne.n	8003496 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800347e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003482:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003492:	429a      	cmp	r2, r3
 8003494:	d001      	beq.n	800349a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40021000 	.word	0x40021000

080034ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b09e      	sub	sp, #120	; 0x78
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e162      	b.n	800378a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034c4:	4b90      	ldr	r3, [pc, #576]	; (8003708 <HAL_RCC_ClockConfig+0x25c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d910      	bls.n	80034f4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d2:	4b8d      	ldr	r3, [pc, #564]	; (8003708 <HAL_RCC_ClockConfig+0x25c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f023 0207 	bic.w	r2, r3, #7
 80034da:	498b      	ldr	r1, [pc, #556]	; (8003708 <HAL_RCC_ClockConfig+0x25c>)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	4313      	orrs	r3, r2
 80034e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e2:	4b89      	ldr	r3, [pc, #548]	; (8003708 <HAL_RCC_ClockConfig+0x25c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d001      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e14a      	b.n	800378a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003500:	4b82      	ldr	r3, [pc, #520]	; (800370c <HAL_RCC_ClockConfig+0x260>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	497f      	ldr	r1, [pc, #508]	; (800370c <HAL_RCC_ClockConfig+0x260>)
 800350e:	4313      	orrs	r3, r2
 8003510:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 80dc 	beq.w	80036d8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d13c      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xf6>
 8003528:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800352c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003530:	fa93 f3a3 	rbit	r3, r3
 8003534:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003538:	fab3 f383 	clz	r3, r3
 800353c:	b2db      	uxtb	r3, r3
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	b2db      	uxtb	r3, r3
 8003542:	f043 0301 	orr.w	r3, r3, #1
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b01      	cmp	r3, #1
 800354a:	d102      	bne.n	8003552 <HAL_RCC_ClockConfig+0xa6>
 800354c:	4b6f      	ldr	r3, [pc, #444]	; (800370c <HAL_RCC_ClockConfig+0x260>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	e00f      	b.n	8003572 <HAL_RCC_ClockConfig+0xc6>
 8003552:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003556:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800355a:	fa93 f3a3 	rbit	r3, r3
 800355e:	667b      	str	r3, [r7, #100]	; 0x64
 8003560:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003564:	663b      	str	r3, [r7, #96]	; 0x60
 8003566:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003568:	fa93 f3a3 	rbit	r3, r3
 800356c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800356e:	4b67      	ldr	r3, [pc, #412]	; (800370c <HAL_RCC_ClockConfig+0x260>)
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003576:	65ba      	str	r2, [r7, #88]	; 0x58
 8003578:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800357a:	fa92 f2a2 	rbit	r2, r2
 800357e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003580:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003582:	fab2 f282 	clz	r2, r2
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	f042 0220 	orr.w	r2, r2, #32
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	f002 021f 	and.w	r2, r2, #31
 8003592:	2101      	movs	r1, #1
 8003594:	fa01 f202 	lsl.w	r2, r1, r2
 8003598:	4013      	ands	r3, r2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d17b      	bne.n	8003696 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e0f3      	b.n	800378a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d13c      	bne.n	8003624 <HAL_RCC_ClockConfig+0x178>
 80035aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035b2:	fa93 f3a3 	rbit	r3, r3
 80035b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80035b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ba:	fab3 f383 	clz	r3, r3
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	095b      	lsrs	r3, r3, #5
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d102      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x128>
 80035ce:	4b4f      	ldr	r3, [pc, #316]	; (800370c <HAL_RCC_ClockConfig+0x260>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	e00f      	b.n	80035f4 <HAL_RCC_ClockConfig+0x148>
 80035d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035dc:	fa93 f3a3 	rbit	r3, r3
 80035e0:	647b      	str	r3, [r7, #68]	; 0x44
 80035e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035e6:	643b      	str	r3, [r7, #64]	; 0x40
 80035e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ea:	fa93 f3a3 	rbit	r3, r3
 80035ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035f0:	4b46      	ldr	r3, [pc, #280]	; (800370c <HAL_RCC_ClockConfig+0x260>)
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035f8:	63ba      	str	r2, [r7, #56]	; 0x38
 80035fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035fc:	fa92 f2a2 	rbit	r2, r2
 8003600:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003604:	fab2 f282 	clz	r2, r2
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	f042 0220 	orr.w	r2, r2, #32
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	f002 021f 	and.w	r2, r2, #31
 8003614:	2101      	movs	r1, #1
 8003616:	fa01 f202 	lsl.w	r2, r1, r2
 800361a:	4013      	ands	r3, r2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d13a      	bne.n	8003696 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0b2      	b.n	800378a <HAL_RCC_ClockConfig+0x2de>
 8003624:	2302      	movs	r3, #2
 8003626:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362a:	fa93 f3a3 	rbit	r3, r3
 800362e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003632:	fab3 f383 	clz	r3, r3
 8003636:	b2db      	uxtb	r3, r3
 8003638:	095b      	lsrs	r3, r3, #5
 800363a:	b2db      	uxtb	r3, r3
 800363c:	f043 0301 	orr.w	r3, r3, #1
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b01      	cmp	r3, #1
 8003644:	d102      	bne.n	800364c <HAL_RCC_ClockConfig+0x1a0>
 8003646:	4b31      	ldr	r3, [pc, #196]	; (800370c <HAL_RCC_ClockConfig+0x260>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	e00d      	b.n	8003668 <HAL_RCC_ClockConfig+0x1bc>
 800364c:	2302      	movs	r3, #2
 800364e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003652:	fa93 f3a3 	rbit	r3, r3
 8003656:	627b      	str	r3, [r7, #36]	; 0x24
 8003658:	2302      	movs	r3, #2
 800365a:	623b      	str	r3, [r7, #32]
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	fa93 f3a3 	rbit	r3, r3
 8003662:	61fb      	str	r3, [r7, #28]
 8003664:	4b29      	ldr	r3, [pc, #164]	; (800370c <HAL_RCC_ClockConfig+0x260>)
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	2202      	movs	r2, #2
 800366a:	61ba      	str	r2, [r7, #24]
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	fa92 f2a2 	rbit	r2, r2
 8003672:	617a      	str	r2, [r7, #20]
  return result;
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	fab2 f282 	clz	r2, r2
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	f042 0220 	orr.w	r2, r2, #32
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	f002 021f 	and.w	r2, r2, #31
 8003686:	2101      	movs	r1, #1
 8003688:	fa01 f202 	lsl.w	r2, r1, r2
 800368c:	4013      	ands	r3, r2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e079      	b.n	800378a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003696:	4b1d      	ldr	r3, [pc, #116]	; (800370c <HAL_RCC_ClockConfig+0x260>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f023 0203 	bic.w	r2, r3, #3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	491a      	ldr	r1, [pc, #104]	; (800370c <HAL_RCC_ClockConfig+0x260>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036a8:	f7fd fcf8 	bl	800109c <HAL_GetTick>
 80036ac:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ae:	e00a      	b.n	80036c6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b0:	f7fd fcf4 	bl	800109c <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80036be:	4293      	cmp	r3, r2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e061      	b.n	800378a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c6:	4b11      	ldr	r3, [pc, #68]	; (800370c <HAL_RCC_ClockConfig+0x260>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f003 020c 	and.w	r2, r3, #12
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d1eb      	bne.n	80036b0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036d8:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <HAL_RCC_ClockConfig+0x25c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d214      	bcs.n	8003710 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e6:	4b08      	ldr	r3, [pc, #32]	; (8003708 <HAL_RCC_ClockConfig+0x25c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f023 0207 	bic.w	r2, r3, #7
 80036ee:	4906      	ldr	r1, [pc, #24]	; (8003708 <HAL_RCC_ClockConfig+0x25c>)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f6:	4b04      	ldr	r3, [pc, #16]	; (8003708 <HAL_RCC_ClockConfig+0x25c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d005      	beq.n	8003710 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e040      	b.n	800378a <HAL_RCC_ClockConfig+0x2de>
 8003708:	40022000 	.word	0x40022000
 800370c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800371c:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <HAL_RCC_ClockConfig+0x2e8>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	491a      	ldr	r1, [pc, #104]	; (8003794 <HAL_RCC_ClockConfig+0x2e8>)
 800372a:	4313      	orrs	r3, r2
 800372c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d009      	beq.n	800374e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800373a:	4b16      	ldr	r3, [pc, #88]	; (8003794 <HAL_RCC_ClockConfig+0x2e8>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	4912      	ldr	r1, [pc, #72]	; (8003794 <HAL_RCC_ClockConfig+0x2e8>)
 800374a:	4313      	orrs	r3, r2
 800374c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800374e:	f000 f829 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 8003752:	4601      	mov	r1, r0
 8003754:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <HAL_RCC_ClockConfig+0x2e8>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800375c:	22f0      	movs	r2, #240	; 0xf0
 800375e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	fa92 f2a2 	rbit	r2, r2
 8003766:	60fa      	str	r2, [r7, #12]
  return result;
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	fab2 f282 	clz	r2, r2
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	40d3      	lsrs	r3, r2
 8003772:	4a09      	ldr	r2, [pc, #36]	; (8003798 <HAL_RCC_ClockConfig+0x2ec>)
 8003774:	5cd3      	ldrb	r3, [r2, r3]
 8003776:	fa21 f303 	lsr.w	r3, r1, r3
 800377a:	4a08      	ldr	r2, [pc, #32]	; (800379c <HAL_RCC_ClockConfig+0x2f0>)
 800377c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800377e:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <HAL_RCC_ClockConfig+0x2f4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f7fd fc46 	bl	8001014 <HAL_InitTick>
  
  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3778      	adds	r7, #120	; 0x78
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40021000 	.word	0x40021000
 8003798:	08006440 	.word	0x08006440
 800379c:	200000b8 	.word	0x200000b8
 80037a0:	200000bc 	.word	0x200000bc

080037a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b08b      	sub	sp, #44	; 0x2c
 80037a8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	61fb      	str	r3, [r7, #28]
 80037ae:	2300      	movs	r3, #0
 80037b0:	61bb      	str	r3, [r7, #24]
 80037b2:	2300      	movs	r3, #0
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
 80037b6:	2300      	movs	r3, #0
 80037b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80037be:	4b29      	ldr	r3, [pc, #164]	; (8003864 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	f003 030c 	and.w	r3, r3, #12
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d002      	beq.n	80037d4 <HAL_RCC_GetSysClockFreq+0x30>
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d003      	beq.n	80037da <HAL_RCC_GetSysClockFreq+0x36>
 80037d2:	e03c      	b.n	800384e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037d4:	4b24      	ldr	r3, [pc, #144]	; (8003868 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037d6:	623b      	str	r3, [r7, #32]
      break;
 80037d8:	e03c      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80037e0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80037e4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	fa92 f2a2 	rbit	r2, r2
 80037ec:	607a      	str	r2, [r7, #4]
  return result;
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	fab2 f282 	clz	r2, r2
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	40d3      	lsrs	r3, r2
 80037f8:	4a1c      	ldr	r2, [pc, #112]	; (800386c <HAL_RCC_GetSysClockFreq+0xc8>)
 80037fa:	5cd3      	ldrb	r3, [r2, r3]
 80037fc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80037fe:	4b19      	ldr	r3, [pc, #100]	; (8003864 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	220f      	movs	r2, #15
 8003808:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	fa92 f2a2 	rbit	r2, r2
 8003810:	60fa      	str	r2, [r7, #12]
  return result;
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	fab2 f282 	clz	r2, r2
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	40d3      	lsrs	r3, r2
 800381c:	4a14      	ldr	r2, [pc, #80]	; (8003870 <HAL_RCC_GetSysClockFreq+0xcc>)
 800381e:	5cd3      	ldrb	r3, [r2, r3]
 8003820:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d008      	beq.n	800383e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800382c:	4a0e      	ldr	r2, [pc, #56]	; (8003868 <HAL_RCC_GetSysClockFreq+0xc4>)
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	fbb2 f2f3 	udiv	r2, r2, r3
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	fb02 f303 	mul.w	r3, r2, r3
 800383a:	627b      	str	r3, [r7, #36]	; 0x24
 800383c:	e004      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	4a0c      	ldr	r2, [pc, #48]	; (8003874 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003842:	fb02 f303 	mul.w	r3, r2, r3
 8003846:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	623b      	str	r3, [r7, #32]
      break;
 800384c:	e002      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800384e:	4b06      	ldr	r3, [pc, #24]	; (8003868 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003850:	623b      	str	r3, [r7, #32]
      break;
 8003852:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003854:	6a3b      	ldr	r3, [r7, #32]
}
 8003856:	4618      	mov	r0, r3
 8003858:	372c      	adds	r7, #44	; 0x2c
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	40021000 	.word	0x40021000
 8003868:	007a1200 	.word	0x007a1200
 800386c:	08006458 	.word	0x08006458
 8003870:	08006468 	.word	0x08006468
 8003874:	003d0900 	.word	0x003d0900

08003878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800387c:	4b03      	ldr	r3, [pc, #12]	; (800388c <HAL_RCC_GetHCLKFreq+0x14>)
 800387e:	681b      	ldr	r3, [r3, #0]
}
 8003880:	4618      	mov	r0, r3
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	200000b8 	.word	0x200000b8

08003890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003896:	f7ff ffef 	bl	8003878 <HAL_RCC_GetHCLKFreq>
 800389a:	4601      	mov	r1, r0
 800389c:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038a4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80038a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	fa92 f2a2 	rbit	r2, r2
 80038b0:	603a      	str	r2, [r7, #0]
  return result;
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	fab2 f282 	clz	r2, r2
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	40d3      	lsrs	r3, r2
 80038bc:	4a04      	ldr	r2, [pc, #16]	; (80038d0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80038be:	5cd3      	ldrb	r3, [r2, r3]
 80038c0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40021000 	.word	0x40021000
 80038d0:	08006450 	.word	0x08006450

080038d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80038da:	f7ff ffcd 	bl	8003878 <HAL_RCC_GetHCLKFreq>
 80038de:	4601      	mov	r1, r0
 80038e0:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80038e8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80038ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	fa92 f2a2 	rbit	r2, r2
 80038f4:	603a      	str	r2, [r7, #0]
  return result;
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	fab2 f282 	clz	r2, r2
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	40d3      	lsrs	r3, r2
 8003900:	4a04      	ldr	r2, [pc, #16]	; (8003914 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003902:	5cd3      	ldrb	r3, [r2, r3]
 8003904:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003908:	4618      	mov	r0, r3
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40021000 	.word	0x40021000
 8003914:	08006450 	.word	0x08006450

08003918 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b092      	sub	sp, #72	; 0x48
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003928:	2300      	movs	r3, #0
 800392a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 80d4 	beq.w	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800393c:	4b4e      	ldr	r3, [pc, #312]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10e      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003948:	4b4b      	ldr	r3, [pc, #300]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	4a4a      	ldr	r2, [pc, #296]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003952:	61d3      	str	r3, [r2, #28]
 8003954:	4b48      	ldr	r3, [pc, #288]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003960:	2301      	movs	r3, #1
 8003962:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003966:	4b45      	ldr	r3, [pc, #276]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396e:	2b00      	cmp	r3, #0
 8003970:	d118      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003972:	4b42      	ldr	r3, [pc, #264]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a41      	ldr	r2, [pc, #260]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800397c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800397e:	f7fd fb8d 	bl	800109c <HAL_GetTick>
 8003982:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003984:	e008      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003986:	f7fd fb89 	bl	800109c <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b64      	cmp	r3, #100	; 0x64
 8003992:	d901      	bls.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e14b      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003998:	4b38      	ldr	r3, [pc, #224]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0f0      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039a4:	4b34      	ldr	r3, [pc, #208]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 8084 	beq.w	8003abe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d07c      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039c4:	4b2c      	ldr	r3, [pc, #176]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d6:	fa93 f3a3 	rbit	r3, r3
 80039da:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80039dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039de:	fab3 f383 	clz	r3, r3
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	461a      	mov	r2, r3
 80039e6:	4b26      	ldr	r3, [pc, #152]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039e8:	4413      	add	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	461a      	mov	r2, r3
 80039ee:	2301      	movs	r3, #1
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fa:	fa93 f3a3 	rbit	r3, r3
 80039fe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a02:	fab3 f383 	clz	r3, r3
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	461a      	mov	r2, r3
 8003a0a:	4b1d      	ldr	r3, [pc, #116]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a0c:	4413      	add	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	461a      	mov	r2, r3
 8003a12:	2300      	movs	r3, #0
 8003a14:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a16:	4a18      	ldr	r2, [pc, #96]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a1a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d04b      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a26:	f7fd fb39 	bl	800109c <HAL_GetTick>
 8003a2a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a2c:	e00a      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a2e:	f7fd fb35 	bl	800109c <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e0f5      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003a44:	2302      	movs	r3, #2
 8003a46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4a:	fa93 f3a3 	rbit	r3, r3
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a50:	2302      	movs	r3, #2
 8003a52:	623b      	str	r3, [r7, #32]
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	fa93 f3a3 	rbit	r3, r3
 8003a5a:	61fb      	str	r3, [r7, #28]
  return result;
 8003a5c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a5e:	fab3 f383 	clz	r3, r3
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	095b      	lsrs	r3, r3, #5
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	f043 0302 	orr.w	r3, r3, #2
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d108      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003a72:	4b01      	ldr	r3, [pc, #4]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	e00d      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	40007000 	.word	0x40007000
 8003a80:	10908100 	.word	0x10908100
 8003a84:	2302      	movs	r3, #2
 8003a86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	fa93 f3a3 	rbit	r3, r3
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	4b69      	ldr	r3, [pc, #420]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	2202      	movs	r2, #2
 8003a96:	613a      	str	r2, [r7, #16]
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	fa92 f2a2 	rbit	r2, r2
 8003a9e:	60fa      	str	r2, [r7, #12]
  return result;
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	fab2 f282 	clz	r2, r2
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	f002 021f 	and.w	r2, r2, #31
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ab8:	4013      	ands	r3, r2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0b7      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003abe:	4b5e      	ldr	r3, [pc, #376]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	495b      	ldr	r1, [pc, #364]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ad0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d105      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad8:	4b57      	ldr	r3, [pc, #348]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	4a56      	ldr	r2, [pc, #344]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ade:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ae2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d008      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003af0:	4b51      	ldr	r3, [pc, #324]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af4:	f023 0203 	bic.w	r2, r3, #3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	494e      	ldr	r1, [pc, #312]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0320 	and.w	r3, r3, #32
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d008      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b0e:	4b4a      	ldr	r3, [pc, #296]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	f023 0210 	bic.w	r2, r3, #16
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	4947      	ldr	r1, [pc, #284]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003b2c:	4b42      	ldr	r3, [pc, #264]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b38:	493f      	ldr	r1, [pc, #252]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d008      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b4a:	4b3b      	ldr	r3, [pc, #236]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	f023 0220 	bic.w	r2, r3, #32
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	4938      	ldr	r1, [pc, #224]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d008      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b68:	4b33      	ldr	r3, [pc, #204]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	4930      	ldr	r1, [pc, #192]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d008      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b86:	4b2c      	ldr	r3, [pc, #176]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	4929      	ldr	r1, [pc, #164]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d008      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003ba4:	4b24      	ldr	r3, [pc, #144]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	4921      	ldr	r1, [pc, #132]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d008      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003bc2:	4b1d      	ldr	r3, [pc, #116]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	491a      	ldr	r1, [pc, #104]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003be0:	4b15      	ldr	r3, [pc, #84]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	4912      	ldr	r1, [pc, #72]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d008      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003bfe:	4b0e      	ldr	r3, [pc, #56]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	490b      	ldr	r1, [pc, #44]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003c1c:	4b06      	ldr	r3, [pc, #24]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c28:	4903      	ldr	r1, [pc, #12]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3748      	adds	r7, #72	; 0x48
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40021000 	.word	0x40021000

08003c3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e09d      	b.n	8003d8a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d108      	bne.n	8003c68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c5e:	d009      	beq.n	8003c74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	61da      	str	r2, [r3, #28]
 8003c66:	e005      	b.n	8003c74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fd f814 	bl	8000cbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003caa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cb4:	d902      	bls.n	8003cbc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	e002      	b.n	8003cc2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cc0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003cca:	d007      	beq.n	8003cdc <HAL_SPI_Init+0xa0>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cd4:	d002      	beq.n	8003cdc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d1e:	ea42 0103 	orr.w	r1, r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	0c1b      	lsrs	r3, r3, #16
 8003d38:	f003 0204 	and.w	r2, r3, #4
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	f003 0310 	and.w	r3, r3, #16
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003d58:	ea42 0103 	orr.w	r1, r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69da      	ldr	r2, [r3, #28]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b088      	sub	sp, #32
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	60f8      	str	r0, [r7, #12]
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	603b      	str	r3, [r7, #0]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_SPI_Transmit+0x22>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e158      	b.n	8004066 <HAL_SPI_Transmit+0x2d4>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dbc:	f7fd f96e 	bl	800109c <HAL_GetTick>
 8003dc0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003dc2:	88fb      	ldrh	r3, [r7, #6]
 8003dc4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d002      	beq.n	8003dd8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003dd6:	e13d      	b.n	8004054 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <HAL_SPI_Transmit+0x52>
 8003dde:	88fb      	ldrh	r3, [r7, #6]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d102      	bne.n	8003dea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003de8:	e134      	b.n	8004054 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2203      	movs	r2, #3
 8003dee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	88fa      	ldrh	r2, [r7, #6]
 8003e02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	88fa      	ldrh	r2, [r7, #6]
 8003e08:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e34:	d10f      	bne.n	8003e56 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e60:	2b40      	cmp	r3, #64	; 0x40
 8003e62:	d007      	beq.n	8003e74 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e7c:	d94b      	bls.n	8003f16 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <HAL_SPI_Transmit+0xfa>
 8003e86:	8afb      	ldrh	r3, [r7, #22]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d13e      	bne.n	8003f0a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	881a      	ldrh	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9c:	1c9a      	adds	r2, r3, #2
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003eb0:	e02b      	b.n	8003f0a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d112      	bne.n	8003ee6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec4:	881a      	ldrh	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed0:	1c9a      	adds	r2, r3, #2
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ee4:	e011      	b.n	8003f0a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ee6:	f7fd f8d9 	bl	800109c <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d803      	bhi.n	8003efe <HAL_SPI_Transmit+0x16c>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efc:	d102      	bne.n	8003f04 <HAL_SPI_Transmit+0x172>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d102      	bne.n	8003f0a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f08:	e0a4      	b.n	8004054 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1ce      	bne.n	8003eb2 <HAL_SPI_Transmit+0x120>
 8003f14:	e07c      	b.n	8004010 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <HAL_SPI_Transmit+0x192>
 8003f1e:	8afb      	ldrh	r3, [r7, #22]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d170      	bne.n	8004006 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d912      	bls.n	8003f54 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f32:	881a      	ldrh	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3e:	1c9a      	adds	r2, r3, #2
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	3b02      	subs	r3, #2
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f52:	e058      	b.n	8004006 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	330c      	adds	r3, #12
 8003f5e:	7812      	ldrb	r2, [r2, #0]
 8003f60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003f7a:	e044      	b.n	8004006 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d12b      	bne.n	8003fe2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d912      	bls.n	8003fba <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f98:	881a      	ldrh	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa4:	1c9a      	adds	r2, r3, #2
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3b02      	subs	r3, #2
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fb8:	e025      	b.n	8004006 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	330c      	adds	r3, #12
 8003fc4:	7812      	ldrb	r2, [r2, #0]
 8003fc6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fe0:	e011      	b.n	8004006 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fe2:	f7fd f85b 	bl	800109c <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d803      	bhi.n	8003ffa <HAL_SPI_Transmit+0x268>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff8:	d102      	bne.n	8004000 <HAL_SPI_Transmit+0x26e>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d102      	bne.n	8004006 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004004:	e026      	b.n	8004054 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800400a:	b29b      	uxth	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1b5      	bne.n	8003f7c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	6839      	ldr	r1, [r7, #0]
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 fce3 	bl	80049e0 <SPI_EndRxTxTransaction>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10a      	bne.n	8004044 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800402e:	2300      	movs	r3, #0
 8004030:	613b      	str	r3, [r7, #16]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	613b      	str	r3, [r7, #16]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	77fb      	strb	r3, [r7, #31]
 8004050:	e000      	b.n	8004054 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004052:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004064:	7ffb      	ldrb	r3, [r7, #31]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3720      	adds	r7, #32
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b088      	sub	sp, #32
 8004072:	af02      	add	r7, sp, #8
 8004074:	60f8      	str	r0, [r7, #12]
 8004076:	60b9      	str	r1, [r7, #8]
 8004078:	603b      	str	r3, [r7, #0]
 800407a:	4613      	mov	r3, r2
 800407c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800407e:	2300      	movs	r3, #0
 8004080:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800408a:	d112      	bne.n	80040b2 <HAL_SPI_Receive+0x44>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10e      	bne.n	80040b2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2204      	movs	r2, #4
 8004098:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800409c:	88fa      	ldrh	r2, [r7, #6]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	4613      	mov	r3, r2
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	68b9      	ldr	r1, [r7, #8]
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 f910 	bl	80042ce <HAL_SPI_TransmitReceive>
 80040ae:	4603      	mov	r3, r0
 80040b0:	e109      	b.n	80042c6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d101      	bne.n	80040c0 <HAL_SPI_Receive+0x52>
 80040bc:	2302      	movs	r3, #2
 80040be:	e102      	b.n	80042c6 <HAL_SPI_Receive+0x258>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040c8:	f7fc ffe8 	bl	800109c <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d002      	beq.n	80040e0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80040da:	2302      	movs	r3, #2
 80040dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040de:	e0e9      	b.n	80042b4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <HAL_SPI_Receive+0x7e>
 80040e6:	88fb      	ldrh	r3, [r7, #6]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d102      	bne.n	80040f2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040f0:	e0e0      	b.n	80042b4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2204      	movs	r2, #4
 80040f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	88fa      	ldrh	r2, [r7, #6]
 800410a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	88fa      	ldrh	r2, [r7, #6]
 8004112:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800413c:	d908      	bls.n	8004150 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800414c:	605a      	str	r2, [r3, #4]
 800414e:	e007      	b.n	8004160 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800415e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004168:	d10f      	bne.n	800418a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004178:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004188:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004194:	2b40      	cmp	r3, #64	; 0x40
 8004196:	d007      	beq.n	80041a8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041a6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041b0:	d867      	bhi.n	8004282 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80041b2:	e030      	b.n	8004216 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d117      	bne.n	80041f2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f103 020c 	add.w	r2, r3, #12
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	7812      	ldrb	r2, [r2, #0]
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	3b01      	subs	r3, #1
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80041f0:	e011      	b.n	8004216 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041f2:	f7fc ff53 	bl	800109c <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d803      	bhi.n	800420a <HAL_SPI_Receive+0x19c>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004208:	d102      	bne.n	8004210 <HAL_SPI_Receive+0x1a2>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d102      	bne.n	8004216 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004214:	e04e      	b.n	80042b4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1c8      	bne.n	80041b4 <HAL_SPI_Receive+0x146>
 8004222:	e034      	b.n	800428e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b01      	cmp	r3, #1
 8004230:	d115      	bne.n	800425e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423c:	b292      	uxth	r2, r2
 800423e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004244:	1c9a      	adds	r2, r3, #2
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004250:	b29b      	uxth	r3, r3
 8004252:	3b01      	subs	r3, #1
 8004254:	b29a      	uxth	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800425c:	e011      	b.n	8004282 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800425e:	f7fc ff1d 	bl	800109c <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d803      	bhi.n	8004276 <HAL_SPI_Receive+0x208>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004274:	d102      	bne.n	800427c <HAL_SPI_Receive+0x20e>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d102      	bne.n	8004282 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004280:	e018      	b.n	80042b4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004288:	b29b      	uxth	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1ca      	bne.n	8004224 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	6839      	ldr	r1, [r7, #0]
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 fb4c 	bl	8004930 <SPI_EndRxTransaction>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2220      	movs	r2, #32
 80042a2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d002      	beq.n	80042b2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	75fb      	strb	r3, [r7, #23]
 80042b0:	e000      	b.n	80042b4 <HAL_SPI_Receive+0x246>
  }

error :
 80042b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80042c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b08a      	sub	sp, #40	; 0x28
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	60f8      	str	r0, [r7, #12]
 80042d6:	60b9      	str	r1, [r7, #8]
 80042d8:	607a      	str	r2, [r7, #4]
 80042da:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80042dc:	2301      	movs	r3, #1
 80042de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d101      	bne.n	80042f4 <HAL_SPI_TransmitReceive+0x26>
 80042f0:	2302      	movs	r3, #2
 80042f2:	e1fb      	b.n	80046ec <HAL_SPI_TransmitReceive+0x41e>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042fc:	f7fc fece 	bl	800109c <HAL_GetTick>
 8004300:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004308:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004310:	887b      	ldrh	r3, [r7, #2]
 8004312:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004314:	887b      	ldrh	r3, [r7, #2]
 8004316:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004318:	7efb      	ldrb	r3, [r7, #27]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d00e      	beq.n	800433c <HAL_SPI_TransmitReceive+0x6e>
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004324:	d106      	bne.n	8004334 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d102      	bne.n	8004334 <HAL_SPI_TransmitReceive+0x66>
 800432e:	7efb      	ldrb	r3, [r7, #27]
 8004330:	2b04      	cmp	r3, #4
 8004332:	d003      	beq.n	800433c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004334:	2302      	movs	r3, #2
 8004336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800433a:	e1cd      	b.n	80046d8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d005      	beq.n	800434e <HAL_SPI_TransmitReceive+0x80>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <HAL_SPI_TransmitReceive+0x80>
 8004348:	887b      	ldrh	r3, [r7, #2]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d103      	bne.n	8004356 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004354:	e1c0      	b.n	80046d8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b04      	cmp	r3, #4
 8004360:	d003      	beq.n	800436a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2205      	movs	r2, #5
 8004366:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	887a      	ldrh	r2, [r7, #2]
 800437a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	887a      	ldrh	r2, [r7, #2]
 8004382:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	887a      	ldrh	r2, [r7, #2]
 8004390:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	887a      	ldrh	r2, [r7, #2]
 8004396:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043ac:	d802      	bhi.n	80043b4 <HAL_SPI_TransmitReceive+0xe6>
 80043ae:	8a3b      	ldrh	r3, [r7, #16]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d908      	bls.n	80043c6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043c2:	605a      	str	r2, [r3, #4]
 80043c4:	e007      	b.n	80043d6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043d4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e0:	2b40      	cmp	r3, #64	; 0x40
 80043e2:	d007      	beq.n	80043f4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043fc:	d97c      	bls.n	80044f8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <HAL_SPI_TransmitReceive+0x13e>
 8004406:	8a7b      	ldrh	r3, [r7, #18]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d169      	bne.n	80044e0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	881a      	ldrh	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441c:	1c9a      	adds	r2, r3, #2
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004426:	b29b      	uxth	r3, r3
 8004428:	3b01      	subs	r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004430:	e056      	b.n	80044e0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b02      	cmp	r3, #2
 800443e:	d11b      	bne.n	8004478 <HAL_SPI_TransmitReceive+0x1aa>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d016      	beq.n	8004478 <HAL_SPI_TransmitReceive+0x1aa>
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	2b01      	cmp	r3, #1
 800444e:	d113      	bne.n	8004478 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004454:	881a      	ldrh	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	1c9a      	adds	r2, r3, #2
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800446a:	b29b      	uxth	r3, r3
 800446c:	3b01      	subs	r3, #1
 800446e:	b29a      	uxth	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b01      	cmp	r3, #1
 8004484:	d11c      	bne.n	80044c0 <HAL_SPI_TransmitReceive+0x1f2>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d016      	beq.n	80044c0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	b292      	uxth	r2, r2
 800449e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a4:	1c9a      	adds	r2, r3, #2
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044bc:	2301      	movs	r3, #1
 80044be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80044c0:	f7fc fdec 	bl	800109c <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d807      	bhi.n	80044e0 <HAL_SPI_TransmitReceive+0x212>
 80044d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d6:	d003      	beq.n	80044e0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80044de:	e0fb      	b.n	80046d8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1a3      	bne.n	8004432 <HAL_SPI_TransmitReceive+0x164>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d19d      	bne.n	8004432 <HAL_SPI_TransmitReceive+0x164>
 80044f6:	e0df      	b.n	80046b8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_SPI_TransmitReceive+0x23a>
 8004500:	8a7b      	ldrh	r3, [r7, #18]
 8004502:	2b01      	cmp	r3, #1
 8004504:	f040 80cb 	bne.w	800469e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800450c:	b29b      	uxth	r3, r3
 800450e:	2b01      	cmp	r3, #1
 8004510:	d912      	bls.n	8004538 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	881a      	ldrh	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004522:	1c9a      	adds	r2, r3, #2
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800452c:	b29b      	uxth	r3, r3
 800452e:	3b02      	subs	r3, #2
 8004530:	b29a      	uxth	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004536:	e0b2      	b.n	800469e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	330c      	adds	r3, #12
 8004542:	7812      	ldrb	r2, [r2, #0]
 8004544:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800455e:	e09e      	b.n	800469e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b02      	cmp	r3, #2
 800456c:	d134      	bne.n	80045d8 <HAL_SPI_TransmitReceive+0x30a>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004572:	b29b      	uxth	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d02f      	beq.n	80045d8 <HAL_SPI_TransmitReceive+0x30a>
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	2b01      	cmp	r3, #1
 800457c:	d12c      	bne.n	80045d8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004582:	b29b      	uxth	r3, r3
 8004584:	2b01      	cmp	r3, #1
 8004586:	d912      	bls.n	80045ae <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	881a      	ldrh	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004598:	1c9a      	adds	r2, r3, #2
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	3b02      	subs	r3, #2
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045ac:	e012      	b.n	80045d4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	330c      	adds	r3, #12
 80045b8:	7812      	ldrb	r2, [r2, #0]
 80045ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d148      	bne.n	8004678 <HAL_SPI_TransmitReceive+0x3aa>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d042      	beq.n	8004678 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d923      	bls.n	8004646 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68da      	ldr	r2, [r3, #12]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	b292      	uxth	r2, r2
 800460a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004610:	1c9a      	adds	r2, r3, #2
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b02      	subs	r3, #2
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800462e:	b29b      	uxth	r3, r3
 8004630:	2b01      	cmp	r3, #1
 8004632:	d81f      	bhi.n	8004674 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004642:	605a      	str	r2, [r3, #4]
 8004644:	e016      	b.n	8004674 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f103 020c 	add.w	r2, r3, #12
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	7812      	ldrb	r2, [r2, #0]
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004674:	2301      	movs	r3, #1
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004678:	f7fc fd10 	bl	800109c <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004684:	429a      	cmp	r2, r3
 8004686:	d803      	bhi.n	8004690 <HAL_SPI_TransmitReceive+0x3c2>
 8004688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468e:	d102      	bne.n	8004696 <HAL_SPI_TransmitReceive+0x3c8>
 8004690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004692:	2b00      	cmp	r3, #0
 8004694:	d103      	bne.n	800469e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800469c:	e01c      	b.n	80046d8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f47f af5b 	bne.w	8004560 <HAL_SPI_TransmitReceive+0x292>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f47f af54 	bne.w	8004560 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046b8:	69fa      	ldr	r2, [r7, #28]
 80046ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 f98f 	bl	80049e0 <SPI_EndRxTxTransaction>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d006      	beq.n	80046d6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2220      	movs	r2, #32
 80046d2:	661a      	str	r2, [r3, #96]	; 0x60
 80046d4:	e000      	b.n	80046d8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80046d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80046e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3728      	adds	r7, #40	; 0x28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	603b      	str	r3, [r7, #0]
 8004700:	4613      	mov	r3, r2
 8004702:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004704:	f7fc fcca 	bl	800109c <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470c:	1a9b      	subs	r3, r3, r2
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	4413      	add	r3, r2
 8004712:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004714:	f7fc fcc2 	bl	800109c <HAL_GetTick>
 8004718:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800471a:	4b39      	ldr	r3, [pc, #228]	; (8004800 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	015b      	lsls	r3, r3, #5
 8004720:	0d1b      	lsrs	r3, r3, #20
 8004722:	69fa      	ldr	r2, [r7, #28]
 8004724:	fb02 f303 	mul.w	r3, r2, r3
 8004728:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800472a:	e054      	b.n	80047d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004732:	d050      	beq.n	80047d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004734:	f7fc fcb2 	bl	800109c <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	429a      	cmp	r2, r3
 8004742:	d902      	bls.n	800474a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d13d      	bne.n	80047c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004758:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004762:	d111      	bne.n	8004788 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800476c:	d004      	beq.n	8004778 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004776:	d107      	bne.n	8004788 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004786:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004790:	d10f      	bne.n	80047b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e017      	b.n	80047f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	4013      	ands	r3, r2
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	bf0c      	ite	eq
 80047e6:	2301      	moveq	r3, #1
 80047e8:	2300      	movne	r3, #0
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	461a      	mov	r2, r3
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d19b      	bne.n	800472c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3720      	adds	r7, #32
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	200000b8 	.word	0x200000b8

08004804 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b08a      	sub	sp, #40	; 0x28
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
 8004810:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004812:	2300      	movs	r3, #0
 8004814:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004816:	f7fc fc41 	bl	800109c <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481e:	1a9b      	subs	r3, r3, r2
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	4413      	add	r3, r2
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004826:	f7fc fc39 	bl	800109c <HAL_GetTick>
 800482a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	330c      	adds	r3, #12
 8004832:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004834:	4b3d      	ldr	r3, [pc, #244]	; (800492c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	4613      	mov	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	00da      	lsls	r2, r3, #3
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	0d1b      	lsrs	r3, r3, #20
 8004844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004846:	fb02 f303 	mul.w	r3, r2, r3
 800484a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800484c:	e060      	b.n	8004910 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004854:	d107      	bne.n	8004866 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d104      	bne.n	8004866 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	b2db      	uxtb	r3, r3
 8004862:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004864:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486c:	d050      	beq.n	8004910 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800486e:	f7fc fc15 	bl	800109c <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800487a:	429a      	cmp	r2, r3
 800487c:	d902      	bls.n	8004884 <SPI_WaitFifoStateUntilTimeout+0x80>
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	2b00      	cmp	r3, #0
 8004882:	d13d      	bne.n	8004900 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004892:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800489c:	d111      	bne.n	80048c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048a6:	d004      	beq.n	80048b2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048b0:	d107      	bne.n	80048c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ca:	d10f      	bne.n	80048ec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e010      	b.n	8004922 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	3b01      	subs	r3, #1
 800490e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	4013      	ands	r3, r2
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	429a      	cmp	r2, r3
 800491e:	d196      	bne.n	800484e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3728      	adds	r7, #40	; 0x28
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	200000b8 	.word	0x200000b8

08004930 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af02      	add	r7, sp, #8
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004944:	d111      	bne.n	800496a <SPI_EndRxTransaction+0x3a>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800494e:	d004      	beq.n	800495a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004958:	d107      	bne.n	800496a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004968:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2200      	movs	r2, #0
 8004972:	2180      	movs	r1, #128	; 0x80
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f7ff febd 	bl	80046f4 <SPI_WaitFlagStateUntilTimeout>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d007      	beq.n	8004990 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004984:	f043 0220 	orr.w	r2, r3, #32
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e023      	b.n	80049d8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004998:	d11d      	bne.n	80049d6 <SPI_EndRxTransaction+0xa6>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049a2:	d004      	beq.n	80049ae <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ac:	d113      	bne.n	80049d6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f7ff ff22 	bl	8004804 <SPI_WaitFifoStateUntilTimeout>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d007      	beq.n	80049d6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ca:	f043 0220 	orr.w	r2, r3, #32
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e000      	b.n	80049d8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af02      	add	r7, sp, #8
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f7ff ff03 	bl	8004804 <SPI_WaitFifoStateUntilTimeout>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d007      	beq.n	8004a14 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a08:	f043 0220 	orr.w	r2, r3, #32
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e027      	b.n	8004a64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	2180      	movs	r1, #128	; 0x80
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f7ff fe68 	bl	80046f4 <SPI_WaitFlagStateUntilTimeout>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d007      	beq.n	8004a3a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a2e:	f043 0220 	orr.w	r2, r3, #32
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e014      	b.n	8004a64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f7ff fedc 	bl	8004804 <SPI_WaitFifoStateUntilTimeout>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d007      	beq.n	8004a62 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a56:	f043 0220 	orr.w	r2, r3, #32
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e000      	b.n	8004a64 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e040      	b.n	8004b00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d106      	bne.n	8004a94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7fc f958 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2224      	movs	r2, #36	; 0x24
 8004a98:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 0201 	bic.w	r2, r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f82c 	bl	8004b08 <UART_SetConfig>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e022      	b.n	8004b00 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d002      	beq.n	8004ac8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f956 	bl	8004d74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ad6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689a      	ldr	r2, [r3, #8]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ae6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0201 	orr.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f9dd 	bl	8004eb8 <UART_CheckIdleState>
 8004afe:	4603      	mov	r3, r0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b10:	2300      	movs	r3, #0
 8004b12:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	4b8a      	ldr	r3, [pc, #552]	; (8004d5c <UART_SetConfig+0x254>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6812      	ldr	r2, [r2, #0]
 8004b3a:	6979      	ldr	r1, [r7, #20]
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a78      	ldr	r2, [pc, #480]	; (8004d60 <UART_SetConfig+0x258>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d120      	bne.n	8004bc6 <UART_SetConfig+0xbe>
 8004b84:	4b77      	ldr	r3, [pc, #476]	; (8004d64 <UART_SetConfig+0x25c>)
 8004b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b88:	f003 0303 	and.w	r3, r3, #3
 8004b8c:	2b03      	cmp	r3, #3
 8004b8e:	d817      	bhi.n	8004bc0 <UART_SetConfig+0xb8>
 8004b90:	a201      	add	r2, pc, #4	; (adr r2, 8004b98 <UART_SetConfig+0x90>)
 8004b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b96:	bf00      	nop
 8004b98:	08004ba9 	.word	0x08004ba9
 8004b9c:	08004bb5 	.word	0x08004bb5
 8004ba0:	08004bbb 	.word	0x08004bbb
 8004ba4:	08004baf 	.word	0x08004baf
 8004ba8:	2300      	movs	r3, #0
 8004baa:	77fb      	strb	r3, [r7, #31]
 8004bac:	e01d      	b.n	8004bea <UART_SetConfig+0xe2>
 8004bae:	2302      	movs	r3, #2
 8004bb0:	77fb      	strb	r3, [r7, #31]
 8004bb2:	e01a      	b.n	8004bea <UART_SetConfig+0xe2>
 8004bb4:	2304      	movs	r3, #4
 8004bb6:	77fb      	strb	r3, [r7, #31]
 8004bb8:	e017      	b.n	8004bea <UART_SetConfig+0xe2>
 8004bba:	2308      	movs	r3, #8
 8004bbc:	77fb      	strb	r3, [r7, #31]
 8004bbe:	e014      	b.n	8004bea <UART_SetConfig+0xe2>
 8004bc0:	2310      	movs	r3, #16
 8004bc2:	77fb      	strb	r3, [r7, #31]
 8004bc4:	e011      	b.n	8004bea <UART_SetConfig+0xe2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a67      	ldr	r2, [pc, #412]	; (8004d68 <UART_SetConfig+0x260>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d102      	bne.n	8004bd6 <UART_SetConfig+0xce>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	77fb      	strb	r3, [r7, #31]
 8004bd4:	e009      	b.n	8004bea <UART_SetConfig+0xe2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a64      	ldr	r2, [pc, #400]	; (8004d6c <UART_SetConfig+0x264>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d102      	bne.n	8004be6 <UART_SetConfig+0xde>
 8004be0:	2300      	movs	r3, #0
 8004be2:	77fb      	strb	r3, [r7, #31]
 8004be4:	e001      	b.n	8004bea <UART_SetConfig+0xe2>
 8004be6:	2310      	movs	r3, #16
 8004be8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bf2:	d15b      	bne.n	8004cac <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004bf4:	7ffb      	ldrb	r3, [r7, #31]
 8004bf6:	2b08      	cmp	r3, #8
 8004bf8:	d827      	bhi.n	8004c4a <UART_SetConfig+0x142>
 8004bfa:	a201      	add	r2, pc, #4	; (adr r2, 8004c00 <UART_SetConfig+0xf8>)
 8004bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c00:	08004c25 	.word	0x08004c25
 8004c04:	08004c2d 	.word	0x08004c2d
 8004c08:	08004c35 	.word	0x08004c35
 8004c0c:	08004c4b 	.word	0x08004c4b
 8004c10:	08004c3b 	.word	0x08004c3b
 8004c14:	08004c4b 	.word	0x08004c4b
 8004c18:	08004c4b 	.word	0x08004c4b
 8004c1c:	08004c4b 	.word	0x08004c4b
 8004c20:	08004c43 	.word	0x08004c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c24:	f7fe fe34 	bl	8003890 <HAL_RCC_GetPCLK1Freq>
 8004c28:	61b8      	str	r0, [r7, #24]
        break;
 8004c2a:	e013      	b.n	8004c54 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c2c:	f7fe fe52 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 8004c30:	61b8      	str	r0, [r7, #24]
        break;
 8004c32:	e00f      	b.n	8004c54 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c34:	4b4e      	ldr	r3, [pc, #312]	; (8004d70 <UART_SetConfig+0x268>)
 8004c36:	61bb      	str	r3, [r7, #24]
        break;
 8004c38:	e00c      	b.n	8004c54 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c3a:	f7fe fdb3 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 8004c3e:	61b8      	str	r0, [r7, #24]
        break;
 8004c40:	e008      	b.n	8004c54 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c46:	61bb      	str	r3, [r7, #24]
        break;
 8004c48:	e004      	b.n	8004c54 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	77bb      	strb	r3, [r7, #30]
        break;
 8004c52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d074      	beq.n	8004d44 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	005a      	lsls	r2, r3, #1
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	085b      	lsrs	r3, r3, #1
 8004c64:	441a      	add	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	2b0f      	cmp	r3, #15
 8004c76:	d916      	bls.n	8004ca6 <UART_SetConfig+0x19e>
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c7e:	d212      	bcs.n	8004ca6 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	f023 030f 	bic.w	r3, r3, #15
 8004c88:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	085b      	lsrs	r3, r3, #1
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	89fb      	ldrh	r3, [r7, #14]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	89fa      	ldrh	r2, [r7, #14]
 8004ca2:	60da      	str	r2, [r3, #12]
 8004ca4:	e04e      	b.n	8004d44 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	77bb      	strb	r3, [r7, #30]
 8004caa:	e04b      	b.n	8004d44 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cac:	7ffb      	ldrb	r3, [r7, #31]
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d827      	bhi.n	8004d02 <UART_SetConfig+0x1fa>
 8004cb2:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <UART_SetConfig+0x1b0>)
 8004cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb8:	08004cdd 	.word	0x08004cdd
 8004cbc:	08004ce5 	.word	0x08004ce5
 8004cc0:	08004ced 	.word	0x08004ced
 8004cc4:	08004d03 	.word	0x08004d03
 8004cc8:	08004cf3 	.word	0x08004cf3
 8004ccc:	08004d03 	.word	0x08004d03
 8004cd0:	08004d03 	.word	0x08004d03
 8004cd4:	08004d03 	.word	0x08004d03
 8004cd8:	08004cfb 	.word	0x08004cfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cdc:	f7fe fdd8 	bl	8003890 <HAL_RCC_GetPCLK1Freq>
 8004ce0:	61b8      	str	r0, [r7, #24]
        break;
 8004ce2:	e013      	b.n	8004d0c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ce4:	f7fe fdf6 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 8004ce8:	61b8      	str	r0, [r7, #24]
        break;
 8004cea:	e00f      	b.n	8004d0c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cec:	4b20      	ldr	r3, [pc, #128]	; (8004d70 <UART_SetConfig+0x268>)
 8004cee:	61bb      	str	r3, [r7, #24]
        break;
 8004cf0:	e00c      	b.n	8004d0c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cf2:	f7fe fd57 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 8004cf6:	61b8      	str	r0, [r7, #24]
        break;
 8004cf8:	e008      	b.n	8004d0c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cfe:	61bb      	str	r3, [r7, #24]
        break;
 8004d00:	e004      	b.n	8004d0c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	77bb      	strb	r3, [r7, #30]
        break;
 8004d0a:	bf00      	nop
    }

    if (pclk != 0U)
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d018      	beq.n	8004d44 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	085a      	lsrs	r2, r3, #1
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	441a      	add	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	2b0f      	cmp	r3, #15
 8004d2c:	d908      	bls.n	8004d40 <UART_SetConfig+0x238>
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d34:	d204      	bcs.n	8004d40 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	60da      	str	r2, [r3, #12]
 8004d3e:	e001      	b.n	8004d44 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004d50:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3720      	adds	r7, #32
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	efff69f3 	.word	0xefff69f3
 8004d60:	40013800 	.word	0x40013800
 8004d64:	40021000 	.word	0x40021000
 8004d68:	40004400 	.word	0x40004400
 8004d6c:	40004800 	.word	0x40004800
 8004d70:	007a1200 	.word	0x007a1200

08004d74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00a      	beq.n	8004d9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00a      	beq.n	8004dc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	f003 0304 	and.w	r3, r3, #4
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00a      	beq.n	8004de2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00a      	beq.n	8004e04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	f003 0310 	and.w	r3, r3, #16
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00a      	beq.n	8004e26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	f003 0320 	and.w	r3, r3, #32
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	430a      	orrs	r2, r1
 8004e46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d01a      	beq.n	8004e8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e72:	d10a      	bne.n	8004e8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	605a      	str	r2, [r3, #4]
  }
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af02      	add	r7, sp, #8
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ec8:	f7fc f8e8 	bl	800109c <HAL_GetTick>
 8004ecc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	d10e      	bne.n	8004efa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004edc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f82d 	bl	8004f4a <UART_WaitOnFlagUntilTimeout>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e023      	b.n	8004f42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0304 	and.w	r3, r3, #4
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d10e      	bne.n	8004f26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f817 	bl	8004f4a <UART_WaitOnFlagUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e00d      	b.n	8004f42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b09c      	sub	sp, #112	; 0x70
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	60f8      	str	r0, [r7, #12]
 8004f52:	60b9      	str	r1, [r7, #8]
 8004f54:	603b      	str	r3, [r7, #0]
 8004f56:	4613      	mov	r3, r2
 8004f58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f5a:	e0a5      	b.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f62:	f000 80a1 	beq.w	80050a8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f66:	f7fc f899 	bl	800109c <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d302      	bcc.n	8004f7c <UART_WaitOnFlagUntilTimeout+0x32>
 8004f76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d13e      	bne.n	8004ffa <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f84:	e853 3f00 	ldrex	r3, [r3]
 8004f88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f90:	667b      	str	r3, [r7, #100]	; 0x64
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	461a      	mov	r2, r3
 8004f98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f9c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004fa0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004fa2:	e841 2300 	strex	r3, r2, [r1]
 8004fa6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1e6      	bne.n	8004f7c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	3308      	adds	r3, #8
 8004fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb8:	e853 3f00 	ldrex	r3, [r3]
 8004fbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc0:	f023 0301 	bic.w	r3, r3, #1
 8004fc4:	663b      	str	r3, [r7, #96]	; 0x60
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	3308      	adds	r3, #8
 8004fcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fce:	64ba      	str	r2, [r7, #72]	; 0x48
 8004fd0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004fd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fd6:	e841 2300 	strex	r3, r2, [r1]
 8004fda:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1e5      	bne.n	8004fae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2220      	movs	r2, #32
 8004fec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e067      	b.n	80050ca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b00      	cmp	r3, #0
 8005006:	d04f      	beq.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005016:	d147      	bne.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005020:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	e853 3f00 	ldrex	r3, [r3]
 800502e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005036:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	461a      	mov	r2, r3
 800503e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005040:	637b      	str	r3, [r7, #52]	; 0x34
 8005042:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005044:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005048:	e841 2300 	strex	r3, r2, [r1]
 800504c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800504e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1e6      	bne.n	8005022 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	3308      	adds	r3, #8
 800505a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	e853 3f00 	ldrex	r3, [r3]
 8005062:	613b      	str	r3, [r7, #16]
   return(result);
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f023 0301 	bic.w	r3, r3, #1
 800506a:	66bb      	str	r3, [r7, #104]	; 0x68
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	3308      	adds	r3, #8
 8005072:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005074:	623a      	str	r2, [r7, #32]
 8005076:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005078:	69f9      	ldr	r1, [r7, #28]
 800507a:	6a3a      	ldr	r2, [r7, #32]
 800507c:	e841 2300 	strex	r3, r2, [r1]
 8005080:	61bb      	str	r3, [r7, #24]
   return(result);
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1e5      	bne.n	8005054 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2220      	movs	r2, #32
 800508c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2220      	movs	r2, #32
 8005092:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2220      	movs	r2, #32
 8005098:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e010      	b.n	80050ca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	69da      	ldr	r2, [r3, #28]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	4013      	ands	r3, r2
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	bf0c      	ite	eq
 80050b8:	2301      	moveq	r3, #1
 80050ba:	2300      	movne	r3, #0
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	461a      	mov	r2, r3
 80050c0:	79fb      	ldrb	r3, [r7, #7]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	f43f af4a 	beq.w	8004f5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3770      	adds	r7, #112	; 0x70
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
	...

080050d4 <__assert_func>:
 80050d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80050d6:	4614      	mov	r4, r2
 80050d8:	461a      	mov	r2, r3
 80050da:	4b09      	ldr	r3, [pc, #36]	; (8005100 <__assert_func+0x2c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4605      	mov	r5, r0
 80050e0:	68d8      	ldr	r0, [r3, #12]
 80050e2:	b14c      	cbz	r4, 80050f8 <__assert_func+0x24>
 80050e4:	4b07      	ldr	r3, [pc, #28]	; (8005104 <__assert_func+0x30>)
 80050e6:	9100      	str	r1, [sp, #0]
 80050e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80050ec:	4906      	ldr	r1, [pc, #24]	; (8005108 <__assert_func+0x34>)
 80050ee:	462b      	mov	r3, r5
 80050f0:	f000 f814 	bl	800511c <fiprintf>
 80050f4:	f000 fc16 	bl	8005924 <abort>
 80050f8:	4b04      	ldr	r3, [pc, #16]	; (800510c <__assert_func+0x38>)
 80050fa:	461c      	mov	r4, r3
 80050fc:	e7f3      	b.n	80050e6 <__assert_func+0x12>
 80050fe:	bf00      	nop
 8005100:	200000c4 	.word	0x200000c4
 8005104:	08006478 	.word	0x08006478
 8005108:	08006485 	.word	0x08006485
 800510c:	080064b3 	.word	0x080064b3

08005110 <__errno>:
 8005110:	4b01      	ldr	r3, [pc, #4]	; (8005118 <__errno+0x8>)
 8005112:	6818      	ldr	r0, [r3, #0]
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	200000c4 	.word	0x200000c4

0800511c <fiprintf>:
 800511c:	b40e      	push	{r1, r2, r3}
 800511e:	b503      	push	{r0, r1, lr}
 8005120:	4601      	mov	r1, r0
 8005122:	ab03      	add	r3, sp, #12
 8005124:	4805      	ldr	r0, [pc, #20]	; (800513c <fiprintf+0x20>)
 8005126:	f853 2b04 	ldr.w	r2, [r3], #4
 800512a:	6800      	ldr	r0, [r0, #0]
 800512c:	9301      	str	r3, [sp, #4]
 800512e:	f000 f85d 	bl	80051ec <_vfiprintf_r>
 8005132:	b002      	add	sp, #8
 8005134:	f85d eb04 	ldr.w	lr, [sp], #4
 8005138:	b003      	add	sp, #12
 800513a:	4770      	bx	lr
 800513c:	200000c4 	.word	0x200000c4

08005140 <__libc_init_array>:
 8005140:	b570      	push	{r4, r5, r6, lr}
 8005142:	4d0d      	ldr	r5, [pc, #52]	; (8005178 <__libc_init_array+0x38>)
 8005144:	4c0d      	ldr	r4, [pc, #52]	; (800517c <__libc_init_array+0x3c>)
 8005146:	1b64      	subs	r4, r4, r5
 8005148:	10a4      	asrs	r4, r4, #2
 800514a:	2600      	movs	r6, #0
 800514c:	42a6      	cmp	r6, r4
 800514e:	d109      	bne.n	8005164 <__libc_init_array+0x24>
 8005150:	4d0b      	ldr	r5, [pc, #44]	; (8005180 <__libc_init_array+0x40>)
 8005152:	4c0c      	ldr	r4, [pc, #48]	; (8005184 <__libc_init_array+0x44>)
 8005154:	f000 fffa 	bl	800614c <_init>
 8005158:	1b64      	subs	r4, r4, r5
 800515a:	10a4      	asrs	r4, r4, #2
 800515c:	2600      	movs	r6, #0
 800515e:	42a6      	cmp	r6, r4
 8005160:	d105      	bne.n	800516e <__libc_init_array+0x2e>
 8005162:	bd70      	pop	{r4, r5, r6, pc}
 8005164:	f855 3b04 	ldr.w	r3, [r5], #4
 8005168:	4798      	blx	r3
 800516a:	3601      	adds	r6, #1
 800516c:	e7ee      	b.n	800514c <__libc_init_array+0xc>
 800516e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005172:	4798      	blx	r3
 8005174:	3601      	adds	r6, #1
 8005176:	e7f2      	b.n	800515e <__libc_init_array+0x1e>
 8005178:	0800654c 	.word	0x0800654c
 800517c:	0800654c 	.word	0x0800654c
 8005180:	0800654c 	.word	0x0800654c
 8005184:	08006550 	.word	0x08006550

08005188 <memset>:
 8005188:	4402      	add	r2, r0
 800518a:	4603      	mov	r3, r0
 800518c:	4293      	cmp	r3, r2
 800518e:	d100      	bne.n	8005192 <memset+0xa>
 8005190:	4770      	bx	lr
 8005192:	f803 1b01 	strb.w	r1, [r3], #1
 8005196:	e7f9      	b.n	800518c <memset+0x4>

08005198 <__sfputc_r>:
 8005198:	6893      	ldr	r3, [r2, #8]
 800519a:	3b01      	subs	r3, #1
 800519c:	2b00      	cmp	r3, #0
 800519e:	b410      	push	{r4}
 80051a0:	6093      	str	r3, [r2, #8]
 80051a2:	da08      	bge.n	80051b6 <__sfputc_r+0x1e>
 80051a4:	6994      	ldr	r4, [r2, #24]
 80051a6:	42a3      	cmp	r3, r4
 80051a8:	db01      	blt.n	80051ae <__sfputc_r+0x16>
 80051aa:	290a      	cmp	r1, #10
 80051ac:	d103      	bne.n	80051b6 <__sfputc_r+0x1e>
 80051ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051b2:	f000 baf7 	b.w	80057a4 <__swbuf_r>
 80051b6:	6813      	ldr	r3, [r2, #0]
 80051b8:	1c58      	adds	r0, r3, #1
 80051ba:	6010      	str	r0, [r2, #0]
 80051bc:	7019      	strb	r1, [r3, #0]
 80051be:	4608      	mov	r0, r1
 80051c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <__sfputs_r>:
 80051c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c8:	4606      	mov	r6, r0
 80051ca:	460f      	mov	r7, r1
 80051cc:	4614      	mov	r4, r2
 80051ce:	18d5      	adds	r5, r2, r3
 80051d0:	42ac      	cmp	r4, r5
 80051d2:	d101      	bne.n	80051d8 <__sfputs_r+0x12>
 80051d4:	2000      	movs	r0, #0
 80051d6:	e007      	b.n	80051e8 <__sfputs_r+0x22>
 80051d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051dc:	463a      	mov	r2, r7
 80051de:	4630      	mov	r0, r6
 80051e0:	f7ff ffda 	bl	8005198 <__sfputc_r>
 80051e4:	1c43      	adds	r3, r0, #1
 80051e6:	d1f3      	bne.n	80051d0 <__sfputs_r+0xa>
 80051e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051ec <_vfiprintf_r>:
 80051ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051f0:	460d      	mov	r5, r1
 80051f2:	b09d      	sub	sp, #116	; 0x74
 80051f4:	4614      	mov	r4, r2
 80051f6:	4698      	mov	r8, r3
 80051f8:	4606      	mov	r6, r0
 80051fa:	b118      	cbz	r0, 8005204 <_vfiprintf_r+0x18>
 80051fc:	6983      	ldr	r3, [r0, #24]
 80051fe:	b90b      	cbnz	r3, 8005204 <_vfiprintf_r+0x18>
 8005200:	f000 fcb2 	bl	8005b68 <__sinit>
 8005204:	4b89      	ldr	r3, [pc, #548]	; (800542c <_vfiprintf_r+0x240>)
 8005206:	429d      	cmp	r5, r3
 8005208:	d11b      	bne.n	8005242 <_vfiprintf_r+0x56>
 800520a:	6875      	ldr	r5, [r6, #4]
 800520c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800520e:	07d9      	lsls	r1, r3, #31
 8005210:	d405      	bmi.n	800521e <_vfiprintf_r+0x32>
 8005212:	89ab      	ldrh	r3, [r5, #12]
 8005214:	059a      	lsls	r2, r3, #22
 8005216:	d402      	bmi.n	800521e <_vfiprintf_r+0x32>
 8005218:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800521a:	f000 fd43 	bl	8005ca4 <__retarget_lock_acquire_recursive>
 800521e:	89ab      	ldrh	r3, [r5, #12]
 8005220:	071b      	lsls	r3, r3, #28
 8005222:	d501      	bpl.n	8005228 <_vfiprintf_r+0x3c>
 8005224:	692b      	ldr	r3, [r5, #16]
 8005226:	b9eb      	cbnz	r3, 8005264 <_vfiprintf_r+0x78>
 8005228:	4629      	mov	r1, r5
 800522a:	4630      	mov	r0, r6
 800522c:	f000 fb0c 	bl	8005848 <__swsetup_r>
 8005230:	b1c0      	cbz	r0, 8005264 <_vfiprintf_r+0x78>
 8005232:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005234:	07dc      	lsls	r4, r3, #31
 8005236:	d50e      	bpl.n	8005256 <_vfiprintf_r+0x6a>
 8005238:	f04f 30ff 	mov.w	r0, #4294967295
 800523c:	b01d      	add	sp, #116	; 0x74
 800523e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005242:	4b7b      	ldr	r3, [pc, #492]	; (8005430 <_vfiprintf_r+0x244>)
 8005244:	429d      	cmp	r5, r3
 8005246:	d101      	bne.n	800524c <_vfiprintf_r+0x60>
 8005248:	68b5      	ldr	r5, [r6, #8]
 800524a:	e7df      	b.n	800520c <_vfiprintf_r+0x20>
 800524c:	4b79      	ldr	r3, [pc, #484]	; (8005434 <_vfiprintf_r+0x248>)
 800524e:	429d      	cmp	r5, r3
 8005250:	bf08      	it	eq
 8005252:	68f5      	ldreq	r5, [r6, #12]
 8005254:	e7da      	b.n	800520c <_vfiprintf_r+0x20>
 8005256:	89ab      	ldrh	r3, [r5, #12]
 8005258:	0598      	lsls	r0, r3, #22
 800525a:	d4ed      	bmi.n	8005238 <_vfiprintf_r+0x4c>
 800525c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800525e:	f000 fd22 	bl	8005ca6 <__retarget_lock_release_recursive>
 8005262:	e7e9      	b.n	8005238 <_vfiprintf_r+0x4c>
 8005264:	2300      	movs	r3, #0
 8005266:	9309      	str	r3, [sp, #36]	; 0x24
 8005268:	2320      	movs	r3, #32
 800526a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800526e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005272:	2330      	movs	r3, #48	; 0x30
 8005274:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005438 <_vfiprintf_r+0x24c>
 8005278:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800527c:	f04f 0901 	mov.w	r9, #1
 8005280:	4623      	mov	r3, r4
 8005282:	469a      	mov	sl, r3
 8005284:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005288:	b10a      	cbz	r2, 800528e <_vfiprintf_r+0xa2>
 800528a:	2a25      	cmp	r2, #37	; 0x25
 800528c:	d1f9      	bne.n	8005282 <_vfiprintf_r+0x96>
 800528e:	ebba 0b04 	subs.w	fp, sl, r4
 8005292:	d00b      	beq.n	80052ac <_vfiprintf_r+0xc0>
 8005294:	465b      	mov	r3, fp
 8005296:	4622      	mov	r2, r4
 8005298:	4629      	mov	r1, r5
 800529a:	4630      	mov	r0, r6
 800529c:	f7ff ff93 	bl	80051c6 <__sfputs_r>
 80052a0:	3001      	adds	r0, #1
 80052a2:	f000 80aa 	beq.w	80053fa <_vfiprintf_r+0x20e>
 80052a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052a8:	445a      	add	r2, fp
 80052aa:	9209      	str	r2, [sp, #36]	; 0x24
 80052ac:	f89a 3000 	ldrb.w	r3, [sl]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 80a2 	beq.w	80053fa <_vfiprintf_r+0x20e>
 80052b6:	2300      	movs	r3, #0
 80052b8:	f04f 32ff 	mov.w	r2, #4294967295
 80052bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052c0:	f10a 0a01 	add.w	sl, sl, #1
 80052c4:	9304      	str	r3, [sp, #16]
 80052c6:	9307      	str	r3, [sp, #28]
 80052c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052cc:	931a      	str	r3, [sp, #104]	; 0x68
 80052ce:	4654      	mov	r4, sl
 80052d0:	2205      	movs	r2, #5
 80052d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052d6:	4858      	ldr	r0, [pc, #352]	; (8005438 <_vfiprintf_r+0x24c>)
 80052d8:	f7fa ff7a 	bl	80001d0 <memchr>
 80052dc:	9a04      	ldr	r2, [sp, #16]
 80052de:	b9d8      	cbnz	r0, 8005318 <_vfiprintf_r+0x12c>
 80052e0:	06d1      	lsls	r1, r2, #27
 80052e2:	bf44      	itt	mi
 80052e4:	2320      	movmi	r3, #32
 80052e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052ea:	0713      	lsls	r3, r2, #28
 80052ec:	bf44      	itt	mi
 80052ee:	232b      	movmi	r3, #43	; 0x2b
 80052f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052f4:	f89a 3000 	ldrb.w	r3, [sl]
 80052f8:	2b2a      	cmp	r3, #42	; 0x2a
 80052fa:	d015      	beq.n	8005328 <_vfiprintf_r+0x13c>
 80052fc:	9a07      	ldr	r2, [sp, #28]
 80052fe:	4654      	mov	r4, sl
 8005300:	2000      	movs	r0, #0
 8005302:	f04f 0c0a 	mov.w	ip, #10
 8005306:	4621      	mov	r1, r4
 8005308:	f811 3b01 	ldrb.w	r3, [r1], #1
 800530c:	3b30      	subs	r3, #48	; 0x30
 800530e:	2b09      	cmp	r3, #9
 8005310:	d94e      	bls.n	80053b0 <_vfiprintf_r+0x1c4>
 8005312:	b1b0      	cbz	r0, 8005342 <_vfiprintf_r+0x156>
 8005314:	9207      	str	r2, [sp, #28]
 8005316:	e014      	b.n	8005342 <_vfiprintf_r+0x156>
 8005318:	eba0 0308 	sub.w	r3, r0, r8
 800531c:	fa09 f303 	lsl.w	r3, r9, r3
 8005320:	4313      	orrs	r3, r2
 8005322:	9304      	str	r3, [sp, #16]
 8005324:	46a2      	mov	sl, r4
 8005326:	e7d2      	b.n	80052ce <_vfiprintf_r+0xe2>
 8005328:	9b03      	ldr	r3, [sp, #12]
 800532a:	1d19      	adds	r1, r3, #4
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	9103      	str	r1, [sp, #12]
 8005330:	2b00      	cmp	r3, #0
 8005332:	bfbb      	ittet	lt
 8005334:	425b      	neglt	r3, r3
 8005336:	f042 0202 	orrlt.w	r2, r2, #2
 800533a:	9307      	strge	r3, [sp, #28]
 800533c:	9307      	strlt	r3, [sp, #28]
 800533e:	bfb8      	it	lt
 8005340:	9204      	strlt	r2, [sp, #16]
 8005342:	7823      	ldrb	r3, [r4, #0]
 8005344:	2b2e      	cmp	r3, #46	; 0x2e
 8005346:	d10c      	bne.n	8005362 <_vfiprintf_r+0x176>
 8005348:	7863      	ldrb	r3, [r4, #1]
 800534a:	2b2a      	cmp	r3, #42	; 0x2a
 800534c:	d135      	bne.n	80053ba <_vfiprintf_r+0x1ce>
 800534e:	9b03      	ldr	r3, [sp, #12]
 8005350:	1d1a      	adds	r2, r3, #4
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	9203      	str	r2, [sp, #12]
 8005356:	2b00      	cmp	r3, #0
 8005358:	bfb8      	it	lt
 800535a:	f04f 33ff 	movlt.w	r3, #4294967295
 800535e:	3402      	adds	r4, #2
 8005360:	9305      	str	r3, [sp, #20]
 8005362:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005448 <_vfiprintf_r+0x25c>
 8005366:	7821      	ldrb	r1, [r4, #0]
 8005368:	2203      	movs	r2, #3
 800536a:	4650      	mov	r0, sl
 800536c:	f7fa ff30 	bl	80001d0 <memchr>
 8005370:	b140      	cbz	r0, 8005384 <_vfiprintf_r+0x198>
 8005372:	2340      	movs	r3, #64	; 0x40
 8005374:	eba0 000a 	sub.w	r0, r0, sl
 8005378:	fa03 f000 	lsl.w	r0, r3, r0
 800537c:	9b04      	ldr	r3, [sp, #16]
 800537e:	4303      	orrs	r3, r0
 8005380:	3401      	adds	r4, #1
 8005382:	9304      	str	r3, [sp, #16]
 8005384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005388:	482c      	ldr	r0, [pc, #176]	; (800543c <_vfiprintf_r+0x250>)
 800538a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800538e:	2206      	movs	r2, #6
 8005390:	f7fa ff1e 	bl	80001d0 <memchr>
 8005394:	2800      	cmp	r0, #0
 8005396:	d03f      	beq.n	8005418 <_vfiprintf_r+0x22c>
 8005398:	4b29      	ldr	r3, [pc, #164]	; (8005440 <_vfiprintf_r+0x254>)
 800539a:	bb1b      	cbnz	r3, 80053e4 <_vfiprintf_r+0x1f8>
 800539c:	9b03      	ldr	r3, [sp, #12]
 800539e:	3307      	adds	r3, #7
 80053a0:	f023 0307 	bic.w	r3, r3, #7
 80053a4:	3308      	adds	r3, #8
 80053a6:	9303      	str	r3, [sp, #12]
 80053a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053aa:	443b      	add	r3, r7
 80053ac:	9309      	str	r3, [sp, #36]	; 0x24
 80053ae:	e767      	b.n	8005280 <_vfiprintf_r+0x94>
 80053b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80053b4:	460c      	mov	r4, r1
 80053b6:	2001      	movs	r0, #1
 80053b8:	e7a5      	b.n	8005306 <_vfiprintf_r+0x11a>
 80053ba:	2300      	movs	r3, #0
 80053bc:	3401      	adds	r4, #1
 80053be:	9305      	str	r3, [sp, #20]
 80053c0:	4619      	mov	r1, r3
 80053c2:	f04f 0c0a 	mov.w	ip, #10
 80053c6:	4620      	mov	r0, r4
 80053c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053cc:	3a30      	subs	r2, #48	; 0x30
 80053ce:	2a09      	cmp	r2, #9
 80053d0:	d903      	bls.n	80053da <_vfiprintf_r+0x1ee>
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d0c5      	beq.n	8005362 <_vfiprintf_r+0x176>
 80053d6:	9105      	str	r1, [sp, #20]
 80053d8:	e7c3      	b.n	8005362 <_vfiprintf_r+0x176>
 80053da:	fb0c 2101 	mla	r1, ip, r1, r2
 80053de:	4604      	mov	r4, r0
 80053e0:	2301      	movs	r3, #1
 80053e2:	e7f0      	b.n	80053c6 <_vfiprintf_r+0x1da>
 80053e4:	ab03      	add	r3, sp, #12
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	462a      	mov	r2, r5
 80053ea:	4b16      	ldr	r3, [pc, #88]	; (8005444 <_vfiprintf_r+0x258>)
 80053ec:	a904      	add	r1, sp, #16
 80053ee:	4630      	mov	r0, r6
 80053f0:	f3af 8000 	nop.w
 80053f4:	4607      	mov	r7, r0
 80053f6:	1c78      	adds	r0, r7, #1
 80053f8:	d1d6      	bne.n	80053a8 <_vfiprintf_r+0x1bc>
 80053fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053fc:	07d9      	lsls	r1, r3, #31
 80053fe:	d405      	bmi.n	800540c <_vfiprintf_r+0x220>
 8005400:	89ab      	ldrh	r3, [r5, #12]
 8005402:	059a      	lsls	r2, r3, #22
 8005404:	d402      	bmi.n	800540c <_vfiprintf_r+0x220>
 8005406:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005408:	f000 fc4d 	bl	8005ca6 <__retarget_lock_release_recursive>
 800540c:	89ab      	ldrh	r3, [r5, #12]
 800540e:	065b      	lsls	r3, r3, #25
 8005410:	f53f af12 	bmi.w	8005238 <_vfiprintf_r+0x4c>
 8005414:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005416:	e711      	b.n	800523c <_vfiprintf_r+0x50>
 8005418:	ab03      	add	r3, sp, #12
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	462a      	mov	r2, r5
 800541e:	4b09      	ldr	r3, [pc, #36]	; (8005444 <_vfiprintf_r+0x258>)
 8005420:	a904      	add	r1, sp, #16
 8005422:	4630      	mov	r0, r6
 8005424:	f000 f880 	bl	8005528 <_printf_i>
 8005428:	e7e4      	b.n	80053f4 <_vfiprintf_r+0x208>
 800542a:	bf00      	nop
 800542c:	0800650c 	.word	0x0800650c
 8005430:	0800652c 	.word	0x0800652c
 8005434:	080064ec 	.word	0x080064ec
 8005438:	080064b8 	.word	0x080064b8
 800543c:	080064c2 	.word	0x080064c2
 8005440:	00000000 	.word	0x00000000
 8005444:	080051c7 	.word	0x080051c7
 8005448:	080064be 	.word	0x080064be

0800544c <_printf_common>:
 800544c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005450:	4616      	mov	r6, r2
 8005452:	4699      	mov	r9, r3
 8005454:	688a      	ldr	r2, [r1, #8]
 8005456:	690b      	ldr	r3, [r1, #16]
 8005458:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800545c:	4293      	cmp	r3, r2
 800545e:	bfb8      	it	lt
 8005460:	4613      	movlt	r3, r2
 8005462:	6033      	str	r3, [r6, #0]
 8005464:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005468:	4607      	mov	r7, r0
 800546a:	460c      	mov	r4, r1
 800546c:	b10a      	cbz	r2, 8005472 <_printf_common+0x26>
 800546e:	3301      	adds	r3, #1
 8005470:	6033      	str	r3, [r6, #0]
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	0699      	lsls	r1, r3, #26
 8005476:	bf42      	ittt	mi
 8005478:	6833      	ldrmi	r3, [r6, #0]
 800547a:	3302      	addmi	r3, #2
 800547c:	6033      	strmi	r3, [r6, #0]
 800547e:	6825      	ldr	r5, [r4, #0]
 8005480:	f015 0506 	ands.w	r5, r5, #6
 8005484:	d106      	bne.n	8005494 <_printf_common+0x48>
 8005486:	f104 0a19 	add.w	sl, r4, #25
 800548a:	68e3      	ldr	r3, [r4, #12]
 800548c:	6832      	ldr	r2, [r6, #0]
 800548e:	1a9b      	subs	r3, r3, r2
 8005490:	42ab      	cmp	r3, r5
 8005492:	dc26      	bgt.n	80054e2 <_printf_common+0x96>
 8005494:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005498:	1e13      	subs	r3, r2, #0
 800549a:	6822      	ldr	r2, [r4, #0]
 800549c:	bf18      	it	ne
 800549e:	2301      	movne	r3, #1
 80054a0:	0692      	lsls	r2, r2, #26
 80054a2:	d42b      	bmi.n	80054fc <_printf_common+0xb0>
 80054a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054a8:	4649      	mov	r1, r9
 80054aa:	4638      	mov	r0, r7
 80054ac:	47c0      	blx	r8
 80054ae:	3001      	adds	r0, #1
 80054b0:	d01e      	beq.n	80054f0 <_printf_common+0xa4>
 80054b2:	6823      	ldr	r3, [r4, #0]
 80054b4:	68e5      	ldr	r5, [r4, #12]
 80054b6:	6832      	ldr	r2, [r6, #0]
 80054b8:	f003 0306 	and.w	r3, r3, #6
 80054bc:	2b04      	cmp	r3, #4
 80054be:	bf08      	it	eq
 80054c0:	1aad      	subeq	r5, r5, r2
 80054c2:	68a3      	ldr	r3, [r4, #8]
 80054c4:	6922      	ldr	r2, [r4, #16]
 80054c6:	bf0c      	ite	eq
 80054c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054cc:	2500      	movne	r5, #0
 80054ce:	4293      	cmp	r3, r2
 80054d0:	bfc4      	itt	gt
 80054d2:	1a9b      	subgt	r3, r3, r2
 80054d4:	18ed      	addgt	r5, r5, r3
 80054d6:	2600      	movs	r6, #0
 80054d8:	341a      	adds	r4, #26
 80054da:	42b5      	cmp	r5, r6
 80054dc:	d11a      	bne.n	8005514 <_printf_common+0xc8>
 80054de:	2000      	movs	r0, #0
 80054e0:	e008      	b.n	80054f4 <_printf_common+0xa8>
 80054e2:	2301      	movs	r3, #1
 80054e4:	4652      	mov	r2, sl
 80054e6:	4649      	mov	r1, r9
 80054e8:	4638      	mov	r0, r7
 80054ea:	47c0      	blx	r8
 80054ec:	3001      	adds	r0, #1
 80054ee:	d103      	bne.n	80054f8 <_printf_common+0xac>
 80054f0:	f04f 30ff 	mov.w	r0, #4294967295
 80054f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054f8:	3501      	adds	r5, #1
 80054fa:	e7c6      	b.n	800548a <_printf_common+0x3e>
 80054fc:	18e1      	adds	r1, r4, r3
 80054fe:	1c5a      	adds	r2, r3, #1
 8005500:	2030      	movs	r0, #48	; 0x30
 8005502:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005506:	4422      	add	r2, r4
 8005508:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800550c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005510:	3302      	adds	r3, #2
 8005512:	e7c7      	b.n	80054a4 <_printf_common+0x58>
 8005514:	2301      	movs	r3, #1
 8005516:	4622      	mov	r2, r4
 8005518:	4649      	mov	r1, r9
 800551a:	4638      	mov	r0, r7
 800551c:	47c0      	blx	r8
 800551e:	3001      	adds	r0, #1
 8005520:	d0e6      	beq.n	80054f0 <_printf_common+0xa4>
 8005522:	3601      	adds	r6, #1
 8005524:	e7d9      	b.n	80054da <_printf_common+0x8e>
	...

08005528 <_printf_i>:
 8005528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800552c:	7e0f      	ldrb	r7, [r1, #24]
 800552e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005530:	2f78      	cmp	r7, #120	; 0x78
 8005532:	4691      	mov	r9, r2
 8005534:	4680      	mov	r8, r0
 8005536:	460c      	mov	r4, r1
 8005538:	469a      	mov	sl, r3
 800553a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800553e:	d807      	bhi.n	8005550 <_printf_i+0x28>
 8005540:	2f62      	cmp	r7, #98	; 0x62
 8005542:	d80a      	bhi.n	800555a <_printf_i+0x32>
 8005544:	2f00      	cmp	r7, #0
 8005546:	f000 80d8 	beq.w	80056fa <_printf_i+0x1d2>
 800554a:	2f58      	cmp	r7, #88	; 0x58
 800554c:	f000 80a3 	beq.w	8005696 <_printf_i+0x16e>
 8005550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005554:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005558:	e03a      	b.n	80055d0 <_printf_i+0xa8>
 800555a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800555e:	2b15      	cmp	r3, #21
 8005560:	d8f6      	bhi.n	8005550 <_printf_i+0x28>
 8005562:	a101      	add	r1, pc, #4	; (adr r1, 8005568 <_printf_i+0x40>)
 8005564:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005568:	080055c1 	.word	0x080055c1
 800556c:	080055d5 	.word	0x080055d5
 8005570:	08005551 	.word	0x08005551
 8005574:	08005551 	.word	0x08005551
 8005578:	08005551 	.word	0x08005551
 800557c:	08005551 	.word	0x08005551
 8005580:	080055d5 	.word	0x080055d5
 8005584:	08005551 	.word	0x08005551
 8005588:	08005551 	.word	0x08005551
 800558c:	08005551 	.word	0x08005551
 8005590:	08005551 	.word	0x08005551
 8005594:	080056e1 	.word	0x080056e1
 8005598:	08005605 	.word	0x08005605
 800559c:	080056c3 	.word	0x080056c3
 80055a0:	08005551 	.word	0x08005551
 80055a4:	08005551 	.word	0x08005551
 80055a8:	08005703 	.word	0x08005703
 80055ac:	08005551 	.word	0x08005551
 80055b0:	08005605 	.word	0x08005605
 80055b4:	08005551 	.word	0x08005551
 80055b8:	08005551 	.word	0x08005551
 80055bc:	080056cb 	.word	0x080056cb
 80055c0:	682b      	ldr	r3, [r5, #0]
 80055c2:	1d1a      	adds	r2, r3, #4
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	602a      	str	r2, [r5, #0]
 80055c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055d0:	2301      	movs	r3, #1
 80055d2:	e0a3      	b.n	800571c <_printf_i+0x1f4>
 80055d4:	6820      	ldr	r0, [r4, #0]
 80055d6:	6829      	ldr	r1, [r5, #0]
 80055d8:	0606      	lsls	r6, r0, #24
 80055da:	f101 0304 	add.w	r3, r1, #4
 80055de:	d50a      	bpl.n	80055f6 <_printf_i+0xce>
 80055e0:	680e      	ldr	r6, [r1, #0]
 80055e2:	602b      	str	r3, [r5, #0]
 80055e4:	2e00      	cmp	r6, #0
 80055e6:	da03      	bge.n	80055f0 <_printf_i+0xc8>
 80055e8:	232d      	movs	r3, #45	; 0x2d
 80055ea:	4276      	negs	r6, r6
 80055ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055f0:	485e      	ldr	r0, [pc, #376]	; (800576c <_printf_i+0x244>)
 80055f2:	230a      	movs	r3, #10
 80055f4:	e019      	b.n	800562a <_printf_i+0x102>
 80055f6:	680e      	ldr	r6, [r1, #0]
 80055f8:	602b      	str	r3, [r5, #0]
 80055fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055fe:	bf18      	it	ne
 8005600:	b236      	sxthne	r6, r6
 8005602:	e7ef      	b.n	80055e4 <_printf_i+0xbc>
 8005604:	682b      	ldr	r3, [r5, #0]
 8005606:	6820      	ldr	r0, [r4, #0]
 8005608:	1d19      	adds	r1, r3, #4
 800560a:	6029      	str	r1, [r5, #0]
 800560c:	0601      	lsls	r1, r0, #24
 800560e:	d501      	bpl.n	8005614 <_printf_i+0xec>
 8005610:	681e      	ldr	r6, [r3, #0]
 8005612:	e002      	b.n	800561a <_printf_i+0xf2>
 8005614:	0646      	lsls	r6, r0, #25
 8005616:	d5fb      	bpl.n	8005610 <_printf_i+0xe8>
 8005618:	881e      	ldrh	r6, [r3, #0]
 800561a:	4854      	ldr	r0, [pc, #336]	; (800576c <_printf_i+0x244>)
 800561c:	2f6f      	cmp	r7, #111	; 0x6f
 800561e:	bf0c      	ite	eq
 8005620:	2308      	moveq	r3, #8
 8005622:	230a      	movne	r3, #10
 8005624:	2100      	movs	r1, #0
 8005626:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800562a:	6865      	ldr	r5, [r4, #4]
 800562c:	60a5      	str	r5, [r4, #8]
 800562e:	2d00      	cmp	r5, #0
 8005630:	bfa2      	ittt	ge
 8005632:	6821      	ldrge	r1, [r4, #0]
 8005634:	f021 0104 	bicge.w	r1, r1, #4
 8005638:	6021      	strge	r1, [r4, #0]
 800563a:	b90e      	cbnz	r6, 8005640 <_printf_i+0x118>
 800563c:	2d00      	cmp	r5, #0
 800563e:	d04d      	beq.n	80056dc <_printf_i+0x1b4>
 8005640:	4615      	mov	r5, r2
 8005642:	fbb6 f1f3 	udiv	r1, r6, r3
 8005646:	fb03 6711 	mls	r7, r3, r1, r6
 800564a:	5dc7      	ldrb	r7, [r0, r7]
 800564c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005650:	4637      	mov	r7, r6
 8005652:	42bb      	cmp	r3, r7
 8005654:	460e      	mov	r6, r1
 8005656:	d9f4      	bls.n	8005642 <_printf_i+0x11a>
 8005658:	2b08      	cmp	r3, #8
 800565a:	d10b      	bne.n	8005674 <_printf_i+0x14c>
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	07de      	lsls	r6, r3, #31
 8005660:	d508      	bpl.n	8005674 <_printf_i+0x14c>
 8005662:	6923      	ldr	r3, [r4, #16]
 8005664:	6861      	ldr	r1, [r4, #4]
 8005666:	4299      	cmp	r1, r3
 8005668:	bfde      	ittt	le
 800566a:	2330      	movle	r3, #48	; 0x30
 800566c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005670:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005674:	1b52      	subs	r2, r2, r5
 8005676:	6122      	str	r2, [r4, #16]
 8005678:	f8cd a000 	str.w	sl, [sp]
 800567c:	464b      	mov	r3, r9
 800567e:	aa03      	add	r2, sp, #12
 8005680:	4621      	mov	r1, r4
 8005682:	4640      	mov	r0, r8
 8005684:	f7ff fee2 	bl	800544c <_printf_common>
 8005688:	3001      	adds	r0, #1
 800568a:	d14c      	bne.n	8005726 <_printf_i+0x1fe>
 800568c:	f04f 30ff 	mov.w	r0, #4294967295
 8005690:	b004      	add	sp, #16
 8005692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005696:	4835      	ldr	r0, [pc, #212]	; (800576c <_printf_i+0x244>)
 8005698:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800569c:	6829      	ldr	r1, [r5, #0]
 800569e:	6823      	ldr	r3, [r4, #0]
 80056a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80056a4:	6029      	str	r1, [r5, #0]
 80056a6:	061d      	lsls	r5, r3, #24
 80056a8:	d514      	bpl.n	80056d4 <_printf_i+0x1ac>
 80056aa:	07df      	lsls	r7, r3, #31
 80056ac:	bf44      	itt	mi
 80056ae:	f043 0320 	orrmi.w	r3, r3, #32
 80056b2:	6023      	strmi	r3, [r4, #0]
 80056b4:	b91e      	cbnz	r6, 80056be <_printf_i+0x196>
 80056b6:	6823      	ldr	r3, [r4, #0]
 80056b8:	f023 0320 	bic.w	r3, r3, #32
 80056bc:	6023      	str	r3, [r4, #0]
 80056be:	2310      	movs	r3, #16
 80056c0:	e7b0      	b.n	8005624 <_printf_i+0xfc>
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	f043 0320 	orr.w	r3, r3, #32
 80056c8:	6023      	str	r3, [r4, #0]
 80056ca:	2378      	movs	r3, #120	; 0x78
 80056cc:	4828      	ldr	r0, [pc, #160]	; (8005770 <_printf_i+0x248>)
 80056ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056d2:	e7e3      	b.n	800569c <_printf_i+0x174>
 80056d4:	0659      	lsls	r1, r3, #25
 80056d6:	bf48      	it	mi
 80056d8:	b2b6      	uxthmi	r6, r6
 80056da:	e7e6      	b.n	80056aa <_printf_i+0x182>
 80056dc:	4615      	mov	r5, r2
 80056de:	e7bb      	b.n	8005658 <_printf_i+0x130>
 80056e0:	682b      	ldr	r3, [r5, #0]
 80056e2:	6826      	ldr	r6, [r4, #0]
 80056e4:	6961      	ldr	r1, [r4, #20]
 80056e6:	1d18      	adds	r0, r3, #4
 80056e8:	6028      	str	r0, [r5, #0]
 80056ea:	0635      	lsls	r5, r6, #24
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	d501      	bpl.n	80056f4 <_printf_i+0x1cc>
 80056f0:	6019      	str	r1, [r3, #0]
 80056f2:	e002      	b.n	80056fa <_printf_i+0x1d2>
 80056f4:	0670      	lsls	r0, r6, #25
 80056f6:	d5fb      	bpl.n	80056f0 <_printf_i+0x1c8>
 80056f8:	8019      	strh	r1, [r3, #0]
 80056fa:	2300      	movs	r3, #0
 80056fc:	6123      	str	r3, [r4, #16]
 80056fe:	4615      	mov	r5, r2
 8005700:	e7ba      	b.n	8005678 <_printf_i+0x150>
 8005702:	682b      	ldr	r3, [r5, #0]
 8005704:	1d1a      	adds	r2, r3, #4
 8005706:	602a      	str	r2, [r5, #0]
 8005708:	681d      	ldr	r5, [r3, #0]
 800570a:	6862      	ldr	r2, [r4, #4]
 800570c:	2100      	movs	r1, #0
 800570e:	4628      	mov	r0, r5
 8005710:	f7fa fd5e 	bl	80001d0 <memchr>
 8005714:	b108      	cbz	r0, 800571a <_printf_i+0x1f2>
 8005716:	1b40      	subs	r0, r0, r5
 8005718:	6060      	str	r0, [r4, #4]
 800571a:	6863      	ldr	r3, [r4, #4]
 800571c:	6123      	str	r3, [r4, #16]
 800571e:	2300      	movs	r3, #0
 8005720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005724:	e7a8      	b.n	8005678 <_printf_i+0x150>
 8005726:	6923      	ldr	r3, [r4, #16]
 8005728:	462a      	mov	r2, r5
 800572a:	4649      	mov	r1, r9
 800572c:	4640      	mov	r0, r8
 800572e:	47d0      	blx	sl
 8005730:	3001      	adds	r0, #1
 8005732:	d0ab      	beq.n	800568c <_printf_i+0x164>
 8005734:	6823      	ldr	r3, [r4, #0]
 8005736:	079b      	lsls	r3, r3, #30
 8005738:	d413      	bmi.n	8005762 <_printf_i+0x23a>
 800573a:	68e0      	ldr	r0, [r4, #12]
 800573c:	9b03      	ldr	r3, [sp, #12]
 800573e:	4298      	cmp	r0, r3
 8005740:	bfb8      	it	lt
 8005742:	4618      	movlt	r0, r3
 8005744:	e7a4      	b.n	8005690 <_printf_i+0x168>
 8005746:	2301      	movs	r3, #1
 8005748:	4632      	mov	r2, r6
 800574a:	4649      	mov	r1, r9
 800574c:	4640      	mov	r0, r8
 800574e:	47d0      	blx	sl
 8005750:	3001      	adds	r0, #1
 8005752:	d09b      	beq.n	800568c <_printf_i+0x164>
 8005754:	3501      	adds	r5, #1
 8005756:	68e3      	ldr	r3, [r4, #12]
 8005758:	9903      	ldr	r1, [sp, #12]
 800575a:	1a5b      	subs	r3, r3, r1
 800575c:	42ab      	cmp	r3, r5
 800575e:	dcf2      	bgt.n	8005746 <_printf_i+0x21e>
 8005760:	e7eb      	b.n	800573a <_printf_i+0x212>
 8005762:	2500      	movs	r5, #0
 8005764:	f104 0619 	add.w	r6, r4, #25
 8005768:	e7f5      	b.n	8005756 <_printf_i+0x22e>
 800576a:	bf00      	nop
 800576c:	080064c9 	.word	0x080064c9
 8005770:	080064da 	.word	0x080064da

08005774 <iprintf>:
 8005774:	b40f      	push	{r0, r1, r2, r3}
 8005776:	4b0a      	ldr	r3, [pc, #40]	; (80057a0 <iprintf+0x2c>)
 8005778:	b513      	push	{r0, r1, r4, lr}
 800577a:	681c      	ldr	r4, [r3, #0]
 800577c:	b124      	cbz	r4, 8005788 <iprintf+0x14>
 800577e:	69a3      	ldr	r3, [r4, #24]
 8005780:	b913      	cbnz	r3, 8005788 <iprintf+0x14>
 8005782:	4620      	mov	r0, r4
 8005784:	f000 f9f0 	bl	8005b68 <__sinit>
 8005788:	ab05      	add	r3, sp, #20
 800578a:	9a04      	ldr	r2, [sp, #16]
 800578c:	68a1      	ldr	r1, [r4, #8]
 800578e:	9301      	str	r3, [sp, #4]
 8005790:	4620      	mov	r0, r4
 8005792:	f7ff fd2b 	bl	80051ec <_vfiprintf_r>
 8005796:	b002      	add	sp, #8
 8005798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800579c:	b004      	add	sp, #16
 800579e:	4770      	bx	lr
 80057a0:	200000c4 	.word	0x200000c4

080057a4 <__swbuf_r>:
 80057a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a6:	460e      	mov	r6, r1
 80057a8:	4614      	mov	r4, r2
 80057aa:	4605      	mov	r5, r0
 80057ac:	b118      	cbz	r0, 80057b6 <__swbuf_r+0x12>
 80057ae:	6983      	ldr	r3, [r0, #24]
 80057b0:	b90b      	cbnz	r3, 80057b6 <__swbuf_r+0x12>
 80057b2:	f000 f9d9 	bl	8005b68 <__sinit>
 80057b6:	4b21      	ldr	r3, [pc, #132]	; (800583c <__swbuf_r+0x98>)
 80057b8:	429c      	cmp	r4, r3
 80057ba:	d12b      	bne.n	8005814 <__swbuf_r+0x70>
 80057bc:	686c      	ldr	r4, [r5, #4]
 80057be:	69a3      	ldr	r3, [r4, #24]
 80057c0:	60a3      	str	r3, [r4, #8]
 80057c2:	89a3      	ldrh	r3, [r4, #12]
 80057c4:	071a      	lsls	r2, r3, #28
 80057c6:	d52f      	bpl.n	8005828 <__swbuf_r+0x84>
 80057c8:	6923      	ldr	r3, [r4, #16]
 80057ca:	b36b      	cbz	r3, 8005828 <__swbuf_r+0x84>
 80057cc:	6923      	ldr	r3, [r4, #16]
 80057ce:	6820      	ldr	r0, [r4, #0]
 80057d0:	1ac0      	subs	r0, r0, r3
 80057d2:	6963      	ldr	r3, [r4, #20]
 80057d4:	b2f6      	uxtb	r6, r6
 80057d6:	4283      	cmp	r3, r0
 80057d8:	4637      	mov	r7, r6
 80057da:	dc04      	bgt.n	80057e6 <__swbuf_r+0x42>
 80057dc:	4621      	mov	r1, r4
 80057de:	4628      	mov	r0, r5
 80057e0:	f000 f92e 	bl	8005a40 <_fflush_r>
 80057e4:	bb30      	cbnz	r0, 8005834 <__swbuf_r+0x90>
 80057e6:	68a3      	ldr	r3, [r4, #8]
 80057e8:	3b01      	subs	r3, #1
 80057ea:	60a3      	str	r3, [r4, #8]
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	1c5a      	adds	r2, r3, #1
 80057f0:	6022      	str	r2, [r4, #0]
 80057f2:	701e      	strb	r6, [r3, #0]
 80057f4:	6963      	ldr	r3, [r4, #20]
 80057f6:	3001      	adds	r0, #1
 80057f8:	4283      	cmp	r3, r0
 80057fa:	d004      	beq.n	8005806 <__swbuf_r+0x62>
 80057fc:	89a3      	ldrh	r3, [r4, #12]
 80057fe:	07db      	lsls	r3, r3, #31
 8005800:	d506      	bpl.n	8005810 <__swbuf_r+0x6c>
 8005802:	2e0a      	cmp	r6, #10
 8005804:	d104      	bne.n	8005810 <__swbuf_r+0x6c>
 8005806:	4621      	mov	r1, r4
 8005808:	4628      	mov	r0, r5
 800580a:	f000 f919 	bl	8005a40 <_fflush_r>
 800580e:	b988      	cbnz	r0, 8005834 <__swbuf_r+0x90>
 8005810:	4638      	mov	r0, r7
 8005812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005814:	4b0a      	ldr	r3, [pc, #40]	; (8005840 <__swbuf_r+0x9c>)
 8005816:	429c      	cmp	r4, r3
 8005818:	d101      	bne.n	800581e <__swbuf_r+0x7a>
 800581a:	68ac      	ldr	r4, [r5, #8]
 800581c:	e7cf      	b.n	80057be <__swbuf_r+0x1a>
 800581e:	4b09      	ldr	r3, [pc, #36]	; (8005844 <__swbuf_r+0xa0>)
 8005820:	429c      	cmp	r4, r3
 8005822:	bf08      	it	eq
 8005824:	68ec      	ldreq	r4, [r5, #12]
 8005826:	e7ca      	b.n	80057be <__swbuf_r+0x1a>
 8005828:	4621      	mov	r1, r4
 800582a:	4628      	mov	r0, r5
 800582c:	f000 f80c 	bl	8005848 <__swsetup_r>
 8005830:	2800      	cmp	r0, #0
 8005832:	d0cb      	beq.n	80057cc <__swbuf_r+0x28>
 8005834:	f04f 37ff 	mov.w	r7, #4294967295
 8005838:	e7ea      	b.n	8005810 <__swbuf_r+0x6c>
 800583a:	bf00      	nop
 800583c:	0800650c 	.word	0x0800650c
 8005840:	0800652c 	.word	0x0800652c
 8005844:	080064ec 	.word	0x080064ec

08005848 <__swsetup_r>:
 8005848:	4b32      	ldr	r3, [pc, #200]	; (8005914 <__swsetup_r+0xcc>)
 800584a:	b570      	push	{r4, r5, r6, lr}
 800584c:	681d      	ldr	r5, [r3, #0]
 800584e:	4606      	mov	r6, r0
 8005850:	460c      	mov	r4, r1
 8005852:	b125      	cbz	r5, 800585e <__swsetup_r+0x16>
 8005854:	69ab      	ldr	r3, [r5, #24]
 8005856:	b913      	cbnz	r3, 800585e <__swsetup_r+0x16>
 8005858:	4628      	mov	r0, r5
 800585a:	f000 f985 	bl	8005b68 <__sinit>
 800585e:	4b2e      	ldr	r3, [pc, #184]	; (8005918 <__swsetup_r+0xd0>)
 8005860:	429c      	cmp	r4, r3
 8005862:	d10f      	bne.n	8005884 <__swsetup_r+0x3c>
 8005864:	686c      	ldr	r4, [r5, #4]
 8005866:	89a3      	ldrh	r3, [r4, #12]
 8005868:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800586c:	0719      	lsls	r1, r3, #28
 800586e:	d42c      	bmi.n	80058ca <__swsetup_r+0x82>
 8005870:	06dd      	lsls	r5, r3, #27
 8005872:	d411      	bmi.n	8005898 <__swsetup_r+0x50>
 8005874:	2309      	movs	r3, #9
 8005876:	6033      	str	r3, [r6, #0]
 8005878:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800587c:	81a3      	strh	r3, [r4, #12]
 800587e:	f04f 30ff 	mov.w	r0, #4294967295
 8005882:	e03e      	b.n	8005902 <__swsetup_r+0xba>
 8005884:	4b25      	ldr	r3, [pc, #148]	; (800591c <__swsetup_r+0xd4>)
 8005886:	429c      	cmp	r4, r3
 8005888:	d101      	bne.n	800588e <__swsetup_r+0x46>
 800588a:	68ac      	ldr	r4, [r5, #8]
 800588c:	e7eb      	b.n	8005866 <__swsetup_r+0x1e>
 800588e:	4b24      	ldr	r3, [pc, #144]	; (8005920 <__swsetup_r+0xd8>)
 8005890:	429c      	cmp	r4, r3
 8005892:	bf08      	it	eq
 8005894:	68ec      	ldreq	r4, [r5, #12]
 8005896:	e7e6      	b.n	8005866 <__swsetup_r+0x1e>
 8005898:	0758      	lsls	r0, r3, #29
 800589a:	d512      	bpl.n	80058c2 <__swsetup_r+0x7a>
 800589c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800589e:	b141      	cbz	r1, 80058b2 <__swsetup_r+0x6a>
 80058a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058a4:	4299      	cmp	r1, r3
 80058a6:	d002      	beq.n	80058ae <__swsetup_r+0x66>
 80058a8:	4630      	mov	r0, r6
 80058aa:	f000 fa63 	bl	8005d74 <_free_r>
 80058ae:	2300      	movs	r3, #0
 80058b0:	6363      	str	r3, [r4, #52]	; 0x34
 80058b2:	89a3      	ldrh	r3, [r4, #12]
 80058b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80058b8:	81a3      	strh	r3, [r4, #12]
 80058ba:	2300      	movs	r3, #0
 80058bc:	6063      	str	r3, [r4, #4]
 80058be:	6923      	ldr	r3, [r4, #16]
 80058c0:	6023      	str	r3, [r4, #0]
 80058c2:	89a3      	ldrh	r3, [r4, #12]
 80058c4:	f043 0308 	orr.w	r3, r3, #8
 80058c8:	81a3      	strh	r3, [r4, #12]
 80058ca:	6923      	ldr	r3, [r4, #16]
 80058cc:	b94b      	cbnz	r3, 80058e2 <__swsetup_r+0x9a>
 80058ce:	89a3      	ldrh	r3, [r4, #12]
 80058d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80058d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058d8:	d003      	beq.n	80058e2 <__swsetup_r+0x9a>
 80058da:	4621      	mov	r1, r4
 80058dc:	4630      	mov	r0, r6
 80058de:	f000 fa09 	bl	8005cf4 <__smakebuf_r>
 80058e2:	89a0      	ldrh	r0, [r4, #12]
 80058e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058e8:	f010 0301 	ands.w	r3, r0, #1
 80058ec:	d00a      	beq.n	8005904 <__swsetup_r+0xbc>
 80058ee:	2300      	movs	r3, #0
 80058f0:	60a3      	str	r3, [r4, #8]
 80058f2:	6963      	ldr	r3, [r4, #20]
 80058f4:	425b      	negs	r3, r3
 80058f6:	61a3      	str	r3, [r4, #24]
 80058f8:	6923      	ldr	r3, [r4, #16]
 80058fa:	b943      	cbnz	r3, 800590e <__swsetup_r+0xc6>
 80058fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005900:	d1ba      	bne.n	8005878 <__swsetup_r+0x30>
 8005902:	bd70      	pop	{r4, r5, r6, pc}
 8005904:	0781      	lsls	r1, r0, #30
 8005906:	bf58      	it	pl
 8005908:	6963      	ldrpl	r3, [r4, #20]
 800590a:	60a3      	str	r3, [r4, #8]
 800590c:	e7f4      	b.n	80058f8 <__swsetup_r+0xb0>
 800590e:	2000      	movs	r0, #0
 8005910:	e7f7      	b.n	8005902 <__swsetup_r+0xba>
 8005912:	bf00      	nop
 8005914:	200000c4 	.word	0x200000c4
 8005918:	0800650c 	.word	0x0800650c
 800591c:	0800652c 	.word	0x0800652c
 8005920:	080064ec 	.word	0x080064ec

08005924 <abort>:
 8005924:	b508      	push	{r3, lr}
 8005926:	2006      	movs	r0, #6
 8005928:	f000 fb3c 	bl	8005fa4 <raise>
 800592c:	2001      	movs	r0, #1
 800592e:	f7fb fa8d 	bl	8000e4c <_exit>
	...

08005934 <__sflush_r>:
 8005934:	898a      	ldrh	r2, [r1, #12]
 8005936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800593a:	4605      	mov	r5, r0
 800593c:	0710      	lsls	r0, r2, #28
 800593e:	460c      	mov	r4, r1
 8005940:	d458      	bmi.n	80059f4 <__sflush_r+0xc0>
 8005942:	684b      	ldr	r3, [r1, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	dc05      	bgt.n	8005954 <__sflush_r+0x20>
 8005948:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800594a:	2b00      	cmp	r3, #0
 800594c:	dc02      	bgt.n	8005954 <__sflush_r+0x20>
 800594e:	2000      	movs	r0, #0
 8005950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005954:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005956:	2e00      	cmp	r6, #0
 8005958:	d0f9      	beq.n	800594e <__sflush_r+0x1a>
 800595a:	2300      	movs	r3, #0
 800595c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005960:	682f      	ldr	r7, [r5, #0]
 8005962:	602b      	str	r3, [r5, #0]
 8005964:	d032      	beq.n	80059cc <__sflush_r+0x98>
 8005966:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005968:	89a3      	ldrh	r3, [r4, #12]
 800596a:	075a      	lsls	r2, r3, #29
 800596c:	d505      	bpl.n	800597a <__sflush_r+0x46>
 800596e:	6863      	ldr	r3, [r4, #4]
 8005970:	1ac0      	subs	r0, r0, r3
 8005972:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005974:	b10b      	cbz	r3, 800597a <__sflush_r+0x46>
 8005976:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005978:	1ac0      	subs	r0, r0, r3
 800597a:	2300      	movs	r3, #0
 800597c:	4602      	mov	r2, r0
 800597e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005980:	6a21      	ldr	r1, [r4, #32]
 8005982:	4628      	mov	r0, r5
 8005984:	47b0      	blx	r6
 8005986:	1c43      	adds	r3, r0, #1
 8005988:	89a3      	ldrh	r3, [r4, #12]
 800598a:	d106      	bne.n	800599a <__sflush_r+0x66>
 800598c:	6829      	ldr	r1, [r5, #0]
 800598e:	291d      	cmp	r1, #29
 8005990:	d82c      	bhi.n	80059ec <__sflush_r+0xb8>
 8005992:	4a2a      	ldr	r2, [pc, #168]	; (8005a3c <__sflush_r+0x108>)
 8005994:	40ca      	lsrs	r2, r1
 8005996:	07d6      	lsls	r6, r2, #31
 8005998:	d528      	bpl.n	80059ec <__sflush_r+0xb8>
 800599a:	2200      	movs	r2, #0
 800599c:	6062      	str	r2, [r4, #4]
 800599e:	04d9      	lsls	r1, r3, #19
 80059a0:	6922      	ldr	r2, [r4, #16]
 80059a2:	6022      	str	r2, [r4, #0]
 80059a4:	d504      	bpl.n	80059b0 <__sflush_r+0x7c>
 80059a6:	1c42      	adds	r2, r0, #1
 80059a8:	d101      	bne.n	80059ae <__sflush_r+0x7a>
 80059aa:	682b      	ldr	r3, [r5, #0]
 80059ac:	b903      	cbnz	r3, 80059b0 <__sflush_r+0x7c>
 80059ae:	6560      	str	r0, [r4, #84]	; 0x54
 80059b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059b2:	602f      	str	r7, [r5, #0]
 80059b4:	2900      	cmp	r1, #0
 80059b6:	d0ca      	beq.n	800594e <__sflush_r+0x1a>
 80059b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059bc:	4299      	cmp	r1, r3
 80059be:	d002      	beq.n	80059c6 <__sflush_r+0x92>
 80059c0:	4628      	mov	r0, r5
 80059c2:	f000 f9d7 	bl	8005d74 <_free_r>
 80059c6:	2000      	movs	r0, #0
 80059c8:	6360      	str	r0, [r4, #52]	; 0x34
 80059ca:	e7c1      	b.n	8005950 <__sflush_r+0x1c>
 80059cc:	6a21      	ldr	r1, [r4, #32]
 80059ce:	2301      	movs	r3, #1
 80059d0:	4628      	mov	r0, r5
 80059d2:	47b0      	blx	r6
 80059d4:	1c41      	adds	r1, r0, #1
 80059d6:	d1c7      	bne.n	8005968 <__sflush_r+0x34>
 80059d8:	682b      	ldr	r3, [r5, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d0c4      	beq.n	8005968 <__sflush_r+0x34>
 80059de:	2b1d      	cmp	r3, #29
 80059e0:	d001      	beq.n	80059e6 <__sflush_r+0xb2>
 80059e2:	2b16      	cmp	r3, #22
 80059e4:	d101      	bne.n	80059ea <__sflush_r+0xb6>
 80059e6:	602f      	str	r7, [r5, #0]
 80059e8:	e7b1      	b.n	800594e <__sflush_r+0x1a>
 80059ea:	89a3      	ldrh	r3, [r4, #12]
 80059ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059f0:	81a3      	strh	r3, [r4, #12]
 80059f2:	e7ad      	b.n	8005950 <__sflush_r+0x1c>
 80059f4:	690f      	ldr	r7, [r1, #16]
 80059f6:	2f00      	cmp	r7, #0
 80059f8:	d0a9      	beq.n	800594e <__sflush_r+0x1a>
 80059fa:	0793      	lsls	r3, r2, #30
 80059fc:	680e      	ldr	r6, [r1, #0]
 80059fe:	bf08      	it	eq
 8005a00:	694b      	ldreq	r3, [r1, #20]
 8005a02:	600f      	str	r7, [r1, #0]
 8005a04:	bf18      	it	ne
 8005a06:	2300      	movne	r3, #0
 8005a08:	eba6 0807 	sub.w	r8, r6, r7
 8005a0c:	608b      	str	r3, [r1, #8]
 8005a0e:	f1b8 0f00 	cmp.w	r8, #0
 8005a12:	dd9c      	ble.n	800594e <__sflush_r+0x1a>
 8005a14:	6a21      	ldr	r1, [r4, #32]
 8005a16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a18:	4643      	mov	r3, r8
 8005a1a:	463a      	mov	r2, r7
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	47b0      	blx	r6
 8005a20:	2800      	cmp	r0, #0
 8005a22:	dc06      	bgt.n	8005a32 <__sflush_r+0xfe>
 8005a24:	89a3      	ldrh	r3, [r4, #12]
 8005a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a2a:	81a3      	strh	r3, [r4, #12]
 8005a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a30:	e78e      	b.n	8005950 <__sflush_r+0x1c>
 8005a32:	4407      	add	r7, r0
 8005a34:	eba8 0800 	sub.w	r8, r8, r0
 8005a38:	e7e9      	b.n	8005a0e <__sflush_r+0xda>
 8005a3a:	bf00      	nop
 8005a3c:	20400001 	.word	0x20400001

08005a40 <_fflush_r>:
 8005a40:	b538      	push	{r3, r4, r5, lr}
 8005a42:	690b      	ldr	r3, [r1, #16]
 8005a44:	4605      	mov	r5, r0
 8005a46:	460c      	mov	r4, r1
 8005a48:	b913      	cbnz	r3, 8005a50 <_fflush_r+0x10>
 8005a4a:	2500      	movs	r5, #0
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	bd38      	pop	{r3, r4, r5, pc}
 8005a50:	b118      	cbz	r0, 8005a5a <_fflush_r+0x1a>
 8005a52:	6983      	ldr	r3, [r0, #24]
 8005a54:	b90b      	cbnz	r3, 8005a5a <_fflush_r+0x1a>
 8005a56:	f000 f887 	bl	8005b68 <__sinit>
 8005a5a:	4b14      	ldr	r3, [pc, #80]	; (8005aac <_fflush_r+0x6c>)
 8005a5c:	429c      	cmp	r4, r3
 8005a5e:	d11b      	bne.n	8005a98 <_fflush_r+0x58>
 8005a60:	686c      	ldr	r4, [r5, #4]
 8005a62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d0ef      	beq.n	8005a4a <_fflush_r+0xa>
 8005a6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a6c:	07d0      	lsls	r0, r2, #31
 8005a6e:	d404      	bmi.n	8005a7a <_fflush_r+0x3a>
 8005a70:	0599      	lsls	r1, r3, #22
 8005a72:	d402      	bmi.n	8005a7a <_fflush_r+0x3a>
 8005a74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a76:	f000 f915 	bl	8005ca4 <__retarget_lock_acquire_recursive>
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	4621      	mov	r1, r4
 8005a7e:	f7ff ff59 	bl	8005934 <__sflush_r>
 8005a82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a84:	07da      	lsls	r2, r3, #31
 8005a86:	4605      	mov	r5, r0
 8005a88:	d4e0      	bmi.n	8005a4c <_fflush_r+0xc>
 8005a8a:	89a3      	ldrh	r3, [r4, #12]
 8005a8c:	059b      	lsls	r3, r3, #22
 8005a8e:	d4dd      	bmi.n	8005a4c <_fflush_r+0xc>
 8005a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a92:	f000 f908 	bl	8005ca6 <__retarget_lock_release_recursive>
 8005a96:	e7d9      	b.n	8005a4c <_fflush_r+0xc>
 8005a98:	4b05      	ldr	r3, [pc, #20]	; (8005ab0 <_fflush_r+0x70>)
 8005a9a:	429c      	cmp	r4, r3
 8005a9c:	d101      	bne.n	8005aa2 <_fflush_r+0x62>
 8005a9e:	68ac      	ldr	r4, [r5, #8]
 8005aa0:	e7df      	b.n	8005a62 <_fflush_r+0x22>
 8005aa2:	4b04      	ldr	r3, [pc, #16]	; (8005ab4 <_fflush_r+0x74>)
 8005aa4:	429c      	cmp	r4, r3
 8005aa6:	bf08      	it	eq
 8005aa8:	68ec      	ldreq	r4, [r5, #12]
 8005aaa:	e7da      	b.n	8005a62 <_fflush_r+0x22>
 8005aac:	0800650c 	.word	0x0800650c
 8005ab0:	0800652c 	.word	0x0800652c
 8005ab4:	080064ec 	.word	0x080064ec

08005ab8 <std>:
 8005ab8:	2300      	movs	r3, #0
 8005aba:	b510      	push	{r4, lr}
 8005abc:	4604      	mov	r4, r0
 8005abe:	e9c0 3300 	strd	r3, r3, [r0]
 8005ac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ac6:	6083      	str	r3, [r0, #8]
 8005ac8:	8181      	strh	r1, [r0, #12]
 8005aca:	6643      	str	r3, [r0, #100]	; 0x64
 8005acc:	81c2      	strh	r2, [r0, #14]
 8005ace:	6183      	str	r3, [r0, #24]
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	2208      	movs	r2, #8
 8005ad4:	305c      	adds	r0, #92	; 0x5c
 8005ad6:	f7ff fb57 	bl	8005188 <memset>
 8005ada:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <std+0x38>)
 8005adc:	6263      	str	r3, [r4, #36]	; 0x24
 8005ade:	4b05      	ldr	r3, [pc, #20]	; (8005af4 <std+0x3c>)
 8005ae0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ae2:	4b05      	ldr	r3, [pc, #20]	; (8005af8 <std+0x40>)
 8005ae4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ae6:	4b05      	ldr	r3, [pc, #20]	; (8005afc <std+0x44>)
 8005ae8:	6224      	str	r4, [r4, #32]
 8005aea:	6323      	str	r3, [r4, #48]	; 0x30
 8005aec:	bd10      	pop	{r4, pc}
 8005aee:	bf00      	nop
 8005af0:	08005fdd 	.word	0x08005fdd
 8005af4:	08005fff 	.word	0x08005fff
 8005af8:	08006037 	.word	0x08006037
 8005afc:	0800605b 	.word	0x0800605b

08005b00 <_cleanup_r>:
 8005b00:	4901      	ldr	r1, [pc, #4]	; (8005b08 <_cleanup_r+0x8>)
 8005b02:	f000 b8af 	b.w	8005c64 <_fwalk_reent>
 8005b06:	bf00      	nop
 8005b08:	08005a41 	.word	0x08005a41

08005b0c <__sfmoreglue>:
 8005b0c:	b570      	push	{r4, r5, r6, lr}
 8005b0e:	2268      	movs	r2, #104	; 0x68
 8005b10:	1e4d      	subs	r5, r1, #1
 8005b12:	4355      	muls	r5, r2
 8005b14:	460e      	mov	r6, r1
 8005b16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005b1a:	f000 f997 	bl	8005e4c <_malloc_r>
 8005b1e:	4604      	mov	r4, r0
 8005b20:	b140      	cbz	r0, 8005b34 <__sfmoreglue+0x28>
 8005b22:	2100      	movs	r1, #0
 8005b24:	e9c0 1600 	strd	r1, r6, [r0]
 8005b28:	300c      	adds	r0, #12
 8005b2a:	60a0      	str	r0, [r4, #8]
 8005b2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005b30:	f7ff fb2a 	bl	8005188 <memset>
 8005b34:	4620      	mov	r0, r4
 8005b36:	bd70      	pop	{r4, r5, r6, pc}

08005b38 <__sfp_lock_acquire>:
 8005b38:	4801      	ldr	r0, [pc, #4]	; (8005b40 <__sfp_lock_acquire+0x8>)
 8005b3a:	f000 b8b3 	b.w	8005ca4 <__retarget_lock_acquire_recursive>
 8005b3e:	bf00      	nop
 8005b40:	20000285 	.word	0x20000285

08005b44 <__sfp_lock_release>:
 8005b44:	4801      	ldr	r0, [pc, #4]	; (8005b4c <__sfp_lock_release+0x8>)
 8005b46:	f000 b8ae 	b.w	8005ca6 <__retarget_lock_release_recursive>
 8005b4a:	bf00      	nop
 8005b4c:	20000285 	.word	0x20000285

08005b50 <__sinit_lock_acquire>:
 8005b50:	4801      	ldr	r0, [pc, #4]	; (8005b58 <__sinit_lock_acquire+0x8>)
 8005b52:	f000 b8a7 	b.w	8005ca4 <__retarget_lock_acquire_recursive>
 8005b56:	bf00      	nop
 8005b58:	20000286 	.word	0x20000286

08005b5c <__sinit_lock_release>:
 8005b5c:	4801      	ldr	r0, [pc, #4]	; (8005b64 <__sinit_lock_release+0x8>)
 8005b5e:	f000 b8a2 	b.w	8005ca6 <__retarget_lock_release_recursive>
 8005b62:	bf00      	nop
 8005b64:	20000286 	.word	0x20000286

08005b68 <__sinit>:
 8005b68:	b510      	push	{r4, lr}
 8005b6a:	4604      	mov	r4, r0
 8005b6c:	f7ff fff0 	bl	8005b50 <__sinit_lock_acquire>
 8005b70:	69a3      	ldr	r3, [r4, #24]
 8005b72:	b11b      	cbz	r3, 8005b7c <__sinit+0x14>
 8005b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b78:	f7ff bff0 	b.w	8005b5c <__sinit_lock_release>
 8005b7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005b80:	6523      	str	r3, [r4, #80]	; 0x50
 8005b82:	4b13      	ldr	r3, [pc, #76]	; (8005bd0 <__sinit+0x68>)
 8005b84:	4a13      	ldr	r2, [pc, #76]	; (8005bd4 <__sinit+0x6c>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	62a2      	str	r2, [r4, #40]	; 0x28
 8005b8a:	42a3      	cmp	r3, r4
 8005b8c:	bf04      	itt	eq
 8005b8e:	2301      	moveq	r3, #1
 8005b90:	61a3      	streq	r3, [r4, #24]
 8005b92:	4620      	mov	r0, r4
 8005b94:	f000 f820 	bl	8005bd8 <__sfp>
 8005b98:	6060      	str	r0, [r4, #4]
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	f000 f81c 	bl	8005bd8 <__sfp>
 8005ba0:	60a0      	str	r0, [r4, #8]
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	f000 f818 	bl	8005bd8 <__sfp>
 8005ba8:	2200      	movs	r2, #0
 8005baa:	60e0      	str	r0, [r4, #12]
 8005bac:	2104      	movs	r1, #4
 8005bae:	6860      	ldr	r0, [r4, #4]
 8005bb0:	f7ff ff82 	bl	8005ab8 <std>
 8005bb4:	68a0      	ldr	r0, [r4, #8]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	2109      	movs	r1, #9
 8005bba:	f7ff ff7d 	bl	8005ab8 <std>
 8005bbe:	68e0      	ldr	r0, [r4, #12]
 8005bc0:	2202      	movs	r2, #2
 8005bc2:	2112      	movs	r1, #18
 8005bc4:	f7ff ff78 	bl	8005ab8 <std>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	61a3      	str	r3, [r4, #24]
 8005bcc:	e7d2      	b.n	8005b74 <__sinit+0xc>
 8005bce:	bf00      	nop
 8005bd0:	080064b4 	.word	0x080064b4
 8005bd4:	08005b01 	.word	0x08005b01

08005bd8 <__sfp>:
 8005bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bda:	4607      	mov	r7, r0
 8005bdc:	f7ff ffac 	bl	8005b38 <__sfp_lock_acquire>
 8005be0:	4b1e      	ldr	r3, [pc, #120]	; (8005c5c <__sfp+0x84>)
 8005be2:	681e      	ldr	r6, [r3, #0]
 8005be4:	69b3      	ldr	r3, [r6, #24]
 8005be6:	b913      	cbnz	r3, 8005bee <__sfp+0x16>
 8005be8:	4630      	mov	r0, r6
 8005bea:	f7ff ffbd 	bl	8005b68 <__sinit>
 8005bee:	3648      	adds	r6, #72	; 0x48
 8005bf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	d503      	bpl.n	8005c00 <__sfp+0x28>
 8005bf8:	6833      	ldr	r3, [r6, #0]
 8005bfa:	b30b      	cbz	r3, 8005c40 <__sfp+0x68>
 8005bfc:	6836      	ldr	r6, [r6, #0]
 8005bfe:	e7f7      	b.n	8005bf0 <__sfp+0x18>
 8005c00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005c04:	b9d5      	cbnz	r5, 8005c3c <__sfp+0x64>
 8005c06:	4b16      	ldr	r3, [pc, #88]	; (8005c60 <__sfp+0x88>)
 8005c08:	60e3      	str	r3, [r4, #12]
 8005c0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005c0e:	6665      	str	r5, [r4, #100]	; 0x64
 8005c10:	f000 f847 	bl	8005ca2 <__retarget_lock_init_recursive>
 8005c14:	f7ff ff96 	bl	8005b44 <__sfp_lock_release>
 8005c18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005c1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005c20:	6025      	str	r5, [r4, #0]
 8005c22:	61a5      	str	r5, [r4, #24]
 8005c24:	2208      	movs	r2, #8
 8005c26:	4629      	mov	r1, r5
 8005c28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c2c:	f7ff faac 	bl	8005188 <memset>
 8005c30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c38:	4620      	mov	r0, r4
 8005c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c3c:	3468      	adds	r4, #104	; 0x68
 8005c3e:	e7d9      	b.n	8005bf4 <__sfp+0x1c>
 8005c40:	2104      	movs	r1, #4
 8005c42:	4638      	mov	r0, r7
 8005c44:	f7ff ff62 	bl	8005b0c <__sfmoreglue>
 8005c48:	4604      	mov	r4, r0
 8005c4a:	6030      	str	r0, [r6, #0]
 8005c4c:	2800      	cmp	r0, #0
 8005c4e:	d1d5      	bne.n	8005bfc <__sfp+0x24>
 8005c50:	f7ff ff78 	bl	8005b44 <__sfp_lock_release>
 8005c54:	230c      	movs	r3, #12
 8005c56:	603b      	str	r3, [r7, #0]
 8005c58:	e7ee      	b.n	8005c38 <__sfp+0x60>
 8005c5a:	bf00      	nop
 8005c5c:	080064b4 	.word	0x080064b4
 8005c60:	ffff0001 	.word	0xffff0001

08005c64 <_fwalk_reent>:
 8005c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c68:	4606      	mov	r6, r0
 8005c6a:	4688      	mov	r8, r1
 8005c6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005c70:	2700      	movs	r7, #0
 8005c72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c76:	f1b9 0901 	subs.w	r9, r9, #1
 8005c7a:	d505      	bpl.n	8005c88 <_fwalk_reent+0x24>
 8005c7c:	6824      	ldr	r4, [r4, #0]
 8005c7e:	2c00      	cmp	r4, #0
 8005c80:	d1f7      	bne.n	8005c72 <_fwalk_reent+0xe>
 8005c82:	4638      	mov	r0, r7
 8005c84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c88:	89ab      	ldrh	r3, [r5, #12]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d907      	bls.n	8005c9e <_fwalk_reent+0x3a>
 8005c8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c92:	3301      	adds	r3, #1
 8005c94:	d003      	beq.n	8005c9e <_fwalk_reent+0x3a>
 8005c96:	4629      	mov	r1, r5
 8005c98:	4630      	mov	r0, r6
 8005c9a:	47c0      	blx	r8
 8005c9c:	4307      	orrs	r7, r0
 8005c9e:	3568      	adds	r5, #104	; 0x68
 8005ca0:	e7e9      	b.n	8005c76 <_fwalk_reent+0x12>

08005ca2 <__retarget_lock_init_recursive>:
 8005ca2:	4770      	bx	lr

08005ca4 <__retarget_lock_acquire_recursive>:
 8005ca4:	4770      	bx	lr

08005ca6 <__retarget_lock_release_recursive>:
 8005ca6:	4770      	bx	lr

08005ca8 <__swhatbuf_r>:
 8005ca8:	b570      	push	{r4, r5, r6, lr}
 8005caa:	460e      	mov	r6, r1
 8005cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cb0:	2900      	cmp	r1, #0
 8005cb2:	b096      	sub	sp, #88	; 0x58
 8005cb4:	4614      	mov	r4, r2
 8005cb6:	461d      	mov	r5, r3
 8005cb8:	da08      	bge.n	8005ccc <__swhatbuf_r+0x24>
 8005cba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	602a      	str	r2, [r5, #0]
 8005cc2:	061a      	lsls	r2, r3, #24
 8005cc4:	d410      	bmi.n	8005ce8 <__swhatbuf_r+0x40>
 8005cc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cca:	e00e      	b.n	8005cea <__swhatbuf_r+0x42>
 8005ccc:	466a      	mov	r2, sp
 8005cce:	f000 f9eb 	bl	80060a8 <_fstat_r>
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	dbf1      	blt.n	8005cba <__swhatbuf_r+0x12>
 8005cd6:	9a01      	ldr	r2, [sp, #4]
 8005cd8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005cdc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ce0:	425a      	negs	r2, r3
 8005ce2:	415a      	adcs	r2, r3
 8005ce4:	602a      	str	r2, [r5, #0]
 8005ce6:	e7ee      	b.n	8005cc6 <__swhatbuf_r+0x1e>
 8005ce8:	2340      	movs	r3, #64	; 0x40
 8005cea:	2000      	movs	r0, #0
 8005cec:	6023      	str	r3, [r4, #0]
 8005cee:	b016      	add	sp, #88	; 0x58
 8005cf0:	bd70      	pop	{r4, r5, r6, pc}
	...

08005cf4 <__smakebuf_r>:
 8005cf4:	898b      	ldrh	r3, [r1, #12]
 8005cf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005cf8:	079d      	lsls	r5, r3, #30
 8005cfa:	4606      	mov	r6, r0
 8005cfc:	460c      	mov	r4, r1
 8005cfe:	d507      	bpl.n	8005d10 <__smakebuf_r+0x1c>
 8005d00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d04:	6023      	str	r3, [r4, #0]
 8005d06:	6123      	str	r3, [r4, #16]
 8005d08:	2301      	movs	r3, #1
 8005d0a:	6163      	str	r3, [r4, #20]
 8005d0c:	b002      	add	sp, #8
 8005d0e:	bd70      	pop	{r4, r5, r6, pc}
 8005d10:	ab01      	add	r3, sp, #4
 8005d12:	466a      	mov	r2, sp
 8005d14:	f7ff ffc8 	bl	8005ca8 <__swhatbuf_r>
 8005d18:	9900      	ldr	r1, [sp, #0]
 8005d1a:	4605      	mov	r5, r0
 8005d1c:	4630      	mov	r0, r6
 8005d1e:	f000 f895 	bl	8005e4c <_malloc_r>
 8005d22:	b948      	cbnz	r0, 8005d38 <__smakebuf_r+0x44>
 8005d24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d28:	059a      	lsls	r2, r3, #22
 8005d2a:	d4ef      	bmi.n	8005d0c <__smakebuf_r+0x18>
 8005d2c:	f023 0303 	bic.w	r3, r3, #3
 8005d30:	f043 0302 	orr.w	r3, r3, #2
 8005d34:	81a3      	strh	r3, [r4, #12]
 8005d36:	e7e3      	b.n	8005d00 <__smakebuf_r+0xc>
 8005d38:	4b0d      	ldr	r3, [pc, #52]	; (8005d70 <__smakebuf_r+0x7c>)
 8005d3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d3c:	89a3      	ldrh	r3, [r4, #12]
 8005d3e:	6020      	str	r0, [r4, #0]
 8005d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d44:	81a3      	strh	r3, [r4, #12]
 8005d46:	9b00      	ldr	r3, [sp, #0]
 8005d48:	6163      	str	r3, [r4, #20]
 8005d4a:	9b01      	ldr	r3, [sp, #4]
 8005d4c:	6120      	str	r0, [r4, #16]
 8005d4e:	b15b      	cbz	r3, 8005d68 <__smakebuf_r+0x74>
 8005d50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d54:	4630      	mov	r0, r6
 8005d56:	f000 f9b9 	bl	80060cc <_isatty_r>
 8005d5a:	b128      	cbz	r0, 8005d68 <__smakebuf_r+0x74>
 8005d5c:	89a3      	ldrh	r3, [r4, #12]
 8005d5e:	f023 0303 	bic.w	r3, r3, #3
 8005d62:	f043 0301 	orr.w	r3, r3, #1
 8005d66:	81a3      	strh	r3, [r4, #12]
 8005d68:	89a0      	ldrh	r0, [r4, #12]
 8005d6a:	4305      	orrs	r5, r0
 8005d6c:	81a5      	strh	r5, [r4, #12]
 8005d6e:	e7cd      	b.n	8005d0c <__smakebuf_r+0x18>
 8005d70:	08005b01 	.word	0x08005b01

08005d74 <_free_r>:
 8005d74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d76:	2900      	cmp	r1, #0
 8005d78:	d044      	beq.n	8005e04 <_free_r+0x90>
 8005d7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d7e:	9001      	str	r0, [sp, #4]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f1a1 0404 	sub.w	r4, r1, #4
 8005d86:	bfb8      	it	lt
 8005d88:	18e4      	addlt	r4, r4, r3
 8005d8a:	f000 f9c1 	bl	8006110 <__malloc_lock>
 8005d8e:	4a1e      	ldr	r2, [pc, #120]	; (8005e08 <_free_r+0x94>)
 8005d90:	9801      	ldr	r0, [sp, #4]
 8005d92:	6813      	ldr	r3, [r2, #0]
 8005d94:	b933      	cbnz	r3, 8005da4 <_free_r+0x30>
 8005d96:	6063      	str	r3, [r4, #4]
 8005d98:	6014      	str	r4, [r2, #0]
 8005d9a:	b003      	add	sp, #12
 8005d9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005da0:	f000 b9bc 	b.w	800611c <__malloc_unlock>
 8005da4:	42a3      	cmp	r3, r4
 8005da6:	d908      	bls.n	8005dba <_free_r+0x46>
 8005da8:	6825      	ldr	r5, [r4, #0]
 8005daa:	1961      	adds	r1, r4, r5
 8005dac:	428b      	cmp	r3, r1
 8005dae:	bf01      	itttt	eq
 8005db0:	6819      	ldreq	r1, [r3, #0]
 8005db2:	685b      	ldreq	r3, [r3, #4]
 8005db4:	1949      	addeq	r1, r1, r5
 8005db6:	6021      	streq	r1, [r4, #0]
 8005db8:	e7ed      	b.n	8005d96 <_free_r+0x22>
 8005dba:	461a      	mov	r2, r3
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	b10b      	cbz	r3, 8005dc4 <_free_r+0x50>
 8005dc0:	42a3      	cmp	r3, r4
 8005dc2:	d9fa      	bls.n	8005dba <_free_r+0x46>
 8005dc4:	6811      	ldr	r1, [r2, #0]
 8005dc6:	1855      	adds	r5, r2, r1
 8005dc8:	42a5      	cmp	r5, r4
 8005dca:	d10b      	bne.n	8005de4 <_free_r+0x70>
 8005dcc:	6824      	ldr	r4, [r4, #0]
 8005dce:	4421      	add	r1, r4
 8005dd0:	1854      	adds	r4, r2, r1
 8005dd2:	42a3      	cmp	r3, r4
 8005dd4:	6011      	str	r1, [r2, #0]
 8005dd6:	d1e0      	bne.n	8005d9a <_free_r+0x26>
 8005dd8:	681c      	ldr	r4, [r3, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	6053      	str	r3, [r2, #4]
 8005dde:	4421      	add	r1, r4
 8005de0:	6011      	str	r1, [r2, #0]
 8005de2:	e7da      	b.n	8005d9a <_free_r+0x26>
 8005de4:	d902      	bls.n	8005dec <_free_r+0x78>
 8005de6:	230c      	movs	r3, #12
 8005de8:	6003      	str	r3, [r0, #0]
 8005dea:	e7d6      	b.n	8005d9a <_free_r+0x26>
 8005dec:	6825      	ldr	r5, [r4, #0]
 8005dee:	1961      	adds	r1, r4, r5
 8005df0:	428b      	cmp	r3, r1
 8005df2:	bf04      	itt	eq
 8005df4:	6819      	ldreq	r1, [r3, #0]
 8005df6:	685b      	ldreq	r3, [r3, #4]
 8005df8:	6063      	str	r3, [r4, #4]
 8005dfa:	bf04      	itt	eq
 8005dfc:	1949      	addeq	r1, r1, r5
 8005dfe:	6021      	streq	r1, [r4, #0]
 8005e00:	6054      	str	r4, [r2, #4]
 8005e02:	e7ca      	b.n	8005d9a <_free_r+0x26>
 8005e04:	b003      	add	sp, #12
 8005e06:	bd30      	pop	{r4, r5, pc}
 8005e08:	20000288 	.word	0x20000288

08005e0c <sbrk_aligned>:
 8005e0c:	b570      	push	{r4, r5, r6, lr}
 8005e0e:	4e0e      	ldr	r6, [pc, #56]	; (8005e48 <sbrk_aligned+0x3c>)
 8005e10:	460c      	mov	r4, r1
 8005e12:	6831      	ldr	r1, [r6, #0]
 8005e14:	4605      	mov	r5, r0
 8005e16:	b911      	cbnz	r1, 8005e1e <sbrk_aligned+0x12>
 8005e18:	f000 f88c 	bl	8005f34 <_sbrk_r>
 8005e1c:	6030      	str	r0, [r6, #0]
 8005e1e:	4621      	mov	r1, r4
 8005e20:	4628      	mov	r0, r5
 8005e22:	f000 f887 	bl	8005f34 <_sbrk_r>
 8005e26:	1c43      	adds	r3, r0, #1
 8005e28:	d00a      	beq.n	8005e40 <sbrk_aligned+0x34>
 8005e2a:	1cc4      	adds	r4, r0, #3
 8005e2c:	f024 0403 	bic.w	r4, r4, #3
 8005e30:	42a0      	cmp	r0, r4
 8005e32:	d007      	beq.n	8005e44 <sbrk_aligned+0x38>
 8005e34:	1a21      	subs	r1, r4, r0
 8005e36:	4628      	mov	r0, r5
 8005e38:	f000 f87c 	bl	8005f34 <_sbrk_r>
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	d101      	bne.n	8005e44 <sbrk_aligned+0x38>
 8005e40:	f04f 34ff 	mov.w	r4, #4294967295
 8005e44:	4620      	mov	r0, r4
 8005e46:	bd70      	pop	{r4, r5, r6, pc}
 8005e48:	2000028c 	.word	0x2000028c

08005e4c <_malloc_r>:
 8005e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e50:	1ccd      	adds	r5, r1, #3
 8005e52:	f025 0503 	bic.w	r5, r5, #3
 8005e56:	3508      	adds	r5, #8
 8005e58:	2d0c      	cmp	r5, #12
 8005e5a:	bf38      	it	cc
 8005e5c:	250c      	movcc	r5, #12
 8005e5e:	2d00      	cmp	r5, #0
 8005e60:	4607      	mov	r7, r0
 8005e62:	db01      	blt.n	8005e68 <_malloc_r+0x1c>
 8005e64:	42a9      	cmp	r1, r5
 8005e66:	d905      	bls.n	8005e74 <_malloc_r+0x28>
 8005e68:	230c      	movs	r3, #12
 8005e6a:	603b      	str	r3, [r7, #0]
 8005e6c:	2600      	movs	r6, #0
 8005e6e:	4630      	mov	r0, r6
 8005e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e74:	4e2e      	ldr	r6, [pc, #184]	; (8005f30 <_malloc_r+0xe4>)
 8005e76:	f000 f94b 	bl	8006110 <__malloc_lock>
 8005e7a:	6833      	ldr	r3, [r6, #0]
 8005e7c:	461c      	mov	r4, r3
 8005e7e:	bb34      	cbnz	r4, 8005ece <_malloc_r+0x82>
 8005e80:	4629      	mov	r1, r5
 8005e82:	4638      	mov	r0, r7
 8005e84:	f7ff ffc2 	bl	8005e0c <sbrk_aligned>
 8005e88:	1c43      	adds	r3, r0, #1
 8005e8a:	4604      	mov	r4, r0
 8005e8c:	d14d      	bne.n	8005f2a <_malloc_r+0xde>
 8005e8e:	6834      	ldr	r4, [r6, #0]
 8005e90:	4626      	mov	r6, r4
 8005e92:	2e00      	cmp	r6, #0
 8005e94:	d140      	bne.n	8005f18 <_malloc_r+0xcc>
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	4631      	mov	r1, r6
 8005e9a:	4638      	mov	r0, r7
 8005e9c:	eb04 0803 	add.w	r8, r4, r3
 8005ea0:	f000 f848 	bl	8005f34 <_sbrk_r>
 8005ea4:	4580      	cmp	r8, r0
 8005ea6:	d13a      	bne.n	8005f1e <_malloc_r+0xd2>
 8005ea8:	6821      	ldr	r1, [r4, #0]
 8005eaa:	3503      	adds	r5, #3
 8005eac:	1a6d      	subs	r5, r5, r1
 8005eae:	f025 0503 	bic.w	r5, r5, #3
 8005eb2:	3508      	adds	r5, #8
 8005eb4:	2d0c      	cmp	r5, #12
 8005eb6:	bf38      	it	cc
 8005eb8:	250c      	movcc	r5, #12
 8005eba:	4629      	mov	r1, r5
 8005ebc:	4638      	mov	r0, r7
 8005ebe:	f7ff ffa5 	bl	8005e0c <sbrk_aligned>
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	d02b      	beq.n	8005f1e <_malloc_r+0xd2>
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	442b      	add	r3, r5
 8005eca:	6023      	str	r3, [r4, #0]
 8005ecc:	e00e      	b.n	8005eec <_malloc_r+0xa0>
 8005ece:	6822      	ldr	r2, [r4, #0]
 8005ed0:	1b52      	subs	r2, r2, r5
 8005ed2:	d41e      	bmi.n	8005f12 <_malloc_r+0xc6>
 8005ed4:	2a0b      	cmp	r2, #11
 8005ed6:	d916      	bls.n	8005f06 <_malloc_r+0xba>
 8005ed8:	1961      	adds	r1, r4, r5
 8005eda:	42a3      	cmp	r3, r4
 8005edc:	6025      	str	r5, [r4, #0]
 8005ede:	bf18      	it	ne
 8005ee0:	6059      	strne	r1, [r3, #4]
 8005ee2:	6863      	ldr	r3, [r4, #4]
 8005ee4:	bf08      	it	eq
 8005ee6:	6031      	streq	r1, [r6, #0]
 8005ee8:	5162      	str	r2, [r4, r5]
 8005eea:	604b      	str	r3, [r1, #4]
 8005eec:	4638      	mov	r0, r7
 8005eee:	f104 060b 	add.w	r6, r4, #11
 8005ef2:	f000 f913 	bl	800611c <__malloc_unlock>
 8005ef6:	f026 0607 	bic.w	r6, r6, #7
 8005efa:	1d23      	adds	r3, r4, #4
 8005efc:	1af2      	subs	r2, r6, r3
 8005efe:	d0b6      	beq.n	8005e6e <_malloc_r+0x22>
 8005f00:	1b9b      	subs	r3, r3, r6
 8005f02:	50a3      	str	r3, [r4, r2]
 8005f04:	e7b3      	b.n	8005e6e <_malloc_r+0x22>
 8005f06:	6862      	ldr	r2, [r4, #4]
 8005f08:	42a3      	cmp	r3, r4
 8005f0a:	bf0c      	ite	eq
 8005f0c:	6032      	streq	r2, [r6, #0]
 8005f0e:	605a      	strne	r2, [r3, #4]
 8005f10:	e7ec      	b.n	8005eec <_malloc_r+0xa0>
 8005f12:	4623      	mov	r3, r4
 8005f14:	6864      	ldr	r4, [r4, #4]
 8005f16:	e7b2      	b.n	8005e7e <_malloc_r+0x32>
 8005f18:	4634      	mov	r4, r6
 8005f1a:	6876      	ldr	r6, [r6, #4]
 8005f1c:	e7b9      	b.n	8005e92 <_malloc_r+0x46>
 8005f1e:	230c      	movs	r3, #12
 8005f20:	603b      	str	r3, [r7, #0]
 8005f22:	4638      	mov	r0, r7
 8005f24:	f000 f8fa 	bl	800611c <__malloc_unlock>
 8005f28:	e7a1      	b.n	8005e6e <_malloc_r+0x22>
 8005f2a:	6025      	str	r5, [r4, #0]
 8005f2c:	e7de      	b.n	8005eec <_malloc_r+0xa0>
 8005f2e:	bf00      	nop
 8005f30:	20000288 	.word	0x20000288

08005f34 <_sbrk_r>:
 8005f34:	b538      	push	{r3, r4, r5, lr}
 8005f36:	4d06      	ldr	r5, [pc, #24]	; (8005f50 <_sbrk_r+0x1c>)
 8005f38:	2300      	movs	r3, #0
 8005f3a:	4604      	mov	r4, r0
 8005f3c:	4608      	mov	r0, r1
 8005f3e:	602b      	str	r3, [r5, #0]
 8005f40:	f7fa ffe0 	bl	8000f04 <_sbrk>
 8005f44:	1c43      	adds	r3, r0, #1
 8005f46:	d102      	bne.n	8005f4e <_sbrk_r+0x1a>
 8005f48:	682b      	ldr	r3, [r5, #0]
 8005f4a:	b103      	cbz	r3, 8005f4e <_sbrk_r+0x1a>
 8005f4c:	6023      	str	r3, [r4, #0]
 8005f4e:	bd38      	pop	{r3, r4, r5, pc}
 8005f50:	20000290 	.word	0x20000290

08005f54 <_raise_r>:
 8005f54:	291f      	cmp	r1, #31
 8005f56:	b538      	push	{r3, r4, r5, lr}
 8005f58:	4604      	mov	r4, r0
 8005f5a:	460d      	mov	r5, r1
 8005f5c:	d904      	bls.n	8005f68 <_raise_r+0x14>
 8005f5e:	2316      	movs	r3, #22
 8005f60:	6003      	str	r3, [r0, #0]
 8005f62:	f04f 30ff 	mov.w	r0, #4294967295
 8005f66:	bd38      	pop	{r3, r4, r5, pc}
 8005f68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005f6a:	b112      	cbz	r2, 8005f72 <_raise_r+0x1e>
 8005f6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005f70:	b94b      	cbnz	r3, 8005f86 <_raise_r+0x32>
 8005f72:	4620      	mov	r0, r4
 8005f74:	f000 f830 	bl	8005fd8 <_getpid_r>
 8005f78:	462a      	mov	r2, r5
 8005f7a:	4601      	mov	r1, r0
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f82:	f000 b817 	b.w	8005fb4 <_kill_r>
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d00a      	beq.n	8005fa0 <_raise_r+0x4c>
 8005f8a:	1c59      	adds	r1, r3, #1
 8005f8c:	d103      	bne.n	8005f96 <_raise_r+0x42>
 8005f8e:	2316      	movs	r3, #22
 8005f90:	6003      	str	r3, [r0, #0]
 8005f92:	2001      	movs	r0, #1
 8005f94:	e7e7      	b.n	8005f66 <_raise_r+0x12>
 8005f96:	2400      	movs	r4, #0
 8005f98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	4798      	blx	r3
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	e7e0      	b.n	8005f66 <_raise_r+0x12>

08005fa4 <raise>:
 8005fa4:	4b02      	ldr	r3, [pc, #8]	; (8005fb0 <raise+0xc>)
 8005fa6:	4601      	mov	r1, r0
 8005fa8:	6818      	ldr	r0, [r3, #0]
 8005faa:	f7ff bfd3 	b.w	8005f54 <_raise_r>
 8005fae:	bf00      	nop
 8005fb0:	200000c4 	.word	0x200000c4

08005fb4 <_kill_r>:
 8005fb4:	b538      	push	{r3, r4, r5, lr}
 8005fb6:	4d07      	ldr	r5, [pc, #28]	; (8005fd4 <_kill_r+0x20>)
 8005fb8:	2300      	movs	r3, #0
 8005fba:	4604      	mov	r4, r0
 8005fbc:	4608      	mov	r0, r1
 8005fbe:	4611      	mov	r1, r2
 8005fc0:	602b      	str	r3, [r5, #0]
 8005fc2:	f7fa ff33 	bl	8000e2c <_kill>
 8005fc6:	1c43      	adds	r3, r0, #1
 8005fc8:	d102      	bne.n	8005fd0 <_kill_r+0x1c>
 8005fca:	682b      	ldr	r3, [r5, #0]
 8005fcc:	b103      	cbz	r3, 8005fd0 <_kill_r+0x1c>
 8005fce:	6023      	str	r3, [r4, #0]
 8005fd0:	bd38      	pop	{r3, r4, r5, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20000290 	.word	0x20000290

08005fd8 <_getpid_r>:
 8005fd8:	f7fa bf20 	b.w	8000e1c <_getpid>

08005fdc <__sread>:
 8005fdc:	b510      	push	{r4, lr}
 8005fde:	460c      	mov	r4, r1
 8005fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fe4:	f000 f8a0 	bl	8006128 <_read_r>
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	bfab      	itete	ge
 8005fec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005fee:	89a3      	ldrhlt	r3, [r4, #12]
 8005ff0:	181b      	addge	r3, r3, r0
 8005ff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ff6:	bfac      	ite	ge
 8005ff8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ffa:	81a3      	strhlt	r3, [r4, #12]
 8005ffc:	bd10      	pop	{r4, pc}

08005ffe <__swrite>:
 8005ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006002:	461f      	mov	r7, r3
 8006004:	898b      	ldrh	r3, [r1, #12]
 8006006:	05db      	lsls	r3, r3, #23
 8006008:	4605      	mov	r5, r0
 800600a:	460c      	mov	r4, r1
 800600c:	4616      	mov	r6, r2
 800600e:	d505      	bpl.n	800601c <__swrite+0x1e>
 8006010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006014:	2302      	movs	r3, #2
 8006016:	2200      	movs	r2, #0
 8006018:	f000 f868 	bl	80060ec <_lseek_r>
 800601c:	89a3      	ldrh	r3, [r4, #12]
 800601e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006022:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006026:	81a3      	strh	r3, [r4, #12]
 8006028:	4632      	mov	r2, r6
 800602a:	463b      	mov	r3, r7
 800602c:	4628      	mov	r0, r5
 800602e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006032:	f000 b817 	b.w	8006064 <_write_r>

08006036 <__sseek>:
 8006036:	b510      	push	{r4, lr}
 8006038:	460c      	mov	r4, r1
 800603a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800603e:	f000 f855 	bl	80060ec <_lseek_r>
 8006042:	1c43      	adds	r3, r0, #1
 8006044:	89a3      	ldrh	r3, [r4, #12]
 8006046:	bf15      	itete	ne
 8006048:	6560      	strne	r0, [r4, #84]	; 0x54
 800604a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800604e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006052:	81a3      	strheq	r3, [r4, #12]
 8006054:	bf18      	it	ne
 8006056:	81a3      	strhne	r3, [r4, #12]
 8006058:	bd10      	pop	{r4, pc}

0800605a <__sclose>:
 800605a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800605e:	f000 b813 	b.w	8006088 <_close_r>
	...

08006064 <_write_r>:
 8006064:	b538      	push	{r3, r4, r5, lr}
 8006066:	4d07      	ldr	r5, [pc, #28]	; (8006084 <_write_r+0x20>)
 8006068:	4604      	mov	r4, r0
 800606a:	4608      	mov	r0, r1
 800606c:	4611      	mov	r1, r2
 800606e:	2200      	movs	r2, #0
 8006070:	602a      	str	r2, [r5, #0]
 8006072:	461a      	mov	r2, r3
 8006074:	f7fa f923 	bl	80002be <_write>
 8006078:	1c43      	adds	r3, r0, #1
 800607a:	d102      	bne.n	8006082 <_write_r+0x1e>
 800607c:	682b      	ldr	r3, [r5, #0]
 800607e:	b103      	cbz	r3, 8006082 <_write_r+0x1e>
 8006080:	6023      	str	r3, [r4, #0]
 8006082:	bd38      	pop	{r3, r4, r5, pc}
 8006084:	20000290 	.word	0x20000290

08006088 <_close_r>:
 8006088:	b538      	push	{r3, r4, r5, lr}
 800608a:	4d06      	ldr	r5, [pc, #24]	; (80060a4 <_close_r+0x1c>)
 800608c:	2300      	movs	r3, #0
 800608e:	4604      	mov	r4, r0
 8006090:	4608      	mov	r0, r1
 8006092:	602b      	str	r3, [r5, #0]
 8006094:	f7fa ff01 	bl	8000e9a <_close>
 8006098:	1c43      	adds	r3, r0, #1
 800609a:	d102      	bne.n	80060a2 <_close_r+0x1a>
 800609c:	682b      	ldr	r3, [r5, #0]
 800609e:	b103      	cbz	r3, 80060a2 <_close_r+0x1a>
 80060a0:	6023      	str	r3, [r4, #0]
 80060a2:	bd38      	pop	{r3, r4, r5, pc}
 80060a4:	20000290 	.word	0x20000290

080060a8 <_fstat_r>:
 80060a8:	b538      	push	{r3, r4, r5, lr}
 80060aa:	4d07      	ldr	r5, [pc, #28]	; (80060c8 <_fstat_r+0x20>)
 80060ac:	2300      	movs	r3, #0
 80060ae:	4604      	mov	r4, r0
 80060b0:	4608      	mov	r0, r1
 80060b2:	4611      	mov	r1, r2
 80060b4:	602b      	str	r3, [r5, #0]
 80060b6:	f7fa fefc 	bl	8000eb2 <_fstat>
 80060ba:	1c43      	adds	r3, r0, #1
 80060bc:	d102      	bne.n	80060c4 <_fstat_r+0x1c>
 80060be:	682b      	ldr	r3, [r5, #0]
 80060c0:	b103      	cbz	r3, 80060c4 <_fstat_r+0x1c>
 80060c2:	6023      	str	r3, [r4, #0]
 80060c4:	bd38      	pop	{r3, r4, r5, pc}
 80060c6:	bf00      	nop
 80060c8:	20000290 	.word	0x20000290

080060cc <_isatty_r>:
 80060cc:	b538      	push	{r3, r4, r5, lr}
 80060ce:	4d06      	ldr	r5, [pc, #24]	; (80060e8 <_isatty_r+0x1c>)
 80060d0:	2300      	movs	r3, #0
 80060d2:	4604      	mov	r4, r0
 80060d4:	4608      	mov	r0, r1
 80060d6:	602b      	str	r3, [r5, #0]
 80060d8:	f7fa fefb 	bl	8000ed2 <_isatty>
 80060dc:	1c43      	adds	r3, r0, #1
 80060de:	d102      	bne.n	80060e6 <_isatty_r+0x1a>
 80060e0:	682b      	ldr	r3, [r5, #0]
 80060e2:	b103      	cbz	r3, 80060e6 <_isatty_r+0x1a>
 80060e4:	6023      	str	r3, [r4, #0]
 80060e6:	bd38      	pop	{r3, r4, r5, pc}
 80060e8:	20000290 	.word	0x20000290

080060ec <_lseek_r>:
 80060ec:	b538      	push	{r3, r4, r5, lr}
 80060ee:	4d07      	ldr	r5, [pc, #28]	; (800610c <_lseek_r+0x20>)
 80060f0:	4604      	mov	r4, r0
 80060f2:	4608      	mov	r0, r1
 80060f4:	4611      	mov	r1, r2
 80060f6:	2200      	movs	r2, #0
 80060f8:	602a      	str	r2, [r5, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	f7fa fef4 	bl	8000ee8 <_lseek>
 8006100:	1c43      	adds	r3, r0, #1
 8006102:	d102      	bne.n	800610a <_lseek_r+0x1e>
 8006104:	682b      	ldr	r3, [r5, #0]
 8006106:	b103      	cbz	r3, 800610a <_lseek_r+0x1e>
 8006108:	6023      	str	r3, [r4, #0]
 800610a:	bd38      	pop	{r3, r4, r5, pc}
 800610c:	20000290 	.word	0x20000290

08006110 <__malloc_lock>:
 8006110:	4801      	ldr	r0, [pc, #4]	; (8006118 <__malloc_lock+0x8>)
 8006112:	f7ff bdc7 	b.w	8005ca4 <__retarget_lock_acquire_recursive>
 8006116:	bf00      	nop
 8006118:	20000284 	.word	0x20000284

0800611c <__malloc_unlock>:
 800611c:	4801      	ldr	r0, [pc, #4]	; (8006124 <__malloc_unlock+0x8>)
 800611e:	f7ff bdc2 	b.w	8005ca6 <__retarget_lock_release_recursive>
 8006122:	bf00      	nop
 8006124:	20000284 	.word	0x20000284

08006128 <_read_r>:
 8006128:	b538      	push	{r3, r4, r5, lr}
 800612a:	4d07      	ldr	r5, [pc, #28]	; (8006148 <_read_r+0x20>)
 800612c:	4604      	mov	r4, r0
 800612e:	4608      	mov	r0, r1
 8006130:	4611      	mov	r1, r2
 8006132:	2200      	movs	r2, #0
 8006134:	602a      	str	r2, [r5, #0]
 8006136:	461a      	mov	r2, r3
 8006138:	f7fa fe92 	bl	8000e60 <_read>
 800613c:	1c43      	adds	r3, r0, #1
 800613e:	d102      	bne.n	8006146 <_read_r+0x1e>
 8006140:	682b      	ldr	r3, [r5, #0]
 8006142:	b103      	cbz	r3, 8006146 <_read_r+0x1e>
 8006144:	6023      	str	r3, [r4, #0]
 8006146:	bd38      	pop	{r3, r4, r5, pc}
 8006148:	20000290 	.word	0x20000290

0800614c <_init>:
 800614c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800614e:	bf00      	nop
 8006150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006152:	bc08      	pop	{r3}
 8006154:	469e      	mov	lr, r3
 8006156:	4770      	bx	lr

08006158 <_fini>:
 8006158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615a:	bf00      	nop
 800615c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800615e:	bc08      	pop	{r3}
 8006160:	469e      	mov	lr, r3
 8006162:	4770      	bx	lr
