
BBBeacon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008224  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  080083b4  080083b4  000183b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800889c  0800889c  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  0800889c  0800889c  0001889c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088a4  080088a4  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088a4  080088a4  000188a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088a8  080088a8  000188a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  080088ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000228  08008ad4  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  08008ad4  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148e8  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002965  00000000  00000000  00034b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  000374a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  000385f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dd79  00000000  00000000  00039640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000153a4  00000000  00000000  000573b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0bb7  00000000  00000000  0006c75d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d314  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053e4  00000000  00000000  0011d364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800839c 	.word	0x0800839c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	0800839c 	.word	0x0800839c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <AES_Encrypt>:
* Arguments   : *Data   Data to encrypt is a 16 byte long arry
*               *Key    Key to encrypt data with is a 16 byte long arry
*****************************************************************************************
*/
void AES_Encrypt(unsigned char *Data, unsigned char *Key)
{
 8000574:	b5b0      	push	{r4, r5, r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
	unsigned char i;
	unsigned char Row,Collum;
	unsigned char Round = 0x00;
 800057e:	2300      	movs	r3, #0
 8000580:	773b      	strb	r3, [r7, #28]
	unsigned char Round_Key[16];

	//Copy input to State arry
	for(Collum = 0; Collum < 4; Collum++)
 8000582:	2300      	movs	r3, #0
 8000584:	777b      	strb	r3, [r7, #29]
 8000586:	e01b      	b.n	80005c0 <AES_Encrypt+0x4c>
	{
		for(Row = 0; Row < 4; Row++)
 8000588:	2300      	movs	r3, #0
 800058a:	77bb      	strb	r3, [r7, #30]
 800058c:	e012      	b.n	80005b4 <AES_Encrypt+0x40>
		{
			State[Row][Collum] = Data[Row + (4*Collum)];
 800058e:	7fba      	ldrb	r2, [r7, #30]
 8000590:	7f7b      	ldrb	r3, [r7, #29]
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	4413      	add	r3, r2
 8000596:	461a      	mov	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	1899      	adds	r1, r3, r2
 800059c:	7fba      	ldrb	r2, [r7, #30]
 800059e:	7f7b      	ldrb	r3, [r7, #29]
 80005a0:	7808      	ldrb	r0, [r1, #0]
 80005a2:	4961      	ldr	r1, [pc, #388]	; (8000728 <AES_Encrypt+0x1b4>)
 80005a4:	0092      	lsls	r2, r2, #2
 80005a6:	440a      	add	r2, r1
 80005a8:	4413      	add	r3, r2
 80005aa:	4602      	mov	r2, r0
 80005ac:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 80005ae:	7fbb      	ldrb	r3, [r7, #30]
 80005b0:	3301      	adds	r3, #1
 80005b2:	77bb      	strb	r3, [r7, #30]
 80005b4:	7fbb      	ldrb	r3, [r7, #30]
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	d9e9      	bls.n	800058e <AES_Encrypt+0x1a>
	for(Collum = 0; Collum < 4; Collum++)
 80005ba:	7f7b      	ldrb	r3, [r7, #29]
 80005bc:	3301      	adds	r3, #1
 80005be:	777b      	strb	r3, [r7, #29]
 80005c0:	7f7b      	ldrb	r3, [r7, #29]
 80005c2:	2b03      	cmp	r3, #3
 80005c4:	d9e0      	bls.n	8000588 <AES_Encrypt+0x14>
		}
	}

	//Copy key to round key
	for(i = 0; i < 16; i++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	77fb      	strb	r3, [r7, #31]
 80005ca:	e00b      	b.n	80005e4 <AES_Encrypt+0x70>
	{
		Round_Key[i] = Key[i];
 80005cc:	7ffb      	ldrb	r3, [r7, #31]
 80005ce:	683a      	ldr	r2, [r7, #0]
 80005d0:	441a      	add	r2, r3
 80005d2:	7ffb      	ldrb	r3, [r7, #31]
 80005d4:	7812      	ldrb	r2, [r2, #0]
 80005d6:	3320      	adds	r3, #32
 80005d8:	443b      	add	r3, r7
 80005da:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(i = 0; i < 16; i++)
 80005de:	7ffb      	ldrb	r3, [r7, #31]
 80005e0:	3301      	adds	r3, #1
 80005e2:	77fb      	strb	r3, [r7, #31]
 80005e4:	7ffb      	ldrb	r3, [r7, #31]
 80005e6:	2b0f      	cmp	r3, #15
 80005e8:	d9f0      	bls.n	80005cc <AES_Encrypt+0x58>
	}

	//Add round key
	AES_Add_Round_Key(Round_Key);
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 f89c 	bl	800072c <AES_Add_Round_Key>

	//Preform 9 full rounds
	for(Round = 1; Round < 10; Round++)
 80005f4:	2301      	movs	r3, #1
 80005f6:	773b      	strb	r3, [r7, #28]
 80005f8:	e038      	b.n	800066c <AES_Encrypt+0xf8>
	{
		//Preform Byte substitution with S table
		for(Collum = 0; Collum < 4; Collum++)
 80005fa:	2300      	movs	r3, #0
 80005fc:	777b      	strb	r3, [r7, #29]
 80005fe:	e01f      	b.n	8000640 <AES_Encrypt+0xcc>
		{
			for(Row = 0; Row < 4; Row++)
 8000600:	2300      	movs	r3, #0
 8000602:	77bb      	strb	r3, [r7, #30]
 8000604:	e016      	b.n	8000634 <AES_Encrypt+0xc0>
			{
				State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 8000606:	7fba      	ldrb	r2, [r7, #30]
 8000608:	7f7b      	ldrb	r3, [r7, #29]
 800060a:	4947      	ldr	r1, [pc, #284]	; (8000728 <AES_Encrypt+0x1b4>)
 800060c:	0092      	lsls	r2, r2, #2
 800060e:	440a      	add	r2, r1
 8000610:	4413      	add	r3, r2
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	7fbd      	ldrb	r5, [r7, #30]
 8000616:	7f7c      	ldrb	r4, [r7, #29]
 8000618:	4618      	mov	r0, r3
 800061a:	f000 f8bf 	bl	800079c <AES_Sub_Byte>
 800061e:	4603      	mov	r3, r0
 8000620:	4619      	mov	r1, r3
 8000622:	4a41      	ldr	r2, [pc, #260]	; (8000728 <AES_Encrypt+0x1b4>)
 8000624:	00ab      	lsls	r3, r5, #2
 8000626:	4413      	add	r3, r2
 8000628:	4423      	add	r3, r4
 800062a:	460a      	mov	r2, r1
 800062c:	701a      	strb	r2, [r3, #0]
			for(Row = 0; Row < 4; Row++)
 800062e:	7fbb      	ldrb	r3, [r7, #30]
 8000630:	3301      	adds	r3, #1
 8000632:	77bb      	strb	r3, [r7, #30]
 8000634:	7fbb      	ldrb	r3, [r7, #30]
 8000636:	2b03      	cmp	r3, #3
 8000638:	d9e5      	bls.n	8000606 <AES_Encrypt+0x92>
		for(Collum = 0; Collum < 4; Collum++)
 800063a:	7f7b      	ldrb	r3, [r7, #29]
 800063c:	3301      	adds	r3, #1
 800063e:	777b      	strb	r3, [r7, #29]
 8000640:	7f7b      	ldrb	r3, [r7, #29]
 8000642:	2b03      	cmp	r3, #3
 8000644:	d9dc      	bls.n	8000600 <AES_Encrypt+0x8c>
			}
		}

		//Preform Row Shift
		AES_Shift_Rows();
 8000646:	f000 f8c7 	bl	80007d8 <AES_Shift_Rows>

		//Mix Collums
		AES_Mix_Collums();
 800064a:	f000 f909 	bl	8000860 <AES_Mix_Collums>

		//Calculate new round key
		AES_Calculate_Round_Key(Round,Round_Key);
 800064e:	f107 020c 	add.w	r2, r7, #12
 8000652:	7f3b      	ldrb	r3, [r7, #28]
 8000654:	4611      	mov	r1, r2
 8000656:	4618      	mov	r0, r3
 8000658:	f000 f998 	bl	800098c <AES_Calculate_Round_Key>

		//Add round key
		AES_Add_Round_Key(Round_Key);
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	4618      	mov	r0, r3
 8000662:	f000 f863 	bl	800072c <AES_Add_Round_Key>
	for(Round = 1; Round < 10; Round++)
 8000666:	7f3b      	ldrb	r3, [r7, #28]
 8000668:	3301      	adds	r3, #1
 800066a:	773b      	strb	r3, [r7, #28]
 800066c:	7f3b      	ldrb	r3, [r7, #28]
 800066e:	2b09      	cmp	r3, #9
 8000670:	d9c3      	bls.n	80005fa <AES_Encrypt+0x86>
	}

	//Last round whitout mix collums
	//Preform Byte substitution with S table
	for(Collum = 0; Collum < 4; Collum++)
 8000672:	2300      	movs	r3, #0
 8000674:	777b      	strb	r3, [r7, #29]
 8000676:	e01f      	b.n	80006b8 <AES_Encrypt+0x144>
	{
		for(Row = 0; Row < 4; Row++)
 8000678:	2300      	movs	r3, #0
 800067a:	77bb      	strb	r3, [r7, #30]
 800067c:	e016      	b.n	80006ac <AES_Encrypt+0x138>
		{
			State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 800067e:	7fba      	ldrb	r2, [r7, #30]
 8000680:	7f7b      	ldrb	r3, [r7, #29]
 8000682:	4929      	ldr	r1, [pc, #164]	; (8000728 <AES_Encrypt+0x1b4>)
 8000684:	0092      	lsls	r2, r2, #2
 8000686:	440a      	add	r2, r1
 8000688:	4413      	add	r3, r2
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	7fbd      	ldrb	r5, [r7, #30]
 800068e:	7f7c      	ldrb	r4, [r7, #29]
 8000690:	4618      	mov	r0, r3
 8000692:	f000 f883 	bl	800079c <AES_Sub_Byte>
 8000696:	4603      	mov	r3, r0
 8000698:	4619      	mov	r1, r3
 800069a:	4a23      	ldr	r2, [pc, #140]	; (8000728 <AES_Encrypt+0x1b4>)
 800069c:	00ab      	lsls	r3, r5, #2
 800069e:	4413      	add	r3, r2
 80006a0:	4423      	add	r3, r4
 80006a2:	460a      	mov	r2, r1
 80006a4:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 80006a6:	7fbb      	ldrb	r3, [r7, #30]
 80006a8:	3301      	adds	r3, #1
 80006aa:	77bb      	strb	r3, [r7, #30]
 80006ac:	7fbb      	ldrb	r3, [r7, #30]
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d9e5      	bls.n	800067e <AES_Encrypt+0x10a>
	for(Collum = 0; Collum < 4; Collum++)
 80006b2:	7f7b      	ldrb	r3, [r7, #29]
 80006b4:	3301      	adds	r3, #1
 80006b6:	777b      	strb	r3, [r7, #29]
 80006b8:	7f7b      	ldrb	r3, [r7, #29]
 80006ba:	2b03      	cmp	r3, #3
 80006bc:	d9dc      	bls.n	8000678 <AES_Encrypt+0x104>
		}
	}

	//Shift rows
	AES_Shift_Rows();
 80006be:	f000 f88b 	bl	80007d8 <AES_Shift_Rows>

	//Calculate new round key
	AES_Calculate_Round_Key(Round,Round_Key);
 80006c2:	f107 020c 	add.w	r2, r7, #12
 80006c6:	7f3b      	ldrb	r3, [r7, #28]
 80006c8:	4611      	mov	r1, r2
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f95e 	bl	800098c <AES_Calculate_Round_Key>

	//Add round Key
	AES_Add_Round_Key(Round_Key);
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 f829 	bl	800072c <AES_Add_Round_Key>

	//Copy the State into the data array
	for(Collum = 0; Collum < 4; Collum++)
 80006da:	2300      	movs	r3, #0
 80006dc:	777b      	strb	r3, [r7, #29]
 80006de:	e01a      	b.n	8000716 <AES_Encrypt+0x1a2>
	{
		for(Row = 0; Row < 4; Row++)
 80006e0:	2300      	movs	r3, #0
 80006e2:	77bb      	strb	r3, [r7, #30]
 80006e4:	e011      	b.n	800070a <AES_Encrypt+0x196>
		{
			Data[Row + (4*Collum)] = State[Row][Collum];
 80006e6:	7fb9      	ldrb	r1, [r7, #30]
 80006e8:	7f7a      	ldrb	r2, [r7, #29]
 80006ea:	7fb8      	ldrb	r0, [r7, #30]
 80006ec:	7f7b      	ldrb	r3, [r7, #29]
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	4403      	add	r3, r0
 80006f2:	4618      	mov	r0, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4403      	add	r3, r0
 80006f8:	480b      	ldr	r0, [pc, #44]	; (8000728 <AES_Encrypt+0x1b4>)
 80006fa:	0089      	lsls	r1, r1, #2
 80006fc:	4401      	add	r1, r0
 80006fe:	440a      	add	r2, r1
 8000700:	7812      	ldrb	r2, [r2, #0]
 8000702:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8000704:	7fbb      	ldrb	r3, [r7, #30]
 8000706:	3301      	adds	r3, #1
 8000708:	77bb      	strb	r3, [r7, #30]
 800070a:	7fbb      	ldrb	r3, [r7, #30]
 800070c:	2b03      	cmp	r3, #3
 800070e:	d9ea      	bls.n	80006e6 <AES_Encrypt+0x172>
	for(Collum = 0; Collum < 4; Collum++)
 8000710:	7f7b      	ldrb	r3, [r7, #29]
 8000712:	3301      	adds	r3, #1
 8000714:	777b      	strb	r3, [r7, #29]
 8000716:	7f7b      	ldrb	r3, [r7, #29]
 8000718:	2b03      	cmp	r3, #3
 800071a:	d9e1      	bls.n	80006e0 <AES_Encrypt+0x16c>
		}
	}

}
 800071c:	bf00      	nop
 800071e:	bf00      	nop
 8000720:	3720      	adds	r7, #32
 8000722:	46bd      	mov	sp, r7
 8000724:	bdb0      	pop	{r4, r5, r7, pc}
 8000726:	bf00      	nop
 8000728:	20000244 	.word	0x20000244

0800072c <AES_Add_Round_Key>:
*
* Arguments   : *Round_Key    16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Add_Round_Key(unsigned char *Round_Key)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	unsigned char Row,Collum;

	for(Collum = 0; Collum < 4; Collum++)
 8000734:	2300      	movs	r3, #0
 8000736:	73bb      	strb	r3, [r7, #14]
 8000738:	e024      	b.n	8000784 <AES_Add_Round_Key+0x58>
	{
		for(Row = 0; Row < 4; Row++)
 800073a:	2300      	movs	r3, #0
 800073c:	73fb      	strb	r3, [r7, #15]
 800073e:	e01b      	b.n	8000778 <AES_Add_Round_Key+0x4c>
		{
			State[Row][Collum] = State[Row][Collum] ^ Round_Key[Row + (4*Collum)];
 8000740:	7bfa      	ldrb	r2, [r7, #15]
 8000742:	7bbb      	ldrb	r3, [r7, #14]
 8000744:	4914      	ldr	r1, [pc, #80]	; (8000798 <AES_Add_Round_Key+0x6c>)
 8000746:	0092      	lsls	r2, r2, #2
 8000748:	440a      	add	r2, r1
 800074a:	4413      	add	r3, r2
 800074c:	7818      	ldrb	r0, [r3, #0]
 800074e:	7bfa      	ldrb	r2, [r7, #15]
 8000750:	7bbb      	ldrb	r3, [r7, #14]
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	4413      	add	r3, r2
 8000756:	461a      	mov	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4413      	add	r3, r2
 800075c:	7819      	ldrb	r1, [r3, #0]
 800075e:	7bfa      	ldrb	r2, [r7, #15]
 8000760:	7bbb      	ldrb	r3, [r7, #14]
 8000762:	4041      	eors	r1, r0
 8000764:	b2c8      	uxtb	r0, r1
 8000766:	490c      	ldr	r1, [pc, #48]	; (8000798 <AES_Add_Round_Key+0x6c>)
 8000768:	0092      	lsls	r2, r2, #2
 800076a:	440a      	add	r2, r1
 800076c:	4413      	add	r3, r2
 800076e:	4602      	mov	r2, r0
 8000770:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	3301      	adds	r3, #1
 8000776:	73fb      	strb	r3, [r7, #15]
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	2b03      	cmp	r3, #3
 800077c:	d9e0      	bls.n	8000740 <AES_Add_Round_Key+0x14>
	for(Collum = 0; Collum < 4; Collum++)
 800077e:	7bbb      	ldrb	r3, [r7, #14]
 8000780:	3301      	adds	r3, #1
 8000782:	73bb      	strb	r3, [r7, #14]
 8000784:	7bbb      	ldrb	r3, [r7, #14]
 8000786:	2b03      	cmp	r3, #3
 8000788:	d9d7      	bls.n	800073a <AES_Add_Round_Key+0xe>
		}
	}
}
 800078a:	bf00      	nop
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	20000244 	.word	0x20000244

0800079c <AES_Sub_Byte>:
*
* Return      : The return is the found byte in the S_Table
*****************************************************************************************
*/
unsigned char AES_Sub_Byte(unsigned char Byte)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
	unsigned char S_Row,S_Collum;
	unsigned char S_Byte;

	//Split byte up in Row and Collum
	S_Row = ((Byte >> 4) & 0x0F);
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	091b      	lsrs	r3, r3, #4
 80007aa:	73fb      	strb	r3, [r7, #15]
	S_Collum = (Byte & 0x0F);
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	f003 030f 	and.w	r3, r3, #15
 80007b2:	73bb      	strb	r3, [r7, #14]

	//Find the correct byte in the S_Table
	S_Byte = S_Table[S_Row][S_Collum];
 80007b4:	7bfa      	ldrb	r2, [r7, #15]
 80007b6:	7bbb      	ldrb	r3, [r7, #14]
 80007b8:	4906      	ldr	r1, [pc, #24]	; (80007d4 <AES_Sub_Byte+0x38>)
 80007ba:	0112      	lsls	r2, r2, #4
 80007bc:	440a      	add	r2, r1
 80007be:	4413      	add	r3, r2
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	737b      	strb	r3, [r7, #13]

	return S_Byte;
 80007c4:	7b7b      	ldrb	r3, [r7, #13]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3714      	adds	r7, #20
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	20000000 	.word	0x20000000

080007d8 <AES_Shift_Rows>:
*****************************************************************************************
* Description : Function that preforms the shift row operation described in the AES standard
*****************************************************************************************
*/
void AES_Shift_Rows()
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0

	//Row 0 doesn't change

	//Shift Row 1 one left
	//Store firt byte in buffer
	Buffer = State[1][0];
 80007de:	4b1f      	ldr	r3, [pc, #124]	; (800085c <AES_Shift_Rows+0x84>)
 80007e0:	791b      	ldrb	r3, [r3, #4]
 80007e2:	71fb      	strb	r3, [r7, #7]
	//Shift all bytes
	State[1][0] = State[1][1];
 80007e4:	4b1d      	ldr	r3, [pc, #116]	; (800085c <AES_Shift_Rows+0x84>)
 80007e6:	795a      	ldrb	r2, [r3, #5]
 80007e8:	4b1c      	ldr	r3, [pc, #112]	; (800085c <AES_Shift_Rows+0x84>)
 80007ea:	711a      	strb	r2, [r3, #4]
	State[1][1] = State[1][2];
 80007ec:	4b1b      	ldr	r3, [pc, #108]	; (800085c <AES_Shift_Rows+0x84>)
 80007ee:	799a      	ldrb	r2, [r3, #6]
 80007f0:	4b1a      	ldr	r3, [pc, #104]	; (800085c <AES_Shift_Rows+0x84>)
 80007f2:	715a      	strb	r2, [r3, #5]
	State[1][2] = State[1][3];
 80007f4:	4b19      	ldr	r3, [pc, #100]	; (800085c <AES_Shift_Rows+0x84>)
 80007f6:	79da      	ldrb	r2, [r3, #7]
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <AES_Shift_Rows+0x84>)
 80007fa:	719a      	strb	r2, [r3, #6]
	State[1][3] = Buffer;
 80007fc:	4a17      	ldr	r2, [pc, #92]	; (800085c <AES_Shift_Rows+0x84>)
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	71d3      	strb	r3, [r2, #7]

	//Shift row 2 two left
	Buffer = State[2][0];
 8000802:	4b16      	ldr	r3, [pc, #88]	; (800085c <AES_Shift_Rows+0x84>)
 8000804:	7a1b      	ldrb	r3, [r3, #8]
 8000806:	71fb      	strb	r3, [r7, #7]
	State[2][0] = State[2][2];
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <AES_Shift_Rows+0x84>)
 800080a:	7a9a      	ldrb	r2, [r3, #10]
 800080c:	4b13      	ldr	r3, [pc, #76]	; (800085c <AES_Shift_Rows+0x84>)
 800080e:	721a      	strb	r2, [r3, #8]
	State[2][2] = Buffer;
 8000810:	4a12      	ldr	r2, [pc, #72]	; (800085c <AES_Shift_Rows+0x84>)
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	7293      	strb	r3, [r2, #10]
	Buffer = State[2][1];
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <AES_Shift_Rows+0x84>)
 8000818:	7a5b      	ldrb	r3, [r3, #9]
 800081a:	71fb      	strb	r3, [r7, #7]
	State[2][1] = State[2][3];
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <AES_Shift_Rows+0x84>)
 800081e:	7ada      	ldrb	r2, [r3, #11]
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <AES_Shift_Rows+0x84>)
 8000822:	725a      	strb	r2, [r3, #9]
	State[2][3] = Buffer;
 8000824:	4a0d      	ldr	r2, [pc, #52]	; (800085c <AES_Shift_Rows+0x84>)
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	72d3      	strb	r3, [r2, #11]

	//Shift row 3 three left
	Buffer = State[3][3];
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <AES_Shift_Rows+0x84>)
 800082c:	7bdb      	ldrb	r3, [r3, #15]
 800082e:	71fb      	strb	r3, [r7, #7]
	State[3][3] = State[3][2];
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <AES_Shift_Rows+0x84>)
 8000832:	7b9a      	ldrb	r2, [r3, #14]
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <AES_Shift_Rows+0x84>)
 8000836:	73da      	strb	r2, [r3, #15]
	State[3][2] = State[3][1];
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <AES_Shift_Rows+0x84>)
 800083a:	7b5a      	ldrb	r2, [r3, #13]
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <AES_Shift_Rows+0x84>)
 800083e:	739a      	strb	r2, [r3, #14]
	State[3][1] = State[3][0];
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <AES_Shift_Rows+0x84>)
 8000842:	7b1a      	ldrb	r2, [r3, #12]
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <AES_Shift_Rows+0x84>)
 8000846:	735a      	strb	r2, [r3, #13]
	State[3][0] = Buffer;
 8000848:	4a04      	ldr	r2, [pc, #16]	; (800085c <AES_Shift_Rows+0x84>)
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	7313      	strb	r3, [r2, #12]
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	20000244 	.word	0x20000244

08000860 <AES_Mix_Collums>:
*****************************************************************************************
* Description : Function that preforms the Mix Collums operation described in the AES standard
*****************************************************************************************
*/
void AES_Mix_Collums()
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
	unsigned char Row,Collum;
	unsigned char a[4], b[4];
	for(Collum = 0; Collum < 4; Collum++)
 8000866:	2300      	movs	r3, #0
 8000868:	73bb      	strb	r3, [r7, #14]
 800086a:	e082      	b.n	8000972 <AES_Mix_Collums+0x112>
	{
		for(Row = 0; Row < 4; Row++)
 800086c:	2300      	movs	r3, #0
 800086e:	73fb      	strb	r3, [r7, #15]
 8000870:	e033      	b.n	80008da <AES_Mix_Collums+0x7a>
		{
			a[Row] = State[Row][Collum];
 8000872:	7bf9      	ldrb	r1, [r7, #15]
 8000874:	7bba      	ldrb	r2, [r7, #14]
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	4843      	ldr	r0, [pc, #268]	; (8000988 <AES_Mix_Collums+0x128>)
 800087a:	0089      	lsls	r1, r1, #2
 800087c:	4401      	add	r1, r0
 800087e:	440a      	add	r2, r1
 8000880:	7812      	ldrb	r2, [r2, #0]
 8000882:	3310      	adds	r3, #16
 8000884:	443b      	add	r3, r7
 8000886:	f803 2c08 	strb.w	r2, [r3, #-8]
			b[Row] = (State[Row][Collum] << 1);
 800088a:	7bfa      	ldrb	r2, [r7, #15]
 800088c:	7bbb      	ldrb	r3, [r7, #14]
 800088e:	493e      	ldr	r1, [pc, #248]	; (8000988 <AES_Mix_Collums+0x128>)
 8000890:	0092      	lsls	r2, r2, #2
 8000892:	440a      	add	r2, r1
 8000894:	4413      	add	r3, r2
 8000896:	781a      	ldrb	r2, [r3, #0]
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	0052      	lsls	r2, r2, #1
 800089c:	b2d2      	uxtb	r2, r2
 800089e:	3310      	adds	r3, #16
 80008a0:	443b      	add	r3, r7
 80008a2:	f803 2c0c 	strb.w	r2, [r3, #-12]

			if((State[Row][Collum] & 0x80) == 0x80)
 80008a6:	7bfa      	ldrb	r2, [r7, #15]
 80008a8:	7bbb      	ldrb	r3, [r7, #14]
 80008aa:	4937      	ldr	r1, [pc, #220]	; (8000988 <AES_Mix_Collums+0x128>)
 80008ac:	0092      	lsls	r2, r2, #2
 80008ae:	440a      	add	r2, r1
 80008b0:	4413      	add	r3, r2
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	b25b      	sxtb	r3, r3
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	da0c      	bge.n	80008d4 <AES_Mix_Collums+0x74>
			{
				b[Row] = b[Row] ^ 0x1B;
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	3310      	adds	r3, #16
 80008be:	443b      	add	r3, r7
 80008c0:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	f082 021b 	eor.w	r2, r2, #27
 80008ca:	b2d2      	uxtb	r2, r2
 80008cc:	3310      	adds	r3, #16
 80008ce:	443b      	add	r3, r7
 80008d0:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(Row = 0; Row < 4; Row++)
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	3301      	adds	r3, #1
 80008d8:	73fb      	strb	r3, [r7, #15]
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	2b03      	cmp	r3, #3
 80008de:	d9c8      	bls.n	8000872 <AES_Mix_Collums+0x12>
			}
		}
		State[0][Collum] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3];
 80008e0:	793a      	ldrb	r2, [r7, #4]
 80008e2:	7a7b      	ldrb	r3, [r7, #9]
 80008e4:	4053      	eors	r3, r2
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	797b      	ldrb	r3, [r7, #5]
 80008ea:	4053      	eors	r3, r2
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	7abb      	ldrb	r3, [r7, #10]
 80008f0:	4053      	eors	r3, r2
 80008f2:	b2d9      	uxtb	r1, r3
 80008f4:	7afa      	ldrb	r2, [r7, #11]
 80008f6:	7bbb      	ldrb	r3, [r7, #14]
 80008f8:	404a      	eors	r2, r1
 80008fa:	b2d1      	uxtb	r1, r2
 80008fc:	4a22      	ldr	r2, [pc, #136]	; (8000988 <AES_Mix_Collums+0x128>)
 80008fe:	54d1      	strb	r1, [r2, r3]
		State[1][Collum] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3];
 8000900:	7a3a      	ldrb	r2, [r7, #8]
 8000902:	797b      	ldrb	r3, [r7, #5]
 8000904:	4053      	eors	r3, r2
 8000906:	b2da      	uxtb	r2, r3
 8000908:	7abb      	ldrb	r3, [r7, #10]
 800090a:	4053      	eors	r3, r2
 800090c:	b2da      	uxtb	r2, r3
 800090e:	79bb      	ldrb	r3, [r7, #6]
 8000910:	4053      	eors	r3, r2
 8000912:	b2d9      	uxtb	r1, r3
 8000914:	7afa      	ldrb	r2, [r7, #11]
 8000916:	7bbb      	ldrb	r3, [r7, #14]
 8000918:	404a      	eors	r2, r1
 800091a:	b2d1      	uxtb	r1, r2
 800091c:	4a1a      	ldr	r2, [pc, #104]	; (8000988 <AES_Mix_Collums+0x128>)
 800091e:	4413      	add	r3, r2
 8000920:	460a      	mov	r2, r1
 8000922:	711a      	strb	r2, [r3, #4]
		State[2][Collum] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3];
 8000924:	7a3a      	ldrb	r2, [r7, #8]
 8000926:	7a7b      	ldrb	r3, [r7, #9]
 8000928:	4053      	eors	r3, r2
 800092a:	b2da      	uxtb	r2, r3
 800092c:	79bb      	ldrb	r3, [r7, #6]
 800092e:	4053      	eors	r3, r2
 8000930:	b2da      	uxtb	r2, r3
 8000932:	7afb      	ldrb	r3, [r7, #11]
 8000934:	4053      	eors	r3, r2
 8000936:	b2d9      	uxtb	r1, r3
 8000938:	79fa      	ldrb	r2, [r7, #7]
 800093a:	7bbb      	ldrb	r3, [r7, #14]
 800093c:	404a      	eors	r2, r1
 800093e:	b2d1      	uxtb	r1, r2
 8000940:	4a11      	ldr	r2, [pc, #68]	; (8000988 <AES_Mix_Collums+0x128>)
 8000942:	4413      	add	r3, r2
 8000944:	460a      	mov	r2, r1
 8000946:	721a      	strb	r2, [r3, #8]
		State[3][Collum] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3];
 8000948:	7a3a      	ldrb	r2, [r7, #8]
 800094a:	793b      	ldrb	r3, [r7, #4]
 800094c:	4053      	eors	r3, r2
 800094e:	b2da      	uxtb	r2, r3
 8000950:	7a7b      	ldrb	r3, [r7, #9]
 8000952:	4053      	eors	r3, r2
 8000954:	b2da      	uxtb	r2, r3
 8000956:	7abb      	ldrb	r3, [r7, #10]
 8000958:	4053      	eors	r3, r2
 800095a:	b2d9      	uxtb	r1, r3
 800095c:	79fa      	ldrb	r2, [r7, #7]
 800095e:	7bbb      	ldrb	r3, [r7, #14]
 8000960:	404a      	eors	r2, r1
 8000962:	b2d1      	uxtb	r1, r2
 8000964:	4a08      	ldr	r2, [pc, #32]	; (8000988 <AES_Mix_Collums+0x128>)
 8000966:	4413      	add	r3, r2
 8000968:	460a      	mov	r2, r1
 800096a:	731a      	strb	r2, [r3, #12]
	for(Collum = 0; Collum < 4; Collum++)
 800096c:	7bbb      	ldrb	r3, [r7, #14]
 800096e:	3301      	adds	r3, #1
 8000970:	73bb      	strb	r3, [r7, #14]
 8000972:	7bbb      	ldrb	r3, [r7, #14]
 8000974:	2b03      	cmp	r3, #3
 8000976:	f67f af79 	bls.w	800086c <AES_Mix_Collums+0xc>
	}
}
 800097a:	bf00      	nop
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	20000244 	.word	0x20000244

0800098c <AES_Calculate_Round_Key>:
* Arguments   :   Round         Number of current Round
*                *Round_Key     16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Calculate_Round_Key(unsigned char Round, unsigned char *Round_Key)
{
 800098c:	b590      	push	{r4, r7, lr}
 800098e:	b087      	sub	sp, #28
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	6039      	str	r1, [r7, #0]
 8000996:	71fb      	strb	r3, [r7, #7]
	unsigned char Buffer;
	unsigned char Rcon;

	//Calculate first Temp
	//Copy laste byte from previous key
	for(i = 0; i < 4; i++)
 8000998:	2300      	movs	r3, #0
 800099a:	75fb      	strb	r3, [r7, #23]
 800099c:	e00c      	b.n	80009b8 <AES_Calculate_Round_Key+0x2c>
	{
		Temp[i] = Round_Key[i+12];
 800099e:	7dfb      	ldrb	r3, [r7, #23]
 80009a0:	330c      	adds	r3, #12
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	441a      	add	r2, r3
 80009a6:	7dfb      	ldrb	r3, [r7, #23]
 80009a8:	7812      	ldrb	r2, [r2, #0]
 80009aa:	3318      	adds	r3, #24
 80009ac:	443b      	add	r3, r7
 80009ae:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 80009b2:	7dfb      	ldrb	r3, [r7, #23]
 80009b4:	3301      	adds	r3, #1
 80009b6:	75fb      	strb	r3, [r7, #23]
 80009b8:	7dfb      	ldrb	r3, [r7, #23]
 80009ba:	2b03      	cmp	r3, #3
 80009bc:	d9ef      	bls.n	800099e <AES_Calculate_Round_Key+0x12>
	}

	//Rotate Temp
	Buffer = Temp[0];
 80009be:	7b3b      	ldrb	r3, [r7, #12]
 80009c0:	753b      	strb	r3, [r7, #20]
	Temp[0] = Temp[1];
 80009c2:	7b7b      	ldrb	r3, [r7, #13]
 80009c4:	733b      	strb	r3, [r7, #12]
	Temp[1] = Temp[2];
 80009c6:	7bbb      	ldrb	r3, [r7, #14]
 80009c8:	737b      	strb	r3, [r7, #13]
	Temp[2] = Temp[3];
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
 80009cc:	73bb      	strb	r3, [r7, #14]
	Temp[3] = Buffer;
 80009ce:	7d3b      	ldrb	r3, [r7, #20]
 80009d0:	73fb      	strb	r3, [r7, #15]

	//Substitute Temp
	for(i = 0; i < 4; i++)
 80009d2:	2300      	movs	r3, #0
 80009d4:	75fb      	strb	r3, [r7, #23]
 80009d6:	e012      	b.n	80009fe <AES_Calculate_Round_Key+0x72>
	{
		Temp[i] = AES_Sub_Byte(Temp[i]);
 80009d8:	7dfb      	ldrb	r3, [r7, #23]
 80009da:	3318      	adds	r3, #24
 80009dc:	443b      	add	r3, r7
 80009de:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80009e2:	7dfc      	ldrb	r4, [r7, #23]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fed9 	bl	800079c <AES_Sub_Byte>
 80009ea:	4603      	mov	r3, r0
 80009ec:	461a      	mov	r2, r3
 80009ee:	f104 0318 	add.w	r3, r4, #24
 80009f2:	443b      	add	r3, r7
 80009f4:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 80009f8:	7dfb      	ldrb	r3, [r7, #23]
 80009fa:	3301      	adds	r3, #1
 80009fc:	75fb      	strb	r3, [r7, #23]
 80009fe:	7dfb      	ldrb	r3, [r7, #23]
 8000a00:	2b03      	cmp	r3, #3
 8000a02:	d9e9      	bls.n	80009d8 <AES_Calculate_Round_Key+0x4c>
	}

	//Calculate Rcon
	Rcon = 0x01;
 8000a04:	2301      	movs	r3, #1
 8000a06:	757b      	strb	r3, [r7, #21]
	while(Round != 1)
 8000a08:	e010      	b.n	8000a2c <AES_Calculate_Round_Key+0xa0>
	{
		b = Rcon & 0x80;
 8000a0a:	7d7b      	ldrb	r3, [r7, #21]
 8000a0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000a10:	74fb      	strb	r3, [r7, #19]
		Rcon = Rcon << 1;
 8000a12:	7d7b      	ldrb	r3, [r7, #21]
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	757b      	strb	r3, [r7, #21]
		if(b == 0x80)
 8000a18:	7cfb      	ldrb	r3, [r7, #19]
 8000a1a:	2b80      	cmp	r3, #128	; 0x80
 8000a1c:	d103      	bne.n	8000a26 <AES_Calculate_Round_Key+0x9a>
		{
			Rcon = Rcon ^ 0x1b;
 8000a1e:	7d7b      	ldrb	r3, [r7, #21]
 8000a20:	f083 031b 	eor.w	r3, r3, #27
 8000a24:	757b      	strb	r3, [r7, #21]
		}
		Round--;
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	71fb      	strb	r3, [r7, #7]
	while(Round != 1)
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d1eb      	bne.n	8000a0a <AES_Calculate_Round_Key+0x7e>
	}

	//XOR Rcon
	Temp[0] = Temp[0] ^ Rcon;
 8000a32:	7b3a      	ldrb	r2, [r7, #12]
 8000a34:	7d7b      	ldrb	r3, [r7, #21]
 8000a36:	4053      	eors	r3, r2
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	733b      	strb	r3, [r7, #12]

	//Calculate new key
	for(i = 0; i < 4; i++)
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	75fb      	strb	r3, [r7, #23]
 8000a40:	e02f      	b.n	8000aa2 <AES_Calculate_Round_Key+0x116>
	{
		for(j = 0; j < 4; j++)
 8000a42:	2300      	movs	r3, #0
 8000a44:	75bb      	strb	r3, [r7, #22]
 8000a46:	e026      	b.n	8000a96 <AES_Calculate_Round_Key+0x10a>
		{
			Round_Key[j + (4*i)] = Round_Key[j + (4*i)] ^ Temp[j];
 8000a48:	7dba      	ldrb	r2, [r7, #22]
 8000a4a:	7dfb      	ldrb	r3, [r7, #23]
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	4413      	add	r3, r2
 8000a50:	461a      	mov	r2, r3
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	4413      	add	r3, r2
 8000a56:	7819      	ldrb	r1, [r3, #0]
 8000a58:	7dbb      	ldrb	r3, [r7, #22]
 8000a5a:	3318      	adds	r3, #24
 8000a5c:	443b      	add	r3, r7
 8000a5e:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8000a62:	7db8      	ldrb	r0, [r7, #22]
 8000a64:	7dfb      	ldrb	r3, [r7, #23]
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	4403      	add	r3, r0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	4403      	add	r3, r0
 8000a70:	404a      	eors	r2, r1
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	701a      	strb	r2, [r3, #0]
			Temp[j] = Round_Key[j + (4*i)];
 8000a76:	7dba      	ldrb	r2, [r7, #22]
 8000a78:	7dfb      	ldrb	r3, [r7, #23]
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	4413      	add	r3, r2
 8000a7e:	461a      	mov	r2, r3
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	441a      	add	r2, r3
 8000a84:	7dbb      	ldrb	r3, [r7, #22]
 8000a86:	7812      	ldrb	r2, [r2, #0]
 8000a88:	3318      	adds	r3, #24
 8000a8a:	443b      	add	r3, r7
 8000a8c:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(j = 0; j < 4; j++)
 8000a90:	7dbb      	ldrb	r3, [r7, #22]
 8000a92:	3301      	adds	r3, #1
 8000a94:	75bb      	strb	r3, [r7, #22]
 8000a96:	7dbb      	ldrb	r3, [r7, #22]
 8000a98:	2b03      	cmp	r3, #3
 8000a9a:	d9d5      	bls.n	8000a48 <AES_Calculate_Round_Key+0xbc>
	for(i = 0; i < 4; i++)
 8000a9c:	7dfb      	ldrb	r3, [r7, #23]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	75fb      	strb	r3, [r7, #23]
 8000aa2:	7dfb      	ldrb	r3, [r7, #23]
 8000aa4:	2b03      	cmp	r3, #3
 8000aa6:	d9cc      	bls.n	8000a42 <AES_Calculate_Round_Key+0xb6>
		}
	}
}
 8000aa8:	bf00      	nop
 8000aaa:	bf00      	nop
 8000aac:	371c      	adds	r7, #28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd90      	pop	{r4, r7, pc}

08000ab2 <Encrypt_Payload>:
#include "Encrypt_V31.h"
#include "AES-128_V10.h"

void Encrypt_Payload(unsigned char *Data, unsigned char Data_Length, unsigned int Frame_Counter,
                     unsigned char Direction, unsigned char Key[16], unsigned char DevAddr[4])
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b08a      	sub	sp, #40	; 0x28
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	60f8      	str	r0, [r7, #12]
 8000aba:	607a      	str	r2, [r7, #4]
 8000abc:	461a      	mov	r2, r3
 8000abe:	460b      	mov	r3, r1
 8000ac0:	72fb      	strb	r3, [r7, #11]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	72bb      	strb	r3, [r7, #10]
	unsigned char i = 0x00;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	unsigned char j;
	unsigned char Number_of_Blocks = 0x00;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	unsigned char Incomplete_Block_Size = 0x00;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	unsigned char Block_A[16];

	//Calculate number of blocks
	Number_of_Blocks = Data_Length / 16;
 8000ad8:	7afb      	ldrb	r3, [r7, #11]
 8000ada:	091b      	lsrs	r3, r3, #4
 8000adc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	Incomplete_Block_Size = Data_Length % 16;
 8000ae0:	7afb      	ldrb	r3, [r7, #11]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if(Incomplete_Block_Size != 0)
 8000aea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d004      	beq.n	8000afc <Encrypt_Payload+0x4a>
	{
		Number_of_Blocks++;
 8000af2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000af6:	3301      	adds	r3, #1
 8000af8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	for(i = 1; i <= Number_of_Blocks; i++)
 8000afc:	2301      	movs	r3, #1
 8000afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000b02:	e07e      	b.n	8000c02 <Encrypt_Payload+0x150>
	{
		Block_A[0] = 0x01;
 8000b04:	2301      	movs	r3, #1
 8000b06:	753b      	strb	r3, [r7, #20]
		Block_A[1] = 0x00;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	757b      	strb	r3, [r7, #21]
		Block_A[2] = 0x00;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	75bb      	strb	r3, [r7, #22]
		Block_A[3] = 0x00;
 8000b10:	2300      	movs	r3, #0
 8000b12:	75fb      	strb	r3, [r7, #23]
		Block_A[4] = 0x00;
 8000b14:	2300      	movs	r3, #0
 8000b16:	763b      	strb	r3, [r7, #24]

		Block_A[5] = Direction;
 8000b18:	7abb      	ldrb	r3, [r7, #10]
 8000b1a:	767b      	strb	r3, [r7, #25]

		Block_A[6] = DevAddr[3];
 8000b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b1e:	78db      	ldrb	r3, [r3, #3]
 8000b20:	76bb      	strb	r3, [r7, #26]
		Block_A[7] = DevAddr[2];
 8000b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b24:	789b      	ldrb	r3, [r3, #2]
 8000b26:	76fb      	strb	r3, [r7, #27]
		Block_A[8] = DevAddr[1];
 8000b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b2a:	785b      	ldrb	r3, [r3, #1]
 8000b2c:	773b      	strb	r3, [r7, #28]
		Block_A[9] = DevAddr[0];
 8000b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	777b      	strb	r3, [r7, #29]

		Block_A[10] = (Frame_Counter & 0x00FF);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	77bb      	strb	r3, [r7, #30]
		Block_A[11] = ((Frame_Counter >> 8) & 0x00FF);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	0a1b      	lsrs	r3, r3, #8
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	77fb      	strb	r3, [r7, #31]

		Block_A[12] = 0x00; //Frame counter upper Bytes
 8000b42:	2300      	movs	r3, #0
 8000b44:	f887 3020 	strb.w	r3, [r7, #32]
		Block_A[13] = 0x00;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		Block_A[14] = 0x00;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		Block_A[15] = i;
 8000b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		//Calculate S
		AES_Encrypt(Block_A, Key);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fd06 	bl	8000574 <AES_Encrypt>

		//Check for last block
		if(i != Number_of_Blocks)
 8000b68:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000b6c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d01c      	beq.n	8000bae <Encrypt_Payload+0xfc>
		{
			for(j = 0; j < 16; j++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000b7a:	e013      	b.n	8000ba4 <Encrypt_Payload+0xf2>
			{
				*Data = *Data ^ Block_A[j];
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	781a      	ldrb	r2, [r3, #0]
 8000b80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b84:	3328      	adds	r3, #40	; 0x28
 8000b86:	443b      	add	r3, r7
 8000b88:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000b8c:	4053      	eors	r3, r2
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	701a      	strb	r2, [r3, #0]
				Data++;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	3301      	adds	r3, #1
 8000b98:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < 16; j++)
 8000b9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ba4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ba8:	2b0f      	cmp	r3, #15
 8000baa:	d9e7      	bls.n	8000b7c <Encrypt_Payload+0xca>
 8000bac:	e024      	b.n	8000bf8 <Encrypt_Payload+0x146>
			}
		}
		else
		{
			if(Incomplete_Block_Size == 0)
 8000bae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d102      	bne.n	8000bbc <Encrypt_Payload+0x10a>
			{
				Incomplete_Block_Size = 16;
 8000bb6:	2310      	movs	r3, #16
 8000bb8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			}
			for(j = 0; j < Incomplete_Block_Size; j++)
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000bc2:	e013      	b.n	8000bec <Encrypt_Payload+0x13a>
			{
				*Data = *Data ^ Block_A[j];
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	781a      	ldrb	r2, [r3, #0]
 8000bc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000bcc:	3328      	adds	r3, #40	; 0x28
 8000bce:	443b      	add	r3, r7
 8000bd0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000bd4:	4053      	eors	r3, r2
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	701a      	strb	r2, [r3, #0]
				Data++;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	3301      	adds	r3, #1
 8000be0:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < Incomplete_Block_Size; j++)
 8000be2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000be6:	3301      	adds	r3, #1
 8000be8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000bec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000bf0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d3e5      	bcc.n	8000bc4 <Encrypt_Payload+0x112>
	for(i = 1; i <= Number_of_Blocks; i++)
 8000bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000c06:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	f67f af7a 	bls.w	8000b04 <Encrypt_Payload+0x52>
			}
		}
	}
}
 8000c10:	bf00      	nop
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	; 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <Calculate_MIC>:

void Calculate_MIC(unsigned char *Data, unsigned char *Final_MIC, unsigned char Data_Length, unsigned int Frame_Counter,
                   unsigned char Direction, unsigned char NwkSkey[16], unsigned char DevAddr[4])
{
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b09b      	sub	sp, #108	; 0x6c
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	unsigned char Block_B[16];
	unsigned char Key_K1[16] = {
 8000c2c:	4bba      	ldr	r3, [pc, #744]	; (8000f18 <Calculate_MIC+0x2fc>)
 8000c2e:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000c32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char Key_K2[16] = {
 8000c38:	4bb7      	ldr	r3, [pc, #732]	; (8000f18 <Calculate_MIC+0x2fc>)
 8000c3a:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000c3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	//unsigned char Data_Copy[16];

	unsigned char Old_Data[16] = {
 8000c44:	4bb4      	ldr	r3, [pc, #720]	; (8000f18 <Calculate_MIC+0x2fc>)
 8000c46:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000c4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char New_Data[16] = {
 8000c50:	4bb1      	ldr	r3, [pc, #708]	; (8000f18 <Calculate_MIC+0x2fc>)
 8000c52:	f107 0414 	add.w	r4, r7, #20
 8000c56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	unsigned char Number_of_Blocks = 0x00;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	unsigned char Incomplete_Block_Size = 0x00;
 8000c62:	2300      	movs	r3, #0
 8000c64:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	unsigned char Block_Counter = 0x01;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

	//Create Block_B
	Block_B[0] = 0x49;
 8000c6e:	2349      	movs	r3, #73	; 0x49
 8000c70:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	Block_B[1] = 0x00;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	Block_B[2] = 0x00;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	Block_B[3] = 0x00;
 8000c80:	2300      	movs	r3, #0
 8000c82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Block_B[4] = 0x00;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

	Block_B[5] = Direction;
 8000c8c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8000c90:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	Block_B[6] = DevAddr[3];
 8000c94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000c98:	78db      	ldrb	r3, [r3, #3]
 8000c9a:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	Block_B[7] = DevAddr[2];
 8000c9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ca2:	789b      	ldrb	r3, [r3, #2]
 8000ca4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	Block_B[8] = DevAddr[1];
 8000ca8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000cac:	785b      	ldrb	r3, [r3, #1]
 8000cae:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	Block_B[9] = DevAddr[0];
 8000cb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	Block_B[10] = (Frame_Counter & 0x00FF);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	Block_B[11] = ((Frame_Counter >> 8) & 0x00FF);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	0a1b      	lsrs	r3, r3, #8
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	Block_B[12] = 0x00; //Frame counter upper bytes
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	Block_B[13] = 0x00;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	Block_B[14] = 0x00;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	Block_B[15] = Data_Length;
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	//Calculate number of Blocks and blocksize of last block
	Number_of_Blocks = Data_Length / 16;
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	091b      	lsrs	r3, r3, #4
 8000cea:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	Incomplete_Block_Size = Data_Length % 16;
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	f003 030f 	and.w	r3, r3, #15
 8000cf4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

	if(Incomplete_Block_Size != 0)
 8000cf8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d004      	beq.n	8000d0a <Calculate_MIC+0xee>
	{
		Number_of_Blocks++;
 8000d00:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d04:	3301      	adds	r3, #1
 8000d06:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	}

	Generate_Keys(Key_K1, Key_K2, NwkSkey);
 8000d0a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000d0e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d12:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 f901 	bl	8000f1c <Generate_Keys>

	//Preform Calculation on Block B0

	//Preform AES encryption
	AES_Encrypt(Block_B, NwkSkey);
 8000d1a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d1e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fc27 	bl	8000574 <AES_Encrypt>

	//Copy Block_B to Old_Data
	for(i = 0; i < 16; i++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000d2c:	e010      	b.n	8000d50 <Calculate_MIC+0x134>
	{
		Old_Data[i] = Block_B[i];
 8000d2e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000d32:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d36:	3268      	adds	r2, #104	; 0x68
 8000d38:	443a      	add	r2, r7
 8000d3a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8000d3e:	3368      	adds	r3, #104	; 0x68
 8000d40:	443b      	add	r3, r7
 8000d42:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(i = 0; i < 16; i++)
 8000d46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000d50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d54:	2b0f      	cmp	r3, #15
 8000d56:	d9ea      	bls.n	8000d2e <Calculate_MIC+0x112>
	}

	//Preform full calculating until n-1 messsage blocks
	while(Block_Counter < Number_of_Blocks)
 8000d58:	e043      	b.n	8000de2 <Calculate_MIC+0x1c6>
	{
		//Copy data into array
		for(i = 0; i < 16; i++)
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000d60:	e00f      	b.n	8000d82 <Calculate_MIC+0x166>
		{
			New_Data[i] = *Data;
 8000d62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	7812      	ldrb	r2, [r2, #0]
 8000d6a:	3368      	adds	r3, #104	; 0x68
 8000d6c:	443b      	add	r3, r7
 8000d6e:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	3301      	adds	r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 8000d78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000d82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d86:	2b0f      	cmp	r3, #15
 8000d88:	d9eb      	bls.n	8000d62 <Calculate_MIC+0x146>
		}

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 8000d8a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 f94a 	bl	800102e <XOR>

		//Preform AES encryption
		AES_Encrypt(New_Data, NwkSkey);
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fbe7 	bl	8000574 <AES_Encrypt>

		//Copy New_Data to Old_Data
		for(i = 0; i < 16; i++)
 8000da6:	2300      	movs	r3, #0
 8000da8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000dac:	e010      	b.n	8000dd0 <Calculate_MIC+0x1b4>
		{
			Old_Data[i] = New_Data[i];
 8000dae:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000db2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000db6:	3268      	adds	r2, #104	; 0x68
 8000db8:	443a      	add	r2, r7
 8000dba:	f812 2c54 	ldrb.w	r2, [r2, #-84]
 8000dbe:	3368      	adds	r3, #104	; 0x68
 8000dc0:	443b      	add	r3, r7
 8000dc2:	f803 2c44 	strb.w	r2, [r3, #-68]
		for(i = 0; i < 16; i++)
 8000dc6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000dca:	3301      	adds	r3, #1
 8000dcc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000dd0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	d9ea      	bls.n	8000dae <Calculate_MIC+0x192>
		}

		//Raise Block counter
		Block_Counter++;
 8000dd8:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8000ddc:	3301      	adds	r3, #1
 8000dde:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	while(Block_Counter < Number_of_Blocks)
 8000de2:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8000de6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d3b5      	bcc.n	8000d5a <Calculate_MIC+0x13e>
	}

	//Perform calculation on last block
	//Check if Datalength is a multiple of 16
	if(Incomplete_Block_Size == 0)
 8000dee:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d12e      	bne.n	8000e54 <Calculate_MIC+0x238>
	{
		//Copy last data into array
		for(i = 0; i < 16; i++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000dfc:	e00f      	b.n	8000e1e <Calculate_MIC+0x202>
		{
			New_Data[i] = *Data;
 8000dfe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	7812      	ldrb	r2, [r2, #0]
 8000e06:	3368      	adds	r3, #104	; 0x68
 8000e08:	443b      	add	r3, r7
 8000e0a:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	3301      	adds	r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 8000e14:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e18:	3301      	adds	r3, #1
 8000e1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000e1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e22:	2b0f      	cmp	r3, #15
 8000e24:	d9eb      	bls.n	8000dfe <Calculate_MIC+0x1e2>
		}

		//Preform XOR with Key 1
		XOR(New_Data,Key_K1);
 8000e26:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 f8fc 	bl	800102e <XOR>

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 8000e36:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 f8f4 	bl	800102e <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fb91 	bl	8000574 <AES_Encrypt>
 8000e52:	e04d      	b.n	8000ef0 <Calculate_MIC+0x2d4>
	}
	else
	{
		//Copy the remaining data and fill the rest
		for(i =  0; i < 16; i++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000e5a:	e02f      	b.n	8000ebc <Calculate_MIC+0x2a0>
		{
			if(i < Incomplete_Block_Size)
 8000e5c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000e60:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d20a      	bcs.n	8000e7e <Calculate_MIC+0x262>
			{
				New_Data[i] = *Data;
 8000e68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	7812      	ldrb	r2, [r2, #0]
 8000e70:	3368      	adds	r3, #104	; 0x68
 8000e72:	443b      	add	r3, r7
 8000e74:	f803 2c54 	strb.w	r2, [r3, #-84]
				Data++;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	60fb      	str	r3, [r7, #12]
			}
			if(i == Incomplete_Block_Size)
 8000e7e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000e82:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d106      	bne.n	8000e98 <Calculate_MIC+0x27c>
			{
				New_Data[i] = 0x80;
 8000e8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e8e:	3368      	adds	r3, #104	; 0x68
 8000e90:	443b      	add	r3, r7
 8000e92:	2280      	movs	r2, #128	; 0x80
 8000e94:	f803 2c54 	strb.w	r2, [r3, #-84]
			}
			if(i > Incomplete_Block_Size)
 8000e98:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000e9c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d906      	bls.n	8000eb2 <Calculate_MIC+0x296>
			{
				New_Data[i] = 0x00;
 8000ea4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ea8:	3368      	adds	r3, #104	; 0x68
 8000eaa:	443b      	add	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	f803 2c54 	strb.w	r2, [r3, #-84]
		for(i =  0; i < 16; i++)
 8000eb2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000ebc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ec0:	2b0f      	cmp	r3, #15
 8000ec2:	d9cb      	bls.n	8000e5c <Calculate_MIC+0x240>
			}
		}

		//Preform XOR with Key 2
		XOR(New_Data,Key_K2);
 8000ec4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4611      	mov	r1, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f8ad 	bl	800102e <XOR>

		//Preform XOR with Old data
		XOR(New_Data,Old_Data);
 8000ed4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f8a5 	bl	800102e <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fb42 	bl	8000574 <AES_Encrypt>
	}

	Final_MIC[0] = New_Data[0];
 8000ef0:	7d3a      	ldrb	r2, [r7, #20]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	701a      	strb	r2, [r3, #0]
	Final_MIC[1] = New_Data[1];
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	7d7a      	ldrb	r2, [r7, #21]
 8000efc:	701a      	strb	r2, [r3, #0]
	Final_MIC[2] = New_Data[2];
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	3302      	adds	r3, #2
 8000f02:	7dba      	ldrb	r2, [r7, #22]
 8000f04:	701a      	strb	r2, [r3, #0]
	Final_MIC[3] = New_Data[3];
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	3303      	adds	r3, #3
 8000f0a:	7dfa      	ldrb	r2, [r7, #23]
 8000f0c:	701a      	strb	r2, [r3, #0]
}
 8000f0e:	bf00      	nop
 8000f10:	376c      	adds	r7, #108	; 0x6c
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd90      	pop	{r4, r7, pc}
 8000f16:	bf00      	nop
 8000f18:	080083b4 	.word	0x080083b4

08000f1c <Generate_Keys>:

void Generate_Keys(unsigned char *K1, unsigned char *K2, unsigned char NwkSkey[16])
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
	unsigned char i;
	unsigned char MSB_Key;

	//Encrypt the zeros in K1 with the NwkSkey
	AES_Encrypt(K1, NwkSkey);
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	68f8      	ldr	r0, [r7, #12]
 8000f2c:	f7ff fb22 	bl	8000574 <AES_Encrypt>

	//Create K1
	//Check if MSB is 1
	if((K1[0] & 0x80) == 0x80)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	b25b      	sxtb	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	da02      	bge.n	8000f40 <Generate_Keys+0x24>
	{
		MSB_Key = 1;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	75bb      	strb	r3, [r7, #22]
 8000f3e:	e001      	b.n	8000f44 <Generate_Keys+0x28>
	}
	else
	{
		MSB_Key = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	75bb      	strb	r3, [r7, #22]
	}

	//Shift K1 one bit left
	Shift_Left(K1);
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f000 f83c 	bl	8000fc2 <Shift_Left>

	//if MSB was 1
	if(MSB_Key == 1)
 8000f4a:	7dbb      	ldrb	r3, [r7, #22]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d109      	bne.n	8000f64 <Generate_Keys+0x48>
	{
		K1[15] = K1[15] ^ 0x87;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	330f      	adds	r3, #15
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	320f      	adds	r2, #15
 8000f5a:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	7013      	strb	r3, [r2, #0]
	}

	//Copy K1 to K2
	for( i = 0; i < 16; i++)
 8000f64:	2300      	movs	r3, #0
 8000f66:	75fb      	strb	r3, [r7, #23]
 8000f68:	e00a      	b.n	8000f80 <Generate_Keys+0x64>
	{
		K2[i] = K1[i];
 8000f6a:	7dfb      	ldrb	r3, [r7, #23]
 8000f6c:	68fa      	ldr	r2, [r7, #12]
 8000f6e:	441a      	add	r2, r3
 8000f70:	7dfb      	ldrb	r3, [r7, #23]
 8000f72:	68b9      	ldr	r1, [r7, #8]
 8000f74:	440b      	add	r3, r1
 8000f76:	7812      	ldrb	r2, [r2, #0]
 8000f78:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < 16; i++)
 8000f7a:	7dfb      	ldrb	r3, [r7, #23]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	75fb      	strb	r3, [r7, #23]
 8000f80:	7dfb      	ldrb	r3, [r7, #23]
 8000f82:	2b0f      	cmp	r3, #15
 8000f84:	d9f1      	bls.n	8000f6a <Generate_Keys+0x4e>
	}

	//Check if MSB is 1
	if((K2[0] & 0x80) == 0x80)
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	b25b      	sxtb	r3, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	da02      	bge.n	8000f96 <Generate_Keys+0x7a>
	{
		MSB_Key = 1;
 8000f90:	2301      	movs	r3, #1
 8000f92:	75bb      	strb	r3, [r7, #22]
 8000f94:	e001      	b.n	8000f9a <Generate_Keys+0x7e>
	}
	else
	{
		MSB_Key = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	75bb      	strb	r3, [r7, #22]
	}

	//Shift K2 one bit left
	Shift_Left(K2);
 8000f9a:	68b8      	ldr	r0, [r7, #8]
 8000f9c:	f000 f811 	bl	8000fc2 <Shift_Left>

	//Check if MSB was 1
	if(MSB_Key == 1)
 8000fa0:	7dbb      	ldrb	r3, [r7, #22]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d109      	bne.n	8000fba <Generate_Keys+0x9e>
	{
		K2[15] = K2[15] ^ 0x87;
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	330f      	adds	r3, #15
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	68ba      	ldr	r2, [r7, #8]
 8000fae:	320f      	adds	r2, #15
 8000fb0:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	7013      	strb	r3, [r2, #0]
	}
}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <Shift_Left>:

void Shift_Left(unsigned char *Data)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b085      	sub	sp, #20
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
	unsigned char i;
	unsigned char Overflow = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73bb      	strb	r3, [r7, #14]
	//unsigned char High_Byte, Low_Byte;

	for(i = 0; i < 16; i++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	73fb      	strb	r3, [r7, #15]
 8000fd2:	e022      	b.n	800101a <Shift_Left+0x58>
	{
		//Check for overflow on next byte except for the last byte
		if(i < 15)
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	2b0e      	cmp	r3, #14
 8000fd8:	d80d      	bhi.n	8000ff6 <Shift_Left+0x34>
		{
			//Check if upper bit is one
			if((Data[i+1] & 0x80) == 0x80)
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b25b      	sxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	da02      	bge.n	8000ff0 <Shift_Left+0x2e>
			{
				Overflow = 1;
 8000fea:	2301      	movs	r3, #1
 8000fec:	73bb      	strb	r3, [r7, #14]
 8000fee:	e004      	b.n	8000ffa <Shift_Left+0x38>
			}
			else
			{
				Overflow = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	73bb      	strb	r3, [r7, #14]
 8000ff4:	e001      	b.n	8000ffa <Shift_Left+0x38>
			}
		}
		else
		{
			Overflow = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73bb      	strb	r3, [r7, #14]
		}

		//Shift one left
		Data[i] = (Data[i] << 1) + Overflow;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	4413      	add	r3, r2
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	b2d9      	uxtb	r1, r3
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	4413      	add	r3, r2
 800100c:	7bba      	ldrb	r2, [r7, #14]
 800100e:	440a      	add	r2, r1
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	3301      	adds	r3, #1
 8001018:	73fb      	strb	r3, [r7, #15]
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	d9d9      	bls.n	8000fd4 <Shift_Left+0x12>
	}
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <XOR>:

void XOR(unsigned char *New_Data,unsigned char *Old_Data)
{
 800102e:	b480      	push	{r7}
 8001030:	b085      	sub	sp, #20
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
	unsigned char i;

	for(i = 0; i < 16; i++)
 8001038:	2300      	movs	r3, #0
 800103a:	73fb      	strb	r3, [r7, #15]
 800103c:	e010      	b.n	8001060 <XOR+0x32>
	{
		New_Data[i] = New_Data[i] ^ Old_Data[i];
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	4413      	add	r3, r2
 8001044:	7819      	ldrb	r1, [r3, #0]
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	4413      	add	r3, r2
 800104c:	781a      	ldrb	r2, [r3, #0]
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	4403      	add	r3, r0
 8001054:	404a      	eors	r2, r1
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	3301      	adds	r3, #1
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	2b0f      	cmp	r3, #15
 8001064:	d9eb      	bls.n	800103e <XOR+0x10>
	}
}
 8001066:	bf00      	nop
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800107c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001080:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b00      	cmp	r3, #0
 800108a:	d013      	beq.n	80010b4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800108c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001090:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001094:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001098:	2b00      	cmp	r3, #0
 800109a:	d00b      	beq.n	80010b4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800109c:	e000      	b.n	80010a0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800109e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80010a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d0f9      	beq.n	800109e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80010aa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80010b4:	687b      	ldr	r3, [r7, #4]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	e009      	b.n	80010e8 <_write+0x26>
	{
	  ITM_SendChar(*ptr++);
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	60ba      	str	r2, [r7, #8]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ffc9 	bl	8001074 <ITM_SendChar>
	for (int i = 0; i < len; i++)
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	3301      	adds	r3, #1
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	dbf1      	blt.n	80010d4 <_write+0x12>
	}
	return len;
 80010f0:	687b      	ldr	r3, [r7, #4]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <get_precision_tick>:

static uint32_t get_precision_tick()
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001102:	b672      	cpsid	i
}
 8001104:	bf00      	nop
    __disable_irq();
    HAL_TIM_Base_Start(&htim1);
 8001106:	480a      	ldr	r0, [pc, #40]	; (8001130 <get_precision_tick+0x34>)
 8001108:	f005 f8dc 	bl	80062c4 <HAL_TIM_Base_Start>
    uint32_t precision_tick = tim_tick_msb | __HAL_TIM_GET_COUNTER(&htim1);
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <get_precision_tick+0x34>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <get_precision_tick+0x38>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4313      	orrs	r3, r2
 8001118:	607b      	str	r3, [r7, #4]
    HAL_TIM_Base_Stop(&htim1);
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <get_precision_tick+0x34>)
 800111c:	f005 f91e 	bl	800635c <HAL_TIM_Base_Stop>
  __ASM volatile ("cpsie i" : : : "memory");
 8001120:	b662      	cpsie	i
}
 8001122:	bf00      	nop
    __enable_irq();

    return precision_tick;
 8001124:	687b      	ldr	r3, [r7, #4]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000308 	.word	0x20000308
 8001134:	200003d8 	.word	0x200003d8

08001138 <random_int>:

static uint8_t random_int(uint8_t max)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
    return 0; // TODO: MAKE IT RANDOM
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001156:	f001 fad7 	bl	8002708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115a:	f000 f875 	bl	8001248 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  printf("\n");
 800115e:	200a      	movs	r0, #10
 8001160:	f006 fb74 	bl	800784c <putchar>
  printf("START\n");
 8001164:	482f      	ldr	r0, [pc, #188]	; (8001224 <main+0xd4>)
 8001166:	f006 fbf5 	bl	8007954 <puts>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116a:	f000 f9e9 	bl	8001540 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800116e:	f000 f9b7 	bl	80014e0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001172:	f000 f8c7 	bl	8001304 <MX_ADC1_Init>
  MX_SPI2_Init();
 8001176:	f000 f921 	bl	80013bc <MX_SPI2_Init>
  MX_TIM1_Init();
 800117a:	f000 f95d 	bl	8001438 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  if (!rfm95_init(&rfm95_handle)) {
 800117e:	482a      	ldr	r0, [pc, #168]	; (8001228 <main+0xd8>)
 8001180:	f000 fcb6 	bl	8001af0 <rfm95_init>
 8001184:	4603      	mov	r3, r0
 8001186:	f083 0301 	eor.w	r3, r3, #1
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <main+0x48>
	  printf("LoRa RFM9x: Init FAIL\n");
 8001190:	4826      	ldr	r0, [pc, #152]	; (800122c <main+0xdc>)
 8001192:	f006 fbdf 	bl	8007954 <puts>
 8001196:	e002      	b.n	800119e <main+0x4e>
  } else {
	  printf("LoRa RFM9x: LoRa SUCCESS\n");
 8001198:	4825      	ldr	r0, [pc, #148]	; (8001230 <main+0xe0>)
 800119a:	f006 fbdb 	bl	8007954 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  uint8_t data_packet[] = {0x01, 0x02, 0x03, 0x4};
 800119e:	4b25      	ldr	r3, [pc, #148]	; (8001234 <main+0xe4>)
 80011a0:	603b      	str	r3, [r7, #0]
	  if (!rfm95_send_receive_cycle(&rfm95_handle, data_packet, sizeof(data_packet))) {
 80011a2:	463b      	mov	r3, r7
 80011a4:	2204      	movs	r2, #4
 80011a6:	4619      	mov	r1, r3
 80011a8:	481f      	ldr	r0, [pc, #124]	; (8001228 <main+0xd8>)
 80011aa:	f000 ffe8 	bl	800217e <rfm95_send_receive_cycle>
 80011ae:	4603      	mov	r3, r0
 80011b0:	f083 0301 	eor.w	r3, r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <main+0x72>
		  printf("LoRa RFM9x: Send FAIL\n");
 80011ba:	481f      	ldr	r0, [pc, #124]	; (8001238 <main+0xe8>)
 80011bc:	f006 fbca 	bl	8007954 <puts>
 80011c0:	e002      	b.n	80011c8 <main+0x78>
	  } else {
		  printf("LoRa RFM9x: Send SUCCESS\n");
 80011c2:	481e      	ldr	r0, [pc, #120]	; (800123c <main+0xec>)
 80011c4:	f006 fbc6 	bl	8007954 <puts>
	  }

	  //Example ADC
	  HAL_ADC_Start(&hadc1);
 80011c8:	481d      	ldr	r0, [pc, #116]	; (8001240 <main+0xf0>)
 80011ca:	f001 fcad 	bl	8002b28 <HAL_ADC_Start>
	  uint8_t val_a;
	  if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 80011ce:	210a      	movs	r1, #10
 80011d0:	481b      	ldr	r0, [pc, #108]	; (8001240 <main+0xf0>)
 80011d2:	f001 fd4b 	bl	8002c6c <HAL_ADC_PollForConversion>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d104      	bne.n	80011e6 <main+0x96>
		  val_a = HAL_ADC_GetValue(&hadc1);
 80011dc:	4818      	ldr	r0, [pc, #96]	; (8001240 <main+0xf0>)
 80011de:	f001 fe03 	bl	8002de8 <HAL_ADC_GetValue>
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
	  }
	  HAL_ADC_Stop(&hadc1);
 80011e6:	4816      	ldr	r0, [pc, #88]	; (8001240 <main+0xf0>)
 80011e8:	f001 fd0b 	bl	8002c02 <HAL_ADC_Stop>
	  printf("%d", val_a);
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	4619      	mov	r1, r3
 80011f0:	4814      	ldr	r0, [pc, #80]	; (8001244 <main+0xf4>)
 80011f2:	f006 fb13 	bl	800781c <iprintf>

	  //Example GPIO
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80011f6:	2201      	movs	r2, #1
 80011f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001200:	f002 fcba 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_Delay(2000);
 8001204:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001208:	f001 fae4 	bl	80027d4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001216:	f002 fcaf 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_Delay(2000);
 800121a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800121e:	f001 fad9 	bl	80027d4 <HAL_Delay>
  {
 8001222:	e7bc      	b.n	800119e <main+0x4e>
 8001224:	080083c4 	.word	0x080083c4
 8001228:	20000100 	.word	0x20000100
 800122c:	080083cc 	.word	0x080083cc
 8001230:	080083e4 	.word	0x080083e4
 8001234:	04030201 	.word	0x04030201
 8001238:	08008400 	.word	0x08008400
 800123c:	08008418 	.word	0x08008418
 8001240:	20000254 	.word	0x20000254
 8001244:	08008434 	.word	0x08008434

08001248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b09c      	sub	sp, #112	; 0x70
 800124c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001252:	2228      	movs	r2, #40	; 0x28
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f005 ffea 	bl	8007230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800125c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800126c:	463b      	mov	r3, r7
 800126e:	2234      	movs	r2, #52	; 0x34
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f005 ffdc 	bl	8007230 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001278:	2301      	movs	r3, #1
 800127a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800127c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001280:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001282:	2300      	movs	r3, #0
 8001284:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001286:	2301      	movs	r3, #1
 8001288:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128a:	2302      	movs	r3, #2
 800128c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800128e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001292:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001294:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001298:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800129e:	4618      	mov	r0, r3
 80012a0:	f002 fc9a 	bl	8003bd8 <HAL_RCC_OscConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0x66>
  {
    Error_Handler();
 80012aa:	f000 f9ff 	bl	80016ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ae:	230f      	movs	r3, #15
 80012b0:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b2:	2302      	movs	r3, #2
 80012b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012c8:	2102      	movs	r1, #2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f003 fcc2 	bl	8004c54 <HAL_RCC_ClockConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0x92>
  {
    Error_Handler();
 80012d6:	f000 f9e9 	bl	80016ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC1;
 80012da:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 80012de:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80012e0:	2300      	movs	r3, #0
 80012e2:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 80012e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ea:	463b      	mov	r3, r7
 80012ec:	4618      	mov	r0, r3
 80012ee:	f003 fee7 	bl	80050c0 <HAL_RCCEx_PeriphCLKConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80012f8:	f000 f9d8 	bl	80016ac <Error_Handler>
  }
}
 80012fc:	bf00      	nop
 80012fe:	3770      	adds	r7, #112	; 0x70
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800130a:	463b      	mov	r3, r7
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
 8001318:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800131a:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <MX_ADC1_Init+0xb4>)
 800131c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001320:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001322:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <MX_ADC1_Init+0xb4>)
 8001324:	2200      	movs	r2, #0
 8001326:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001328:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <MX_ADC1_Init+0xb4>)
 800132a:	2210      	movs	r2, #16
 800132c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800132e:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <MX_ADC1_Init+0xb4>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001334:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <MX_ADC1_Init+0xb4>)
 8001336:	2200      	movs	r2, #0
 8001338:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800133a:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <MX_ADC1_Init+0xb4>)
 800133c:	2200      	movs	r2, #0
 800133e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001342:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <MX_ADC1_Init+0xb4>)
 8001344:	2200      	movs	r2, #0
 8001346:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <MX_ADC1_Init+0xb4>)
 800134a:	2201      	movs	r2, #1
 800134c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <MX_ADC1_Init+0xb4>)
 8001350:	2200      	movs	r2, #0
 8001352:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001354:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <MX_ADC1_Init+0xb4>)
 8001356:	2201      	movs	r2, #1
 8001358:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800135a:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <MX_ADC1_Init+0xb4>)
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <MX_ADC1_Init+0xb4>)
 8001364:	2204      	movs	r2, #4
 8001366:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001368:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <MX_ADC1_Init+0xb4>)
 800136a:	2200      	movs	r2, #0
 800136c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <MX_ADC1_Init+0xb4>)
 8001370:	2200      	movs	r2, #0
 8001372:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001374:	4810      	ldr	r0, [pc, #64]	; (80013b8 <MX_ADC1_Init+0xb4>)
 8001376:	f001 fa51 	bl	800281c <HAL_ADC_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8001380:	f000 f994 	bl	80016ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001384:	2301      	movs	r3, #1
 8001386:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001388:	2301      	movs	r3, #1
 800138a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001394:	2300      	movs	r3, #0
 8001396:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800139c:	463b      	mov	r3, r7
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_ADC1_Init+0xb4>)
 80013a2:	f001 fd2f 	bl	8002e04 <HAL_ADC_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80013ac:	f000 f97e 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000254 	.word	0x20000254

080013bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013c0:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <MX_SPI2_Init+0x74>)
 80013c2:	4a1c      	ldr	r2, [pc, #112]	; (8001434 <MX_SPI2_Init+0x78>)
 80013c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013c6:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <MX_SPI2_Init+0x74>)
 80013c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013ce:	4b18      	ldr	r3, [pc, #96]	; (8001430 <MX_SPI2_Init+0x74>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013d4:	4b16      	ldr	r3, [pc, #88]	; (8001430 <MX_SPI2_Init+0x74>)
 80013d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013da:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013dc:	4b14      	ldr	r3, [pc, #80]	; (8001430 <MX_SPI2_Init+0x74>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013e2:	4b13      	ldr	r3, [pc, #76]	; (8001430 <MX_SPI2_Init+0x74>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <MX_SPI2_Init+0x74>)
 80013ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ee:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <MX_SPI2_Init+0x74>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <MX_SPI2_Init+0x74>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <MX_SPI2_Init+0x74>)
 80013fe:	2200      	movs	r2, #0
 8001400:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <MX_SPI2_Init+0x74>)
 8001404:	2200      	movs	r2, #0
 8001406:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <MX_SPI2_Init+0x74>)
 800140a:	2207      	movs	r2, #7
 800140c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <MX_SPI2_Init+0x74>)
 8001410:	2200      	movs	r2, #0
 8001412:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <MX_SPI2_Init+0x74>)
 8001416:	2208      	movs	r2, #8
 8001418:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <MX_SPI2_Init+0x74>)
 800141c:	f003 ffe2 	bl	80053e4 <HAL_SPI_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001426:	f000 f941 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200002a4 	.word	0x200002a4
 8001434:	40003800 	.word	0x40003800

08001438 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143e:	f107 0310 	add.w	r3, r7, #16
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001456:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <MX_TIM1_Init+0xa0>)
 8001458:	4a20      	ldr	r2, [pc, #128]	; (80014dc <MX_TIM1_Init+0xa4>)
 800145a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2048;
 800145c:	4b1e      	ldr	r3, [pc, #120]	; (80014d8 <MX_TIM1_Init+0xa0>)
 800145e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001462:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <MX_TIM1_Init+0xa0>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800146a:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <MX_TIM1_Init+0xa0>)
 800146c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001470:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001472:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <MX_TIM1_Init+0xa0>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001478:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <MX_TIM1_Init+0xa0>)
 800147a:	2200      	movs	r2, #0
 800147c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <MX_TIM1_Init+0xa0>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001484:	4814      	ldr	r0, [pc, #80]	; (80014d8 <MX_TIM1_Init+0xa0>)
 8001486:	f004 fec5 	bl	8006214 <HAL_TIM_Base_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001490:	f000 f90c 	bl	80016ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001498:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800149a:	f107 0310 	add.w	r3, r7, #16
 800149e:	4619      	mov	r1, r3
 80014a0:	480d      	ldr	r0, [pc, #52]	; (80014d8 <MX_TIM1_Init+0xa0>)
 80014a2:	f005 f8a1 	bl	80065e8 <HAL_TIM_ConfigClockSource>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80014ac:	f000 f8fe 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b0:	2300      	movs	r3, #0
 80014b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	4619      	mov	r1, r3
 80014c0:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_TIM1_Init+0xa0>)
 80014c2:	f005 fa95 	bl	80069f0 <HAL_TIMEx_MasterConfigSynchronization>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80014cc:	f000 f8ee 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	3720      	adds	r7, #32
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000308 	.word	0x20000308
 80014dc:	40012c00 	.word	0x40012c00

080014e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <MX_USART2_UART_Init+0x58>)
 80014e6:	4a15      	ldr	r2, [pc, #84]	; (800153c <MX_USART2_UART_Init+0x5c>)
 80014e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <MX_USART2_UART_Init+0x58>)
 80014ec:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80014f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <MX_USART2_UART_Init+0x58>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <MX_USART2_UART_Init+0x58>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <MX_USART2_UART_Init+0x58>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <MX_USART2_UART_Init+0x58>)
 8001506:	220c      	movs	r2, #12
 8001508:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <MX_USART2_UART_Init+0x58>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <MX_USART2_UART_Init+0x58>)
 8001512:	2200      	movs	r2, #0
 8001514:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <MX_USART2_UART_Init+0x58>)
 8001518:	2200      	movs	r2, #0
 800151a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <MX_USART2_UART_Init+0x58>)
 800151e:	2200      	movs	r2, #0
 8001520:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_USART2_UART_Init+0x58>)
 8001524:	f005 fae8 	bl	8006af8 <HAL_UART_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800152e:	f000 f8bd 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000354 	.word	0x20000354
 800153c:	40004400 	.word	0x40004400

08001540 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	; 0x28
 8001544:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001556:	4b42      	ldr	r3, [pc, #264]	; (8001660 <MX_GPIO_Init+0x120>)
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	4a41      	ldr	r2, [pc, #260]	; (8001660 <MX_GPIO_Init+0x120>)
 800155c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001560:	6153      	str	r3, [r2, #20]
 8001562:	4b3f      	ldr	r3, [pc, #252]	; (8001660 <MX_GPIO_Init+0x120>)
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800156e:	4b3c      	ldr	r3, [pc, #240]	; (8001660 <MX_GPIO_Init+0x120>)
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	4a3b      	ldr	r2, [pc, #236]	; (8001660 <MX_GPIO_Init+0x120>)
 8001574:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001578:	6153      	str	r3, [r2, #20]
 800157a:	4b39      	ldr	r3, [pc, #228]	; (8001660 <MX_GPIO_Init+0x120>)
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	4b36      	ldr	r3, [pc, #216]	; (8001660 <MX_GPIO_Init+0x120>)
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	4a35      	ldr	r2, [pc, #212]	; (8001660 <MX_GPIO_Init+0x120>)
 800158c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001590:	6153      	str	r3, [r2, #20]
 8001592:	4b33      	ldr	r3, [pc, #204]	; (8001660 <MX_GPIO_Init+0x120>)
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	4b30      	ldr	r3, [pc, #192]	; (8001660 <MX_GPIO_Init+0x120>)
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	4a2f      	ldr	r2, [pc, #188]	; (8001660 <MX_GPIO_Init+0x120>)
 80015a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a8:	6153      	str	r3, [r2, #20]
 80015aa:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <MX_GPIO_Init+0x120>)
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFM9x_RST_GPIO_Port, RFM9x_RST_Pin, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015bc:	4829      	ldr	r0, [pc, #164]	; (8001664 <MX_GPIO_Init+0x124>)
 80015be:	f002 fadb 	bl	8003b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFM9x_NSS_GPIO_Port, RFM9x_NSS_Pin, GPIO_PIN_RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015cc:	f002 fad4 	bl	8003b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	481f      	ldr	r0, [pc, #124]	; (8001664 <MX_GPIO_Init+0x124>)
 80015e8:	f002 f954 	bl	8003894 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFM9x_DIO5_Pin RFM9x_DIO1_Pin RFM9x_DIO0_Pin */
  GPIO_InitStruct.Pin = RFM9x_DIO5_Pin|RFM9x_DIO1_Pin|RFM9x_DIO0_Pin;
 80015ec:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80015f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80015f2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80015f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4619      	mov	r1, r3
 8001602:	4818      	ldr	r0, [pc, #96]	; (8001664 <MX_GPIO_Init+0x124>)
 8001604:	f002 f946 	bl	8003894 <HAL_GPIO_Init>

  /*Configure GPIO pin : RFM9x_RST_Pin */
  GPIO_InitStruct.Pin = RFM9x_RST_Pin;
 8001608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800160c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160e:	2301      	movs	r3, #1
 8001610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RFM9x_RST_GPIO_Port, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	4810      	ldr	r0, [pc, #64]	; (8001664 <MX_GPIO_Init+0x124>)
 8001622:	f002 f937 	bl	8003894 <HAL_GPIO_Init>

  /*Configure GPIO pin : RFM9x_NSS_Pin */
  GPIO_InitStruct.Pin = RFM9x_NSS_Pin;
 8001626:	f44f 7380 	mov.w	r3, #256	; 0x100
 800162a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RFM9x_NSS_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001642:	f002 f927 	bl	8003894 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2100      	movs	r1, #0
 800164a:	2017      	movs	r0, #23
 800164c:	f002 f8eb 	bl	8003826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001650:	2017      	movs	r0, #23
 8001652:	f002 f904 	bl	800385e <HAL_NVIC_EnableIRQ>

}
 8001656:	bf00      	nop
 8001658:	3728      	adds	r7, #40	; 0x28
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000
 8001664:	48000800 	.word	0x48000800

08001668 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	80fb      	strh	r3, [r7, #6]
	if (!(&rfm95_handle))
		return;

    if (GPIO_Pin == RFM9x_DIO0_Pin)
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001678:	d104      	bne.n	8001684 <HAL_GPIO_EXTI_Callback+0x1c>
    {
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO0);
 800167a:	2100      	movs	r1, #0
 800167c:	480a      	ldr	r0, [pc, #40]	; (80016a8 <HAL_GPIO_EXTI_Callback+0x40>)
 800167e:	f000 fdc4 	bl	800220a <rfm95_on_interrupt>
 8001682:	e00e      	b.n	80016a2 <HAL_GPIO_EXTI_Callback+0x3a>
    }
    else if (GPIO_Pin == RFM9x_DIO1_Pin)
 8001684:	88fb      	ldrh	r3, [r7, #6]
 8001686:	2b80      	cmp	r3, #128	; 0x80
 8001688:	d104      	bne.n	8001694 <HAL_GPIO_EXTI_Callback+0x2c>
    {
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO1);
 800168a:	2101      	movs	r1, #1
 800168c:	4806      	ldr	r0, [pc, #24]	; (80016a8 <HAL_GPIO_EXTI_Callback+0x40>)
 800168e:	f000 fdbc 	bl	800220a <rfm95_on_interrupt>
 8001692:	e006      	b.n	80016a2 <HAL_GPIO_EXTI_Callback+0x3a>
    }
    else if (GPIO_Pin == RFM9x_DIO5_Pin)
 8001694:	88fb      	ldrh	r3, [r7, #6]
 8001696:	2b40      	cmp	r3, #64	; 0x40
 8001698:	d103      	bne.n	80016a2 <HAL_GPIO_EXTI_Callback+0x3a>
    {
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO5);
 800169a:	2102      	movs	r1, #2
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <HAL_GPIO_EXTI_Callback+0x40>)
 800169e:	f000 fdb4 	bl	800220a <rfm95_on_interrupt>
    }
}
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000100 	.word	0x20000100

080016ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016b0:	b672      	cpsid	i
}
 80016b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <Error_Handler+0x8>

080016b6 <read_register>:

#define RFM95_REGISTER_INVERT_IQ_1_RX                    		0x67
#define RFM95_REGISTER_INVERT_IQ_2_RX							0x19

static bool read_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t *buffer, size_t length)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	607a      	str	r2, [r7, #4]
 80016c0:	603b      	str	r3, [r7, #0]
 80016c2:	460b      	mov	r3, r1
 80016c4:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6858      	ldr	r0, [r3, #4]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	891b      	ldrh	r3, [r3, #8]
 80016ce:	2200      	movs	r2, #0
 80016d0:	4619      	mov	r1, r3
 80016d2:	f002 fa51 	bl	8003b78 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer = (uint8_t)reg & 0x7fu;
 80016d6:	7afb      	ldrb	r3, [r7, #11]
 80016d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	75fb      	strb	r3, [r7, #23]
	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6818      	ldr	r0, [r3, #0]
 80016e4:	f107 0117 	add.w	r1, r7, #23
 80016e8:	230a      	movs	r3, #10
 80016ea:	2201      	movs	r2, #1
 80016ec:	f003 ff25 	bl	800553a <HAL_SPI_Transmit>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <read_register+0x44>
		return false;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e015      	b.n	8001726 <read_register+0x70>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, length, RFM95_SPI_TIMEOUT) != HAL_OK) {
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6818      	ldr	r0, [r3, #0]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	b29a      	uxth	r2, r3
 8001702:	230a      	movs	r3, #10
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	f004 f886 	bl	8005816 <HAL_SPI_Receive>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <read_register+0x5e>
		return false;
 8001710:	2300      	movs	r3, #0
 8001712:	e008      	b.n	8001726 <read_register+0x70>
	}
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6858      	ldr	r0, [r3, #4]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	891b      	ldrh	r3, [r3, #8]
 800171c:	2201      	movs	r2, #1
 800171e:	4619      	mov	r1, r3
 8001720:	f002 fa2a 	bl	8003b78 <HAL_GPIO_WritePin>

	return true;
 8001724:	2301      	movs	r3, #1
}
 8001726:	4618      	mov	r0, r3
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <write_register>:

static bool write_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t value)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	460b      	mov	r3, r1
 8001738:	70fb      	strb	r3, [r7, #3]
 800173a:	4613      	mov	r3, r2
 800173c:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6858      	ldr	r0, [r3, #4]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	891b      	ldrh	r3, [r3, #8]
 8001746:	2200      	movs	r2, #0
 8001748:	4619      	mov	r1, r3
 800174a:	f002 fa15 	bl	8003b78 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = {((uint8_t)reg | 0x80u), value};
 800174e:	78fb      	ldrb	r3, [r7, #3]
 8001750:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001754:	b2db      	uxtb	r3, r3
 8001756:	733b      	strb	r3, [r7, #12]
 8001758:	78bb      	ldrb	r3, [r7, #2]
 800175a:	737b      	strb	r3, [r7, #13]
	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2, RFM95_SPI_TIMEOUT) != HAL_OK) {
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6818      	ldr	r0, [r3, #0]
 8001760:	f107 010c 	add.w	r1, r7, #12
 8001764:	230a      	movs	r3, #10
 8001766:	2202      	movs	r2, #2
 8001768:	f003 fee7 	bl	800553a <HAL_SPI_Transmit>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <write_register+0x48>
		return false;
 8001772:	2300      	movs	r3, #0
 8001774:	e008      	b.n	8001788 <write_register+0x5a>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6858      	ldr	r0, [r3, #4]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	891b      	ldrh	r3, [r3, #8]
 800177e:	2201      	movs	r2, #1
 8001780:	4619      	mov	r1, r3
 8001782:	f002 f9f9 	bl	8003b78 <HAL_GPIO_WritePin>

	return true;
 8001786:	2301      	movs	r3, #1
}
 8001788:	4618      	mov	r0, r3
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <config_set_channel>:

static void config_set_channel(rfm95_handle_t *handle, uint8_t channel_index, uint32_t frequency)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	460b      	mov	r3, r1
 800179a:	607a      	str	r2, [r7, #4]
 800179c:	72fb      	strb	r3, [r7, #11]
	assert(channel_index < 16);
 800179e:	7afb      	ldrb	r3, [r7, #11]
 80017a0:	2b0f      	cmp	r3, #15
 80017a2:	d905      	bls.n	80017b0 <config_set_channel+0x20>
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <config_set_channel+0x54>)
 80017a6:	4a10      	ldr	r2, [pc, #64]	; (80017e8 <config_set_channel+0x58>)
 80017a8:	2168      	movs	r1, #104	; 0x68
 80017aa:	4810      	ldr	r0, [pc, #64]	; (80017ec <config_set_channel+0x5c>)
 80017ac:	f005 fcd8 	bl	8007160 <__assert_func>
	handle->config.channels[channel_index].frequency = frequency;
 80017b0:	7afa      	ldrb	r2, [r7, #11]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	321a      	adds	r2, #26
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	handle->config.channel_mask |= (1 << channel_index);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80017c2:	b21a      	sxth	r2, r3
 80017c4:	7afb      	ldrb	r3, [r7, #11]
 80017c6:	2101      	movs	r1, #1
 80017c8:	fa01 f303 	lsl.w	r3, r1, r3
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	4313      	orrs	r3, r2
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	08008438 	.word	0x08008438
 80017e8:	08008738 	.word	0x08008738
 80017ec:	0800844c 	.word	0x0800844c

080017f0 <config_load_default>:

static void config_load_default(rfm95_handle_t *handle)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	handle->config.magic = RFM95_EEPROM_CONFIG_MAGIC;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f64a 3267 	movw	r2, #43879	; 0xab67
 80017fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	handle->config.tx_frame_count = 0;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	handle->config.rx_frame_count = 0;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	handle->config.rx1_delay = 1;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	handle->config.channel_mask = 0;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	config_set_channel(handle, 0, 433000000);
 8001822:	4a09      	ldr	r2, [pc, #36]	; (8001848 <config_load_default+0x58>)
 8001824:	2100      	movs	r1, #0
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff ffb2 	bl	8001790 <config_set_channel>
	config_set_channel(handle, 1, 433300000);
 800182c:	4a07      	ldr	r2, [pc, #28]	; (800184c <config_load_default+0x5c>)
 800182e:	2101      	movs	r1, #1
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff ffad 	bl	8001790 <config_set_channel>
	config_set_channel(handle, 2, 433500000);
 8001836:	4a06      	ldr	r2, [pc, #24]	; (8001850 <config_load_default+0x60>)
 8001838:	2102      	movs	r1, #2
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff ffa8 	bl	8001790 <config_set_channel>
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	19cf0e40 	.word	0x19cf0e40
 800184c:	19d3a220 	.word	0x19d3a220
 8001850:	19d6af60 	.word	0x19d6af60

08001854 <reset>:

static void reset(rfm95_handle_t *handle)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68d8      	ldr	r0, [r3, #12]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	8a1b      	ldrh	r3, [r3, #16]
 8001864:	2200      	movs	r2, #0
 8001866:	4619      	mov	r1, r3
 8001868:	f002 f986 	bl	8003b78 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 0.1ms would theoretically be enough
 800186c:	2001      	movs	r0, #1
 800186e:	f000 ffb1 	bl	80027d4 <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68d8      	ldr	r0, [r3, #12]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	8a1b      	ldrh	r3, [r3, #16]
 800187a:	2201      	movs	r2, #1
 800187c:	4619      	mov	r1, r3
 800187e:	f002 f97b 	bl	8003b78 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001882:	2005      	movs	r0, #5
 8001884:	f000 ffa6 	bl	80027d4 <HAL_Delay>
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <configure_frequency>:

static bool configure_frequency(rfm95_handle_t *handle, uint32_t frequency)
{
 8001890:	b5b0      	push	{r4, r5, r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 800189a:	6839      	ldr	r1, [r7, #0]
 800189c:	2000      	movs	r0, #0
 800189e:	460a      	mov	r2, r1
 80018a0:	4603      	mov	r3, r0
 80018a2:	0b55      	lsrs	r5, r2, #13
 80018a4:	04d4      	lsls	r4, r2, #19
 80018a6:	4a27      	ldr	r2, [pc, #156]	; (8001944 <configure_frequency+0xb4>)
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	4620      	mov	r0, r4
 80018ae:	4629      	mov	r1, r5
 80018b0:	f7fe fcde 	bl	8000270 <__aeabi_uldivmod>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (!write_register(handle, RFM95_REGISTER_FR_MSB, (uint8_t)(frf >> 16)))
 80018bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	0c02      	lsrs	r2, r0, #16
 80018ca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80018ce:	0c0b      	lsrs	r3, r1, #16
 80018d0:	b2d3      	uxtb	r3, r2
 80018d2:	461a      	mov	r2, r3
 80018d4:	2106      	movs	r1, #6
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ff29 	bl	800172e <write_register>
 80018dc:	4603      	mov	r3, r0
 80018de:	f083 0301 	eor.w	r3, r3, #1
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <configure_frequency+0x5c>
		return false;
 80018e8:	2300      	movs	r3, #0
 80018ea:	e026      	b.n	800193a <configure_frequency+0xaa>
	if (!write_register(handle, RFM95_REGISTER_FR_MID, (uint8_t)(frf >> 8)))
 80018ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	0a02      	lsrs	r2, r0, #8
 80018fa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80018fe:	0a0b      	lsrs	r3, r1, #8
 8001900:	b2d3      	uxtb	r3, r2
 8001902:	461a      	mov	r2, r3
 8001904:	2107      	movs	r1, #7
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ff11 	bl	800172e <write_register>
 800190c:	4603      	mov	r3, r0
 800190e:	f083 0301 	eor.w	r3, r3, #1
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <configure_frequency+0x8c>
		return false;
 8001918:	2300      	movs	r3, #0
 800191a:	e00e      	b.n	800193a <configure_frequency+0xaa>
	if (!write_register(handle, RFM95_REGISTER_FR_LSB, (uint8_t)(frf >> 0)))
 800191c:	7a3b      	ldrb	r3, [r7, #8]
 800191e:	461a      	mov	r2, r3
 8001920:	2108      	movs	r1, #8
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ff03 	bl	800172e <write_register>
 8001928:	4603      	mov	r3, r0
 800192a:	f083 0301 	eor.w	r3, r3, #1
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <configure_frequency+0xa8>
		return false;
 8001934:	2300      	movs	r3, #0
 8001936:	e000      	b.n	800193a <configure_frequency+0xaa>

	return true;
 8001938:	2301      	movs	r3, #1
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bdb0      	pop	{r4, r5, r7, pc}
 8001942:	bf00      	nop
 8001944:	01e84800 	.word	0x01e84800

08001948 <configure_channel>:

static bool configure_channel(rfm95_handle_t *handle, size_t channel_index)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
	assert(handle->config.channel_mask & (1 << channel_index));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8001958:	461a      	mov	r2, r3
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	fa42 f303 	asr.w	r3, r2, r3
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b00      	cmp	r3, #0
 8001966:	d105      	bne.n	8001974 <configure_channel+0x2c>
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <configure_channel+0x48>)
 800196a:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <configure_channel+0x4c>)
 800196c:	2191      	movs	r1, #145	; 0x91
 800196e:	480a      	ldr	r0, [pc, #40]	; (8001998 <configure_channel+0x50>)
 8001970:	f005 fbf6 	bl	8007160 <__assert_func>
	return configure_frequency(handle, handle->config.channels[channel_index].frequency);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	321a      	adds	r2, #26
 800197a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800197e:	4619      	mov	r1, r3
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff ff85 	bl	8001890 <configure_frequency>
 8001986:	4603      	mov	r3, r0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	08008460 	.word	0x08008460
 8001994:	0800874c 	.word	0x0800874c
 8001998:	0800844c 	.word	0x0800844c

0800199c <wait_for_irq>:

static bool wait_for_irq(rfm95_handle_t *handle, rfm95_interrupt_t interrupt, uint32_t timeout_ms)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	460b      	mov	r3, r1
 80019a6:	607a      	str	r2, [r7, #4]
 80019a8:	72fb      	strb	r3, [r7, #11]
	uint32_t timeout_tick = handle->get_precision_tick() + timeout_ms * handle->precision_tick_frequency / 1000;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	4798      	blx	r3
 80019b0:	4601      	mov	r1, r0
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	fb02 f303 	mul.w	r3, r2, r3
 80019bc:	4a11      	ldr	r2, [pc, #68]	; (8001a04 <wait_for_irq+0x68>)
 80019be:	fba2 2303 	umull	r2, r3, r2, r3
 80019c2:	099b      	lsrs	r3, r3, #6
 80019c4:	440b      	add	r3, r1
 80019c6:	617b      	str	r3, [r7, #20]

	while (handle->interrupt_times[interrupt] == 0) {
 80019c8:	e00e      	b.n	80019e8 <wait_for_irq+0x4c>
		if (handle->get_precision_tick() >= timeout_tick) {
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	4798      	blx	r3
 80019d0:	4602      	mov	r2, r0
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d807      	bhi.n	80019e8 <wait_for_irq+0x4c>
			printf("LoRa RFM9x: Timeout, check the clock and TIMx prescaler (f = %ld MHz)\n",
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019dc:	4619      	mov	r1, r3
 80019de:	480a      	ldr	r0, [pc, #40]	; (8001a08 <wait_for_irq+0x6c>)
 80019e0:	f005 ff1c 	bl	800781c <iprintf>
					handle->precision_tick_frequency);
			return false;
 80019e4:	2300      	movs	r3, #0
 80019e6:	e008      	b.n	80019fa <wait_for_irq+0x5e>
	while (handle->interrupt_times[interrupt] == 0) {
 80019e8:	7afb      	ldrb	r3, [r7, #11]
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	332a      	adds	r3, #42	; 0x2a
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0e8      	beq.n	80019ca <wait_for_irq+0x2e>
		}
	}

	return true;
 80019f8:	2301      	movs	r3, #1
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	10624dd3 	.word	0x10624dd3
 8001a08:	08008494 	.word	0x08008494

08001a0c <rfm95_set_power>:

	return handle->interrupt_times[RFM95_INTERRUPT_DIO0] != 0;
}

bool rfm95_set_power(rfm95_handle_t *handle, int8_t power)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	70fb      	strb	r3, [r7, #3]
	assert((power >= 2 && power <= 17) || power == 20);
 8001a18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	dd03      	ble.n	8001a28 <rfm95_set_power+0x1c>
 8001a20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a24:	2b11      	cmp	r3, #17
 8001a26:	dd09      	ble.n	8001a3c <rfm95_set_power+0x30>
 8001a28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a2c:	2b14      	cmp	r3, #20
 8001a2e:	d005      	beq.n	8001a3c <rfm95_set_power+0x30>
 8001a30:	4b2c      	ldr	r3, [pc, #176]	; (8001ae4 <rfm95_set_power+0xd8>)
 8001a32:	4a2d      	ldr	r2, [pc, #180]	; (8001ae8 <rfm95_set_power+0xdc>)
 8001a34:	21b4      	movs	r1, #180	; 0xb4
 8001a36:	482d      	ldr	r0, [pc, #180]	; (8001aec <rfm95_set_power+0xe0>)
 8001a38:	f005 fb92 	bl	8007160 <__assert_func>

	rfm95_register_pa_config_t pa_config = {0};
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	733b      	strb	r3, [r7, #12]
	uint8_t pa_dac_config = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	73fb      	strb	r3, [r7, #15]

	if (power >= 2 && power <= 17) {
 8001a44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	dd18      	ble.n	8001a7e <rfm95_set_power+0x72>
 8001a4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a50:	2b11      	cmp	r3, #17
 8001a52:	dc14      	bgt.n	8001a7e <rfm95_set_power+0x72>
		pa_config.max_power = 7;
 8001a54:	7b3b      	ldrb	r3, [r7, #12]
 8001a56:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001a5a:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8001a5c:	7b3b      	ldrb	r3, [r7, #12]
 8001a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a62:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = (power - 2);
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	3b02      	subs	r3, #2
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	7b3b      	ldrb	r3, [r7, #12]
 8001a72:	f362 0303 	bfi	r3, r2, #0, #4
 8001a76:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER;
 8001a78:	2384      	movs	r3, #132	; 0x84
 8001a7a:	73fb      	strb	r3, [r7, #15]
 8001a7c:	e011      	b.n	8001aa2 <rfm95_set_power+0x96>

	} else if (power == 20) {
 8001a7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a82:	2b14      	cmp	r3, #20
 8001a84:	d10d      	bne.n	8001aa2 <rfm95_set_power+0x96>
		pa_config.max_power = 7;
 8001a86:	7b3b      	ldrb	r3, [r7, #12]
 8001a88:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001a8c:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8001a8e:	7b3b      	ldrb	r3, [r7, #12]
 8001a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a94:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = 15;
 8001a96:	7b3b      	ldrb	r3, [r7, #12]
 8001a98:	f043 030f 	orr.w	r3, r3, #15
 8001a9c:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 8001a9e:	2387      	movs	r3, #135	; 0x87
 8001aa0:	73fb      	strb	r3, [r7, #15]
	}

	if (!write_register(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer)) return false;
 8001aa2:	7b3b      	ldrb	r3, [r7, #12]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	2109      	movs	r1, #9
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff fe40 	bl	800172e <write_register>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f083 0301 	eor.w	r3, r3, #1
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <rfm95_set_power+0xb2>
 8001aba:	2300      	movs	r3, #0
 8001abc:	e00e      	b.n	8001adc <rfm95_set_power+0xd0>
	if (!write_register(handle, RFM95_REGISTER_PA_DAC, pa_dac_config)) return false;
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	214d      	movs	r1, #77	; 0x4d
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff fe32 	bl	800172e <write_register>
 8001aca:	4603      	mov	r3, r0
 8001acc:	f083 0301 	eor.w	r3, r3, #1
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <rfm95_set_power+0xce>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	e000      	b.n	8001adc <rfm95_set_power+0xd0>

	return true;
 8001ada:	2301      	movs	r3, #1
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	080084dc 	.word	0x080084dc
 8001ae8:	08008760 	.word	0x08008760
 8001aec:	0800844c 	.word	0x0800844c

08001af0 <rfm95_init>:

bool rfm95_init(rfm95_handle_t *handle)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b02:	d005      	beq.n	8001b10 <rfm95_init+0x20>
 8001b04:	4b9b      	ldr	r3, [pc, #620]	; (8001d74 <rfm95_init+0x284>)
 8001b06:	4a9c      	ldr	r2, [pc, #624]	; (8001d78 <rfm95_init+0x288>)
 8001b08:	21ce      	movs	r1, #206	; 0xce
 8001b0a:	489c      	ldr	r0, [pc, #624]	; (8001d7c <rfm95_init+0x28c>)
 8001b0c:	f005 fb28 	bl	8007160 <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d005      	beq.n	8001b26 <rfm95_init+0x36>
 8001b1a:	4b99      	ldr	r3, [pc, #612]	; (8001d80 <rfm95_init+0x290>)
 8001b1c:	4a96      	ldr	r2, [pc, #600]	; (8001d78 <rfm95_init+0x288>)
 8001b1e:	21cf      	movs	r1, #207	; 0xcf
 8001b20:	4896      	ldr	r0, [pc, #600]	; (8001d7c <rfm95_init+0x28c>)
 8001b22:	f005 fb1d 	bl	8007160 <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b30:	d005      	beq.n	8001b3e <rfm95_init+0x4e>
 8001b32:	4b94      	ldr	r3, [pc, #592]	; (8001d84 <rfm95_init+0x294>)
 8001b34:	4a90      	ldr	r2, [pc, #576]	; (8001d78 <rfm95_init+0x288>)
 8001b36:	21d0      	movs	r1, #208	; 0xd0
 8001b38:	4890      	ldr	r0, [pc, #576]	; (8001d7c <rfm95_init+0x28c>)
 8001b3a:	f005 fb11 	bl	8007160 <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d005      	beq.n	8001b54 <rfm95_init+0x64>
 8001b48:	4b8f      	ldr	r3, [pc, #572]	; (8001d88 <rfm95_init+0x298>)
 8001b4a:	4a8b      	ldr	r2, [pc, #556]	; (8001d78 <rfm95_init+0x288>)
 8001b4c:	21d1      	movs	r1, #209	; 0xd1
 8001b4e:	488b      	ldr	r0, [pc, #556]	; (8001d7c <rfm95_init+0x28c>)
 8001b50:	f005 fb06 	bl	8007160 <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d005      	beq.n	8001b6a <rfm95_init+0x7a>
 8001b5e:	4b8b      	ldr	r3, [pc, #556]	; (8001d8c <rfm95_init+0x29c>)
 8001b60:	4a85      	ldr	r2, [pc, #532]	; (8001d78 <rfm95_init+0x288>)
 8001b62:	21d2      	movs	r1, #210	; 0xd2
 8001b64:	4885      	ldr	r0, [pc, #532]	; (8001d7c <rfm95_init+0x28c>)
 8001b66:	f005 fafb 	bl	8007160 <__assert_func>
	assert(handle->get_precision_tick != NULL);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d105      	bne.n	8001b7e <rfm95_init+0x8e>
 8001b72:	4b87      	ldr	r3, [pc, #540]	; (8001d90 <rfm95_init+0x2a0>)
 8001b74:	4a80      	ldr	r2, [pc, #512]	; (8001d78 <rfm95_init+0x288>)
 8001b76:	21d3      	movs	r1, #211	; 0xd3
 8001b78:	4880      	ldr	r0, [pc, #512]	; (8001d7c <rfm95_init+0x28c>)
 8001b7a:	f005 faf1 	bl	8007160 <__assert_func>
	assert(handle->random_int != NULL);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d105      	bne.n	8001b92 <rfm95_init+0xa2>
 8001b86:	4b83      	ldr	r3, [pc, #524]	; (8001d94 <rfm95_init+0x2a4>)
 8001b88:	4a7b      	ldr	r2, [pc, #492]	; (8001d78 <rfm95_init+0x288>)
 8001b8a:	21d4      	movs	r1, #212	; 0xd4
 8001b8c:	487b      	ldr	r0, [pc, #492]	; (8001d7c <rfm95_init+0x28c>)
 8001b8e:	f005 fae7 	bl	8007160 <__assert_func>
	//assert(handle->precision_sleep_until != NULL);
	assert(handle->precision_tick_frequency > 10000);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b96:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d805      	bhi.n	8001baa <rfm95_init+0xba>
 8001b9e:	4b7e      	ldr	r3, [pc, #504]	; (8001d98 <rfm95_init+0x2a8>)
 8001ba0:	4a75      	ldr	r2, [pc, #468]	; (8001d78 <rfm95_init+0x288>)
 8001ba2:	21d6      	movs	r1, #214	; 0xd6
 8001ba4:	4875      	ldr	r0, [pc, #468]	; (8001d7c <rfm95_init+0x28c>)
 8001ba6:	f005 fadb 	bl	8007160 <__assert_func>

	reset(handle);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff fe52 	bl	8001854 <reset>
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d012      	beq.n	8001bde <rfm95_init+0xee>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	3260      	adds	r2, #96	; 0x60
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	4798      	blx	r3
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f083 0301 	eor.w	r3, r3, #1
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d106      	bne.n	8001bde <rfm95_init+0xee>
	    handle->config.magic != RFM95_EEPROM_CONFIG_MAGIC) {
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 8001bd6:	f64a 3267 	movw	r2, #43879	; 0xab67
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d002      	beq.n	8001be4 <rfm95_init+0xf4>
		config_load_default(handle);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff fe06 	bl	80017f0 <config_load_default>
	}

	uint8_t version;
	if (!read_register(handle, RFM95_REGISTER_VERSION, &version, 1)) {
 8001be4:	f107 020f 	add.w	r2, r7, #15
 8001be8:	2301      	movs	r3, #1
 8001bea:	2142      	movs	r1, #66	; 0x42
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff fd62 	bl	80016b6 <read_register>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	f083 0301 	eor.w	r3, r3, #1
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d004      	beq.n	8001c08 <rfm95_init+0x118>
		printf("Could not read register\n\r");
 8001bfe:	4867      	ldr	r0, [pc, #412]	; (8001d9c <rfm95_init+0x2ac>)
 8001c00:	f005 fe0c 	bl	800781c <iprintf>
		return false;
 8001c04:	2300      	movs	r3, #0
 8001c06:	e0b0      	b.n	8001d6a <rfm95_init+0x27a>
	}

	if (version != RFM9x_VER) {
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	2b12      	cmp	r3, #18
 8001c0c:	d00a      	beq.n	8001c24 <rfm95_init+0x134>
		printf("Wrong version, expected %d, got %d\n\r.", RFM9x_VER, version);
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	461a      	mov	r2, r3
 8001c12:	2112      	movs	r1, #18
 8001c14:	4862      	ldr	r0, [pc, #392]	; (8001da0 <rfm95_init+0x2b0>)
 8001c16:	f005 fe01 	bl	800781c <iprintf>
		printf("Make sure to use RFM9x module or check your SPI connections\n\r");
 8001c1a:	4862      	ldr	r0, [pc, #392]	; (8001da4 <rfm95_init+0x2b4>)
 8001c1c:	f005 fdfe 	bl	800781c <iprintf>
		return false;
 8001c20:	2300      	movs	r3, #0
 8001c22:	e0a2      	b.n	8001d6a <rfm95_init+0x27a>
	}

	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP))
 8001c24:	2200      	movs	r2, #0
 8001c26:	2101      	movs	r1, #1
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff fd80 	bl	800172e <write_register>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	f083 0301 	eor.w	r3, r3, #1
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <rfm95_init+0x14e>
		return false;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e095      	b.n	8001d6a <rfm95_init+0x27a>
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP))
 8001c3e:	2280      	movs	r2, #128	; 0x80
 8001c40:	2101      	movs	r1, #1
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff fd73 	bl	800172e <write_register>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f083 0301 	eor.w	r3, r3, #1
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <rfm95_init+0x168>
		return false;
 8001c54:	2300      	movs	r3, #0
 8001c56:	e088      	b.n	8001d6a <rfm95_init+0x27a>
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE))
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2140      	movs	r1, #64	; 0x40
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff fd66 	bl	800172e <write_register>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f083 0301 	eor.w	r3, r3, #1
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <rfm95_init+0x182>
		return false;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e07b      	b.n	8001d6a <rfm95_init+0x27a>

	if (handle->on_after_interrupts_configured != NULL) {
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <rfm95_init+0x190>
		handle->on_after_interrupts_configured();
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7e:	4798      	blx	r3
	}

	if (!rfm95_set_power(handle, 17))
 8001c80:	2111      	movs	r1, #17
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff fec2 	bl	8001a0c <rfm95_set_power>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f083 0301 	eor.w	r3, r3, #1
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <rfm95_init+0x1a8>
		return false;
 8001c94:	2300      	movs	r3, #0
 8001c96:	e068      	b.n	8001d6a <rfm95_init+0x27a>
	if (!write_register(handle, RFM95_REGISTER_LNA, 0x23))
 8001c98:	2223      	movs	r2, #35	; 0x23
 8001c9a:	210c      	movs	r1, #12
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff fd46 	bl	800172e <write_register>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	f083 0301 	eor.w	r3, r3, #1
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <rfm95_init+0x1c2>
		return false;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	e05b      	b.n	8001d6a <rfm95_init+0x27a>
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00))
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2120      	movs	r1, #32
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff fd39 	bl	800172e <write_register>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	f083 0301 	eor.w	r3, r3, #1
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <rfm95_init+0x1dc>
		return false;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	e04e      	b.n	8001d6a <rfm95_init+0x27a>
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x08))
 8001ccc:	2208      	movs	r2, #8
 8001cce:	2121      	movs	r1, #33	; 0x21
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff fd2c 	bl	800172e <write_register>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	f083 0301 	eor.w	r3, r3, #1
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <rfm95_init+0x1f6>
		return false;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	e041      	b.n	8001d6a <rfm95_init+0x27a>
	if (!write_register(handle, RFM95_REGISTER_SYNC_WORD, 0x34))
 8001ce6:	2234      	movs	r2, #52	; 0x34
 8001ce8:	2139      	movs	r1, #57	; 0x39
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff fd1f 	bl	800172e <write_register>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	f083 0301 	eor.w	r3, r3, #1
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <rfm95_init+0x210>
		return false;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	e034      	b.n	8001d6a <rfm95_init+0x27a>
	if (!write_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80))
 8001d00:	2280      	movs	r2, #128	; 0x80
 8001d02:	210e      	movs	r1, #14
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff fd12 	bl	800172e <write_register>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	f083 0301 	eor.w	r3, r3, #1
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <rfm95_init+0x22a>
		return false;
 8001d16:	2300      	movs	r3, #0
 8001d18:	e027      	b.n	8001d6a <rfm95_init+0x27a>
	if (!write_register(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00))
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	210f      	movs	r1, #15
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff fd05 	bl	800172e <write_register>
 8001d24:	4603      	mov	r3, r0
 8001d26:	f083 0301 	eor.w	r3, r3, #1
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <rfm95_init+0x244>
		return false;
 8001d30:	2300      	movs	r3, #0
 8001d32:	e01a      	b.n	8001d6a <rfm95_init+0x27a>
	if (!write_register(handle, RFM95_REGISTER_MAX_PAYLOAD_LENGTH, 64))
 8001d34:	2240      	movs	r2, #64	; 0x40
 8001d36:	2123      	movs	r1, #35	; 0x23
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff fcf8 	bl	800172e <write_register>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f083 0301 	eor.w	r3, r3, #1
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <rfm95_init+0x25e>
		return false;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	e00d      	b.n	8001d6a <rfm95_init+0x27a>
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP))
 8001d4e:	2280      	movs	r2, #128	; 0x80
 8001d50:	2101      	movs	r1, #1
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff fceb 	bl	800172e <write_register>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f083 0301 	eor.w	r3, r3, #1
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <rfm95_init+0x278>
		return false;
 8001d64:	2300      	movs	r3, #0
 8001d66:	e000      	b.n	8001d6a <rfm95_init+0x27a>

	return true;
 8001d68:	2301      	movs	r3, #1
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	08008508 	.word	0x08008508
 8001d78:	08008770 	.word	0x08008770
 8001d7c:	0800844c 	.word	0x0800844c
 8001d80:	0800853c 	.word	0x0800853c
 8001d84:	08008578 	.word	0x08008578
 8001d88:	080085b0 	.word	0x080085b0
 8001d8c:	080085ec 	.word	0x080085ec
 8001d90:	08008624 	.word	0x08008624
 8001d94:	08008648 	.word	0x08008648
 8001d98:	08008664 	.word	0x08008664
 8001d9c:	08008690 	.word	0x08008690
 8001da0:	080086ac 	.word	0x080086ac
 8001da4:	080086d4 	.word	0x080086d4

08001da8 <send_package>:
	*rx_window_symbols = rx_window_ns / symbol_rate_ns;
}

static bool send_package(rfm95_handle_t *handle, uint8_t *payload_buf, size_t payload_len, uint8_t channel,
                         uint32_t *tx_ticks)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	70fb      	strb	r3, [r7, #3]

	if (!configure_channel(handle, channel))
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	4619      	mov	r1, r3
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f7ff fdc4 	bl	8001948 <configure_channel>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	f083 0301 	eor.w	r3, r3, #1
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <send_package+0x28>
		return false;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e0d7      	b.n	8001f80 <send_package+0x1d8>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72))
 8001dd0:	2272      	movs	r2, #114	; 0x72
 8001dd2:	211d      	movs	r1, #29
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f7ff fcaa 	bl	800172e <write_register>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	f083 0301 	eor.w	r3, r3, #1
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <send_package+0x42>
		return false;
 8001de6:	2300      	movs	r3, #0
 8001de8:	e0ca      	b.n	8001f80 <send_package+0x1d8>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74))
 8001dea:	2274      	movs	r2, #116	; 0x74
 8001dec:	211e      	movs	r1, #30
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f7ff fc9d 	bl	800172e <write_register>
 8001df4:	4603      	mov	r3, r0
 8001df6:	f083 0301 	eor.w	r3, r3, #1
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <send_package+0x5c>
		return false;
 8001e00:	2300      	movs	r3, #0
 8001e02:	e0bd      	b.n	8001f80 <send_package+0x1d8>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04))
 8001e04:	2204      	movs	r2, #4
 8001e06:	2126      	movs	r1, #38	; 0x26
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	f7ff fc90 	bl	800172e <write_register>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	f083 0301 	eor.w	r3, r3, #1
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <send_package+0x76>
		return false;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e0b0      	b.n	8001f80 <send_package+0x1d8>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_TX))
 8001e1e:	2227      	movs	r2, #39	; 0x27
 8001e20:	2133      	movs	r1, #51	; 0x33
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f7ff fc83 	bl	800172e <write_register>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f083 0301 	eor.w	r3, r3, #1
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <send_package+0x90>
		return false;
 8001e34:	2300      	movs	r3, #0
 8001e36:	e0a3      	b.n	8001f80 <send_package+0x1d8>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_TX))
 8001e38:	221d      	movs	r2, #29
 8001e3a:	213b      	movs	r1, #59	; 0x3b
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f7ff fc76 	bl	800172e <write_register>
 8001e42:	4603      	mov	r3, r0
 8001e44:	f083 0301 	eor.w	r3, r3, #1
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <send_package+0xaa>
		return false;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e096      	b.n	8001f80 <send_package+0x1d8>
	if (!write_register(handle, RFM95_REGISTER_PAYLOAD_LENGTH, payload_len))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	461a      	mov	r2, r3
 8001e58:	2122      	movs	r1, #34	; 0x22
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f7ff fc67 	bl	800172e <write_register>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f083 0301 	eor.w	r3, r3, #1
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <send_package+0xc8>
		return false;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	e087      	b.n	8001f80 <send_package+0x1d8>
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_TXDONE))
 8001e70:	2240      	movs	r2, #64	; 0x40
 8001e72:	2140      	movs	r1, #64	; 0x40
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f7ff fc5a 	bl	800172e <write_register>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f083 0301 	eor.w	r3, r3, #1
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <send_package+0xe2>
		return false;
 8001e86:	2300      	movs	r3, #0
 8001e88:	e07a      	b.n	8001f80 <send_package+0x1d8>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff))
 8001e8a:	22ff      	movs	r2, #255	; 0xff
 8001e8c:	2112      	movs	r1, #18
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f7ff fc4d 	bl	800172e <write_register>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f083 0301 	eor.w	r3, r3, #1
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <send_package+0xfc>
		return false;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	e06d      	b.n	8001f80 <send_package+0x1d8>

	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY))
 8001eb4:	2281      	movs	r2, #129	; 0x81
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f7ff fc38 	bl	800172e <write_register>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	f083 0301 	eor.w	r3, r3, #1
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <send_package+0x126>
		return false;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	e058      	b.n	8001f80 <send_package+0x1d8>

	wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT);
 8001ece:	220a      	movs	r2, #10
 8001ed0:	2102      	movs	r1, #2
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f7ff fd62 	bl	800199c <wait_for_irq>
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0x80))
 8001ed8:	2280      	movs	r2, #128	; 0x80
 8001eda:	210d      	movs	r1, #13
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f7ff fc26 	bl	800172e <write_register>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	f083 0301 	eor.w	r3, r3, #1
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <send_package+0x14a>
		return false;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	e046      	b.n	8001f80 <send_package+0x1d8>

	for (size_t i = 0; i < payload_len; i++) {
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	e00b      	b.n	8001f10 <send_package+0x168>
		write_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload_buf[i]);
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	4413      	add	r3, r2
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	461a      	mov	r2, r3
 8001f02:	2100      	movs	r1, #0
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f7ff fc12 	bl	800172e <write_register>
	for (size_t i = 0; i < payload_len; i++) {
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d3ef      	bcc.n	8001ef8 <send_package+0x150>
	}

	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_TX))
 8001f18:	2283      	movs	r2, #131	; 0x83
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f7ff fc06 	bl	800172e <write_register>
 8001f22:	4603      	mov	r3, r0
 8001f24:	f083 0301 	eor.w	r3, r3, #1
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <send_package+0x18a>
		return false;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e026      	b.n	8001f80 <send_package+0x1d8>
	if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO0, RFM95_SEND_TIMEOUT))
 8001f32:	2264      	movs	r2, #100	; 0x64
 8001f34:	2100      	movs	r1, #0
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f7ff fd30 	bl	800199c <wait_for_irq>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f083 0301 	eor.w	r3, r3, #1
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <send_package+0x1a4>
		return false;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	e019      	b.n	8001f80 <send_package+0x1d8>

	tx_ticks = handle->interrupt_times[RFM95_INTERRUPT_DIO0];
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001f52:	623b      	str	r3, [r7, #32]
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP))
 8001f54:	2280      	movs	r2, #128	; 0x80
 8001f56:	2101      	movs	r1, #1
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f7ff fbe8 	bl	800172e <write_register>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	f083 0301 	eor.w	r3, r3, #1
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <send_package+0x1c6>
		return false;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e008      	b.n	8001f80 <send_package+0x1d8>

	handle->config.tx_frame_count++;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8001f74:	3301      	adds	r3, #1
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	return true;
 8001f7e:	2301      	movs	r3, #1
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <encode_phy_payload>:

static size_t encode_phy_payload(rfm95_handle_t *handle, uint8_t payload_buf[64], const uint8_t *frame_payload,
                                 size_t frame_payload_length, uint8_t port)
{
 8001f88:	b590      	push	{r4, r7, lr}
 8001f8a:	b08d      	sub	sp, #52	; 0x34
 8001f8c:	af04      	add	r7, sp, #16
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	603b      	str	r3, [r7, #0]
	size_t payload_len = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]

	// 64 bytes is maximum size of FIFO
	assert(frame_payload_length + 4 + 9 <= 64);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	330d      	adds	r3, #13
 8001f9e:	2b40      	cmp	r3, #64	; 0x40
 8001fa0:	d906      	bls.n	8001fb0 <encode_phy_payload+0x28>
 8001fa2:	4b51      	ldr	r3, [pc, #324]	; (80020e8 <encode_phy_payload+0x160>)
 8001fa4:	4a51      	ldr	r2, [pc, #324]	; (80020ec <encode_phy_payload+0x164>)
 8001fa6:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 8001faa:	4851      	ldr	r0, [pc, #324]	; (80020f0 <encode_phy_payload+0x168>)
 8001fac:	f005 f8d8 	bl	8007160 <__assert_func>

	payload_buf[0] = 0x40; // MAC Header
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	2240      	movs	r2, #64	; 0x40
 8001fb4:	701a      	strb	r2, [r3, #0]
	payload_buf[1] = handle->device_address[3];
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	7d52      	ldrb	r2, [r2, #21]
 8001fbe:	701a      	strb	r2, [r3, #0]
	payload_buf[2] = handle->device_address[2];
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	3302      	adds	r3, #2
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	7d12      	ldrb	r2, [r2, #20]
 8001fc8:	701a      	strb	r2, [r3, #0]
	payload_buf[3] = handle->device_address[1];
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	3303      	adds	r3, #3
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	7cd2      	ldrb	r2, [r2, #19]
 8001fd2:	701a      	strb	r2, [r3, #0]
	payload_buf[4] = handle->device_address[0];
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	7c92      	ldrb	r2, [r2, #18]
 8001fdc:	701a      	strb	r2, [r3, #0]
	payload_buf[5] = 0x00; // Frame Control
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	3305      	adds	r3, #5
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	701a      	strb	r2, [r3, #0]
	payload_buf[6] = (handle->config.tx_frame_count & 0x00ffu);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	3306      	adds	r3, #6
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	701a      	strb	r2, [r3, #0]
	payload_buf[7] = ((uint16_t)(handle->config.tx_frame_count >> 8u) & 0x00ffu);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8001ffa:	0a1b      	lsrs	r3, r3, #8
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	3307      	adds	r3, #7
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	701a      	strb	r2, [r3, #0]
	payload_buf[8] = port; // Frame Port
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	3308      	adds	r3, #8
 800200a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800200e:	701a      	strb	r2, [r3, #0]
	payload_len += 9;
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	3309      	adds	r3, #9
 8002014:	61bb      	str	r3, [r7, #24]

	// Encrypt payload in place in payload_buf.
	memcpy(payload_buf + payload_len, frame_payload, frame_payload_length);
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	4413      	add	r3, r2
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	4618      	mov	r0, r3
 8002022:	f005 f8f7 	bl	8007214 <memcpy>
	if (port == 0) {
 8002026:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800202a:	2b00      	cmp	r3, #0
 800202c:	d113      	bne.n	8002056 <encode_phy_payload+0xce>
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	18d0      	adds	r0, r2, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	b2d9      	uxtb	r1, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800203e:	461c      	mov	r4, r3
		                0, handle->network_session_key, handle->device_address);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	3316      	adds	r3, #22
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	3212      	adds	r2, #18
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 8002048:	9201      	str	r2, [sp, #4]
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	2300      	movs	r3, #0
 800204e:	4622      	mov	r2, r4
 8002050:	f7fe fd2f 	bl	8000ab2 <Encrypt_Payload>
 8002054:	e012      	b.n	800207c <encode_phy_payload+0xf4>
	} else {
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	18d0      	adds	r0, r2, r3
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	b2d9      	uxtb	r1, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002066:	461c      	mov	r4, r3
		                0, handle->application_session_key, handle->device_address);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	3326      	adds	r3, #38	; 0x26
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	3212      	adds	r2, #18
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 8002070:	9201      	str	r2, [sp, #4]
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	2300      	movs	r3, #0
 8002076:	4622      	mov	r2, r4
 8002078:	f7fe fd1b 	bl	8000ab2 <Encrypt_Payload>
	}
	payload_len += frame_payload_length;
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	4413      	add	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]

	// Calculate MIC and copy to last 4 bytes of the payload_buf.
	uint8_t mic[4];
	Calculate_MIC(payload_buf, mic, payload_len, handle->config.tx_frame_count, 0,
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	b2d8      	uxtb	r0, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800208e:	461c      	mov	r4, r3
	              handle->network_session_key, handle->device_address);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	3316      	adds	r3, #22
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	3212      	adds	r2, #18
	Calculate_MIC(payload_buf, mic, payload_len, handle->config.tx_frame_count, 0,
 8002098:	f107 0114 	add.w	r1, r7, #20
 800209c:	9202      	str	r2, [sp, #8]
 800209e:	9301      	str	r3, [sp, #4]
 80020a0:	2300      	movs	r3, #0
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	4623      	mov	r3, r4
 80020a6:	4602      	mov	r2, r0
 80020a8:	68b8      	ldr	r0, [r7, #8]
 80020aa:	f7fe fdb7 	bl	8000c1c <Calculate_MIC>
	for (uint8_t i = 0; i < 4; i++) {
 80020ae:	2300      	movs	r3, #0
 80020b0:	77fb      	strb	r3, [r7, #31]
 80020b2:	e00d      	b.n	80020d0 <encode_phy_payload+0x148>
		payload_buf[payload_len + i] = mic[i];
 80020b4:	7ffa      	ldrb	r2, [r7, #31]
 80020b6:	7ff9      	ldrb	r1, [r7, #31]
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	440b      	add	r3, r1
 80020bc:	68b9      	ldr	r1, [r7, #8]
 80020be:	440b      	add	r3, r1
 80020c0:	3220      	adds	r2, #32
 80020c2:	443a      	add	r2, r7
 80020c4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80020c8:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++) {
 80020ca:	7ffb      	ldrb	r3, [r7, #31]
 80020cc:	3301      	adds	r3, #1
 80020ce:	77fb      	strb	r3, [r7, #31]
 80020d0:	7ffb      	ldrb	r3, [r7, #31]
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d9ee      	bls.n	80020b4 <encode_phy_payload+0x12c>
	}
	payload_len += 4;
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	3304      	adds	r3, #4
 80020da:	61bb      	str	r3, [r7, #24]

	return payload_len;
 80020dc:	69bb      	ldr	r3, [r7, #24]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3724      	adds	r7, #36	; 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd90      	pop	{r4, r7, pc}
 80020e6:	bf00      	nop
 80020e8:	08008714 	.word	0x08008714
 80020ec:	0800877c 	.word	0x0800877c
 80020f0:	0800844c 	.word	0x0800844c

080020f4 <select_random_channel>:

	return true;
}

static uint8_t select_random_channel(rfm95_handle_t *handle)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
	uint8_t channel_count = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < 16; i++) {
 8002100:	2300      	movs	r3, #0
 8002102:	73bb      	strb	r3, [r7, #14]
 8002104:	e010      	b.n	8002128 <select_random_channel+0x34>
		if (handle->config.channel_mask & (1 << i)) {
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800210c:	461a      	mov	r2, r3
 800210e:	7bbb      	ldrb	r3, [r7, #14]
 8002110:	fa42 f303 	asr.w	r3, r2, r3
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b00      	cmp	r3, #0
 800211a:	d002      	beq.n	8002122 <select_random_channel+0x2e>
			channel_count++;
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	3301      	adds	r3, #1
 8002120:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 16; i++) {
 8002122:	7bbb      	ldrb	r3, [r7, #14]
 8002124:	3301      	adds	r3, #1
 8002126:	73bb      	strb	r3, [r7, #14]
 8002128:	7bbb      	ldrb	r3, [r7, #14]
 800212a:	2b0f      	cmp	r3, #15
 800212c:	d9eb      	bls.n	8002106 <select_random_channel+0x12>
		}
	}

	uint8_t random_channel = handle->random_int(channel_count);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002132:	7bfa      	ldrb	r2, [r7, #15]
 8002134:	4610      	mov	r0, r2
 8002136:	4798      	blx	r3
 8002138:	4603      	mov	r3, r0
 800213a:	737b      	strb	r3, [r7, #13]

	for (uint8_t i = 0; i < 16; i++) {
 800213c:	2300      	movs	r3, #0
 800213e:	733b      	strb	r3, [r7, #12]
 8002140:	e015      	b.n	800216e <select_random_channel+0x7a>
		if (handle->config.channel_mask & (1 << i)) {
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002148:	461a      	mov	r2, r3
 800214a:	7b3b      	ldrb	r3, [r7, #12]
 800214c:	fa42 f303 	asr.w	r3, r2, r3
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d007      	beq.n	8002168 <select_random_channel+0x74>
			if (random_channel == 0) {
 8002158:	7b7b      	ldrb	r3, [r7, #13]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <select_random_channel+0x6e>
				return i;
 800215e:	7b3b      	ldrb	r3, [r7, #12]
 8002160:	e009      	b.n	8002176 <select_random_channel+0x82>
			} else {
				random_channel--;
 8002162:	7b7b      	ldrb	r3, [r7, #13]
 8002164:	3b01      	subs	r3, #1
 8002166:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < 16; i++) {
 8002168:	7b3b      	ldrb	r3, [r7, #12]
 800216a:	3301      	adds	r3, #1
 800216c:	733b      	strb	r3, [r7, #12]
 800216e:	7b3b      	ldrb	r3, [r7, #12]
 8002170:	2b0f      	cmp	r3, #15
 8002172:	d9e6      	bls.n	8002142 <select_random_channel+0x4e>
			}
		}
	}

	return 0;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <rfm95_send_receive_cycle>:

bool rfm95_send_receive_cycle(rfm95_handle_t *handle, const uint8_t *send_data, size_t send_data_length)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b09a      	sub	sp, #104	; 0x68
 8002182:	af02      	add	r7, sp, #8
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
	uint8_t phy_payload_buf[64] = { 0 };
 800218a:	2300      	movs	r3, #0
 800218c:	61bb      	str	r3, [r7, #24]
 800218e:	f107 031c 	add.w	r3, r7, #28
 8002192:	223c      	movs	r2, #60	; 0x3c
 8002194:	2100      	movs	r1, #0
 8002196:	4618      	mov	r0, r3
 8002198:	f005 f84a 	bl	8007230 <memset>

	size_t phy_payload_len = encode_phy_payload(handle, phy_payload_buf, send_data, send_data_length, 1);
 800219c:	f107 0118 	add.w	r1, r7, #24
 80021a0:	2301      	movs	r3, #1
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f7ff feed 	bl	8001f88 <encode_phy_payload>
 80021ae:	65f8      	str	r0, [r7, #92]	; 0x5c

	uint8_t random_channel = select_random_channel(handle);
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f7ff ff9f 	bl	80020f4 <select_random_channel>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	uint32_t tx_ticks;

	// Send the requested up-link.
	if (!send_package(handle, phy_payload_buf, phy_payload_len, random_channel, &tx_ticks)) {
 80021bc:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 80021c0:	f107 0118 	add.w	r1, r7, #24
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	4613      	mov	r3, r2
 80021cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f7ff fdea 	bl	8001da8 <send_package>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f083 0301 	eor.w	r3, r3, #1
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d006      	beq.n	80021ee <rfm95_send_receive_cycle+0x70>
		write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 80021e0:	2280      	movs	r2, #128	; 0x80
 80021e2:	2101      	movs	r1, #1
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f7ff faa2 	bl	800172e <write_register>
		return false;
 80021ea:	2300      	movs	r3, #0
 80021ec:	e009      	b.n	8002202 <rfm95_send_receive_cycle+0x84>
	}

	// Clear phy payload buffer to reuse for the down-link message.
	memset(phy_payload_buf, 0x00, sizeof(phy_payload_buf));
 80021ee:	f107 0318 	add.w	r3, r7, #24
 80021f2:	2240      	movs	r2, #64	; 0x40
 80021f4:	2100      	movs	r1, #0
 80021f6:	4618      	mov	r0, r3
 80021f8:	f005 f81a 	bl	8007230 <memset>
	phy_payload_len = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (handle->save_config) {
		handle->save_config(&(handle->config));
	}*/

	return true;
 8002200:	2301      	movs	r3, #1
}
 8002202:	4618      	mov	r0, r3
 8002204:	3760      	adds	r7, #96	; 0x60
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <rfm95_on_interrupt>:

void rfm95_on_interrupt(rfm95_handle_t *handle, rfm95_interrupt_t interrupt)
{
 800220a:	b590      	push	{r4, r7, lr}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	460b      	mov	r3, r1
 8002214:	70fb      	strb	r3, [r7, #3]
	handle->interrupt_times[interrupt] = handle->get_precision_tick();
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	78fc      	ldrb	r4, [r7, #3]
 800221c:	4798      	blx	r3
 800221e:	4601      	mov	r1, r0
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	f104 032a 	add.w	r3, r4, #42	; 0x2a
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	6059      	str	r1, [r3, #4]
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	bd90      	pop	{r4, r7, pc}

08002234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223a:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <HAL_MspInit+0x44>)
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	4a0e      	ldr	r2, [pc, #56]	; (8002278 <HAL_MspInit+0x44>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6193      	str	r3, [r2, #24]
 8002246:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <HAL_MspInit+0x44>)
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <HAL_MspInit+0x44>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	4a08      	ldr	r2, [pc, #32]	; (8002278 <HAL_MspInit+0x44>)
 8002258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225c:	61d3      	str	r3, [r2, #28]
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_MspInit+0x44>)
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800226a:	2007      	movs	r0, #7
 800226c:	f001 fad0 	bl	8003810 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002270:	bf00      	nop
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40021000 	.word	0x40021000

0800227c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	; 0x28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800229c:	d124      	bne.n	80022e8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800229e:	4b14      	ldr	r3, [pc, #80]	; (80022f0 <HAL_ADC_MspInit+0x74>)
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	4a13      	ldr	r2, [pc, #76]	; (80022f0 <HAL_ADC_MspInit+0x74>)
 80022a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a8:	6153      	str	r3, [r2, #20]
 80022aa:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <HAL_ADC_MspInit+0x74>)
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b6:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <HAL_ADC_MspInit+0x74>)
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	4a0d      	ldr	r2, [pc, #52]	; (80022f0 <HAL_ADC_MspInit+0x74>)
 80022bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c0:	6153      	str	r3, [r2, #20]
 80022c2:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <HAL_ADC_MspInit+0x74>)
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022ce:	2301      	movs	r3, #1
 80022d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022d2:	2303      	movs	r3, #3
 80022d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022da:	f107 0314 	add.w	r3, r7, #20
 80022de:	4619      	mov	r1, r3
 80022e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022e4:	f001 fad6 	bl	8003894 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022e8:	bf00      	nop
 80022ea:	3728      	adds	r7, #40	; 0x28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40021000 	.word	0x40021000

080022f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08a      	sub	sp, #40	; 0x28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a17      	ldr	r2, [pc, #92]	; (8002370 <HAL_SPI_MspInit+0x7c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d128      	bne.n	8002368 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002316:	4b17      	ldr	r3, [pc, #92]	; (8002374 <HAL_SPI_MspInit+0x80>)
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	4a16      	ldr	r2, [pc, #88]	; (8002374 <HAL_SPI_MspInit+0x80>)
 800231c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002320:	61d3      	str	r3, [r2, #28]
 8002322:	4b14      	ldr	r3, [pc, #80]	; (8002374 <HAL_SPI_MspInit+0x80>)
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800232e:	4b11      	ldr	r3, [pc, #68]	; (8002374 <HAL_SPI_MspInit+0x80>)
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	4a10      	ldr	r2, [pc, #64]	; (8002374 <HAL_SPI_MspInit+0x80>)
 8002334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002338:	6153      	str	r3, [r2, #20]
 800233a:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <HAL_SPI_MspInit+0x80>)
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002346:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800234a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234c:	2302      	movs	r3, #2
 800234e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002354:	2303      	movs	r3, #3
 8002356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002358:	2305      	movs	r3, #5
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235c:	f107 0314 	add.w	r3, r7, #20
 8002360:	4619      	mov	r1, r3
 8002362:	4805      	ldr	r0, [pc, #20]	; (8002378 <HAL_SPI_MspInit+0x84>)
 8002364:	f001 fa96 	bl	8003894 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002368:	bf00      	nop
 800236a:	3728      	adds	r7, #40	; 0x28
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40003800 	.word	0x40003800
 8002374:	40021000 	.word	0x40021000
 8002378:	48000400 	.word	0x48000400

0800237c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a19      	ldr	r2, [pc, #100]	; (80023f0 <HAL_TIM_Base_MspInit+0x74>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d12b      	bne.n	80023e6 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800238e:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <HAL_TIM_Base_MspInit+0x78>)
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	4a18      	ldr	r2, [pc, #96]	; (80023f4 <HAL_TIM_Base_MspInit+0x78>)
 8002394:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002398:	6193      	str	r3, [r2, #24]
 800239a:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <HAL_TIM_Base_MspInit+0x78>)
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80023a6:	2200      	movs	r2, #0
 80023a8:	2100      	movs	r1, #0
 80023aa:	2018      	movs	r0, #24
 80023ac:	f001 fa3b 	bl	8003826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80023b0:	2018      	movs	r0, #24
 80023b2:	f001 fa54 	bl	800385e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80023b6:	2200      	movs	r2, #0
 80023b8:	2100      	movs	r1, #0
 80023ba:	2019      	movs	r0, #25
 80023bc:	f001 fa33 	bl	8003826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80023c0:	2019      	movs	r0, #25
 80023c2:	f001 fa4c 	bl	800385e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2100      	movs	r1, #0
 80023ca:	201a      	movs	r0, #26
 80023cc:	f001 fa2b 	bl	8003826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80023d0:	201a      	movs	r0, #26
 80023d2:	f001 fa44 	bl	800385e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2100      	movs	r1, #0
 80023da:	201b      	movs	r0, #27
 80023dc:	f001 fa23 	bl	8003826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80023e0:	201b      	movs	r0, #27
 80023e2:	f001 fa3c 	bl	800385e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40012c00 	.word	0x40012c00
 80023f4:	40021000 	.word	0x40021000

080023f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08a      	sub	sp, #40	; 0x28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
 800240e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a17      	ldr	r2, [pc, #92]	; (8002474 <HAL_UART_MspInit+0x7c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d128      	bne.n	800246c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800241a:	4b17      	ldr	r3, [pc, #92]	; (8002478 <HAL_UART_MspInit+0x80>)
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	4a16      	ldr	r2, [pc, #88]	; (8002478 <HAL_UART_MspInit+0x80>)
 8002420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002424:	61d3      	str	r3, [r2, #28]
 8002426:	4b14      	ldr	r3, [pc, #80]	; (8002478 <HAL_UART_MspInit+0x80>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002432:	4b11      	ldr	r3, [pc, #68]	; (8002478 <HAL_UART_MspInit+0x80>)
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	4a10      	ldr	r2, [pc, #64]	; (8002478 <HAL_UART_MspInit+0x80>)
 8002438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800243c:	6153      	str	r3, [r2, #20]
 800243e:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <HAL_UART_MspInit+0x80>)
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800244a:	230c      	movs	r3, #12
 800244c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244e:	2302      	movs	r3, #2
 8002450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002456:	2300      	movs	r3, #0
 8002458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800245a:	2307      	movs	r3, #7
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245e:	f107 0314 	add.w	r3, r7, #20
 8002462:	4619      	mov	r1, r3
 8002464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002468:	f001 fa14 	bl	8003894 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800246c:	bf00      	nop
 800246e:	3728      	adds	r7, #40	; 0x28
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40004400 	.word	0x40004400
 8002478:	40021000 	.word	0x40021000

0800247c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002480:	e7fe      	b.n	8002480 <NMI_Handler+0x4>

08002482 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002486:	e7fe      	b.n	8002486 <HardFault_Handler+0x4>

08002488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800248c:	e7fe      	b.n	800248c <MemManage_Handler+0x4>

0800248e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800248e:	b480      	push	{r7}
 8002490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002492:	e7fe      	b.n	8002492 <BusFault_Handler+0x4>

08002494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002498:	e7fe      	b.n	8002498 <UsageFault_Handler+0x4>

0800249a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800249a:	b480      	push	{r7}
 800249c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ac:	bf00      	nop
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024c8:	f000 f964 	bl	8002794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RFM9x_DIO5_Pin);
 80024d4:	2040      	movs	r0, #64	; 0x40
 80024d6:	f001 fb67 	bl	8003ba8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RFM9x_DIO1_Pin);
 80024da:	2080      	movs	r0, #128	; 0x80
 80024dc:	f001 fb64 	bl	8003ba8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RFM9x_DIO0_Pin);
 80024e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80024e4:	f001 fb60 	bl	8003ba8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}

080024ec <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024f0:	4802      	ldr	r0, [pc, #8]	; (80024fc <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80024f2:	f003 ff5a 	bl	80063aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000308 	.word	0x20000308

08002500 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002504:	4802      	ldr	r0, [pc, #8]	; (8002510 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002506:	f003 ff50 	bl	80063aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000308 	.word	0x20000308

08002514 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002518:	4802      	ldr	r0, [pc, #8]	; (8002524 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800251a:	f003 ff46 	bl	80063aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000308 	.word	0x20000308

08002528 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800252c:	4802      	ldr	r0, [pc, #8]	; (8002538 <TIM1_CC_IRQHandler+0x10>)
 800252e:	f003 ff3c 	bl	80063aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000308 	.word	0x20000308

0800253c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return 1;
 8002540:	2301      	movs	r3, #1
}
 8002542:	4618      	mov	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <_kill>:

int _kill(int pid, int sig)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002556:	f004 fe21 	bl	800719c <__errno>
 800255a:	4603      	mov	r3, r0
 800255c:	2216      	movs	r2, #22
 800255e:	601a      	str	r2, [r3, #0]
  return -1;
 8002560:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002564:	4618      	mov	r0, r3
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <_exit>:

void _exit (int status)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002574:	f04f 31ff 	mov.w	r1, #4294967295
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff ffe7 	bl	800254c <_kill>
  while (1) {}    /* Make sure we hang here */
 800257e:	e7fe      	b.n	800257e <_exit+0x12>

08002580 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	e00a      	b.n	80025a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002592:	f3af 8000 	nop.w
 8002596:	4601      	mov	r1, r0
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	60ba      	str	r2, [r7, #8]
 800259e:	b2ca      	uxtb	r2, r1
 80025a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	3301      	adds	r3, #1
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	dbf0      	blt.n	8002592 <_read+0x12>
  }

  return len;
 80025b0:	687b      	ldr	r3, [r7, #4]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3718      	adds	r7, #24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <_close>:
  }
  return len;
}

int _close(int file)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025e2:	605a      	str	r2, [r3, #4]
  return 0;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <_isatty>:

int _isatty(int file)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025fa:	2301      	movs	r3, #1
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
	...

08002624 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800262c:	4a14      	ldr	r2, [pc, #80]	; (8002680 <_sbrk+0x5c>)
 800262e:	4b15      	ldr	r3, [pc, #84]	; (8002684 <_sbrk+0x60>)
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002638:	4b13      	ldr	r3, [pc, #76]	; (8002688 <_sbrk+0x64>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d102      	bne.n	8002646 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002640:	4b11      	ldr	r3, [pc, #68]	; (8002688 <_sbrk+0x64>)
 8002642:	4a12      	ldr	r2, [pc, #72]	; (800268c <_sbrk+0x68>)
 8002644:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <_sbrk+0x64>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	429a      	cmp	r2, r3
 8002652:	d207      	bcs.n	8002664 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002654:	f004 fda2 	bl	800719c <__errno>
 8002658:	4603      	mov	r3, r0
 800265a:	220c      	movs	r2, #12
 800265c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800265e:	f04f 33ff 	mov.w	r3, #4294967295
 8002662:	e009      	b.n	8002678 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002664:	4b08      	ldr	r3, [pc, #32]	; (8002688 <_sbrk+0x64>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800266a:	4b07      	ldr	r3, [pc, #28]	; (8002688 <_sbrk+0x64>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	4a05      	ldr	r2, [pc, #20]	; (8002688 <_sbrk+0x64>)
 8002674:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002676:	68fb      	ldr	r3, [r7, #12]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20004000 	.word	0x20004000
 8002684:	00000400 	.word	0x00000400
 8002688:	200003dc 	.word	0x200003dc
 800268c:	200003f8 	.word	0x200003f8

08002690 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002694:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <SystemInit+0x20>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269a:	4a05      	ldr	r2, [pc, #20]	; (80026b0 <SystemInit+0x20>)
 800269c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026ec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026b8:	480d      	ldr	r0, [pc, #52]	; (80026f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80026ba:	490e      	ldr	r1, [pc, #56]	; (80026f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026bc:	4a0e      	ldr	r2, [pc, #56]	; (80026f8 <LoopForever+0xe>)
  movs r3, #0
 80026be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c0:	e002      	b.n	80026c8 <LoopCopyDataInit>

080026c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026c6:	3304      	adds	r3, #4

080026c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026cc:	d3f9      	bcc.n	80026c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ce:	4a0b      	ldr	r2, [pc, #44]	; (80026fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80026d0:	4c0b      	ldr	r4, [pc, #44]	; (8002700 <LoopForever+0x16>)
  movs r3, #0
 80026d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026d4:	e001      	b.n	80026da <LoopFillZerobss>

080026d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d8:	3204      	adds	r2, #4

080026da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026dc:	d3fb      	bcc.n	80026d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026de:	f7ff ffd7 	bl	8002690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026e2:	f004 fd73 	bl	80071cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026e6:	f7fe fd33 	bl	8001150 <main>

080026ea <LoopForever>:

LoopForever:
    b LoopForever
 80026ea:	e7fe      	b.n	80026ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026ec:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80026f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026f4:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 80026f8:	080088ac 	.word	0x080088ac
  ldr r2, =_sbss
 80026fc:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8002700:	200003f4 	.word	0x200003f4

08002704 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002704:	e7fe      	b.n	8002704 <ADC1_IRQHandler>
	...

08002708 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800270c:	4b08      	ldr	r3, [pc, #32]	; (8002730 <HAL_Init+0x28>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a07      	ldr	r2, [pc, #28]	; (8002730 <HAL_Init+0x28>)
 8002712:	f043 0310 	orr.w	r3, r3, #16
 8002716:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002718:	2003      	movs	r0, #3
 800271a:	f001 f879 	bl	8003810 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800271e:	2000      	movs	r0, #0
 8002720:	f000 f808 	bl	8002734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002724:	f7ff fd86 	bl	8002234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40022000 	.word	0x40022000

08002734 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800273c:	4b12      	ldr	r3, [pc, #72]	; (8002788 <HAL_InitTick+0x54>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4b12      	ldr	r3, [pc, #72]	; (800278c <HAL_InitTick+0x58>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	4619      	mov	r1, r3
 8002746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800274a:	fbb3 f3f1 	udiv	r3, r3, r1
 800274e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002752:	4618      	mov	r0, r3
 8002754:	f001 f891 	bl	800387a <HAL_SYSTICK_Config>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e00e      	b.n	8002780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b0f      	cmp	r3, #15
 8002766:	d80a      	bhi.n	800277e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002768:	2200      	movs	r2, #0
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	f04f 30ff 	mov.w	r0, #4294967295
 8002770:	f001 f859 	bl	8003826 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002774:	4a06      	ldr	r2, [pc, #24]	; (8002790 <HAL_InitTick+0x5c>)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	e000      	b.n	8002780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
}
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	200001b8 	.word	0x200001b8
 800278c:	200001c0 	.word	0x200001c0
 8002790:	200001bc 	.word	0x200001bc

08002794 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <HAL_IncTick+0x20>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	461a      	mov	r2, r3
 800279e:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_IncTick+0x24>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4413      	add	r3, r2
 80027a4:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <HAL_IncTick+0x24>)
 80027a6:	6013      	str	r3, [r2, #0]
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	200001c0 	.word	0x200001c0
 80027b8:	200003e0 	.word	0x200003e0

080027bc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return uwTick;  
 80027c0:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <HAL_GetTick+0x14>)
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	200003e0 	.word	0x200003e0

080027d4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027dc:	f7ff ffee 	bl	80027bc <HAL_GetTick>
 80027e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ec:	d005      	beq.n	80027fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ee:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <HAL_Delay+0x44>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4413      	add	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80027fa:	bf00      	nop
 80027fc:	f7ff ffde 	bl	80027bc <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	429a      	cmp	r2, r3
 800280a:	d8f7      	bhi.n	80027fc <HAL_Delay+0x28>
  {
  }
}
 800280c:	bf00      	nop
 800280e:	bf00      	nop
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	200001c0 	.word	0x200001c0

0800281c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b09a      	sub	sp, #104	; 0x68
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002824:	2300      	movs	r3, #0
 8002826:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e169      	b.n	8002b10 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f003 0310 	and.w	r3, r3, #16
 800284a:	2b00      	cmp	r3, #0
 800284c:	d176      	bne.n	800293c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	2b00      	cmp	r3, #0
 8002854:	d152      	bne.n	80028fc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff fd03 	bl	800227c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d13b      	bne.n	80028fc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 fdd7 	bl	8003438 <ADC_Disable>
 800288a:	4603      	mov	r3, r0
 800288c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	f003 0310 	and.w	r3, r3, #16
 8002898:	2b00      	cmp	r3, #0
 800289a:	d12f      	bne.n	80028fc <HAL_ADC_Init+0xe0>
 800289c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d12b      	bne.n	80028fc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028ac:	f023 0302 	bic.w	r3, r3, #2
 80028b0:	f043 0202 	orr.w	r2, r3, #2
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028c6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028d6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028d8:	4b8f      	ldr	r3, [pc, #572]	; (8002b18 <HAL_ADC_Init+0x2fc>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a8f      	ldr	r2, [pc, #572]	; (8002b1c <HAL_ADC_Init+0x300>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	0c9a      	lsrs	r2, r3, #18
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028ee:	e002      	b.n	80028f6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1f9      	bne.n	80028f0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d007      	beq.n	800291a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002914:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002918:	d110      	bne.n	800293c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f023 0312 	bic.w	r3, r3, #18
 8002922:	f043 0210 	orr.w	r2, r3, #16
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292e:	f043 0201 	orr.w	r2, r3, #1
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	f003 0310 	and.w	r3, r3, #16
 8002944:	2b00      	cmp	r3, #0
 8002946:	f040 80d6 	bne.w	8002af6 <HAL_ADC_Init+0x2da>
 800294a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800294e:	2b00      	cmp	r3, #0
 8002950:	f040 80d1 	bne.w	8002af6 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800295e:	2b00      	cmp	r3, #0
 8002960:	f040 80c9 	bne.w	8002af6 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800296c:	f043 0202 	orr.w	r2, r3, #2
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002974:	4b6a      	ldr	r3, [pc, #424]	; (8002b20 <HAL_ADC_Init+0x304>)
 8002976:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	2b01      	cmp	r3, #1
 8002988:	d108      	bne.n	800299c <HAL_ADC_Init+0x180>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b01      	cmp	r3, #1
 8002996:	d101      	bne.n	800299c <HAL_ADC_Init+0x180>
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <HAL_ADC_Init+0x182>
 800299c:	2300      	movs	r3, #0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d11c      	bne.n	80029dc <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80029a2:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d010      	beq.n	80029ca <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d107      	bne.n	80029c4 <HAL_ADC_Init+0x1a8>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_ADC_Init+0x1a8>
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <HAL_ADC_Init+0x1aa>
 80029c4:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d108      	bne.n	80029dc <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80029ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	431a      	orrs	r2, r3
 80029d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029da:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	7e5b      	ldrb	r3, [r3, #25]
 80029e0:	035b      	lsls	r3, r3, #13
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029e6:	2a01      	cmp	r2, #1
 80029e8:	d002      	beq.n	80029f0 <HAL_ADC_Init+0x1d4>
 80029ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029ee:	e000      	b.n	80029f2 <HAL_ADC_Init+0x1d6>
 80029f0:	2200      	movs	r2, #0
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	431a      	orrs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a02:	4313      	orrs	r3, r2
 8002a04:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d11b      	bne.n	8002a48 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	7e5b      	ldrb	r3, [r3, #25]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d109      	bne.n	8002a2c <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	045a      	lsls	r2, r3, #17
 8002a20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a28:	663b      	str	r3, [r7, #96]	; 0x60
 8002a2a:	e00d      	b.n	8002a48 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002a34:	f043 0220 	orr.w	r2, r3, #32
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a40:	f043 0201 	orr.w	r2, r3, #1
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d007      	beq.n	8002a60 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d114      	bne.n	8002a98 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a7c:	f023 0302 	bic.w	r3, r3, #2
 8002a80:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	7e1b      	ldrb	r3, [r3, #24]
 8002a86:	039a      	lsls	r2, r3, #14
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	4313      	orrs	r3, r2
 8002a92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a94:	4313      	orrs	r3, r2
 8002a96:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	4b21      	ldr	r3, [pc, #132]	; (8002b24 <HAL_ADC_Init+0x308>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6812      	ldr	r2, [r2, #0]
 8002aa6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d10c      	bne.n	8002ace <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	f023 010f 	bic.w	r1, r3, #15
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	1e5a      	subs	r2, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	631a      	str	r2, [r3, #48]	; 0x30
 8002acc:	e007      	b.n	8002ade <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 020f 	bic.w	r2, r2, #15
 8002adc:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	f023 0303 	bic.w	r3, r3, #3
 8002aec:	f043 0201 	orr.w	r2, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	641a      	str	r2, [r3, #64]	; 0x40
 8002af4:	e00a      	b.n	8002b0c <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f023 0312 	bic.w	r3, r3, #18
 8002afe:	f043 0210 	orr.w	r2, r3, #16
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002b06:	2301      	movs	r3, #1
 8002b08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002b0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3768      	adds	r7, #104	; 0x68
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	200001b8 	.word	0x200001b8
 8002b1c:	431bde83 	.word	0x431bde83
 8002b20:	50000300 	.word	0x50000300
 8002b24:	fff0c007 	.word	0xfff0c007

08002b28 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d158      	bne.n	8002bf4 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_ADC_Start+0x28>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e054      	b.n	8002bfa <HAL_ADC_Start+0xd2>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 fc09 	bl	8003370 <ADC_Enable>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d140      	bne.n	8002bea <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b70:	f023 0301 	bic.w	r3, r3, #1
 8002b74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d007      	beq.n	8002ba6 <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb2:	d106      	bne.n	8002bc2 <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb8:	f023 0206 	bic.w	r2, r3, #6
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	645a      	str	r2, [r3, #68]	; 0x44
 8002bc0:	e002      	b.n	8002bc8 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	221c      	movs	r2, #28
 8002bd6:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0204 	orr.w	r2, r2, #4
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	e006      	b.n	8002bf8 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002bf2:	e001      	b.n	8002bf8 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b084      	sub	sp, #16
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_ADC_Stop+0x1a>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e023      	b.n	8002c64 <HAL_ADC_Stop+0x62>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002c24:	216c      	movs	r1, #108	; 0x6c
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 fc6c 	bl	8003504 <ADC_ConversionStop>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d111      	bne.n	8002c5a <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fbfe 	bl	8003438 <ADC_Disable>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d109      	bne.n	8002c5a <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c4e:	f023 0301 	bic.w	r3, r3, #1
 8002c52:	f043 0201 	orr.w	r2, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d102      	bne.n	8002c88 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002c82:	2308      	movs	r3, #8
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	e02e      	b.n	8002ce6 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c88:	4b56      	ldr	r3, [pc, #344]	; (8002de4 <HAL_ADC_PollForConversion+0x178>)
 8002c8a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 031f 	and.w	r3, r3, #31
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d112      	bne.n	8002cbe <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d11d      	bne.n	8002ce2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f043 0220 	orr.w	r2, r3, #32
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e08d      	b.n	8002dda <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00b      	beq.n	8002ce2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f043 0220 	orr.w	r2, r3, #32
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e07b      	b.n	8002dda <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002ce2:	230c      	movs	r3, #12
 8002ce4:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002cee:	f7ff fd65 	bl	80027bc <HAL_GetTick>
 8002cf2:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002cf4:	e021      	b.n	8002d3a <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfc:	d01d      	beq.n	8002d3a <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d007      	beq.n	8002d14 <HAL_ADC_PollForConversion+0xa8>
 8002d04:	f7ff fd5a 	bl	80027bc <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d212      	bcs.n	8002d3a <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10b      	bne.n	8002d3a <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f043 0204 	orr.w	r2, r3, #4
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e04f      	b.n	8002dda <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0d6      	beq.n	8002cf6 <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d131      	bne.n	8002dc6 <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d12c      	bne.n	8002dc6 <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d125      	bne.n	8002dc6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d112      	bne.n	8002dae <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d112      	bne.n	8002dc6 <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	f043 0201 	orr.w	r2, r3, #1
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40
 8002dac:	e00b      	b.n	8002dc6 <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f043 0220 	orr.w	r2, r3, #32
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	f043 0201 	orr.w	r2, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d103      	bne.n	8002dd8 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	50000300 	.word	0x50000300

08002de8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
	...

08002e04 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b09b      	sub	sp, #108	; 0x6c
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x22>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e299      	b.n	800335a <HAL_ADC_ConfigChannel+0x556>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f040 827d 	bne.w	8003338 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d81c      	bhi.n	8002e80 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	4413      	add	r3, r2
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	461a      	mov	r2, r3
 8002e5a:	231f      	movs	r3, #31
 8002e5c:	4093      	lsls	r3, r2
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	4019      	ands	r1, r3
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	4413      	add	r3, r2
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	fa00 f203 	lsl.w	r2, r0, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	631a      	str	r2, [r3, #48]	; 0x30
 8002e7e:	e063      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b09      	cmp	r3, #9
 8002e86:	d81e      	bhi.n	8002ec6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	4413      	add	r3, r2
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	3b1e      	subs	r3, #30
 8002e9c:	221f      	movs	r2, #31
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	4019      	ands	r1, r3
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	6818      	ldr	r0, [r3, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	4413      	add	r3, r2
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	3b1e      	subs	r3, #30
 8002eb8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	635a      	str	r2, [r3, #52]	; 0x34
 8002ec4:	e040      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b0e      	cmp	r3, #14
 8002ecc:	d81e      	bhi.n	8002f0c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	4413      	add	r3, r2
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	3b3c      	subs	r3, #60	; 0x3c
 8002ee2:	221f      	movs	r2, #31
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	4019      	ands	r1, r3
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	6818      	ldr	r0, [r3, #0]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	4413      	add	r3, r2
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	3b3c      	subs	r3, #60	; 0x3c
 8002efe:	fa00 f203 	lsl.w	r2, r0, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	639a      	str	r2, [r3, #56]	; 0x38
 8002f0a:	e01d      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	4413      	add	r3, r2
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	3b5a      	subs	r3, #90	; 0x5a
 8002f20:	221f      	movs	r2, #31
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43db      	mvns	r3, r3
 8002f28:	4019      	ands	r1, r3
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	6818      	ldr	r0, [r3, #0]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	4613      	mov	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4413      	add	r3, r2
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	3b5a      	subs	r3, #90	; 0x5a
 8002f3c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f040 80e5 	bne.w	8003122 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b09      	cmp	r3, #9
 8002f5e:	d91c      	bls.n	8002f9a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6999      	ldr	r1, [r3, #24]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4413      	add	r3, r2
 8002f70:	3b1e      	subs	r3, #30
 8002f72:	2207      	movs	r2, #7
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	4019      	ands	r1, r3
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	6898      	ldr	r0, [r3, #8]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	4613      	mov	r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4413      	add	r3, r2
 8002f8a:	3b1e      	subs	r3, #30
 8002f8c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	619a      	str	r2, [r3, #24]
 8002f98:	e019      	b.n	8002fce <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6959      	ldr	r1, [r3, #20]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	4413      	add	r3, r2
 8002faa:	2207      	movs	r2, #7
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	4019      	ands	r1, r3
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	6898      	ldr	r0, [r3, #8]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	4413      	add	r3, r2
 8002fc2:	fa00 f203 	lsl.w	r2, r0, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	695a      	ldr	r2, [r3, #20]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	08db      	lsrs	r3, r3, #3
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d84f      	bhi.n	8003090 <HAL_ADC_ConfigChannel+0x28c>
 8002ff0:	a201      	add	r2, pc, #4	; (adr r2, 8002ff8 <HAL_ADC_ConfigChannel+0x1f4>)
 8002ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff6:	bf00      	nop
 8002ff8:	08003009 	.word	0x08003009
 8002ffc:	0800302b 	.word	0x0800302b
 8003000:	0800304d 	.word	0x0800304d
 8003004:	0800306f 	.word	0x0800306f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800300e:	4b99      	ldr	r3, [pc, #612]	; (8003274 <HAL_ADC_ConfigChannel+0x470>)
 8003010:	4013      	ands	r3, r2
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	6812      	ldr	r2, [r2, #0]
 8003016:	0691      	lsls	r1, r2, #26
 8003018:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800301a:	430a      	orrs	r2, r1
 800301c:	431a      	orrs	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003026:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003028:	e07e      	b.n	8003128 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003030:	4b90      	ldr	r3, [pc, #576]	; (8003274 <HAL_ADC_ConfigChannel+0x470>)
 8003032:	4013      	ands	r3, r2
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	0691      	lsls	r1, r2, #26
 800303a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800303c:	430a      	orrs	r2, r1
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003048:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800304a:	e06d      	b.n	8003128 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003052:	4b88      	ldr	r3, [pc, #544]	; (8003274 <HAL_ADC_ConfigChannel+0x470>)
 8003054:	4013      	ands	r3, r2
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	6812      	ldr	r2, [r2, #0]
 800305a:	0691      	lsls	r1, r2, #26
 800305c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800305e:	430a      	orrs	r2, r1
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800306a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800306c:	e05c      	b.n	8003128 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003074:	4b7f      	ldr	r3, [pc, #508]	; (8003274 <HAL_ADC_ConfigChannel+0x470>)
 8003076:	4013      	ands	r3, r2
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	0691      	lsls	r1, r2, #26
 800307e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003080:	430a      	orrs	r2, r1
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800308c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800308e:	e04b      	b.n	8003128 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003096:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	069b      	lsls	r3, r3, #26
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d107      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030b2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	069b      	lsls	r3, r3, #26
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d107      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030d6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	069b      	lsls	r3, r3, #26
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d107      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030fa:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003102:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	069b      	lsls	r3, r3, #26
 800310c:	429a      	cmp	r2, r3
 800310e:	d10a      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800311e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003120:	e001      	b.n	8003126 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8003122:	bf00      	nop
 8003124:	e000      	b.n	8003128 <HAL_ADC_ConfigChannel+0x324>
      break;
 8003126:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b01      	cmp	r3, #1
 8003134:	d108      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x344>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x344>
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <HAL_ADC_ConfigChannel+0x346>
 8003148:	2300      	movs	r3, #0
 800314a:	2b00      	cmp	r3, #0
 800314c:	f040 80ff 	bne.w	800334e <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d00f      	beq.n	8003178 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2201      	movs	r2, #1
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43da      	mvns	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	400a      	ands	r2, r1
 8003172:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003176:	e049      	b.n	800320c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2201      	movs	r2, #1
 8003186:	409a      	lsls	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2b09      	cmp	r3, #9
 8003198:	d91c      	bls.n	80031d4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6999      	ldr	r1, [r3, #24]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	4613      	mov	r3, r2
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	4413      	add	r3, r2
 80031aa:	3b1b      	subs	r3, #27
 80031ac:	2207      	movs	r2, #7
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	4019      	ands	r1, r3
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	6898      	ldr	r0, [r3, #8]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	4613      	mov	r3, r2
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4413      	add	r3, r2
 80031c4:	3b1b      	subs	r3, #27
 80031c6:	fa00 f203 	lsl.w	r2, r0, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	619a      	str	r2, [r3, #24]
 80031d2:	e01b      	b.n	800320c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6959      	ldr	r1, [r3, #20]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	4613      	mov	r3, r2
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	4413      	add	r3, r2
 80031e6:	2207      	movs	r2, #7
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	4019      	ands	r1, r3
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	6898      	ldr	r0, [r3, #8]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	4613      	mov	r3, r2
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	4413      	add	r3, r2
 8003200:	fa00 f203 	lsl.w	r2, r0, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800320c:	4b1a      	ldr	r3, [pc, #104]	; (8003278 <HAL_ADC_ConfigChannel+0x474>)
 800320e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b10      	cmp	r3, #16
 8003216:	d105      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003220:	2b00      	cmp	r3, #0
 8003222:	d014      	beq.n	800324e <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003228:	2b11      	cmp	r3, #17
 800322a:	d105      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800322c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800323c:	2b12      	cmp	r3, #18
 800323e:	f040 8086 	bne.w	800334e <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800324a:	2b00      	cmp	r3, #0
 800324c:	d17f      	bne.n	800334e <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	2b01      	cmp	r3, #1
 800325e:	d10d      	bne.n	800327c <HAL_ADC_ConfigChannel+0x478>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b01      	cmp	r3, #1
 800326c:	d106      	bne.n	800327c <HAL_ADC_ConfigChannel+0x478>
 800326e:	2301      	movs	r3, #1
 8003270:	e005      	b.n	800327e <HAL_ADC_ConfigChannel+0x47a>
 8003272:	bf00      	nop
 8003274:	83fff000 	.word	0x83fff000
 8003278:	50000300 	.word	0x50000300
 800327c:	2300      	movs	r3, #0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d150      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003282:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003284:	2b00      	cmp	r3, #0
 8003286:	d010      	beq.n	80032aa <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	2b01      	cmp	r3, #1
 8003292:	d107      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x4a0>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x4a0>
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <HAL_ADC_ConfigChannel+0x4a2>
 80032a4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d13c      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b10      	cmp	r3, #16
 80032b0:	d11d      	bne.n	80032ee <HAL_ADC_ConfigChannel+0x4ea>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032ba:	d118      	bne.n	80032ee <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80032bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032c6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032c8:	4b27      	ldr	r3, [pc, #156]	; (8003368 <HAL_ADC_ConfigChannel+0x564>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a27      	ldr	r2, [pc, #156]	; (800336c <HAL_ADC_ConfigChannel+0x568>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	0c9a      	lsrs	r2, r3, #18
 80032d4:	4613      	mov	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032de:	e002      	b.n	80032e6 <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1f9      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80032ec:	e02e      	b.n	800334c <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b11      	cmp	r3, #17
 80032f4:	d10b      	bne.n	800330e <HAL_ADC_ConfigChannel+0x50a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032fe:	d106      	bne.n	800330e <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003300:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800330a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800330c:	e01e      	b.n	800334c <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b12      	cmp	r3, #18
 8003314:	d11a      	bne.n	800334c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800331e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003320:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003322:	e013      	b.n	800334c <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	f043 0220 	orr.w	r2, r3, #32
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003336:	e00a      	b.n	800334e <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333c:	f043 0220 	orr.w	r2, r3, #32
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800334a:	e000      	b.n	800334e <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800334c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003356:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800335a:	4618      	mov	r0, r3
 800335c:	376c      	adds	r7, #108	; 0x6c
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	200001b8 	.word	0x200001b8
 800336c:	431bde83 	.word	0x431bde83

08003370 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b01      	cmp	r3, #1
 8003388:	d108      	bne.n	800339c <ADC_Enable+0x2c>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b01      	cmp	r3, #1
 8003396:	d101      	bne.n	800339c <ADC_Enable+0x2c>
 8003398:	2301      	movs	r3, #1
 800339a:	e000      	b.n	800339e <ADC_Enable+0x2e>
 800339c:	2300      	movs	r3, #0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d143      	bne.n	800342a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	4b22      	ldr	r3, [pc, #136]	; (8003434 <ADC_Enable+0xc4>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00d      	beq.n	80033cc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	f043 0210 	orr.w	r2, r3, #16
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c0:	f043 0201 	orr.w	r2, r3, #1
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e02f      	b.n	800342c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80033dc:	f7ff f9ee 	bl	80027bc <HAL_GetTick>
 80033e0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80033e2:	e01b      	b.n	800341c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033e4:	f7ff f9ea 	bl	80027bc <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d914      	bls.n	800341c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d00d      	beq.n	800341c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	f043 0210 	orr.w	r2, r3, #16
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003410:	f043 0201 	orr.w	r2, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e007      	b.n	800342c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b01      	cmp	r3, #1
 8003428:	d1dc      	bne.n	80033e4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	8000003f 	.word	0x8000003f

08003438 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	2b01      	cmp	r3, #1
 8003450:	d108      	bne.n	8003464 <ADC_Disable+0x2c>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <ADC_Disable+0x2c>
 8003460:	2301      	movs	r3, #1
 8003462:	e000      	b.n	8003466 <ADC_Disable+0x2e>
 8003464:	2300      	movs	r3, #0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d047      	beq.n	80034fa <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 030d 	and.w	r3, r3, #13
 8003474:	2b01      	cmp	r3, #1
 8003476:	d10f      	bne.n	8003498 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0202 	orr.w	r2, r2, #2
 8003486:	609a      	str	r2, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2203      	movs	r2, #3
 800348e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003490:	f7ff f994 	bl	80027bc <HAL_GetTick>
 8003494:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003496:	e029      	b.n	80034ec <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	f043 0210 	orr.w	r2, r3, #16
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a8:	f043 0201 	orr.w	r2, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e023      	b.n	80034fc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034b4:	f7ff f982 	bl	80027bc <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d914      	bls.n	80034ec <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d10d      	bne.n	80034ec <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	f043 0210 	orr.w	r2, r3, #16
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e0:	f043 0201 	orr.w	r2, r3, #1
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e007      	b.n	80034fc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d0dc      	beq.n	80034b4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003516:	2300      	movs	r3, #0
 8003518:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 030c 	and.w	r3, r3, #12
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 809b 	beq.w	8003660 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003534:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003538:	d12a      	bne.n	8003590 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800353e:	2b01      	cmp	r3, #1
 8003540:	d126      	bne.n	8003590 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003546:	2b01      	cmp	r3, #1
 8003548:	d122      	bne.n	8003590 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800354a:	230c      	movs	r3, #12
 800354c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800354e:	e014      	b.n	800357a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4a46      	ldr	r2, [pc, #280]	; (800366c <ADC_ConversionStop+0x168>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d90d      	bls.n	8003574 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	f043 0210 	orr.w	r2, r3, #16
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003568:	f043 0201 	orr.w	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e076      	b.n	8003662 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	3301      	adds	r3, #1
 8003578:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003584:	2b40      	cmp	r3, #64	; 0x40
 8003586:	d1e3      	bne.n	8003550 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2240      	movs	r2, #64	; 0x40
 800358e:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	2b60      	cmp	r3, #96	; 0x60
 8003594:	d015      	beq.n	80035c2 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d10e      	bne.n	80035c2 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d107      	bne.n	80035c2 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 0210 	orr.w	r2, r2, #16
 80035c0:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b0c      	cmp	r3, #12
 80035c6:	d015      	beq.n	80035f4 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d10e      	bne.n	80035f4 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d107      	bne.n	80035f4 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0220 	orr.w	r2, r2, #32
 80035f2:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2b60      	cmp	r3, #96	; 0x60
 80035f8:	d005      	beq.n	8003606 <ADC_ConversionStop+0x102>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b6c      	cmp	r3, #108	; 0x6c
 80035fe:	d105      	bne.n	800360c <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003600:	230c      	movs	r3, #12
 8003602:	617b      	str	r3, [r7, #20]
        break;
 8003604:	e005      	b.n	8003612 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003606:	2308      	movs	r3, #8
 8003608:	617b      	str	r3, [r7, #20]
        break;
 800360a:	e002      	b.n	8003612 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800360c:	2304      	movs	r3, #4
 800360e:	617b      	str	r3, [r7, #20]
        break;
 8003610:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003612:	f7ff f8d3 	bl	80027bc <HAL_GetTick>
 8003616:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003618:	e01b      	b.n	8003652 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800361a:	f7ff f8cf 	bl	80027bc <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b0b      	cmp	r3, #11
 8003626:	d914      	bls.n	8003652 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	4013      	ands	r3, r2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00d      	beq.n	8003652 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	f043 0210 	orr.w	r2, r3, #16
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003646:	f043 0201 	orr.w	r2, r3, #1
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e007      	b.n	8003662 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	4013      	ands	r3, r2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1dc      	bne.n	800361a <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	000993ff 	.word	0x000993ff

08003670 <__NVIC_SetPriorityGrouping>:
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003680:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800368c:	4013      	ands	r3, r2
 800368e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800369c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036a2:	4a04      	ldr	r2, [pc, #16]	; (80036b4 <__NVIC_SetPriorityGrouping+0x44>)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	60d3      	str	r3, [r2, #12]
}
 80036a8:	bf00      	nop
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	e000ed00 	.word	0xe000ed00

080036b8 <__NVIC_GetPriorityGrouping>:
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036bc:	4b04      	ldr	r3, [pc, #16]	; (80036d0 <__NVIC_GetPriorityGrouping+0x18>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	0a1b      	lsrs	r3, r3, #8
 80036c2:	f003 0307 	and.w	r3, r3, #7
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	e000ed00 	.word	0xe000ed00

080036d4 <__NVIC_EnableIRQ>:
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	db0b      	blt.n	80036fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	f003 021f 	and.w	r2, r3, #31
 80036ec:	4907      	ldr	r1, [pc, #28]	; (800370c <__NVIC_EnableIRQ+0x38>)
 80036ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	2001      	movs	r0, #1
 80036f6:	fa00 f202 	lsl.w	r2, r0, r2
 80036fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	e000e100 	.word	0xe000e100

08003710 <__NVIC_SetPriority>:
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	6039      	str	r1, [r7, #0]
 800371a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800371c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003720:	2b00      	cmp	r3, #0
 8003722:	db0a      	blt.n	800373a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	b2da      	uxtb	r2, r3
 8003728:	490c      	ldr	r1, [pc, #48]	; (800375c <__NVIC_SetPriority+0x4c>)
 800372a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372e:	0112      	lsls	r2, r2, #4
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	440b      	add	r3, r1
 8003734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003738:	e00a      	b.n	8003750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	b2da      	uxtb	r2, r3
 800373e:	4908      	ldr	r1, [pc, #32]	; (8003760 <__NVIC_SetPriority+0x50>)
 8003740:	79fb      	ldrb	r3, [r7, #7]
 8003742:	f003 030f 	and.w	r3, r3, #15
 8003746:	3b04      	subs	r3, #4
 8003748:	0112      	lsls	r2, r2, #4
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	440b      	add	r3, r1
 800374e:	761a      	strb	r2, [r3, #24]
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	e000e100 	.word	0xe000e100
 8003760:	e000ed00 	.word	0xe000ed00

08003764 <NVIC_EncodePriority>:
{
 8003764:	b480      	push	{r7}
 8003766:	b089      	sub	sp, #36	; 0x24
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f1c3 0307 	rsb	r3, r3, #7
 800377e:	2b04      	cmp	r3, #4
 8003780:	bf28      	it	cs
 8003782:	2304      	movcs	r3, #4
 8003784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	3304      	adds	r3, #4
 800378a:	2b06      	cmp	r3, #6
 800378c:	d902      	bls.n	8003794 <NVIC_EncodePriority+0x30>
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	3b03      	subs	r3, #3
 8003792:	e000      	b.n	8003796 <NVIC_EncodePriority+0x32>
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003798:	f04f 32ff 	mov.w	r2, #4294967295
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43da      	mvns	r2, r3
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	401a      	ands	r2, r3
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037ac:	f04f 31ff 	mov.w	r1, #4294967295
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	fa01 f303 	lsl.w	r3, r1, r3
 80037b6:	43d9      	mvns	r1, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037bc:	4313      	orrs	r3, r2
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3724      	adds	r7, #36	; 0x24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
	...

080037cc <SysTick_Config>:
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037dc:	d301      	bcc.n	80037e2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80037de:	2301      	movs	r3, #1
 80037e0:	e00f      	b.n	8003802 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037e2:	4a0a      	ldr	r2, [pc, #40]	; (800380c <SysTick_Config+0x40>)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ea:	210f      	movs	r1, #15
 80037ec:	f04f 30ff 	mov.w	r0, #4294967295
 80037f0:	f7ff ff8e 	bl	8003710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037f4:	4b05      	ldr	r3, [pc, #20]	; (800380c <SysTick_Config+0x40>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037fa:	4b04      	ldr	r3, [pc, #16]	; (800380c <SysTick_Config+0x40>)
 80037fc:	2207      	movs	r2, #7
 80037fe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	e000e010 	.word	0xe000e010

08003810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff ff29 	bl	8003670 <__NVIC_SetPriorityGrouping>
}
 800381e:	bf00      	nop
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b086      	sub	sp, #24
 800382a:	af00      	add	r7, sp, #0
 800382c:	4603      	mov	r3, r0
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	607a      	str	r2, [r7, #4]
 8003832:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003838:	f7ff ff3e 	bl	80036b8 <__NVIC_GetPriorityGrouping>
 800383c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	68b9      	ldr	r1, [r7, #8]
 8003842:	6978      	ldr	r0, [r7, #20]
 8003844:	f7ff ff8e 	bl	8003764 <NVIC_EncodePriority>
 8003848:	4602      	mov	r2, r0
 800384a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800384e:	4611      	mov	r1, r2
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff ff5d 	bl	8003710 <__NVIC_SetPriority>
}
 8003856:	bf00      	nop
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b082      	sub	sp, #8
 8003862:	af00      	add	r7, sp, #0
 8003864:	4603      	mov	r3, r0
 8003866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff ff31 	bl	80036d4 <__NVIC_EnableIRQ>
}
 8003872:	bf00      	nop
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b082      	sub	sp, #8
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7ff ffa2 	bl	80037cc <SysTick_Config>
 8003888:	4603      	mov	r3, r0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
	...

08003894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800389e:	2300      	movs	r3, #0
 80038a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038a2:	e14e      	b.n	8003b42 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	2101      	movs	r1, #1
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	fa01 f303 	lsl.w	r3, r1, r3
 80038b0:	4013      	ands	r3, r2
 80038b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 8140 	beq.w	8003b3c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d005      	beq.n	80038d4 <HAL_GPIO_Init+0x40>
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 0303 	and.w	r3, r3, #3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d130      	bne.n	8003936 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	2203      	movs	r2, #3
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	43db      	mvns	r3, r3
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4013      	ands	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800390a:	2201      	movs	r2, #1
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43db      	mvns	r3, r3
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4013      	ands	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	091b      	lsrs	r3, r3, #4
 8003920:	f003 0201 	and.w	r2, r3, #1
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4313      	orrs	r3, r2
 800392e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	2b03      	cmp	r3, #3
 8003940:	d017      	beq.n	8003972 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	2203      	movs	r2, #3
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	43db      	mvns	r3, r3
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4013      	ands	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	4313      	orrs	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d123      	bne.n	80039c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	08da      	lsrs	r2, r3, #3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	3208      	adds	r2, #8
 8003986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800398a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	220f      	movs	r2, #15
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	43db      	mvns	r3, r3
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4013      	ands	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	691a      	ldr	r2, [r3, #16]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	08da      	lsrs	r2, r3, #3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3208      	adds	r2, #8
 80039c0:	6939      	ldr	r1, [r7, #16]
 80039c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	2203      	movs	r2, #3
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	43db      	mvns	r3, r3
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	4013      	ands	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f003 0203 	and.w	r2, r3, #3
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 809a 	beq.w	8003b3c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a08:	4b55      	ldr	r3, [pc, #340]	; (8003b60 <HAL_GPIO_Init+0x2cc>)
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	4a54      	ldr	r2, [pc, #336]	; (8003b60 <HAL_GPIO_Init+0x2cc>)
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	6193      	str	r3, [r2, #24]
 8003a14:	4b52      	ldr	r3, [pc, #328]	; (8003b60 <HAL_GPIO_Init+0x2cc>)
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	60bb      	str	r3, [r7, #8]
 8003a1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a20:	4a50      	ldr	r2, [pc, #320]	; (8003b64 <HAL_GPIO_Init+0x2d0>)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	089b      	lsrs	r3, r3, #2
 8003a26:	3302      	adds	r3, #2
 8003a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f003 0303 	and.w	r3, r3, #3
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	220f      	movs	r2, #15
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4013      	ands	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a4a:	d013      	beq.n	8003a74 <HAL_GPIO_Init+0x1e0>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a46      	ldr	r2, [pc, #280]	; (8003b68 <HAL_GPIO_Init+0x2d4>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00d      	beq.n	8003a70 <HAL_GPIO_Init+0x1dc>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a45      	ldr	r2, [pc, #276]	; (8003b6c <HAL_GPIO_Init+0x2d8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d007      	beq.n	8003a6c <HAL_GPIO_Init+0x1d8>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a44      	ldr	r2, [pc, #272]	; (8003b70 <HAL_GPIO_Init+0x2dc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d101      	bne.n	8003a68 <HAL_GPIO_Init+0x1d4>
 8003a64:	2303      	movs	r3, #3
 8003a66:	e006      	b.n	8003a76 <HAL_GPIO_Init+0x1e2>
 8003a68:	2305      	movs	r3, #5
 8003a6a:	e004      	b.n	8003a76 <HAL_GPIO_Init+0x1e2>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e002      	b.n	8003a76 <HAL_GPIO_Init+0x1e2>
 8003a70:	2301      	movs	r3, #1
 8003a72:	e000      	b.n	8003a76 <HAL_GPIO_Init+0x1e2>
 8003a74:	2300      	movs	r3, #0
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	f002 0203 	and.w	r2, r2, #3
 8003a7c:	0092      	lsls	r2, r2, #2
 8003a7e:	4093      	lsls	r3, r2
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a86:	4937      	ldr	r1, [pc, #220]	; (8003b64 <HAL_GPIO_Init+0x2d0>)
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	089b      	lsrs	r3, r3, #2
 8003a8c:	3302      	adds	r3, #2
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a94:	4b37      	ldr	r3, [pc, #220]	; (8003b74 <HAL_GPIO_Init+0x2e0>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003ab8:	4a2e      	ldr	r2, [pc, #184]	; (8003b74 <HAL_GPIO_Init+0x2e0>)
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003abe:	4b2d      	ldr	r3, [pc, #180]	; (8003b74 <HAL_GPIO_Init+0x2e0>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4013      	ands	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003ae2:	4a24      	ldr	r2, [pc, #144]	; (8003b74 <HAL_GPIO_Init+0x2e0>)
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ae8:	4b22      	ldr	r3, [pc, #136]	; (8003b74 <HAL_GPIO_Init+0x2e0>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	43db      	mvns	r3, r3
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4013      	ands	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003b0c:	4a19      	ldr	r2, [pc, #100]	; (8003b74 <HAL_GPIO_Init+0x2e0>)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b12:	4b18      	ldr	r3, [pc, #96]	; (8003b74 <HAL_GPIO_Init+0x2e0>)
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003b36:	4a0f      	ldr	r2, [pc, #60]	; (8003b74 <HAL_GPIO_Init+0x2e0>)
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f47f aea9 	bne.w	80038a4 <HAL_GPIO_Init+0x10>
  }
}
 8003b52:	bf00      	nop
 8003b54:	bf00      	nop
 8003b56:	371c      	adds	r7, #28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	40021000 	.word	0x40021000
 8003b64:	40010000 	.word	0x40010000
 8003b68:	48000400 	.word	0x48000400
 8003b6c:	48000800 	.word	0x48000800
 8003b70:	48000c00 	.word	0x48000c00
 8003b74:	40010400 	.word	0x40010400

08003b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	807b      	strh	r3, [r7, #2]
 8003b84:	4613      	mov	r3, r2
 8003b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b88:	787b      	ldrb	r3, [r7, #1]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b8e:	887a      	ldrh	r2, [r7, #2]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b94:	e002      	b.n	8003b9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b96:	887a      	ldrh	r2, [r7, #2]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	4603      	mov	r3, r0
 8003bb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003bb2:	4b08      	ldr	r3, [pc, #32]	; (8003bd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bb4:	695a      	ldr	r2, [r3, #20]
 8003bb6:	88fb      	ldrh	r3, [r7, #6]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d006      	beq.n	8003bcc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bbe:	4a05      	ldr	r2, [pc, #20]	; (8003bd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bc0:	88fb      	ldrh	r3, [r7, #6]
 8003bc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bc4:	88fb      	ldrh	r3, [r7, #6]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fd fd4e 	bl	8001668 <HAL_GPIO_EXTI_Callback>
  }
}
 8003bcc:	bf00      	nop
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40010400 	.word	0x40010400

08003bd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003be8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d102      	bne.n	8003bfe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	f001 b823 	b.w	8004c44 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 817d 	beq.w	8003f0e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003c14:	4bbc      	ldr	r3, [pc, #752]	; (8003f08 <HAL_RCC_OscConfig+0x330>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 030c 	and.w	r3, r3, #12
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d00c      	beq.n	8003c3a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c20:	4bb9      	ldr	r3, [pc, #740]	; (8003f08 <HAL_RCC_OscConfig+0x330>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 030c 	and.w	r3, r3, #12
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d15c      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x10e>
 8003c2c:	4bb6      	ldr	r3, [pc, #728]	; (8003f08 <HAL_RCC_OscConfig+0x330>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c38:	d155      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x10e>
 8003c3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c3e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c42:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003c46:	fa93 f3a3 	rbit	r3, r3
 8003c4a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c4e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c52:	fab3 f383 	clz	r3, r3
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	f043 0301 	orr.w	r3, r3, #1
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d102      	bne.n	8003c6c <HAL_RCC_OscConfig+0x94>
 8003c66:	4ba8      	ldr	r3, [pc, #672]	; (8003f08 <HAL_RCC_OscConfig+0x330>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	e015      	b.n	8003c98 <HAL_RCC_OscConfig+0xc0>
 8003c6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c70:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c74:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003c78:	fa93 f3a3 	rbit	r3, r3
 8003c7c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003c80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c84:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003c88:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003c8c:	fa93 f3a3 	rbit	r3, r3
 8003c90:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003c94:	4b9c      	ldr	r3, [pc, #624]	; (8003f08 <HAL_RCC_OscConfig+0x330>)
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c9c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003ca0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003ca4:	fa92 f2a2 	rbit	r2, r2
 8003ca8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003cac:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003cb0:	fab2 f282 	clz	r2, r2
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	f042 0220 	orr.w	r2, r2, #32
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	f002 021f 	and.w	r2, r2, #31
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 811f 	beq.w	8003f0c <HAL_RCC_OscConfig+0x334>
 8003cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f040 8116 	bne.w	8003f0c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f000 bfaf 	b.w	8004c44 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf6:	d106      	bne.n	8003d06 <HAL_RCC_OscConfig+0x12e>
 8003cf8:	4b83      	ldr	r3, [pc, #524]	; (8003f08 <HAL_RCC_OscConfig+0x330>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a82      	ldr	r2, [pc, #520]	; (8003f08 <HAL_RCC_OscConfig+0x330>)
 8003cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d02:	6013      	str	r3, [r2, #0]
 8003d04:	e036      	b.n	8003d74 <HAL_RCC_OscConfig+0x19c>
 8003d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10c      	bne.n	8003d30 <HAL_RCC_OscConfig+0x158>
 8003d16:	4b7c      	ldr	r3, [pc, #496]	; (8003f08 <HAL_RCC_OscConfig+0x330>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a7b      	ldr	r2, [pc, #492]	; (8003f08 <HAL_RCC_OscConfig+0x330>)
 8003d1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	4b79      	ldr	r3, [pc, #484]	; (8003f08 <HAL_RCC_OscConfig+0x330>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a78      	ldr	r2, [pc, #480]	; (8003f08 <HAL_RCC_OscConfig+0x330>)
 8003d28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	e021      	b.n	8003d74 <HAL_RCC_OscConfig+0x19c>
 8003d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d40:	d10c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x184>
 8003d42:	4b71      	ldr	r3, [pc, #452]	; (8003f08 <HAL_RCC_OscConfig+0x330>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a70      	ldr	r2, [pc, #448]	; (8003f08 <HAL_RCC_OscConfig+0x330>)
 8003d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	4b6e      	ldr	r3, [pc, #440]	; (8003f08 <HAL_RCC_OscConfig+0x330>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a6d      	ldr	r2, [pc, #436]	; (8003f08 <HAL_RCC_OscConfig+0x330>)
 8003d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	e00b      	b.n	8003d74 <HAL_RCC_OscConfig+0x19c>
 8003d5c:	4b6a      	ldr	r3, [pc, #424]	; (8003f08 <HAL_RCC_OscConfig+0x330>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a69      	ldr	r2, [pc, #420]	; (8003f08 <HAL_RCC_OscConfig+0x330>)
 8003d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	4b67      	ldr	r3, [pc, #412]	; (8003f08 <HAL_RCC_OscConfig+0x330>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a66      	ldr	r2, [pc, #408]	; (8003f08 <HAL_RCC_OscConfig+0x330>)
 8003d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d72:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d74:	4b64      	ldr	r3, [pc, #400]	; (8003f08 <HAL_RCC_OscConfig+0x330>)
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	f023 020f 	bic.w	r2, r3, #15
 8003d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	495f      	ldr	r1, [pc, #380]	; (8003f08 <HAL_RCC_OscConfig+0x330>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d059      	beq.n	8003e52 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9e:	f7fe fd0d 	bl	80027bc <HAL_GetTick>
 8003da2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da6:	e00a      	b.n	8003dbe <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003da8:	f7fe fd08 	bl	80027bc <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b64      	cmp	r3, #100	; 0x64
 8003db6:	d902      	bls.n	8003dbe <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	f000 bf43 	b.w	8004c44 <HAL_RCC_OscConfig+0x106c>
 8003dbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dc2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003dca:	fa93 f3a3 	rbit	r3, r3
 8003dce:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003dd2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd6:	fab3 f383 	clz	r3, r3
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	095b      	lsrs	r3, r3, #5
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	f043 0301 	orr.w	r3, r3, #1
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d102      	bne.n	8003df0 <HAL_RCC_OscConfig+0x218>
 8003dea:	4b47      	ldr	r3, [pc, #284]	; (8003f08 <HAL_RCC_OscConfig+0x330>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	e015      	b.n	8003e1c <HAL_RCC_OscConfig+0x244>
 8003df0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003df4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003dfc:	fa93 f3a3 	rbit	r3, r3
 8003e00:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003e04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e08:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003e0c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003e10:	fa93 f3a3 	rbit	r3, r3
 8003e14:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003e18:	4b3b      	ldr	r3, [pc, #236]	; (8003f08 <HAL_RCC_OscConfig+0x330>)
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e20:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003e24:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003e28:	fa92 f2a2 	rbit	r2, r2
 8003e2c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003e30:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003e34:	fab2 f282 	clz	r2, r2
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	f042 0220 	orr.w	r2, r2, #32
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	f002 021f 	and.w	r2, r2, #31
 8003e44:	2101      	movs	r1, #1
 8003e46:	fa01 f202 	lsl.w	r2, r1, r2
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0ab      	beq.n	8003da8 <HAL_RCC_OscConfig+0x1d0>
 8003e50:	e05d      	b.n	8003f0e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e52:	f7fe fcb3 	bl	80027bc <HAL_GetTick>
 8003e56:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e5a:	e00a      	b.n	8003e72 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e5c:	f7fe fcae 	bl	80027bc <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b64      	cmp	r3, #100	; 0x64
 8003e6a:	d902      	bls.n	8003e72 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	f000 bee9 	b.w	8004c44 <HAL_RCC_OscConfig+0x106c>
 8003e72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e76:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003e7e:	fa93 f3a3 	rbit	r3, r3
 8003e82:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003e86:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e8a:	fab3 f383 	clz	r3, r3
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	095b      	lsrs	r3, r3, #5
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	f043 0301 	orr.w	r3, r3, #1
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d102      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x2cc>
 8003e9e:	4b1a      	ldr	r3, [pc, #104]	; (8003f08 <HAL_RCC_OscConfig+0x330>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	e015      	b.n	8003ed0 <HAL_RCC_OscConfig+0x2f8>
 8003ea4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ea8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eac:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003eb0:	fa93 f3a3 	rbit	r3, r3
 8003eb4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003eb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ebc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003ec0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003ec4:	fa93 f3a3 	rbit	r3, r3
 8003ec8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003ecc:	4b0e      	ldr	r3, [pc, #56]	; (8003f08 <HAL_RCC_OscConfig+0x330>)
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ed4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003ed8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003edc:	fa92 f2a2 	rbit	r2, r2
 8003ee0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003ee4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003ee8:	fab2 f282 	clz	r2, r2
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	f042 0220 	orr.w	r2, r2, #32
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	f002 021f 	and.w	r2, r2, #31
 8003ef8:	2101      	movs	r1, #1
 8003efa:	fa01 f202 	lsl.w	r2, r1, r2
 8003efe:	4013      	ands	r3, r2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1ab      	bne.n	8003e5c <HAL_RCC_OscConfig+0x284>
 8003f04:	e003      	b.n	8003f0e <HAL_RCC_OscConfig+0x336>
 8003f06:	bf00      	nop
 8003f08:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 817d 	beq.w	800421e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003f24:	4ba6      	ldr	r3, [pc, #664]	; (80041c0 <HAL_RCC_OscConfig+0x5e8>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f003 030c 	and.w	r3, r3, #12
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00b      	beq.n	8003f48 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003f30:	4ba3      	ldr	r3, [pc, #652]	; (80041c0 <HAL_RCC_OscConfig+0x5e8>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f003 030c 	and.w	r3, r3, #12
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d172      	bne.n	8004022 <HAL_RCC_OscConfig+0x44a>
 8003f3c:	4ba0      	ldr	r3, [pc, #640]	; (80041c0 <HAL_RCC_OscConfig+0x5e8>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d16c      	bne.n	8004022 <HAL_RCC_OscConfig+0x44a>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003f52:	fa93 f3a3 	rbit	r3, r3
 8003f56:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003f5a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f5e:	fab3 f383 	clz	r3, r3
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	f043 0301 	orr.w	r3, r3, #1
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d102      	bne.n	8003f78 <HAL_RCC_OscConfig+0x3a0>
 8003f72:	4b93      	ldr	r3, [pc, #588]	; (80041c0 <HAL_RCC_OscConfig+0x5e8>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	e013      	b.n	8003fa0 <HAL_RCC_OscConfig+0x3c8>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003f82:	fa93 f3a3 	rbit	r3, r3
 8003f86:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003f90:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003f94:	fa93 f3a3 	rbit	r3, r3
 8003f98:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003f9c:	4b88      	ldr	r3, [pc, #544]	; (80041c0 <HAL_RCC_OscConfig+0x5e8>)
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003fa6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003faa:	fa92 f2a2 	rbit	r2, r2
 8003fae:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003fb2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003fb6:	fab2 f282 	clz	r2, r2
 8003fba:	b2d2      	uxtb	r2, r2
 8003fbc:	f042 0220 	orr.w	r2, r2, #32
 8003fc0:	b2d2      	uxtb	r2, r2
 8003fc2:	f002 021f 	and.w	r2, r2, #31
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003fcc:	4013      	ands	r3, r2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x410>
 8003fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d002      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	f000 be2e 	b.w	8004c44 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fe8:	4b75      	ldr	r3, [pc, #468]	; (80041c0 <HAL_RCC_OscConfig+0x5e8>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	21f8      	movs	r1, #248	; 0xf8
 8003ffe:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004002:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004006:	fa91 f1a1 	rbit	r1, r1
 800400a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800400e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004012:	fab1 f181 	clz	r1, r1
 8004016:	b2c9      	uxtb	r1, r1
 8004018:	408b      	lsls	r3, r1
 800401a:	4969      	ldr	r1, [pc, #420]	; (80041c0 <HAL_RCC_OscConfig+0x5e8>)
 800401c:	4313      	orrs	r3, r2
 800401e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004020:	e0fd      	b.n	800421e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004026:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 8088 	beq.w	8004144 <HAL_RCC_OscConfig+0x56c>
 8004034:	2301      	movs	r3, #1
 8004036:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800403e:	fa93 f3a3 	rbit	r3, r3
 8004042:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004046:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800404a:	fab3 f383 	clz	r3, r3
 800404e:	b2db      	uxtb	r3, r3
 8004050:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004054:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	461a      	mov	r2, r3
 800405c:	2301      	movs	r3, #1
 800405e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004060:	f7fe fbac 	bl	80027bc <HAL_GetTick>
 8004064:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004068:	e00a      	b.n	8004080 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800406a:	f7fe fba7 	bl	80027bc <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d902      	bls.n	8004080 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	f000 bde2 	b.w	8004c44 <HAL_RCC_OscConfig+0x106c>
 8004080:	2302      	movs	r3, #2
 8004082:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004086:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800408a:	fa93 f3a3 	rbit	r3, r3
 800408e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004092:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004096:	fab3 f383 	clz	r3, r3
 800409a:	b2db      	uxtb	r3, r3
 800409c:	095b      	lsrs	r3, r3, #5
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	f043 0301 	orr.w	r3, r3, #1
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d102      	bne.n	80040b0 <HAL_RCC_OscConfig+0x4d8>
 80040aa:	4b45      	ldr	r3, [pc, #276]	; (80041c0 <HAL_RCC_OscConfig+0x5e8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	e013      	b.n	80040d8 <HAL_RCC_OscConfig+0x500>
 80040b0:	2302      	movs	r3, #2
 80040b2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80040ba:	fa93 f3a3 	rbit	r3, r3
 80040be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80040c2:	2302      	movs	r3, #2
 80040c4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80040c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80040cc:	fa93 f3a3 	rbit	r3, r3
 80040d0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80040d4:	4b3a      	ldr	r3, [pc, #232]	; (80041c0 <HAL_RCC_OscConfig+0x5e8>)
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	2202      	movs	r2, #2
 80040da:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80040de:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80040e2:	fa92 f2a2 	rbit	r2, r2
 80040e6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80040ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80040ee:	fab2 f282 	clz	r2, r2
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	f042 0220 	orr.w	r2, r2, #32
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	f002 021f 	and.w	r2, r2, #31
 80040fe:	2101      	movs	r1, #1
 8004100:	fa01 f202 	lsl.w	r2, r1, r2
 8004104:	4013      	ands	r3, r2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0af      	beq.n	800406a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800410a:	4b2d      	ldr	r3, [pc, #180]	; (80041c0 <HAL_RCC_OscConfig+0x5e8>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004116:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	21f8      	movs	r1, #248	; 0xf8
 8004120:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004124:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004128:	fa91 f1a1 	rbit	r1, r1
 800412c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004130:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004134:	fab1 f181 	clz	r1, r1
 8004138:	b2c9      	uxtb	r1, r1
 800413a:	408b      	lsls	r3, r1
 800413c:	4920      	ldr	r1, [pc, #128]	; (80041c0 <HAL_RCC_OscConfig+0x5e8>)
 800413e:	4313      	orrs	r3, r2
 8004140:	600b      	str	r3, [r1, #0]
 8004142:	e06c      	b.n	800421e <HAL_RCC_OscConfig+0x646>
 8004144:	2301      	movs	r3, #1
 8004146:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800414e:	fa93 f3a3 	rbit	r3, r3
 8004152:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004156:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800415a:	fab3 f383 	clz	r3, r3
 800415e:	b2db      	uxtb	r3, r3
 8004160:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004164:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	461a      	mov	r2, r3
 800416c:	2300      	movs	r3, #0
 800416e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004170:	f7fe fb24 	bl	80027bc <HAL_GetTick>
 8004174:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004178:	e00a      	b.n	8004190 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800417a:	f7fe fb1f 	bl	80027bc <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d902      	bls.n	8004190 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	f000 bd5a 	b.w	8004c44 <HAL_RCC_OscConfig+0x106c>
 8004190:	2302      	movs	r3, #2
 8004192:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004196:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800419a:	fa93 f3a3 	rbit	r3, r3
 800419e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80041a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041a6:	fab3 f383 	clz	r3, r3
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	095b      	lsrs	r3, r3, #5
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	f043 0301 	orr.w	r3, r3, #1
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d104      	bne.n	80041c4 <HAL_RCC_OscConfig+0x5ec>
 80041ba:	4b01      	ldr	r3, [pc, #4]	; (80041c0 <HAL_RCC_OscConfig+0x5e8>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	e015      	b.n	80041ec <HAL_RCC_OscConfig+0x614>
 80041c0:	40021000 	.word	0x40021000
 80041c4:	2302      	movs	r3, #2
 80041c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041ce:	fa93 f3a3 	rbit	r3, r3
 80041d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80041d6:	2302      	movs	r3, #2
 80041d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80041dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80041e0:	fa93 f3a3 	rbit	r3, r3
 80041e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80041e8:	4bc8      	ldr	r3, [pc, #800]	; (800450c <HAL_RCC_OscConfig+0x934>)
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	2202      	movs	r2, #2
 80041ee:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80041f2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80041f6:	fa92 f2a2 	rbit	r2, r2
 80041fa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80041fe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004202:	fab2 f282 	clz	r2, r2
 8004206:	b2d2      	uxtb	r2, r2
 8004208:	f042 0220 	orr.w	r2, r2, #32
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	f002 021f 	and.w	r2, r2, #31
 8004212:	2101      	movs	r1, #1
 8004214:	fa01 f202 	lsl.w	r2, r1, r2
 8004218:	4013      	ands	r3, r2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1ad      	bne.n	800417a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800421e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004222:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 8110 	beq.w	8004454 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004238:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d079      	beq.n	8004338 <HAL_RCC_OscConfig+0x760>
 8004244:	2301      	movs	r3, #1
 8004246:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800424e:	fa93 f3a3 	rbit	r3, r3
 8004252:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004256:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800425a:	fab3 f383 	clz	r3, r3
 800425e:	b2db      	uxtb	r3, r3
 8004260:	461a      	mov	r2, r3
 8004262:	4bab      	ldr	r3, [pc, #684]	; (8004510 <HAL_RCC_OscConfig+0x938>)
 8004264:	4413      	add	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	461a      	mov	r2, r3
 800426a:	2301      	movs	r3, #1
 800426c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800426e:	f7fe faa5 	bl	80027bc <HAL_GetTick>
 8004272:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004276:	e00a      	b.n	800428e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004278:	f7fe faa0 	bl	80027bc <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d902      	bls.n	800428e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	f000 bcdb 	b.w	8004c44 <HAL_RCC_OscConfig+0x106c>
 800428e:	2302      	movs	r3, #2
 8004290:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004294:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004298:	fa93 f3a3 	rbit	r3, r3
 800429c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80042a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80042a8:	2202      	movs	r2, #2
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	fa93 f2a3 	rbit	r2, r3
 80042ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042cc:	2202      	movs	r2, #2
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	fa93 f2a3 	rbit	r2, r3
 80042de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80042e6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042e8:	4b88      	ldr	r3, [pc, #544]	; (800450c <HAL_RCC_OscConfig+0x934>)
 80042ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80042f4:	2102      	movs	r1, #2
 80042f6:	6019      	str	r1, [r3, #0]
 80042f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	fa93 f1a3 	rbit	r1, r3
 8004306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800430a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800430e:	6019      	str	r1, [r3, #0]
  return result;
 8004310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004314:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	fab3 f383 	clz	r3, r3
 800431e:	b2db      	uxtb	r3, r3
 8004320:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004324:	b2db      	uxtb	r3, r3
 8004326:	f003 031f 	and.w	r3, r3, #31
 800432a:	2101      	movs	r1, #1
 800432c:	fa01 f303 	lsl.w	r3, r1, r3
 8004330:	4013      	ands	r3, r2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0a0      	beq.n	8004278 <HAL_RCC_OscConfig+0x6a0>
 8004336:	e08d      	b.n	8004454 <HAL_RCC_OscConfig+0x87c>
 8004338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800433c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004340:	2201      	movs	r2, #1
 8004342:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004348:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	fa93 f2a3 	rbit	r2, r3
 8004352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004356:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800435a:	601a      	str	r2, [r3, #0]
  return result;
 800435c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004360:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004364:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004366:	fab3 f383 	clz	r3, r3
 800436a:	b2db      	uxtb	r3, r3
 800436c:	461a      	mov	r2, r3
 800436e:	4b68      	ldr	r3, [pc, #416]	; (8004510 <HAL_RCC_OscConfig+0x938>)
 8004370:	4413      	add	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	461a      	mov	r2, r3
 8004376:	2300      	movs	r3, #0
 8004378:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800437a:	f7fe fa1f 	bl	80027bc <HAL_GetTick>
 800437e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004382:	e00a      	b.n	800439a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004384:	f7fe fa1a 	bl	80027bc <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d902      	bls.n	800439a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	f000 bc55 	b.w	8004c44 <HAL_RCC_OscConfig+0x106c>
 800439a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800439e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80043a2:	2202      	movs	r2, #2
 80043a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	fa93 f2a3 	rbit	r2, r3
 80043b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043c6:	2202      	movs	r2, #2
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	fa93 f2a3 	rbit	r2, r3
 80043d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043ea:	2202      	movs	r2, #2
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	fa93 f2a3 	rbit	r2, r3
 80043fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004400:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004404:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004406:	4b41      	ldr	r3, [pc, #260]	; (800450c <HAL_RCC_OscConfig+0x934>)
 8004408:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800440a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800440e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004412:	2102      	movs	r1, #2
 8004414:	6019      	str	r1, [r3, #0]
 8004416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800441a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	fa93 f1a3 	rbit	r1, r3
 8004424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004428:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800442c:	6019      	str	r1, [r3, #0]
  return result;
 800442e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004432:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	fab3 f383 	clz	r3, r3
 800443c:	b2db      	uxtb	r3, r3
 800443e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004442:	b2db      	uxtb	r3, r3
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	2101      	movs	r1, #1
 800444a:	fa01 f303 	lsl.w	r3, r1, r3
 800444e:	4013      	ands	r3, r2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d197      	bne.n	8004384 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004458:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 81a1 	beq.w	80047ac <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800446a:	2300      	movs	r3, #0
 800446c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004470:	4b26      	ldr	r3, [pc, #152]	; (800450c <HAL_RCC_OscConfig+0x934>)
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d116      	bne.n	80044aa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800447c:	4b23      	ldr	r3, [pc, #140]	; (800450c <HAL_RCC_OscConfig+0x934>)
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	4a22      	ldr	r2, [pc, #136]	; (800450c <HAL_RCC_OscConfig+0x934>)
 8004482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004486:	61d3      	str	r3, [r2, #28]
 8004488:	4b20      	ldr	r3, [pc, #128]	; (800450c <HAL_RCC_OscConfig+0x934>)
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004494:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800449e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80044a2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80044a4:	2301      	movs	r3, #1
 80044a6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044aa:	4b1a      	ldr	r3, [pc, #104]	; (8004514 <HAL_RCC_OscConfig+0x93c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d11a      	bne.n	80044ec <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044b6:	4b17      	ldr	r3, [pc, #92]	; (8004514 <HAL_RCC_OscConfig+0x93c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a16      	ldr	r2, [pc, #88]	; (8004514 <HAL_RCC_OscConfig+0x93c>)
 80044bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044c2:	f7fe f97b 	bl	80027bc <HAL_GetTick>
 80044c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ca:	e009      	b.n	80044e0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044cc:	f7fe f976 	bl	80027bc <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b64      	cmp	r3, #100	; 0x64
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e3b1      	b.n	8004c44 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e0:	4b0c      	ldr	r3, [pc, #48]	; (8004514 <HAL_RCC_OscConfig+0x93c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0ef      	beq.n	80044cc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d10d      	bne.n	8004518 <HAL_RCC_OscConfig+0x940>
 80044fc:	4b03      	ldr	r3, [pc, #12]	; (800450c <HAL_RCC_OscConfig+0x934>)
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	4a02      	ldr	r2, [pc, #8]	; (800450c <HAL_RCC_OscConfig+0x934>)
 8004502:	f043 0301 	orr.w	r3, r3, #1
 8004506:	6213      	str	r3, [r2, #32]
 8004508:	e03c      	b.n	8004584 <HAL_RCC_OscConfig+0x9ac>
 800450a:	bf00      	nop
 800450c:	40021000 	.word	0x40021000
 8004510:	10908120 	.word	0x10908120
 8004514:	40007000 	.word	0x40007000
 8004518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800451c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10c      	bne.n	8004542 <HAL_RCC_OscConfig+0x96a>
 8004528:	4bc1      	ldr	r3, [pc, #772]	; (8004830 <HAL_RCC_OscConfig+0xc58>)
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	4ac0      	ldr	r2, [pc, #768]	; (8004830 <HAL_RCC_OscConfig+0xc58>)
 800452e:	f023 0301 	bic.w	r3, r3, #1
 8004532:	6213      	str	r3, [r2, #32]
 8004534:	4bbe      	ldr	r3, [pc, #760]	; (8004830 <HAL_RCC_OscConfig+0xc58>)
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	4abd      	ldr	r2, [pc, #756]	; (8004830 <HAL_RCC_OscConfig+0xc58>)
 800453a:	f023 0304 	bic.w	r3, r3, #4
 800453e:	6213      	str	r3, [r2, #32]
 8004540:	e020      	b.n	8004584 <HAL_RCC_OscConfig+0x9ac>
 8004542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004546:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	2b05      	cmp	r3, #5
 8004550:	d10c      	bne.n	800456c <HAL_RCC_OscConfig+0x994>
 8004552:	4bb7      	ldr	r3, [pc, #732]	; (8004830 <HAL_RCC_OscConfig+0xc58>)
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	4ab6      	ldr	r2, [pc, #728]	; (8004830 <HAL_RCC_OscConfig+0xc58>)
 8004558:	f043 0304 	orr.w	r3, r3, #4
 800455c:	6213      	str	r3, [r2, #32]
 800455e:	4bb4      	ldr	r3, [pc, #720]	; (8004830 <HAL_RCC_OscConfig+0xc58>)
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	4ab3      	ldr	r2, [pc, #716]	; (8004830 <HAL_RCC_OscConfig+0xc58>)
 8004564:	f043 0301 	orr.w	r3, r3, #1
 8004568:	6213      	str	r3, [r2, #32]
 800456a:	e00b      	b.n	8004584 <HAL_RCC_OscConfig+0x9ac>
 800456c:	4bb0      	ldr	r3, [pc, #704]	; (8004830 <HAL_RCC_OscConfig+0xc58>)
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	4aaf      	ldr	r2, [pc, #700]	; (8004830 <HAL_RCC_OscConfig+0xc58>)
 8004572:	f023 0301 	bic.w	r3, r3, #1
 8004576:	6213      	str	r3, [r2, #32]
 8004578:	4bad      	ldr	r3, [pc, #692]	; (8004830 <HAL_RCC_OscConfig+0xc58>)
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	4aac      	ldr	r2, [pc, #688]	; (8004830 <HAL_RCC_OscConfig+0xc58>)
 800457e:	f023 0304 	bic.w	r3, r3, #4
 8004582:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004588:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 8081 	beq.w	8004698 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004596:	f7fe f911 	bl	80027bc <HAL_GetTick>
 800459a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800459e:	e00b      	b.n	80045b8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045a0:	f7fe f90c 	bl	80027bc <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e345      	b.n	8004c44 <HAL_RCC_OscConfig+0x106c>
 80045b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045bc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80045c0:	2202      	movs	r2, #2
 80045c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045c8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	fa93 f2a3 	rbit	r2, r3
 80045d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045d6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80045e4:	2202      	movs	r2, #2
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	fa93 f2a3 	rbit	r2, r3
 80045f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045fa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80045fe:	601a      	str	r2, [r3, #0]
  return result;
 8004600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004604:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004608:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800460a:	fab3 f383 	clz	r3, r3
 800460e:	b2db      	uxtb	r3, r3
 8004610:	095b      	lsrs	r3, r3, #5
 8004612:	b2db      	uxtb	r3, r3
 8004614:	f043 0302 	orr.w	r3, r3, #2
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d102      	bne.n	8004624 <HAL_RCC_OscConfig+0xa4c>
 800461e:	4b84      	ldr	r3, [pc, #528]	; (8004830 <HAL_RCC_OscConfig+0xc58>)
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	e013      	b.n	800464c <HAL_RCC_OscConfig+0xa74>
 8004624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004628:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800462c:	2202      	movs	r2, #2
 800462e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004634:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	fa93 f2a3 	rbit	r2, r3
 800463e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004642:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	4b79      	ldr	r3, [pc, #484]	; (8004830 <HAL_RCC_OscConfig+0xc58>)
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004650:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004654:	2102      	movs	r1, #2
 8004656:	6011      	str	r1, [r2, #0]
 8004658:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800465c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004660:	6812      	ldr	r2, [r2, #0]
 8004662:	fa92 f1a2 	rbit	r1, r2
 8004666:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800466a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800466e:	6011      	str	r1, [r2, #0]
  return result;
 8004670:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004674:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004678:	6812      	ldr	r2, [r2, #0]
 800467a:	fab2 f282 	clz	r2, r2
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	f002 021f 	and.w	r2, r2, #31
 800468a:	2101      	movs	r1, #1
 800468c:	fa01 f202 	lsl.w	r2, r1, r2
 8004690:	4013      	ands	r3, r2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d084      	beq.n	80045a0 <HAL_RCC_OscConfig+0x9c8>
 8004696:	e07f      	b.n	8004798 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004698:	f7fe f890 	bl	80027bc <HAL_GetTick>
 800469c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a0:	e00b      	b.n	80046ba <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046a2:	f7fe f88b 	bl	80027bc <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e2c4      	b.n	8004c44 <HAL_RCC_OscConfig+0x106c>
 80046ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046be:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80046c2:	2202      	movs	r2, #2
 80046c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	fa93 f2a3 	rbit	r2, r3
 80046d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046d8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046e2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80046e6:	2202      	movs	r2, #2
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	fa93 f2a3 	rbit	r2, r3
 80046f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046fc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004700:	601a      	str	r2, [r3, #0]
  return result;
 8004702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004706:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800470a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800470c:	fab3 f383 	clz	r3, r3
 8004710:	b2db      	uxtb	r3, r3
 8004712:	095b      	lsrs	r3, r3, #5
 8004714:	b2db      	uxtb	r3, r3
 8004716:	f043 0302 	orr.w	r3, r3, #2
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d102      	bne.n	8004726 <HAL_RCC_OscConfig+0xb4e>
 8004720:	4b43      	ldr	r3, [pc, #268]	; (8004830 <HAL_RCC_OscConfig+0xc58>)
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	e013      	b.n	800474e <HAL_RCC_OscConfig+0xb76>
 8004726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800472a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800472e:	2202      	movs	r2, #2
 8004730:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004736:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	fa93 f2a3 	rbit	r2, r3
 8004740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004744:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	4b39      	ldr	r3, [pc, #228]	; (8004830 <HAL_RCC_OscConfig+0xc58>)
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004752:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004756:	2102      	movs	r1, #2
 8004758:	6011      	str	r1, [r2, #0]
 800475a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800475e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004762:	6812      	ldr	r2, [r2, #0]
 8004764:	fa92 f1a2 	rbit	r1, r2
 8004768:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800476c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004770:	6011      	str	r1, [r2, #0]
  return result;
 8004772:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004776:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800477a:	6812      	ldr	r2, [r2, #0]
 800477c:	fab2 f282 	clz	r2, r2
 8004780:	b2d2      	uxtb	r2, r2
 8004782:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	f002 021f 	and.w	r2, r2, #31
 800478c:	2101      	movs	r1, #1
 800478e:	fa01 f202 	lsl.w	r2, r1, r2
 8004792:	4013      	ands	r3, r2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d184      	bne.n	80046a2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004798:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800479c:	2b01      	cmp	r3, #1
 800479e:	d105      	bne.n	80047ac <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047a0:	4b23      	ldr	r3, [pc, #140]	; (8004830 <HAL_RCC_OscConfig+0xc58>)
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	4a22      	ldr	r2, [pc, #136]	; (8004830 <HAL_RCC_OscConfig+0xc58>)
 80047a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047aa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 8242 	beq.w	8004c42 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047be:	4b1c      	ldr	r3, [pc, #112]	; (8004830 <HAL_RCC_OscConfig+0xc58>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f003 030c 	and.w	r3, r3, #12
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	f000 8213 	beq.w	8004bf2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	f040 8162 	bne.w	8004aa2 <HAL_RCC_OscConfig+0xeca>
 80047de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80047e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047f0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	fa93 f2a3 	rbit	r2, r3
 80047fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047fe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004802:	601a      	str	r2, [r3, #0]
  return result;
 8004804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004808:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800480c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800480e:	fab3 f383 	clz	r3, r3
 8004812:	b2db      	uxtb	r3, r3
 8004814:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004818:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	461a      	mov	r2, r3
 8004820:	2300      	movs	r3, #0
 8004822:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004824:	f7fd ffca 	bl	80027bc <HAL_GetTick>
 8004828:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800482c:	e00c      	b.n	8004848 <HAL_RCC_OscConfig+0xc70>
 800482e:	bf00      	nop
 8004830:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004834:	f7fd ffc2 	bl	80027bc <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e1fd      	b.n	8004c44 <HAL_RCC_OscConfig+0x106c>
 8004848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800484c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004850:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004854:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800485a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	fa93 f2a3 	rbit	r2, r3
 8004864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004868:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800486c:	601a      	str	r2, [r3, #0]
  return result;
 800486e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004872:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004876:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004878:	fab3 f383 	clz	r3, r3
 800487c:	b2db      	uxtb	r3, r3
 800487e:	095b      	lsrs	r3, r3, #5
 8004880:	b2db      	uxtb	r3, r3
 8004882:	f043 0301 	orr.w	r3, r3, #1
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b01      	cmp	r3, #1
 800488a:	d102      	bne.n	8004892 <HAL_RCC_OscConfig+0xcba>
 800488c:	4bb0      	ldr	r3, [pc, #704]	; (8004b50 <HAL_RCC_OscConfig+0xf78>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	e027      	b.n	80048e2 <HAL_RCC_OscConfig+0xd0a>
 8004892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004896:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800489a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800489e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	fa93 f2a3 	rbit	r2, r3
 80048ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80048b6:	601a      	str	r2, [r3, #0]
 80048b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048bc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80048c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ca:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	fa93 f2a3 	rbit	r2, r3
 80048d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048d8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	4b9c      	ldr	r3, [pc, #624]	; (8004b50 <HAL_RCC_OscConfig+0xf78>)
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048e6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80048ea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80048ee:	6011      	str	r1, [r2, #0]
 80048f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048f4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80048f8:	6812      	ldr	r2, [r2, #0]
 80048fa:	fa92 f1a2 	rbit	r1, r2
 80048fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004902:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004906:	6011      	str	r1, [r2, #0]
  return result;
 8004908:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800490c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004910:	6812      	ldr	r2, [r2, #0]
 8004912:	fab2 f282 	clz	r2, r2
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	f042 0220 	orr.w	r2, r2, #32
 800491c:	b2d2      	uxtb	r2, r2
 800491e:	f002 021f 	and.w	r2, r2, #31
 8004922:	2101      	movs	r1, #1
 8004924:	fa01 f202 	lsl.w	r2, r1, r2
 8004928:	4013      	ands	r3, r2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d182      	bne.n	8004834 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800492e:	4b88      	ldr	r3, [pc, #544]	; (8004b50 <HAL_RCC_OscConfig+0xf78>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800493a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004946:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	430b      	orrs	r3, r1
 8004950:	497f      	ldr	r1, [pc, #508]	; (8004b50 <HAL_RCC_OscConfig+0xf78>)
 8004952:	4313      	orrs	r3, r2
 8004954:	604b      	str	r3, [r1, #4]
 8004956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800495a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800495e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004962:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004968:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	fa93 f2a3 	rbit	r2, r3
 8004972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004976:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800497a:	601a      	str	r2, [r3, #0]
  return result;
 800497c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004980:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004984:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004986:	fab3 f383 	clz	r3, r3
 800498a:	b2db      	uxtb	r3, r3
 800498c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004990:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	461a      	mov	r2, r3
 8004998:	2301      	movs	r3, #1
 800499a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800499c:	f7fd ff0e 	bl	80027bc <HAL_GetTick>
 80049a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049a4:	e009      	b.n	80049ba <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049a6:	f7fd ff09 	bl	80027bc <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e144      	b.n	8004c44 <HAL_RCC_OscConfig+0x106c>
 80049ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049be:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80049c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049cc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	fa93 f2a3 	rbit	r2, r3
 80049d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049da:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80049de:	601a      	str	r2, [r3, #0]
  return result;
 80049e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049e4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80049e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049ea:	fab3 f383 	clz	r3, r3
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	f043 0301 	orr.w	r3, r3, #1
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d102      	bne.n	8004a04 <HAL_RCC_OscConfig+0xe2c>
 80049fe:	4b54      	ldr	r3, [pc, #336]	; (8004b50 <HAL_RCC_OscConfig+0xf78>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	e027      	b.n	8004a54 <HAL_RCC_OscConfig+0xe7c>
 8004a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a08:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004a0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a16:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	fa93 f2a3 	rbit	r2, r3
 8004a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a24:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a2e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004a32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a3c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	fa93 f2a3 	rbit	r2, r3
 8004a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a4a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	4b3f      	ldr	r3, [pc, #252]	; (8004b50 <HAL_RCC_OscConfig+0xf78>)
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a58:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004a5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004a60:	6011      	str	r1, [r2, #0]
 8004a62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a66:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004a6a:	6812      	ldr	r2, [r2, #0]
 8004a6c:	fa92 f1a2 	rbit	r1, r2
 8004a70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a74:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004a78:	6011      	str	r1, [r2, #0]
  return result;
 8004a7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a7e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004a82:	6812      	ldr	r2, [r2, #0]
 8004a84:	fab2 f282 	clz	r2, r2
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	f042 0220 	orr.w	r2, r2, #32
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	f002 021f 	and.w	r2, r2, #31
 8004a94:	2101      	movs	r1, #1
 8004a96:	fa01 f202 	lsl.w	r2, r1, r2
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d082      	beq.n	80049a6 <HAL_RCC_OscConfig+0xdce>
 8004aa0:	e0cf      	b.n	8004c42 <HAL_RCC_OscConfig+0x106a>
 8004aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aa6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004aaa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004aae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ab4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	fa93 f2a3 	rbit	r2, r3
 8004abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ac2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004ac6:	601a      	str	r2, [r3, #0]
  return result;
 8004ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004acc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004ad0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad2:	fab3 f383 	clz	r3, r3
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004adc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae8:	f7fd fe68 	bl	80027bc <HAL_GetTick>
 8004aec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004af0:	e009      	b.n	8004b06 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004af2:	f7fd fe63 	bl	80027bc <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e09e      	b.n	8004c44 <HAL_RCC_OscConfig+0x106c>
 8004b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b0a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004b0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b18:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	fa93 f2a3 	rbit	r2, r3
 8004b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b26:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004b2a:	601a      	str	r2, [r3, #0]
  return result;
 8004b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b30:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004b34:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b36:	fab3 f383 	clz	r3, r3
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	095b      	lsrs	r3, r3, #5
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	f043 0301 	orr.w	r3, r3, #1
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d104      	bne.n	8004b54 <HAL_RCC_OscConfig+0xf7c>
 8004b4a:	4b01      	ldr	r3, [pc, #4]	; (8004b50 <HAL_RCC_OscConfig+0xf78>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	e029      	b.n	8004ba4 <HAL_RCC_OscConfig+0xfcc>
 8004b50:	40021000 	.word	0x40021000
 8004b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b58:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004b5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b66:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	fa93 f2a3 	rbit	r2, r3
 8004b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b74:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b7e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004b82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b8c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	fa93 f2a3 	rbit	r2, r3
 8004b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b9a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	4b2b      	ldr	r3, [pc, #172]	; (8004c50 <HAL_RCC_OscConfig+0x1078>)
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ba8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004bac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004bb0:	6011      	str	r1, [r2, #0]
 8004bb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004bb6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004bba:	6812      	ldr	r2, [r2, #0]
 8004bbc:	fa92 f1a2 	rbit	r1, r2
 8004bc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004bc4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004bc8:	6011      	str	r1, [r2, #0]
  return result;
 8004bca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004bce:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004bd2:	6812      	ldr	r2, [r2, #0]
 8004bd4:	fab2 f282 	clz	r2, r2
 8004bd8:	b2d2      	uxtb	r2, r2
 8004bda:	f042 0220 	orr.w	r2, r2, #32
 8004bde:	b2d2      	uxtb	r2, r2
 8004be0:	f002 021f 	and.w	r2, r2, #31
 8004be4:	2101      	movs	r1, #1
 8004be6:	fa01 f202 	lsl.w	r2, r1, r2
 8004bea:	4013      	ands	r3, r2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d180      	bne.n	8004af2 <HAL_RCC_OscConfig+0xf1a>
 8004bf0:	e027      	b.n	8004c42 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bf6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e01e      	b.n	8004c44 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c06:	4b12      	ldr	r3, [pc, #72]	; (8004c50 <HAL_RCC_OscConfig+0x1078>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c0e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004c12:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d10b      	bne.n	8004c3e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004c26:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004c2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d001      	beq.n	8004c42 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e000      	b.n	8004c44 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	40021000 	.word	0x40021000

08004c54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b09e      	sub	sp, #120	; 0x78
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e162      	b.n	8004f32 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c6c:	4b90      	ldr	r3, [pc, #576]	; (8004eb0 <HAL_RCC_ClockConfig+0x25c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d910      	bls.n	8004c9c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c7a:	4b8d      	ldr	r3, [pc, #564]	; (8004eb0 <HAL_RCC_ClockConfig+0x25c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f023 0207 	bic.w	r2, r3, #7
 8004c82:	498b      	ldr	r1, [pc, #556]	; (8004eb0 <HAL_RCC_ClockConfig+0x25c>)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c8a:	4b89      	ldr	r3, [pc, #548]	; (8004eb0 <HAL_RCC_ClockConfig+0x25c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d001      	beq.n	8004c9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e14a      	b.n	8004f32 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d008      	beq.n	8004cba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ca8:	4b82      	ldr	r3, [pc, #520]	; (8004eb4 <HAL_RCC_ClockConfig+0x260>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	497f      	ldr	r1, [pc, #508]	; (8004eb4 <HAL_RCC_ClockConfig+0x260>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 80dc 	beq.w	8004e80 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d13c      	bne.n	8004d4a <HAL_RCC_ClockConfig+0xf6>
 8004cd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cd4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cd8:	fa93 f3a3 	rbit	r3, r3
 8004cdc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ce0:	fab3 f383 	clz	r3, r3
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	f043 0301 	orr.w	r3, r3, #1
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d102      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xa6>
 8004cf4:	4b6f      	ldr	r3, [pc, #444]	; (8004eb4 <HAL_RCC_ClockConfig+0x260>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	e00f      	b.n	8004d1a <HAL_RCC_ClockConfig+0xc6>
 8004cfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cfe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d02:	fa93 f3a3 	rbit	r3, r3
 8004d06:	667b      	str	r3, [r7, #100]	; 0x64
 8004d08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d0c:	663b      	str	r3, [r7, #96]	; 0x60
 8004d0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d10:	fa93 f3a3 	rbit	r3, r3
 8004d14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d16:	4b67      	ldr	r3, [pc, #412]	; (8004eb4 <HAL_RCC_ClockConfig+0x260>)
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d1e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d22:	fa92 f2a2 	rbit	r2, r2
 8004d26:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004d28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d2a:	fab2 f282 	clz	r2, r2
 8004d2e:	b2d2      	uxtb	r2, r2
 8004d30:	f042 0220 	orr.w	r2, r2, #32
 8004d34:	b2d2      	uxtb	r2, r2
 8004d36:	f002 021f 	and.w	r2, r2, #31
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8004d40:	4013      	ands	r3, r2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d17b      	bne.n	8004e3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e0f3      	b.n	8004f32 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d13c      	bne.n	8004dcc <HAL_RCC_ClockConfig+0x178>
 8004d52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d5a:	fa93 f3a3 	rbit	r3, r3
 8004d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d62:	fab3 f383 	clz	r3, r3
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	095b      	lsrs	r3, r3, #5
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	f043 0301 	orr.w	r3, r3, #1
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d102      	bne.n	8004d7c <HAL_RCC_ClockConfig+0x128>
 8004d76:	4b4f      	ldr	r3, [pc, #316]	; (8004eb4 <HAL_RCC_ClockConfig+0x260>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	e00f      	b.n	8004d9c <HAL_RCC_ClockConfig+0x148>
 8004d7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d80:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d84:	fa93 f3a3 	rbit	r3, r3
 8004d88:	647b      	str	r3, [r7, #68]	; 0x44
 8004d8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d8e:	643b      	str	r3, [r7, #64]	; 0x40
 8004d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d92:	fa93 f3a3 	rbit	r3, r3
 8004d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d98:	4b46      	ldr	r3, [pc, #280]	; (8004eb4 <HAL_RCC_ClockConfig+0x260>)
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004da0:	63ba      	str	r2, [r7, #56]	; 0x38
 8004da2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004da4:	fa92 f2a2 	rbit	r2, r2
 8004da8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004daa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dac:	fab2 f282 	clz	r2, r2
 8004db0:	b2d2      	uxtb	r2, r2
 8004db2:	f042 0220 	orr.w	r2, r2, #32
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	f002 021f 	and.w	r2, r2, #31
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d13a      	bne.n	8004e3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e0b2      	b.n	8004f32 <HAL_RCC_ClockConfig+0x2de>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd2:	fa93 f3a3 	rbit	r3, r3
 8004dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dda:	fab3 f383 	clz	r3, r3
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	095b      	lsrs	r3, r3, #5
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	f043 0301 	orr.w	r3, r3, #1
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d102      	bne.n	8004df4 <HAL_RCC_ClockConfig+0x1a0>
 8004dee:	4b31      	ldr	r3, [pc, #196]	; (8004eb4 <HAL_RCC_ClockConfig+0x260>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	e00d      	b.n	8004e10 <HAL_RCC_ClockConfig+0x1bc>
 8004df4:	2302      	movs	r3, #2
 8004df6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfa:	fa93 f3a3 	rbit	r3, r3
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8004e00:	2302      	movs	r3, #2
 8004e02:	623b      	str	r3, [r7, #32]
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	fa93 f3a3 	rbit	r3, r3
 8004e0a:	61fb      	str	r3, [r7, #28]
 8004e0c:	4b29      	ldr	r3, [pc, #164]	; (8004eb4 <HAL_RCC_ClockConfig+0x260>)
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	2202      	movs	r2, #2
 8004e12:	61ba      	str	r2, [r7, #24]
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	fa92 f2a2 	rbit	r2, r2
 8004e1a:	617a      	str	r2, [r7, #20]
  return result;
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	fab2 f282 	clz	r2, r2
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	f042 0220 	orr.w	r2, r2, #32
 8004e28:	b2d2      	uxtb	r2, r2
 8004e2a:	f002 021f 	and.w	r2, r2, #31
 8004e2e:	2101      	movs	r1, #1
 8004e30:	fa01 f202 	lsl.w	r2, r1, r2
 8004e34:	4013      	ands	r3, r2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e079      	b.n	8004f32 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e3e:	4b1d      	ldr	r3, [pc, #116]	; (8004eb4 <HAL_RCC_ClockConfig+0x260>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f023 0203 	bic.w	r2, r3, #3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	491a      	ldr	r1, [pc, #104]	; (8004eb4 <HAL_RCC_ClockConfig+0x260>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e50:	f7fd fcb4 	bl	80027bc <HAL_GetTick>
 8004e54:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e56:	e00a      	b.n	8004e6e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e58:	f7fd fcb0 	bl	80027bc <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e061      	b.n	8004f32 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e6e:	4b11      	ldr	r3, [pc, #68]	; (8004eb4 <HAL_RCC_ClockConfig+0x260>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f003 020c 	and.w	r2, r3, #12
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d1eb      	bne.n	8004e58 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e80:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <HAL_RCC_ClockConfig+0x25c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0307 	and.w	r3, r3, #7
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d214      	bcs.n	8004eb8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e8e:	4b08      	ldr	r3, [pc, #32]	; (8004eb0 <HAL_RCC_ClockConfig+0x25c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f023 0207 	bic.w	r2, r3, #7
 8004e96:	4906      	ldr	r1, [pc, #24]	; (8004eb0 <HAL_RCC_ClockConfig+0x25c>)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e9e:	4b04      	ldr	r3, [pc, #16]	; (8004eb0 <HAL_RCC_ClockConfig+0x25c>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d005      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e040      	b.n	8004f32 <HAL_RCC_ClockConfig+0x2de>
 8004eb0:	40022000 	.word	0x40022000
 8004eb4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d008      	beq.n	8004ed6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ec4:	4b1d      	ldr	r3, [pc, #116]	; (8004f3c <HAL_RCC_ClockConfig+0x2e8>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	491a      	ldr	r1, [pc, #104]	; (8004f3c <HAL_RCC_ClockConfig+0x2e8>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0308 	and.w	r3, r3, #8
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d009      	beq.n	8004ef6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ee2:	4b16      	ldr	r3, [pc, #88]	; (8004f3c <HAL_RCC_ClockConfig+0x2e8>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	4912      	ldr	r1, [pc, #72]	; (8004f3c <HAL_RCC_ClockConfig+0x2e8>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004ef6:	f000 f829 	bl	8004f4c <HAL_RCC_GetSysClockFreq>
 8004efa:	4601      	mov	r1, r0
 8004efc:	4b0f      	ldr	r3, [pc, #60]	; (8004f3c <HAL_RCC_ClockConfig+0x2e8>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f04:	22f0      	movs	r2, #240	; 0xf0
 8004f06:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	fa92 f2a2 	rbit	r2, r2
 8004f0e:	60fa      	str	r2, [r7, #12]
  return result;
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	fab2 f282 	clz	r2, r2
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	40d3      	lsrs	r3, r2
 8004f1a:	4a09      	ldr	r2, [pc, #36]	; (8004f40 <HAL_RCC_ClockConfig+0x2ec>)
 8004f1c:	5cd3      	ldrb	r3, [r2, r3]
 8004f1e:	fa21 f303 	lsr.w	r3, r1, r3
 8004f22:	4a08      	ldr	r2, [pc, #32]	; (8004f44 <HAL_RCC_ClockConfig+0x2f0>)
 8004f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004f26:	4b08      	ldr	r3, [pc, #32]	; (8004f48 <HAL_RCC_ClockConfig+0x2f4>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fd fc02 	bl	8002734 <HAL_InitTick>
  
  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3778      	adds	r7, #120	; 0x78
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	08008790 	.word	0x08008790
 8004f44:	200001b8 	.word	0x200001b8
 8004f48:	200001bc 	.word	0x200001bc

08004f4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b08b      	sub	sp, #44	; 0x2c
 8004f50:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	61fb      	str	r3, [r7, #28]
 8004f56:	2300      	movs	r3, #0
 8004f58:	61bb      	str	r3, [r7, #24]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f5e:	2300      	movs	r3, #0
 8004f60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004f66:	4b29      	ldr	r3, [pc, #164]	; (800500c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	f003 030c 	and.w	r3, r3, #12
 8004f72:	2b04      	cmp	r3, #4
 8004f74:	d002      	beq.n	8004f7c <HAL_RCC_GetSysClockFreq+0x30>
 8004f76:	2b08      	cmp	r3, #8
 8004f78:	d003      	beq.n	8004f82 <HAL_RCC_GetSysClockFreq+0x36>
 8004f7a:	e03c      	b.n	8004ff6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f7c:	4b24      	ldr	r3, [pc, #144]	; (8005010 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004f7e:	623b      	str	r3, [r7, #32]
      break;
 8004f80:	e03c      	b.n	8004ffc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004f88:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004f8c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	fa92 f2a2 	rbit	r2, r2
 8004f94:	607a      	str	r2, [r7, #4]
  return result;
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	fab2 f282 	clz	r2, r2
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	40d3      	lsrs	r3, r2
 8004fa0:	4a1c      	ldr	r2, [pc, #112]	; (8005014 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004fa2:	5cd3      	ldrb	r3, [r2, r3]
 8004fa4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004fa6:	4b19      	ldr	r3, [pc, #100]	; (800500c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	220f      	movs	r2, #15
 8004fb0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	fa92 f2a2 	rbit	r2, r2
 8004fb8:	60fa      	str	r2, [r7, #12]
  return result;
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	fab2 f282 	clz	r2, r2
 8004fc0:	b2d2      	uxtb	r2, r2
 8004fc2:	40d3      	lsrs	r3, r2
 8004fc4:	4a14      	ldr	r2, [pc, #80]	; (8005018 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004fc6:	5cd3      	ldrb	r3, [r2, r3]
 8004fc8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d008      	beq.n	8004fe6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004fd4:	4a0e      	ldr	r2, [pc, #56]	; (8005010 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	fb02 f303 	mul.w	r3, r2, r3
 8004fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe4:	e004      	b.n	8004ff0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	4a0c      	ldr	r2, [pc, #48]	; (800501c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004fea:	fb02 f303 	mul.w	r3, r2, r3
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	623b      	str	r3, [r7, #32]
      break;
 8004ff4:	e002      	b.n	8004ffc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ff6:	4b06      	ldr	r3, [pc, #24]	; (8005010 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004ff8:	623b      	str	r3, [r7, #32]
      break;
 8004ffa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	372c      	adds	r7, #44	; 0x2c
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40021000 	.word	0x40021000
 8005010:	007a1200 	.word	0x007a1200
 8005014:	080087a8 	.word	0x080087a8
 8005018:	080087b8 	.word	0x080087b8
 800501c:	003d0900 	.word	0x003d0900

08005020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005024:	4b03      	ldr	r3, [pc, #12]	; (8005034 <HAL_RCC_GetHCLKFreq+0x14>)
 8005026:	681b      	ldr	r3, [r3, #0]
}
 8005028:	4618      	mov	r0, r3
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	200001b8 	.word	0x200001b8

08005038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800503e:	f7ff ffef 	bl	8005020 <HAL_RCC_GetHCLKFreq>
 8005042:	4601      	mov	r1, r0
 8005044:	4b0b      	ldr	r3, [pc, #44]	; (8005074 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800504c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005050:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	fa92 f2a2 	rbit	r2, r2
 8005058:	603a      	str	r2, [r7, #0]
  return result;
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	fab2 f282 	clz	r2, r2
 8005060:	b2d2      	uxtb	r2, r2
 8005062:	40d3      	lsrs	r3, r2
 8005064:	4a04      	ldr	r2, [pc, #16]	; (8005078 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005066:	5cd3      	ldrb	r3, [r2, r3]
 8005068:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800506c:	4618      	mov	r0, r3
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	40021000 	.word	0x40021000
 8005078:	080087a0 	.word	0x080087a0

0800507c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005082:	f7ff ffcd 	bl	8005020 <HAL_RCC_GetHCLKFreq>
 8005086:	4601      	mov	r1, r0
 8005088:	4b0b      	ldr	r3, [pc, #44]	; (80050b8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005090:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005094:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	fa92 f2a2 	rbit	r2, r2
 800509c:	603a      	str	r2, [r7, #0]
  return result;
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	fab2 f282 	clz	r2, r2
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	40d3      	lsrs	r3, r2
 80050a8:	4a04      	ldr	r2, [pc, #16]	; (80050bc <HAL_RCC_GetPCLK2Freq+0x40>)
 80050aa:	5cd3      	ldrb	r3, [r2, r3]
 80050ac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80050b0:	4618      	mov	r0, r3
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	40021000 	.word	0x40021000
 80050bc:	080087a0 	.word	0x080087a0

080050c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b092      	sub	sp, #72	; 0x48
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80050d0:	2300      	movs	r3, #0
 80050d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f000 80d4 	beq.w	800528c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050e4:	4b4e      	ldr	r3, [pc, #312]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10e      	bne.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050f0:	4b4b      	ldr	r3, [pc, #300]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050f2:	69db      	ldr	r3, [r3, #28]
 80050f4:	4a4a      	ldr	r2, [pc, #296]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050fa:	61d3      	str	r3, [r2, #28]
 80050fc:	4b48      	ldr	r3, [pc, #288]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005104:	60bb      	str	r3, [r7, #8]
 8005106:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005108:	2301      	movs	r3, #1
 800510a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800510e:	4b45      	ldr	r3, [pc, #276]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005116:	2b00      	cmp	r3, #0
 8005118:	d118      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800511a:	4b42      	ldr	r3, [pc, #264]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a41      	ldr	r2, [pc, #260]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005124:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005126:	f7fd fb49 	bl	80027bc <HAL_GetTick>
 800512a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800512c:	e008      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800512e:	f7fd fb45 	bl	80027bc <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	2b64      	cmp	r3, #100	; 0x64
 800513a:	d901      	bls.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e14b      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005140:	4b38      	ldr	r3, [pc, #224]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0f0      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800514c:	4b34      	ldr	r3, [pc, #208]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005154:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 8084 	beq.w	8005266 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005166:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005168:	429a      	cmp	r2, r3
 800516a:	d07c      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800516c:	4b2c      	ldr	r3, [pc, #176]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005176:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800517a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800517c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517e:	fa93 f3a3 	rbit	r3, r3
 8005182:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005186:	fab3 f383 	clz	r3, r3
 800518a:	b2db      	uxtb	r3, r3
 800518c:	461a      	mov	r2, r3
 800518e:	4b26      	ldr	r3, [pc, #152]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005190:	4413      	add	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	461a      	mov	r2, r3
 8005196:	2301      	movs	r3, #1
 8005198:	6013      	str	r3, [r2, #0]
 800519a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800519e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a2:	fa93 f3a3 	rbit	r3, r3
 80051a6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80051a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051aa:	fab3 f383 	clz	r3, r3
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	461a      	mov	r2, r3
 80051b2:	4b1d      	ldr	r3, [pc, #116]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051b4:	4413      	add	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	461a      	mov	r2, r3
 80051ba:	2300      	movs	r3, #0
 80051bc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80051be:	4a18      	ldr	r2, [pc, #96]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051c2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80051c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d04b      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ce:	f7fd faf5 	bl	80027bc <HAL_GetTick>
 80051d2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d4:	e00a      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051d6:	f7fd faf1 	bl	80027bc <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d901      	bls.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e0f5      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80051ec:	2302      	movs	r3, #2
 80051ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	fa93 f3a3 	rbit	r3, r3
 80051f6:	627b      	str	r3, [r7, #36]	; 0x24
 80051f8:	2302      	movs	r3, #2
 80051fa:	623b      	str	r3, [r7, #32]
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	fa93 f3a3 	rbit	r3, r3
 8005202:	61fb      	str	r3, [r7, #28]
  return result;
 8005204:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005206:	fab3 f383 	clz	r3, r3
 800520a:	b2db      	uxtb	r3, r3
 800520c:	095b      	lsrs	r3, r3, #5
 800520e:	b2db      	uxtb	r3, r3
 8005210:	f043 0302 	orr.w	r3, r3, #2
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d108      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800521a:	4b01      	ldr	r3, [pc, #4]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	e00d      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005220:	40021000 	.word	0x40021000
 8005224:	40007000 	.word	0x40007000
 8005228:	10908100 	.word	0x10908100
 800522c:	2302      	movs	r3, #2
 800522e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	fa93 f3a3 	rbit	r3, r3
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	4b69      	ldr	r3, [pc, #420]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	2202      	movs	r2, #2
 800523e:	613a      	str	r2, [r7, #16]
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	fa92 f2a2 	rbit	r2, r2
 8005246:	60fa      	str	r2, [r7, #12]
  return result;
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	fab2 f282 	clz	r2, r2
 800524e:	b2d2      	uxtb	r2, r2
 8005250:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	f002 021f 	and.w	r2, r2, #31
 800525a:	2101      	movs	r1, #1
 800525c:	fa01 f202 	lsl.w	r2, r1, r2
 8005260:	4013      	ands	r3, r2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d0b7      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005266:	4b5e      	ldr	r3, [pc, #376]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	495b      	ldr	r1, [pc, #364]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005274:	4313      	orrs	r3, r2
 8005276:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005278:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800527c:	2b01      	cmp	r3, #1
 800527e:	d105      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005280:	4b57      	ldr	r3, [pc, #348]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	4a56      	ldr	r2, [pc, #344]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800528a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d008      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005298:	4b51      	ldr	r3, [pc, #324]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800529a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529c:	f023 0203 	bic.w	r2, r3, #3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	494e      	ldr	r1, [pc, #312]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0320 	and.w	r3, r3, #32
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d008      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052b6:	4b4a      	ldr	r3, [pc, #296]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80052b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ba:	f023 0210 	bic.w	r2, r3, #16
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	4947      	ldr	r1, [pc, #284]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d008      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80052d4:	4b42      	ldr	r3, [pc, #264]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e0:	493f      	ldr	r1, [pc, #252]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d008      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052f2:	4b3b      	ldr	r3, [pc, #236]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80052f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f6:	f023 0220 	bic.w	r2, r3, #32
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	4938      	ldr	r1, [pc, #224]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005300:	4313      	orrs	r3, r2
 8005302:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d008      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005310:	4b33      	ldr	r3, [pc, #204]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005314:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	4930      	ldr	r1, [pc, #192]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800531e:	4313      	orrs	r3, r2
 8005320:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800532a:	2b00      	cmp	r3, #0
 800532c:	d008      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800532e:	4b2c      	ldr	r3, [pc, #176]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	4929      	ldr	r1, [pc, #164]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800533c:	4313      	orrs	r3, r2
 800533e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005348:	2b00      	cmp	r3, #0
 800534a:	d008      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800534c:	4b24      	ldr	r3, [pc, #144]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005350:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	4921      	ldr	r1, [pc, #132]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800535a:	4313      	orrs	r3, r2
 800535c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d008      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800536a:	4b1d      	ldr	r3, [pc, #116]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800536c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	491a      	ldr	r1, [pc, #104]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005378:	4313      	orrs	r3, r2
 800537a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d008      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005388:	4b15      	ldr	r3, [pc, #84]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800538a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	4912      	ldr	r1, [pc, #72]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005396:	4313      	orrs	r3, r2
 8005398:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d008      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80053a6:	4b0e      	ldr	r3, [pc, #56]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80053a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053aa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b2:	490b      	ldr	r1, [pc, #44]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d008      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80053c4:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80053c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	4903      	ldr	r1, [pc, #12]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3748      	adds	r7, #72	; 0x48
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	40021000 	.word	0x40021000

080053e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e09d      	b.n	8005532 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d108      	bne.n	8005410 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005406:	d009      	beq.n	800541c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	61da      	str	r2, [r3, #28]
 800540e:	e005      	b.n	800541c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d106      	bne.n	800543c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7fc ff5c 	bl	80022f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005452:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800545c:	d902      	bls.n	8005464 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800545e:	2300      	movs	r3, #0
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	e002      	b.n	800546a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005468:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005472:	d007      	beq.n	8005484 <HAL_SPI_Init+0xa0>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800547c:	d002      	beq.n	8005484 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005494:	431a      	orrs	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	431a      	orrs	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054bc:	431a      	orrs	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c6:	ea42 0103 	orr.w	r1, r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	0c1b      	lsrs	r3, r3, #16
 80054e0:	f003 0204 	and.w	r2, r3, #4
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	f003 0310 	and.w	r3, r3, #16
 80054ec:	431a      	orrs	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f2:	f003 0308 	and.w	r3, r3, #8
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005500:	ea42 0103 	orr.w	r1, r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69da      	ldr	r2, [r3, #28]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005520:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b088      	sub	sp, #32
 800553e:	af00      	add	r7, sp, #0
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	60b9      	str	r1, [r7, #8]
 8005544:	603b      	str	r3, [r7, #0]
 8005546:	4613      	mov	r3, r2
 8005548:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005554:	2b01      	cmp	r3, #1
 8005556:	d101      	bne.n	800555c <HAL_SPI_Transmit+0x22>
 8005558:	2302      	movs	r3, #2
 800555a:	e158      	b.n	800580e <HAL_SPI_Transmit+0x2d4>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005564:	f7fd f92a 	bl	80027bc <HAL_GetTick>
 8005568:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800556a:	88fb      	ldrh	r3, [r7, #6]
 800556c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b01      	cmp	r3, #1
 8005578:	d002      	beq.n	8005580 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800557a:	2302      	movs	r3, #2
 800557c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800557e:	e13d      	b.n	80057fc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <HAL_SPI_Transmit+0x52>
 8005586:	88fb      	ldrh	r3, [r7, #6]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d102      	bne.n	8005592 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005590:	e134      	b.n	80057fc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2203      	movs	r2, #3
 8005596:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	88fa      	ldrh	r2, [r7, #6]
 80055aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	88fa      	ldrh	r2, [r7, #6]
 80055b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055dc:	d10f      	bne.n	80055fe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005608:	2b40      	cmp	r3, #64	; 0x40
 800560a:	d007      	beq.n	800561c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800561a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005624:	d94b      	bls.n	80056be <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <HAL_SPI_Transmit+0xfa>
 800562e:	8afb      	ldrh	r3, [r7, #22]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d13e      	bne.n	80056b2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005638:	881a      	ldrh	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005644:	1c9a      	adds	r2, r3, #2
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800564e:	b29b      	uxth	r3, r3
 8005650:	3b01      	subs	r3, #1
 8005652:	b29a      	uxth	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005658:	e02b      	b.n	80056b2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b02      	cmp	r3, #2
 8005666:	d112      	bne.n	800568e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566c:	881a      	ldrh	r2, [r3, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005678:	1c9a      	adds	r2, r3, #2
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005682:	b29b      	uxth	r3, r3
 8005684:	3b01      	subs	r3, #1
 8005686:	b29a      	uxth	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800568c:	e011      	b.n	80056b2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800568e:	f7fd f895 	bl	80027bc <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	429a      	cmp	r2, r3
 800569c:	d803      	bhi.n	80056a6 <HAL_SPI_Transmit+0x16c>
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a4:	d102      	bne.n	80056ac <HAL_SPI_Transmit+0x172>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d102      	bne.n	80056b2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056b0:	e0a4      	b.n	80057fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1ce      	bne.n	800565a <HAL_SPI_Transmit+0x120>
 80056bc:	e07c      	b.n	80057b8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <HAL_SPI_Transmit+0x192>
 80056c6:	8afb      	ldrh	r3, [r7, #22]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d170      	bne.n	80057ae <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d912      	bls.n	80056fc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056da:	881a      	ldrh	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e6:	1c9a      	adds	r2, r3, #2
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3b02      	subs	r3, #2
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056fa:	e058      	b.n	80057ae <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	330c      	adds	r3, #12
 8005706:	7812      	ldrb	r2, [r2, #0]
 8005708:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570e:	1c5a      	adds	r2, r3, #1
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005718:	b29b      	uxth	r3, r3
 800571a:	3b01      	subs	r3, #1
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005722:	e044      	b.n	80057ae <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b02      	cmp	r3, #2
 8005730:	d12b      	bne.n	800578a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005736:	b29b      	uxth	r3, r3
 8005738:	2b01      	cmp	r3, #1
 800573a:	d912      	bls.n	8005762 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005740:	881a      	ldrh	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574c:	1c9a      	adds	r2, r3, #2
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005756:	b29b      	uxth	r3, r3
 8005758:	3b02      	subs	r3, #2
 800575a:	b29a      	uxth	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005760:	e025      	b.n	80057ae <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	330c      	adds	r3, #12
 800576c:	7812      	ldrb	r2, [r2, #0]
 800576e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800577e:	b29b      	uxth	r3, r3
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005788:	e011      	b.n	80057ae <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800578a:	f7fd f817 	bl	80027bc <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d803      	bhi.n	80057a2 <HAL_SPI_Transmit+0x268>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a0:	d102      	bne.n	80057a8 <HAL_SPI_Transmit+0x26e>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d102      	bne.n	80057ae <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057ac:	e026      	b.n	80057fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1b5      	bne.n	8005724 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	6839      	ldr	r1, [r7, #0]
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 fce3 	bl	8006188 <SPI_EndRxTxTransaction>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2220      	movs	r2, #32
 80057cc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10a      	bne.n	80057ec <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057d6:	2300      	movs	r3, #0
 80057d8:	613b      	str	r3, [r7, #16]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	613b      	str	r3, [r7, #16]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	613b      	str	r3, [r7, #16]
 80057ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d002      	beq.n	80057fa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	77fb      	strb	r3, [r7, #31]
 80057f8:	e000      	b.n	80057fc <HAL_SPI_Transmit+0x2c2>
  }

error:
 80057fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800580c:	7ffb      	ldrb	r3, [r7, #31]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3720      	adds	r7, #32
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b088      	sub	sp, #32
 800581a:	af02      	add	r7, sp, #8
 800581c:	60f8      	str	r0, [r7, #12]
 800581e:	60b9      	str	r1, [r7, #8]
 8005820:	603b      	str	r3, [r7, #0]
 8005822:	4613      	mov	r3, r2
 8005824:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005832:	d112      	bne.n	800585a <HAL_SPI_Receive+0x44>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10e      	bne.n	800585a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2204      	movs	r2, #4
 8005840:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005844:	88fa      	ldrh	r2, [r7, #6]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	9300      	str	r3, [sp, #0]
 800584a:	4613      	mov	r3, r2
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	68b9      	ldr	r1, [r7, #8]
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 f910 	bl	8005a76 <HAL_SPI_TransmitReceive>
 8005856:	4603      	mov	r3, r0
 8005858:	e109      	b.n	8005a6e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005860:	2b01      	cmp	r3, #1
 8005862:	d101      	bne.n	8005868 <HAL_SPI_Receive+0x52>
 8005864:	2302      	movs	r3, #2
 8005866:	e102      	b.n	8005a6e <HAL_SPI_Receive+0x258>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005870:	f7fc ffa4 	bl	80027bc <HAL_GetTick>
 8005874:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b01      	cmp	r3, #1
 8005880:	d002      	beq.n	8005888 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005882:	2302      	movs	r3, #2
 8005884:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005886:	e0e9      	b.n	8005a5c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d002      	beq.n	8005894 <HAL_SPI_Receive+0x7e>
 800588e:	88fb      	ldrh	r3, [r7, #6]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d102      	bne.n	800589a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005898:	e0e0      	b.n	8005a5c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2204      	movs	r2, #4
 800589e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	88fa      	ldrh	r2, [r7, #6]
 80058b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	88fa      	ldrh	r2, [r7, #6]
 80058ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058e4:	d908      	bls.n	80058f8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058f4:	605a      	str	r2, [r3, #4]
 80058f6:	e007      	b.n	8005908 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685a      	ldr	r2, [r3, #4]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005906:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005910:	d10f      	bne.n	8005932 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005920:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005930:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593c:	2b40      	cmp	r3, #64	; 0x40
 800593e:	d007      	beq.n	8005950 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800594e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005958:	d867      	bhi.n	8005a2a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800595a:	e030      	b.n	80059be <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b01      	cmp	r3, #1
 8005968:	d117      	bne.n	800599a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f103 020c 	add.w	r2, r3, #12
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	7812      	ldrb	r2, [r2, #0]
 8005978:	b2d2      	uxtb	r2, r2
 800597a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005980:	1c5a      	adds	r2, r3, #1
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800598c:	b29b      	uxth	r3, r3
 800598e:	3b01      	subs	r3, #1
 8005990:	b29a      	uxth	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005998:	e011      	b.n	80059be <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800599a:	f7fc ff0f 	bl	80027bc <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d803      	bhi.n	80059b2 <HAL_SPI_Receive+0x19c>
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b0:	d102      	bne.n	80059b8 <HAL_SPI_Receive+0x1a2>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d102      	bne.n	80059be <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80059bc:	e04e      	b.n	8005a5c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1c8      	bne.n	800595c <HAL_SPI_Receive+0x146>
 80059ca:	e034      	b.n	8005a36 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d115      	bne.n	8005a06 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68da      	ldr	r2, [r3, #12]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e4:	b292      	uxth	r2, r2
 80059e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ec:	1c9a      	adds	r2, r3, #2
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005a04:	e011      	b.n	8005a2a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a06:	f7fc fed9 	bl	80027bc <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d803      	bhi.n	8005a1e <HAL_SPI_Receive+0x208>
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1c:	d102      	bne.n	8005a24 <HAL_SPI_Receive+0x20e>
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d102      	bne.n	8005a2a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005a28:	e018      	b.n	8005a5c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1ca      	bne.n	80059cc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	6839      	ldr	r1, [r7, #0]
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 fb4c 	bl	80060d8 <SPI_EndRxTransaction>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d002      	beq.n	8005a4c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	75fb      	strb	r3, [r7, #23]
 8005a58:	e000      	b.n	8005a5c <HAL_SPI_Receive+0x246>
  }

error :
 8005a5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3718      	adds	r7, #24
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b08a      	sub	sp, #40	; 0x28
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	60f8      	str	r0, [r7, #12]
 8005a7e:	60b9      	str	r1, [r7, #8]
 8005a80:	607a      	str	r2, [r7, #4]
 8005a82:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a84:	2301      	movs	r3, #1
 8005a86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d101      	bne.n	8005a9c <HAL_SPI_TransmitReceive+0x26>
 8005a98:	2302      	movs	r3, #2
 8005a9a:	e1fb      	b.n	8005e94 <HAL_SPI_TransmitReceive+0x41e>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005aa4:	f7fc fe8a 	bl	80027bc <HAL_GetTick>
 8005aa8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ab0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005ab8:	887b      	ldrh	r3, [r7, #2]
 8005aba:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005abc:	887b      	ldrh	r3, [r7, #2]
 8005abe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ac0:	7efb      	ldrb	r3, [r7, #27]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d00e      	beq.n	8005ae4 <HAL_SPI_TransmitReceive+0x6e>
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005acc:	d106      	bne.n	8005adc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d102      	bne.n	8005adc <HAL_SPI_TransmitReceive+0x66>
 8005ad6:	7efb      	ldrb	r3, [r7, #27]
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d003      	beq.n	8005ae4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005adc:	2302      	movs	r3, #2
 8005ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005ae2:	e1cd      	b.n	8005e80 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d005      	beq.n	8005af6 <HAL_SPI_TransmitReceive+0x80>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <HAL_SPI_TransmitReceive+0x80>
 8005af0:	887b      	ldrh	r3, [r7, #2]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d103      	bne.n	8005afe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005afc:	e1c0      	b.n	8005e80 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b04      	cmp	r3, #4
 8005b08:	d003      	beq.n	8005b12 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2205      	movs	r2, #5
 8005b0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	887a      	ldrh	r2, [r7, #2]
 8005b22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	887a      	ldrh	r2, [r7, #2]
 8005b2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	887a      	ldrh	r2, [r7, #2]
 8005b38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	887a      	ldrh	r2, [r7, #2]
 8005b3e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b54:	d802      	bhi.n	8005b5c <HAL_SPI_TransmitReceive+0xe6>
 8005b56:	8a3b      	ldrh	r3, [r7, #16]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d908      	bls.n	8005b6e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b6a:	605a      	str	r2, [r3, #4]
 8005b6c:	e007      	b.n	8005b7e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b7c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b88:	2b40      	cmp	r3, #64	; 0x40
 8005b8a:	d007      	beq.n	8005b9c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ba4:	d97c      	bls.n	8005ca0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d002      	beq.n	8005bb4 <HAL_SPI_TransmitReceive+0x13e>
 8005bae:	8a7b      	ldrh	r3, [r7, #18]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d169      	bne.n	8005c88 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb8:	881a      	ldrh	r2, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc4:	1c9a      	adds	r2, r3, #2
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bd8:	e056      	b.n	8005c88 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d11b      	bne.n	8005c20 <HAL_SPI_TransmitReceive+0x1aa>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d016      	beq.n	8005c20 <HAL_SPI_TransmitReceive+0x1aa>
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d113      	bne.n	8005c20 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfc:	881a      	ldrh	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c08:	1c9a      	adds	r2, r3, #2
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	3b01      	subs	r3, #1
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d11c      	bne.n	8005c68 <HAL_SPI_TransmitReceive+0x1f2>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d016      	beq.n	8005c68 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68da      	ldr	r2, [r3, #12]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	b292      	uxth	r2, r2
 8005c46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4c:	1c9a      	adds	r2, r3, #2
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c64:	2301      	movs	r3, #1
 8005c66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c68:	f7fc fda8 	bl	80027bc <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d807      	bhi.n	8005c88 <HAL_SPI_TransmitReceive+0x212>
 8005c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7e:	d003      	beq.n	8005c88 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005c86:	e0fb      	b.n	8005e80 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1a3      	bne.n	8005bda <HAL_SPI_TransmitReceive+0x164>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d19d      	bne.n	8005bda <HAL_SPI_TransmitReceive+0x164>
 8005c9e:	e0df      	b.n	8005e60 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d003      	beq.n	8005cb0 <HAL_SPI_TransmitReceive+0x23a>
 8005ca8:	8a7b      	ldrh	r3, [r7, #18]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	f040 80cb 	bne.w	8005e46 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d912      	bls.n	8005ce0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbe:	881a      	ldrh	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cca:	1c9a      	adds	r2, r3, #2
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	3b02      	subs	r3, #2
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cde:	e0b2      	b.n	8005e46 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	330c      	adds	r3, #12
 8005cea:	7812      	ldrb	r2, [r2, #0]
 8005cec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf2:	1c5a      	adds	r2, r3, #1
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d06:	e09e      	b.n	8005e46 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d134      	bne.n	8005d80 <HAL_SPI_TransmitReceive+0x30a>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d02f      	beq.n	8005d80 <HAL_SPI_TransmitReceive+0x30a>
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d12c      	bne.n	8005d80 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d912      	bls.n	8005d56 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d34:	881a      	ldrh	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d40:	1c9a      	adds	r2, r3, #2
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	3b02      	subs	r3, #2
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d54:	e012      	b.n	8005d7c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	330c      	adds	r3, #12
 8005d60:	7812      	ldrb	r2, [r2, #0]
 8005d62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	1c5a      	adds	r2, r3, #1
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	3b01      	subs	r3, #1
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d148      	bne.n	8005e20 <HAL_SPI_TransmitReceive+0x3aa>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d042      	beq.n	8005e20 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d923      	bls.n	8005dee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68da      	ldr	r2, [r3, #12]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db0:	b292      	uxth	r2, r2
 8005db2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db8:	1c9a      	adds	r2, r3, #2
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	3b02      	subs	r3, #2
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d81f      	bhi.n	8005e1c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005dea:	605a      	str	r2, [r3, #4]
 8005dec:	e016      	b.n	8005e1c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f103 020c 	add.w	r2, r3, #12
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	7812      	ldrb	r2, [r2, #0]
 8005dfc:	b2d2      	uxtb	r2, r2
 8005dfe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	3b01      	subs	r3, #1
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e20:	f7fc fccc 	bl	80027bc <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d803      	bhi.n	8005e38 <HAL_SPI_TransmitReceive+0x3c2>
 8005e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e36:	d102      	bne.n	8005e3e <HAL_SPI_TransmitReceive+0x3c8>
 8005e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d103      	bne.n	8005e46 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005e44:	e01c      	b.n	8005e80 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f47f af5b 	bne.w	8005d08 <HAL_SPI_TransmitReceive+0x292>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f47f af54 	bne.w	8005d08 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e60:	69fa      	ldr	r2, [r7, #28]
 8005e62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f000 f98f 	bl	8006188 <SPI_EndRxTxTransaction>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d006      	beq.n	8005e7e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2220      	movs	r2, #32
 8005e7a:	661a      	str	r2, [r3, #96]	; 0x60
 8005e7c:	e000      	b.n	8005e80 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005e7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3728      	adds	r7, #40	; 0x28
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b088      	sub	sp, #32
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	603b      	str	r3, [r7, #0]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005eac:	f7fc fc86 	bl	80027bc <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb4:	1a9b      	subs	r3, r3, r2
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	4413      	add	r3, r2
 8005eba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ebc:	f7fc fc7e 	bl	80027bc <HAL_GetTick>
 8005ec0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ec2:	4b39      	ldr	r3, [pc, #228]	; (8005fa8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	015b      	lsls	r3, r3, #5
 8005ec8:	0d1b      	lsrs	r3, r3, #20
 8005eca:	69fa      	ldr	r2, [r7, #28]
 8005ecc:	fb02 f303 	mul.w	r3, r2, r3
 8005ed0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ed2:	e054      	b.n	8005f7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eda:	d050      	beq.n	8005f7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005edc:	f7fc fc6e 	bl	80027bc <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	69fa      	ldr	r2, [r7, #28]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d902      	bls.n	8005ef2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d13d      	bne.n	8005f6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f0a:	d111      	bne.n	8005f30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f14:	d004      	beq.n	8005f20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f1e:	d107      	bne.n	8005f30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f38:	d10f      	bne.n	8005f5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f48:	601a      	str	r2, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e017      	b.n	8005f9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f74:	2300      	movs	r3, #0
 8005f76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	4013      	ands	r3, r2
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	bf0c      	ite	eq
 8005f8e:	2301      	moveq	r3, #1
 8005f90:	2300      	movne	r3, #0
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	461a      	mov	r2, r3
 8005f96:	79fb      	ldrb	r3, [r7, #7]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d19b      	bne.n	8005ed4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3720      	adds	r7, #32
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	200001b8 	.word	0x200001b8

08005fac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08a      	sub	sp, #40	; 0x28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
 8005fb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005fbe:	f7fc fbfd 	bl	80027bc <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	1a9b      	subs	r3, r3, r2
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	4413      	add	r3, r2
 8005fcc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005fce:	f7fc fbf5 	bl	80027bc <HAL_GetTick>
 8005fd2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	330c      	adds	r3, #12
 8005fda:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005fdc:	4b3d      	ldr	r3, [pc, #244]	; (80060d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	00da      	lsls	r2, r3, #3
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	0d1b      	lsrs	r3, r3, #20
 8005fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fee:	fb02 f303 	mul.w	r3, r2, r3
 8005ff2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005ff4:	e060      	b.n	80060b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005ffc:	d107      	bne.n	800600e <SPI_WaitFifoStateUntilTimeout+0x62>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d104      	bne.n	800600e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	b2db      	uxtb	r3, r3
 800600a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800600c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006014:	d050      	beq.n	80060b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006016:	f7fc fbd1 	bl	80027bc <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006022:	429a      	cmp	r2, r3
 8006024:	d902      	bls.n	800602c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	2b00      	cmp	r3, #0
 800602a:	d13d      	bne.n	80060a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800603a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006044:	d111      	bne.n	800606a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800604e:	d004      	beq.n	800605a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006058:	d107      	bne.n	800606a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006068:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006072:	d10f      	bne.n	8006094 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006092:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e010      	b.n	80060ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80060ae:	2300      	movs	r3, #0
 80060b0:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	3b01      	subs	r3, #1
 80060b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689a      	ldr	r2, [r3, #8]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	4013      	ands	r3, r2
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d196      	bne.n	8005ff6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3728      	adds	r7, #40	; 0x28
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	200001b8 	.word	0x200001b8

080060d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af02      	add	r7, sp, #8
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060ec:	d111      	bne.n	8006112 <SPI_EndRxTransaction+0x3a>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060f6:	d004      	beq.n	8006102 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006100:	d107      	bne.n	8006112 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006110:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	2200      	movs	r2, #0
 800611a:	2180      	movs	r1, #128	; 0x80
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f7ff febd 	bl	8005e9c <SPI_WaitFlagStateUntilTimeout>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d007      	beq.n	8006138 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800612c:	f043 0220 	orr.w	r2, r3, #32
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	e023      	b.n	8006180 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006140:	d11d      	bne.n	800617e <SPI_EndRxTransaction+0xa6>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800614a:	d004      	beq.n	8006156 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006154:	d113      	bne.n	800617e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	2200      	movs	r2, #0
 800615e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f7ff ff22 	bl	8005fac <SPI_WaitFifoStateUntilTimeout>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d007      	beq.n	800617e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006172:	f043 0220 	orr.w	r2, r3, #32
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e000      	b.n	8006180 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af02      	add	r7, sp, #8
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2200      	movs	r2, #0
 800619c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f7ff ff03 	bl	8005fac <SPI_WaitFifoStateUntilTimeout>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d007      	beq.n	80061bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061b0:	f043 0220 	orr.w	r2, r3, #32
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e027      	b.n	800620c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2200      	movs	r2, #0
 80061c4:	2180      	movs	r1, #128	; 0x80
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f7ff fe68 	bl	8005e9c <SPI_WaitFlagStateUntilTimeout>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d007      	beq.n	80061e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061d6:	f043 0220 	orr.w	r2, r3, #32
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e014      	b.n	800620c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f7ff fedc 	bl	8005fac <SPI_WaitFifoStateUntilTimeout>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d007      	beq.n	800620a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061fe:	f043 0220 	orr.w	r2, r3, #32
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e000      	b.n	800620c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e049      	b.n	80062ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d106      	bne.n	8006240 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7fc f89e 	bl	800237c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	3304      	adds	r3, #4
 8006250:	4619      	mov	r1, r3
 8006252:	4610      	mov	r0, r2
 8006254:	f000 fac4 	bl	80067e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
	...

080062c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d001      	beq.n	80062dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e033      	b.n	8006344 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2202      	movs	r2, #2
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a19      	ldr	r2, [pc, #100]	; (8006350 <HAL_TIM_Base_Start+0x8c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d009      	beq.n	8006302 <HAL_TIM_Base_Start+0x3e>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062f6:	d004      	beq.n	8006302 <HAL_TIM_Base_Start+0x3e>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a15      	ldr	r2, [pc, #84]	; (8006354 <HAL_TIM_Base_Start+0x90>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d115      	bne.n	800632e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	689a      	ldr	r2, [r3, #8]
 8006308:	4b13      	ldr	r3, [pc, #76]	; (8006358 <HAL_TIM_Base_Start+0x94>)
 800630a:	4013      	ands	r3, r2
 800630c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2b06      	cmp	r3, #6
 8006312:	d015      	beq.n	8006340 <HAL_TIM_Base_Start+0x7c>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800631a:	d011      	beq.n	8006340 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f042 0201 	orr.w	r2, r2, #1
 800632a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800632c:	e008      	b.n	8006340 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f042 0201 	orr.w	r2, r2, #1
 800633c:	601a      	str	r2, [r3, #0]
 800633e:	e000      	b.n	8006342 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006340:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3714      	adds	r7, #20
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	40012c00 	.word	0x40012c00
 8006354:	40014000 	.word	0x40014000
 8006358:	00010007 	.word	0x00010007

0800635c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6a1a      	ldr	r2, [r3, #32]
 800636a:	f241 1311 	movw	r3, #4369	; 0x1111
 800636e:	4013      	ands	r3, r2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10f      	bne.n	8006394 <HAL_TIM_Base_Stop+0x38>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6a1a      	ldr	r2, [r3, #32]
 800637a:	f240 4344 	movw	r3, #1092	; 0x444
 800637e:	4013      	ands	r3, r2
 8006380:	2b00      	cmp	r3, #0
 8006382:	d107      	bne.n	8006394 <HAL_TIM_Base_Stop+0x38>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f022 0201 	bic.w	r2, r2, #1
 8006392:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b082      	sub	sp, #8
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	f003 0302 	and.w	r3, r3, #2
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d122      	bne.n	8006406 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d11b      	bne.n	8006406 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f06f 0202 	mvn.w	r2, #2
 80063d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	f003 0303 	and.w	r3, r3, #3
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d003      	beq.n	80063f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 f9d8 	bl	80067a2 <HAL_TIM_IC_CaptureCallback>
 80063f2:	e005      	b.n	8006400 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f9ca 	bl	800678e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f9db 	bl	80067b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	f003 0304 	and.w	r3, r3, #4
 8006410:	2b04      	cmp	r3, #4
 8006412:	d122      	bne.n	800645a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	f003 0304 	and.w	r3, r3, #4
 800641e:	2b04      	cmp	r3, #4
 8006420:	d11b      	bne.n	800645a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f06f 0204 	mvn.w	r2, #4
 800642a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2202      	movs	r2, #2
 8006430:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800643c:	2b00      	cmp	r3, #0
 800643e:	d003      	beq.n	8006448 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f9ae 	bl	80067a2 <HAL_TIM_IC_CaptureCallback>
 8006446:	e005      	b.n	8006454 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f9a0 	bl	800678e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f9b1 	bl	80067b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	f003 0308 	and.w	r3, r3, #8
 8006464:	2b08      	cmp	r3, #8
 8006466:	d122      	bne.n	80064ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	f003 0308 	and.w	r3, r3, #8
 8006472:	2b08      	cmp	r3, #8
 8006474:	d11b      	bne.n	80064ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f06f 0208 	mvn.w	r2, #8
 800647e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2204      	movs	r2, #4
 8006484:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	69db      	ldr	r3, [r3, #28]
 800648c:	f003 0303 	and.w	r3, r3, #3
 8006490:	2b00      	cmp	r3, #0
 8006492:	d003      	beq.n	800649c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 f984 	bl	80067a2 <HAL_TIM_IC_CaptureCallback>
 800649a:	e005      	b.n	80064a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 f976 	bl	800678e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f987 	bl	80067b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	f003 0310 	and.w	r3, r3, #16
 80064b8:	2b10      	cmp	r3, #16
 80064ba:	d122      	bne.n	8006502 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	f003 0310 	and.w	r3, r3, #16
 80064c6:	2b10      	cmp	r3, #16
 80064c8:	d11b      	bne.n	8006502 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f06f 0210 	mvn.w	r2, #16
 80064d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2208      	movs	r2, #8
 80064d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	69db      	ldr	r3, [r3, #28]
 80064e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d003      	beq.n	80064f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f95a 	bl	80067a2 <HAL_TIM_IC_CaptureCallback>
 80064ee:	e005      	b.n	80064fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f94c 	bl	800678e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f95d 	bl	80067b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	2b01      	cmp	r3, #1
 800650e:	d10e      	bne.n	800652e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b01      	cmp	r3, #1
 800651c:	d107      	bne.n	800652e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f06f 0201 	mvn.w	r2, #1
 8006526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 f926 	bl	800677a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006538:	2b80      	cmp	r3, #128	; 0x80
 800653a:	d10e      	bne.n	800655a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006546:	2b80      	cmp	r3, #128	; 0x80
 8006548:	d107      	bne.n	800655a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fabb 	bl	8006ad0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006564:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006568:	d10e      	bne.n	8006588 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006574:	2b80      	cmp	r3, #128	; 0x80
 8006576:	d107      	bne.n	8006588 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 faae 	bl	8006ae4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006592:	2b40      	cmp	r3, #64	; 0x40
 8006594:	d10e      	bne.n	80065b4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a0:	2b40      	cmp	r3, #64	; 0x40
 80065a2:	d107      	bne.n	80065b4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f90b 	bl	80067ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	f003 0320 	and.w	r3, r3, #32
 80065be:	2b20      	cmp	r3, #32
 80065c0:	d10e      	bne.n	80065e0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	f003 0320 	and.w	r3, r3, #32
 80065cc:	2b20      	cmp	r3, #32
 80065ce:	d107      	bne.n	80065e0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f06f 0220 	mvn.w	r2, #32
 80065d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 fa6e 	bl	8006abc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065e0:	bf00      	nop
 80065e2:	3708      	adds	r7, #8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d101      	bne.n	8006604 <HAL_TIM_ConfigClockSource+0x1c>
 8006600:	2302      	movs	r3, #2
 8006602:	e0b6      	b.n	8006772 <HAL_TIM_ConfigClockSource+0x18a>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2202      	movs	r2, #2
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006622:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006626:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800662e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006640:	d03e      	beq.n	80066c0 <HAL_TIM_ConfigClockSource+0xd8>
 8006642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006646:	f200 8087 	bhi.w	8006758 <HAL_TIM_ConfigClockSource+0x170>
 800664a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800664e:	f000 8086 	beq.w	800675e <HAL_TIM_ConfigClockSource+0x176>
 8006652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006656:	d87f      	bhi.n	8006758 <HAL_TIM_ConfigClockSource+0x170>
 8006658:	2b70      	cmp	r3, #112	; 0x70
 800665a:	d01a      	beq.n	8006692 <HAL_TIM_ConfigClockSource+0xaa>
 800665c:	2b70      	cmp	r3, #112	; 0x70
 800665e:	d87b      	bhi.n	8006758 <HAL_TIM_ConfigClockSource+0x170>
 8006660:	2b60      	cmp	r3, #96	; 0x60
 8006662:	d050      	beq.n	8006706 <HAL_TIM_ConfigClockSource+0x11e>
 8006664:	2b60      	cmp	r3, #96	; 0x60
 8006666:	d877      	bhi.n	8006758 <HAL_TIM_ConfigClockSource+0x170>
 8006668:	2b50      	cmp	r3, #80	; 0x50
 800666a:	d03c      	beq.n	80066e6 <HAL_TIM_ConfigClockSource+0xfe>
 800666c:	2b50      	cmp	r3, #80	; 0x50
 800666e:	d873      	bhi.n	8006758 <HAL_TIM_ConfigClockSource+0x170>
 8006670:	2b40      	cmp	r3, #64	; 0x40
 8006672:	d058      	beq.n	8006726 <HAL_TIM_ConfigClockSource+0x13e>
 8006674:	2b40      	cmp	r3, #64	; 0x40
 8006676:	d86f      	bhi.n	8006758 <HAL_TIM_ConfigClockSource+0x170>
 8006678:	2b30      	cmp	r3, #48	; 0x30
 800667a:	d064      	beq.n	8006746 <HAL_TIM_ConfigClockSource+0x15e>
 800667c:	2b30      	cmp	r3, #48	; 0x30
 800667e:	d86b      	bhi.n	8006758 <HAL_TIM_ConfigClockSource+0x170>
 8006680:	2b20      	cmp	r3, #32
 8006682:	d060      	beq.n	8006746 <HAL_TIM_ConfigClockSource+0x15e>
 8006684:	2b20      	cmp	r3, #32
 8006686:	d867      	bhi.n	8006758 <HAL_TIM_ConfigClockSource+0x170>
 8006688:	2b00      	cmp	r3, #0
 800668a:	d05c      	beq.n	8006746 <HAL_TIM_ConfigClockSource+0x15e>
 800668c:	2b10      	cmp	r3, #16
 800668e:	d05a      	beq.n	8006746 <HAL_TIM_ConfigClockSource+0x15e>
 8006690:	e062      	b.n	8006758 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6818      	ldr	r0, [r3, #0]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	6899      	ldr	r1, [r3, #8]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	f000 f985 	bl	80069b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	609a      	str	r2, [r3, #8]
      break;
 80066be:	e04f      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6818      	ldr	r0, [r3, #0]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	6899      	ldr	r1, [r3, #8]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f000 f96e 	bl	80069b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	689a      	ldr	r2, [r3, #8]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066e2:	609a      	str	r2, [r3, #8]
      break;
 80066e4:	e03c      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6818      	ldr	r0, [r3, #0]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	6859      	ldr	r1, [r3, #4]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	461a      	mov	r2, r3
 80066f4:	f000 f8e2 	bl	80068bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2150      	movs	r1, #80	; 0x50
 80066fe:	4618      	mov	r0, r3
 8006700:	f000 f93b 	bl	800697a <TIM_ITRx_SetConfig>
      break;
 8006704:	e02c      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6818      	ldr	r0, [r3, #0]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	6859      	ldr	r1, [r3, #4]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	461a      	mov	r2, r3
 8006714:	f000 f901 	bl	800691a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2160      	movs	r1, #96	; 0x60
 800671e:	4618      	mov	r0, r3
 8006720:	f000 f92b 	bl	800697a <TIM_ITRx_SetConfig>
      break;
 8006724:	e01c      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6818      	ldr	r0, [r3, #0]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	6859      	ldr	r1, [r3, #4]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	461a      	mov	r2, r3
 8006734:	f000 f8c2 	bl	80068bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2140      	movs	r1, #64	; 0x40
 800673e:	4618      	mov	r0, r3
 8006740:	f000 f91b 	bl	800697a <TIM_ITRx_SetConfig>
      break;
 8006744:	e00c      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4619      	mov	r1, r3
 8006750:	4610      	mov	r0, r2
 8006752:	f000 f912 	bl	800697a <TIM_ITRx_SetConfig>
      break;
 8006756:	e003      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	73fb      	strb	r3, [r7, #15]
      break;
 800675c:	e000      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800675e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006770:	7bfb      	ldrb	r3, [r7, #15]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800677a:	b480      	push	{r7}
 800677c:	b083      	sub	sp, #12
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006782:	bf00      	nop
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800678e:	b480      	push	{r7}
 8006790:	b083      	sub	sp, #12
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006796:	bf00      	nop
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b083      	sub	sp, #12
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067aa:	bf00      	nop
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b083      	sub	sp, #12
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067be:	bf00      	nop
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067d2:	bf00      	nop
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
	...

080067e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a2e      	ldr	r2, [pc, #184]	; (80068ac <TIM_Base_SetConfig+0xcc>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d003      	beq.n	8006800 <TIM_Base_SetConfig+0x20>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067fe:	d108      	bne.n	8006812 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	4313      	orrs	r3, r2
 8006810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a25      	ldr	r2, [pc, #148]	; (80068ac <TIM_Base_SetConfig+0xcc>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d00f      	beq.n	800683a <TIM_Base_SetConfig+0x5a>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006820:	d00b      	beq.n	800683a <TIM_Base_SetConfig+0x5a>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a22      	ldr	r2, [pc, #136]	; (80068b0 <TIM_Base_SetConfig+0xd0>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d007      	beq.n	800683a <TIM_Base_SetConfig+0x5a>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a21      	ldr	r2, [pc, #132]	; (80068b4 <TIM_Base_SetConfig+0xd4>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d003      	beq.n	800683a <TIM_Base_SetConfig+0x5a>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a20      	ldr	r2, [pc, #128]	; (80068b8 <TIM_Base_SetConfig+0xd8>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d108      	bne.n	800684c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	4313      	orrs	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	4313      	orrs	r3, r2
 8006858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	689a      	ldr	r2, [r3, #8]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a0e      	ldr	r2, [pc, #56]	; (80068ac <TIM_Base_SetConfig+0xcc>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d00b      	beq.n	8006890 <TIM_Base_SetConfig+0xb0>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a0d      	ldr	r2, [pc, #52]	; (80068b0 <TIM_Base_SetConfig+0xd0>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d007      	beq.n	8006890 <TIM_Base_SetConfig+0xb0>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a0c      	ldr	r2, [pc, #48]	; (80068b4 <TIM_Base_SetConfig+0xd4>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d003      	beq.n	8006890 <TIM_Base_SetConfig+0xb0>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a0b      	ldr	r2, [pc, #44]	; (80068b8 <TIM_Base_SetConfig+0xd8>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d103      	bne.n	8006898 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	691a      	ldr	r2, [r3, #16]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	615a      	str	r2, [r3, #20]
}
 800689e:	bf00      	nop
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	40012c00 	.word	0x40012c00
 80068b0:	40014000 	.word	0x40014000
 80068b4:	40014400 	.word	0x40014400
 80068b8:	40014800 	.word	0x40014800

080068bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6a1b      	ldr	r3, [r3, #32]
 80068cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	f023 0201 	bic.w	r2, r3, #1
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	011b      	lsls	r3, r3, #4
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f023 030a 	bic.w	r3, r3, #10
 80068f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	4313      	orrs	r3, r2
 8006900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	621a      	str	r2, [r3, #32]
}
 800690e:	bf00      	nop
 8006910:	371c      	adds	r7, #28
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800691a:	b480      	push	{r7}
 800691c:	b087      	sub	sp, #28
 800691e:	af00      	add	r7, sp, #0
 8006920:	60f8      	str	r0, [r7, #12]
 8006922:	60b9      	str	r1, [r7, #8]
 8006924:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	f023 0210 	bic.w	r2, r3, #16
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006944:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	031b      	lsls	r3, r3, #12
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	4313      	orrs	r3, r2
 800694e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006956:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	011b      	lsls	r3, r3, #4
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	4313      	orrs	r3, r2
 8006960:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	621a      	str	r2, [r3, #32]
}
 800696e:	bf00      	nop
 8006970:	371c      	adds	r7, #28
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800697a:	b480      	push	{r7}
 800697c:	b085      	sub	sp, #20
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
 8006982:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006990:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4313      	orrs	r3, r2
 8006998:	f043 0307 	orr.w	r3, r3, #7
 800699c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	609a      	str	r2, [r3, #8]
}
 80069a4:	bf00      	nop
 80069a6:	3714      	adds	r7, #20
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b087      	sub	sp, #28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
 80069bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	021a      	lsls	r2, r3, #8
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	431a      	orrs	r2, r3
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	4313      	orrs	r3, r2
 80069dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	609a      	str	r2, [r3, #8]
}
 80069e4:	bf00      	nop
 80069e6:	371c      	adds	r7, #28
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d101      	bne.n	8006a08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a04:	2302      	movs	r3, #2
 8006a06:	e04f      	b.n	8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a21      	ldr	r2, [pc, #132]	; (8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d108      	bne.n	8006a44 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a14      	ldr	r2, [pc, #80]	; (8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d009      	beq.n	8006a7c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a70:	d004      	beq.n	8006a7c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a10      	ldr	r2, [pc, #64]	; (8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d10c      	bne.n	8006a96 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3714      	adds	r7, #20
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr
 8006ab4:	40012c00 	.word	0x40012c00
 8006ab8:	40014000 	.word	0x40014000

08006abc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d101      	bne.n	8006b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e040      	b.n	8006b8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d106      	bne.n	8006b20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7fb fc6c 	bl	80023f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2224      	movs	r2, #36	; 0x24
 8006b24:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f022 0201 	bic.w	r2, r2, #1
 8006b34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f82c 	bl	8006b94 <UART_SetConfig>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d101      	bne.n	8006b46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e022      	b.n	8006b8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d002      	beq.n	8006b54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f956 	bl	8006e00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	685a      	ldr	r2, [r3, #4]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	689a      	ldr	r2, [r3, #8]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f042 0201 	orr.w	r2, r2, #1
 8006b82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 f9dd 	bl	8006f44 <UART_CheckIdleState>
 8006b8a:	4603      	mov	r3, r0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b088      	sub	sp, #32
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	689a      	ldr	r2, [r3, #8]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	431a      	orrs	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	431a      	orrs	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	69db      	ldr	r3, [r3, #28]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	4b8a      	ldr	r3, [pc, #552]	; (8006de8 <UART_SetConfig+0x254>)
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	6812      	ldr	r2, [r2, #0]
 8006bc6:	6979      	ldr	r1, [r7, #20]
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68da      	ldr	r2, [r3, #12]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a78      	ldr	r2, [pc, #480]	; (8006dec <UART_SetConfig+0x258>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d120      	bne.n	8006c52 <UART_SetConfig+0xbe>
 8006c10:	4b77      	ldr	r3, [pc, #476]	; (8006df0 <UART_SetConfig+0x25c>)
 8006c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c14:	f003 0303 	and.w	r3, r3, #3
 8006c18:	2b03      	cmp	r3, #3
 8006c1a:	d817      	bhi.n	8006c4c <UART_SetConfig+0xb8>
 8006c1c:	a201      	add	r2, pc, #4	; (adr r2, 8006c24 <UART_SetConfig+0x90>)
 8006c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c22:	bf00      	nop
 8006c24:	08006c35 	.word	0x08006c35
 8006c28:	08006c41 	.word	0x08006c41
 8006c2c:	08006c47 	.word	0x08006c47
 8006c30:	08006c3b 	.word	0x08006c3b
 8006c34:	2300      	movs	r3, #0
 8006c36:	77fb      	strb	r3, [r7, #31]
 8006c38:	e01d      	b.n	8006c76 <UART_SetConfig+0xe2>
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	77fb      	strb	r3, [r7, #31]
 8006c3e:	e01a      	b.n	8006c76 <UART_SetConfig+0xe2>
 8006c40:	2304      	movs	r3, #4
 8006c42:	77fb      	strb	r3, [r7, #31]
 8006c44:	e017      	b.n	8006c76 <UART_SetConfig+0xe2>
 8006c46:	2308      	movs	r3, #8
 8006c48:	77fb      	strb	r3, [r7, #31]
 8006c4a:	e014      	b.n	8006c76 <UART_SetConfig+0xe2>
 8006c4c:	2310      	movs	r3, #16
 8006c4e:	77fb      	strb	r3, [r7, #31]
 8006c50:	e011      	b.n	8006c76 <UART_SetConfig+0xe2>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a67      	ldr	r2, [pc, #412]	; (8006df4 <UART_SetConfig+0x260>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d102      	bne.n	8006c62 <UART_SetConfig+0xce>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	77fb      	strb	r3, [r7, #31]
 8006c60:	e009      	b.n	8006c76 <UART_SetConfig+0xe2>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a64      	ldr	r2, [pc, #400]	; (8006df8 <UART_SetConfig+0x264>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d102      	bne.n	8006c72 <UART_SetConfig+0xde>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	77fb      	strb	r3, [r7, #31]
 8006c70:	e001      	b.n	8006c76 <UART_SetConfig+0xe2>
 8006c72:	2310      	movs	r3, #16
 8006c74:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c7e:	d15b      	bne.n	8006d38 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8006c80:	7ffb      	ldrb	r3, [r7, #31]
 8006c82:	2b08      	cmp	r3, #8
 8006c84:	d827      	bhi.n	8006cd6 <UART_SetConfig+0x142>
 8006c86:	a201      	add	r2, pc, #4	; (adr r2, 8006c8c <UART_SetConfig+0xf8>)
 8006c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8c:	08006cb1 	.word	0x08006cb1
 8006c90:	08006cb9 	.word	0x08006cb9
 8006c94:	08006cc1 	.word	0x08006cc1
 8006c98:	08006cd7 	.word	0x08006cd7
 8006c9c:	08006cc7 	.word	0x08006cc7
 8006ca0:	08006cd7 	.word	0x08006cd7
 8006ca4:	08006cd7 	.word	0x08006cd7
 8006ca8:	08006cd7 	.word	0x08006cd7
 8006cac:	08006ccf 	.word	0x08006ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cb0:	f7fe f9c2 	bl	8005038 <HAL_RCC_GetPCLK1Freq>
 8006cb4:	61b8      	str	r0, [r7, #24]
        break;
 8006cb6:	e013      	b.n	8006ce0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cb8:	f7fe f9e0 	bl	800507c <HAL_RCC_GetPCLK2Freq>
 8006cbc:	61b8      	str	r0, [r7, #24]
        break;
 8006cbe:	e00f      	b.n	8006ce0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cc0:	4b4e      	ldr	r3, [pc, #312]	; (8006dfc <UART_SetConfig+0x268>)
 8006cc2:	61bb      	str	r3, [r7, #24]
        break;
 8006cc4:	e00c      	b.n	8006ce0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cc6:	f7fe f941 	bl	8004f4c <HAL_RCC_GetSysClockFreq>
 8006cca:	61b8      	str	r0, [r7, #24]
        break;
 8006ccc:	e008      	b.n	8006ce0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cd2:	61bb      	str	r3, [r7, #24]
        break;
 8006cd4:	e004      	b.n	8006ce0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	77bb      	strb	r3, [r7, #30]
        break;
 8006cde:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d074      	beq.n	8006dd0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	005a      	lsls	r2, r3, #1
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	085b      	lsrs	r3, r3, #1
 8006cf0:	441a      	add	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	2b0f      	cmp	r3, #15
 8006d02:	d916      	bls.n	8006d32 <UART_SetConfig+0x19e>
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d0a:	d212      	bcs.n	8006d32 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	f023 030f 	bic.w	r3, r3, #15
 8006d14:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	085b      	lsrs	r3, r3, #1
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	89fb      	ldrh	r3, [r7, #14]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	89fa      	ldrh	r2, [r7, #14]
 8006d2e:	60da      	str	r2, [r3, #12]
 8006d30:	e04e      	b.n	8006dd0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	77bb      	strb	r3, [r7, #30]
 8006d36:	e04b      	b.n	8006dd0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d38:	7ffb      	ldrb	r3, [r7, #31]
 8006d3a:	2b08      	cmp	r3, #8
 8006d3c:	d827      	bhi.n	8006d8e <UART_SetConfig+0x1fa>
 8006d3e:	a201      	add	r2, pc, #4	; (adr r2, 8006d44 <UART_SetConfig+0x1b0>)
 8006d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d44:	08006d69 	.word	0x08006d69
 8006d48:	08006d71 	.word	0x08006d71
 8006d4c:	08006d79 	.word	0x08006d79
 8006d50:	08006d8f 	.word	0x08006d8f
 8006d54:	08006d7f 	.word	0x08006d7f
 8006d58:	08006d8f 	.word	0x08006d8f
 8006d5c:	08006d8f 	.word	0x08006d8f
 8006d60:	08006d8f 	.word	0x08006d8f
 8006d64:	08006d87 	.word	0x08006d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d68:	f7fe f966 	bl	8005038 <HAL_RCC_GetPCLK1Freq>
 8006d6c:	61b8      	str	r0, [r7, #24]
        break;
 8006d6e:	e013      	b.n	8006d98 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d70:	f7fe f984 	bl	800507c <HAL_RCC_GetPCLK2Freq>
 8006d74:	61b8      	str	r0, [r7, #24]
        break;
 8006d76:	e00f      	b.n	8006d98 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d78:	4b20      	ldr	r3, [pc, #128]	; (8006dfc <UART_SetConfig+0x268>)
 8006d7a:	61bb      	str	r3, [r7, #24]
        break;
 8006d7c:	e00c      	b.n	8006d98 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d7e:	f7fe f8e5 	bl	8004f4c <HAL_RCC_GetSysClockFreq>
 8006d82:	61b8      	str	r0, [r7, #24]
        break;
 8006d84:	e008      	b.n	8006d98 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d8a:	61bb      	str	r3, [r7, #24]
        break;
 8006d8c:	e004      	b.n	8006d98 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	77bb      	strb	r3, [r7, #30]
        break;
 8006d96:	bf00      	nop
    }

    if (pclk != 0U)
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d018      	beq.n	8006dd0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	085a      	lsrs	r2, r3, #1
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	441a      	add	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	2b0f      	cmp	r3, #15
 8006db8:	d908      	bls.n	8006dcc <UART_SetConfig+0x238>
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dc0:	d204      	bcs.n	8006dcc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	60da      	str	r2, [r3, #12]
 8006dca:	e001      	b.n	8006dd0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006ddc:	7fbb      	ldrb	r3, [r7, #30]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3720      	adds	r7, #32
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	efff69f3 	.word	0xefff69f3
 8006dec:	40013800 	.word	0x40013800
 8006df0:	40021000 	.word	0x40021000
 8006df4:	40004400 	.word	0x40004400
 8006df8:	40004800 	.word	0x40004800
 8006dfc:	007a1200 	.word	0x007a1200

08006e00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00a      	beq.n	8006e2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2e:	f003 0302 	and.w	r3, r3, #2
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00a      	beq.n	8006e4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	430a      	orrs	r2, r1
 8006e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e50:	f003 0304 	and.w	r3, r3, #4
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00a      	beq.n	8006e6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e72:	f003 0308 	and.w	r3, r3, #8
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00a      	beq.n	8006e90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e94:	f003 0310 	and.w	r3, r3, #16
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00a      	beq.n	8006eb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb6:	f003 0320 	and.w	r3, r3, #32
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00a      	beq.n	8006ed4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d01a      	beq.n	8006f16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006efe:	d10a      	bne.n	8006f16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	430a      	orrs	r2, r1
 8006f14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00a      	beq.n	8006f38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	430a      	orrs	r2, r1
 8006f36:	605a      	str	r2, [r3, #4]
  }
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af02      	add	r7, sp, #8
 8006f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f54:	f7fb fc32 	bl	80027bc <HAL_GetTick>
 8006f58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0308 	and.w	r3, r3, #8
 8006f64:	2b08      	cmp	r3, #8
 8006f66:	d10e      	bne.n	8006f86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f82d 	bl	8006fd6 <UART_WaitOnFlagUntilTimeout>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e023      	b.n	8006fce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0304 	and.w	r3, r3, #4
 8006f90:	2b04      	cmp	r3, #4
 8006f92:	d10e      	bne.n	8006fb2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f98:	9300      	str	r3, [sp, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f817 	bl	8006fd6 <UART_WaitOnFlagUntilTimeout>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d001      	beq.n	8006fb2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e00d      	b.n	8006fce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2220      	movs	r2, #32
 8006fbc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b09c      	sub	sp, #112	; 0x70
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	60f8      	str	r0, [r7, #12]
 8006fde:	60b9      	str	r1, [r7, #8]
 8006fe0:	603b      	str	r3, [r7, #0]
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fe6:	e0a5      	b.n	8007134 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fee:	f000 80a1 	beq.w	8007134 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ff2:	f7fb fbe3 	bl	80027bc <HAL_GetTick>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d302      	bcc.n	8007008 <UART_WaitOnFlagUntilTimeout+0x32>
 8007002:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007004:	2b00      	cmp	r3, #0
 8007006:	d13e      	bne.n	8007086 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007010:	e853 3f00 	ldrex	r3, [r3]
 8007014:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007018:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800701c:	667b      	str	r3, [r7, #100]	; 0x64
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	461a      	mov	r2, r3
 8007024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007026:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007028:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800702c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800702e:	e841 2300 	strex	r3, r2, [r1]
 8007032:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1e6      	bne.n	8007008 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	3308      	adds	r3, #8
 8007040:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007044:	e853 3f00 	ldrex	r3, [r3]
 8007048:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800704a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704c:	f023 0301 	bic.w	r3, r3, #1
 8007050:	663b      	str	r3, [r7, #96]	; 0x60
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	3308      	adds	r3, #8
 8007058:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800705a:	64ba      	str	r2, [r7, #72]	; 0x48
 800705c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007060:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007062:	e841 2300 	strex	r3, r2, [r1]
 8007066:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1e5      	bne.n	800703a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2220      	movs	r2, #32
 8007072:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2220      	movs	r2, #32
 8007078:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e067      	b.n	8007156 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0304 	and.w	r3, r3, #4
 8007090:	2b00      	cmp	r3, #0
 8007092:	d04f      	beq.n	8007134 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800709e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070a2:	d147      	bne.n	8007134 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b6:	e853 3f00 	ldrex	r3, [r3]
 80070ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	461a      	mov	r2, r3
 80070ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070cc:	637b      	str	r3, [r7, #52]	; 0x34
 80070ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070d4:	e841 2300 	strex	r3, r2, [r1]
 80070d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1e6      	bne.n	80070ae <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3308      	adds	r3, #8
 80070e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	e853 3f00 	ldrex	r3, [r3]
 80070ee:	613b      	str	r3, [r7, #16]
   return(result);
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	f023 0301 	bic.w	r3, r3, #1
 80070f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3308      	adds	r3, #8
 80070fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007100:	623a      	str	r2, [r7, #32]
 8007102:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007104:	69f9      	ldr	r1, [r7, #28]
 8007106:	6a3a      	ldr	r2, [r7, #32]
 8007108:	e841 2300 	strex	r3, r2, [r1]
 800710c:	61bb      	str	r3, [r7, #24]
   return(result);
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1e5      	bne.n	80070e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2220      	movs	r2, #32
 8007118:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2220      	movs	r2, #32
 800711e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2220      	movs	r2, #32
 8007124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e010      	b.n	8007156 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	69da      	ldr	r2, [r3, #28]
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	4013      	ands	r3, r2
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	429a      	cmp	r2, r3
 8007142:	bf0c      	ite	eq
 8007144:	2301      	moveq	r3, #1
 8007146:	2300      	movne	r3, #0
 8007148:	b2db      	uxtb	r3, r3
 800714a:	461a      	mov	r2, r3
 800714c:	79fb      	ldrb	r3, [r7, #7]
 800714e:	429a      	cmp	r2, r3
 8007150:	f43f af4a 	beq.w	8006fe8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3770      	adds	r7, #112	; 0x70
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
	...

08007160 <__assert_func>:
 8007160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007162:	4614      	mov	r4, r2
 8007164:	461a      	mov	r2, r3
 8007166:	4b09      	ldr	r3, [pc, #36]	; (800718c <__assert_func+0x2c>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4605      	mov	r5, r0
 800716c:	68d8      	ldr	r0, [r3, #12]
 800716e:	b14c      	cbz	r4, 8007184 <__assert_func+0x24>
 8007170:	4b07      	ldr	r3, [pc, #28]	; (8007190 <__assert_func+0x30>)
 8007172:	9100      	str	r1, [sp, #0]
 8007174:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007178:	4906      	ldr	r1, [pc, #24]	; (8007194 <__assert_func+0x34>)
 800717a:	462b      	mov	r3, r5
 800717c:	f000 f814 	bl	80071a8 <fiprintf>
 8007180:	f000 fcb0 	bl	8007ae4 <abort>
 8007184:	4b04      	ldr	r3, [pc, #16]	; (8007198 <__assert_func+0x38>)
 8007186:	461c      	mov	r4, r3
 8007188:	e7f3      	b.n	8007172 <__assert_func+0x12>
 800718a:	bf00      	nop
 800718c:	200001c4 	.word	0x200001c4
 8007190:	080087c8 	.word	0x080087c8
 8007194:	080087d5 	.word	0x080087d5
 8007198:	08008803 	.word	0x08008803

0800719c <__errno>:
 800719c:	4b01      	ldr	r3, [pc, #4]	; (80071a4 <__errno+0x8>)
 800719e:	6818      	ldr	r0, [r3, #0]
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	200001c4 	.word	0x200001c4

080071a8 <fiprintf>:
 80071a8:	b40e      	push	{r1, r2, r3}
 80071aa:	b503      	push	{r0, r1, lr}
 80071ac:	4601      	mov	r1, r0
 80071ae:	ab03      	add	r3, sp, #12
 80071b0:	4805      	ldr	r0, [pc, #20]	; (80071c8 <fiprintf+0x20>)
 80071b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80071b6:	6800      	ldr	r0, [r0, #0]
 80071b8:	9301      	str	r3, [sp, #4]
 80071ba:	f000 f86b 	bl	8007294 <_vfiprintf_r>
 80071be:	b002      	add	sp, #8
 80071c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80071c4:	b003      	add	sp, #12
 80071c6:	4770      	bx	lr
 80071c8:	200001c4 	.word	0x200001c4

080071cc <__libc_init_array>:
 80071cc:	b570      	push	{r4, r5, r6, lr}
 80071ce:	4d0d      	ldr	r5, [pc, #52]	; (8007204 <__libc_init_array+0x38>)
 80071d0:	4c0d      	ldr	r4, [pc, #52]	; (8007208 <__libc_init_array+0x3c>)
 80071d2:	1b64      	subs	r4, r4, r5
 80071d4:	10a4      	asrs	r4, r4, #2
 80071d6:	2600      	movs	r6, #0
 80071d8:	42a6      	cmp	r6, r4
 80071da:	d109      	bne.n	80071f0 <__libc_init_array+0x24>
 80071dc:	4d0b      	ldr	r5, [pc, #44]	; (800720c <__libc_init_array+0x40>)
 80071de:	4c0c      	ldr	r4, [pc, #48]	; (8007210 <__libc_init_array+0x44>)
 80071e0:	f001 f8dc 	bl	800839c <_init>
 80071e4:	1b64      	subs	r4, r4, r5
 80071e6:	10a4      	asrs	r4, r4, #2
 80071e8:	2600      	movs	r6, #0
 80071ea:	42a6      	cmp	r6, r4
 80071ec:	d105      	bne.n	80071fa <__libc_init_array+0x2e>
 80071ee:	bd70      	pop	{r4, r5, r6, pc}
 80071f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071f4:	4798      	blx	r3
 80071f6:	3601      	adds	r6, #1
 80071f8:	e7ee      	b.n	80071d8 <__libc_init_array+0xc>
 80071fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80071fe:	4798      	blx	r3
 8007200:	3601      	adds	r6, #1
 8007202:	e7f2      	b.n	80071ea <__libc_init_array+0x1e>
 8007204:	080088a4 	.word	0x080088a4
 8007208:	080088a4 	.word	0x080088a4
 800720c:	080088a4 	.word	0x080088a4
 8007210:	080088a8 	.word	0x080088a8

08007214 <memcpy>:
 8007214:	440a      	add	r2, r1
 8007216:	4291      	cmp	r1, r2
 8007218:	f100 33ff 	add.w	r3, r0, #4294967295
 800721c:	d100      	bne.n	8007220 <memcpy+0xc>
 800721e:	4770      	bx	lr
 8007220:	b510      	push	{r4, lr}
 8007222:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007226:	f803 4f01 	strb.w	r4, [r3, #1]!
 800722a:	4291      	cmp	r1, r2
 800722c:	d1f9      	bne.n	8007222 <memcpy+0xe>
 800722e:	bd10      	pop	{r4, pc}

08007230 <memset>:
 8007230:	4402      	add	r2, r0
 8007232:	4603      	mov	r3, r0
 8007234:	4293      	cmp	r3, r2
 8007236:	d100      	bne.n	800723a <memset+0xa>
 8007238:	4770      	bx	lr
 800723a:	f803 1b01 	strb.w	r1, [r3], #1
 800723e:	e7f9      	b.n	8007234 <memset+0x4>

08007240 <__sfputc_r>:
 8007240:	6893      	ldr	r3, [r2, #8]
 8007242:	3b01      	subs	r3, #1
 8007244:	2b00      	cmp	r3, #0
 8007246:	b410      	push	{r4}
 8007248:	6093      	str	r3, [r2, #8]
 800724a:	da08      	bge.n	800725e <__sfputc_r+0x1e>
 800724c:	6994      	ldr	r4, [r2, #24]
 800724e:	42a3      	cmp	r3, r4
 8007250:	db01      	blt.n	8007256 <__sfputc_r+0x16>
 8007252:	290a      	cmp	r1, #10
 8007254:	d103      	bne.n	800725e <__sfputc_r+0x1e>
 8007256:	f85d 4b04 	ldr.w	r4, [sp], #4
 800725a:	f000 bb83 	b.w	8007964 <__swbuf_r>
 800725e:	6813      	ldr	r3, [r2, #0]
 8007260:	1c58      	adds	r0, r3, #1
 8007262:	6010      	str	r0, [r2, #0]
 8007264:	7019      	strb	r1, [r3, #0]
 8007266:	4608      	mov	r0, r1
 8007268:	f85d 4b04 	ldr.w	r4, [sp], #4
 800726c:	4770      	bx	lr

0800726e <__sfputs_r>:
 800726e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007270:	4606      	mov	r6, r0
 8007272:	460f      	mov	r7, r1
 8007274:	4614      	mov	r4, r2
 8007276:	18d5      	adds	r5, r2, r3
 8007278:	42ac      	cmp	r4, r5
 800727a:	d101      	bne.n	8007280 <__sfputs_r+0x12>
 800727c:	2000      	movs	r0, #0
 800727e:	e007      	b.n	8007290 <__sfputs_r+0x22>
 8007280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007284:	463a      	mov	r2, r7
 8007286:	4630      	mov	r0, r6
 8007288:	f7ff ffda 	bl	8007240 <__sfputc_r>
 800728c:	1c43      	adds	r3, r0, #1
 800728e:	d1f3      	bne.n	8007278 <__sfputs_r+0xa>
 8007290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007294 <_vfiprintf_r>:
 8007294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007298:	460d      	mov	r5, r1
 800729a:	b09d      	sub	sp, #116	; 0x74
 800729c:	4614      	mov	r4, r2
 800729e:	4698      	mov	r8, r3
 80072a0:	4606      	mov	r6, r0
 80072a2:	b118      	cbz	r0, 80072ac <_vfiprintf_r+0x18>
 80072a4:	6983      	ldr	r3, [r0, #24]
 80072a6:	b90b      	cbnz	r3, 80072ac <_vfiprintf_r+0x18>
 80072a8:	f000 fd3e 	bl	8007d28 <__sinit>
 80072ac:	4b89      	ldr	r3, [pc, #548]	; (80074d4 <_vfiprintf_r+0x240>)
 80072ae:	429d      	cmp	r5, r3
 80072b0:	d11b      	bne.n	80072ea <_vfiprintf_r+0x56>
 80072b2:	6875      	ldr	r5, [r6, #4]
 80072b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072b6:	07d9      	lsls	r1, r3, #31
 80072b8:	d405      	bmi.n	80072c6 <_vfiprintf_r+0x32>
 80072ba:	89ab      	ldrh	r3, [r5, #12]
 80072bc:	059a      	lsls	r2, r3, #22
 80072be:	d402      	bmi.n	80072c6 <_vfiprintf_r+0x32>
 80072c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072c2:	f000 fdcf 	bl	8007e64 <__retarget_lock_acquire_recursive>
 80072c6:	89ab      	ldrh	r3, [r5, #12]
 80072c8:	071b      	lsls	r3, r3, #28
 80072ca:	d501      	bpl.n	80072d0 <_vfiprintf_r+0x3c>
 80072cc:	692b      	ldr	r3, [r5, #16]
 80072ce:	b9eb      	cbnz	r3, 800730c <_vfiprintf_r+0x78>
 80072d0:	4629      	mov	r1, r5
 80072d2:	4630      	mov	r0, r6
 80072d4:	f000 fb98 	bl	8007a08 <__swsetup_r>
 80072d8:	b1c0      	cbz	r0, 800730c <_vfiprintf_r+0x78>
 80072da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072dc:	07dc      	lsls	r4, r3, #31
 80072de:	d50e      	bpl.n	80072fe <_vfiprintf_r+0x6a>
 80072e0:	f04f 30ff 	mov.w	r0, #4294967295
 80072e4:	b01d      	add	sp, #116	; 0x74
 80072e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ea:	4b7b      	ldr	r3, [pc, #492]	; (80074d8 <_vfiprintf_r+0x244>)
 80072ec:	429d      	cmp	r5, r3
 80072ee:	d101      	bne.n	80072f4 <_vfiprintf_r+0x60>
 80072f0:	68b5      	ldr	r5, [r6, #8]
 80072f2:	e7df      	b.n	80072b4 <_vfiprintf_r+0x20>
 80072f4:	4b79      	ldr	r3, [pc, #484]	; (80074dc <_vfiprintf_r+0x248>)
 80072f6:	429d      	cmp	r5, r3
 80072f8:	bf08      	it	eq
 80072fa:	68f5      	ldreq	r5, [r6, #12]
 80072fc:	e7da      	b.n	80072b4 <_vfiprintf_r+0x20>
 80072fe:	89ab      	ldrh	r3, [r5, #12]
 8007300:	0598      	lsls	r0, r3, #22
 8007302:	d4ed      	bmi.n	80072e0 <_vfiprintf_r+0x4c>
 8007304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007306:	f000 fdae 	bl	8007e66 <__retarget_lock_release_recursive>
 800730a:	e7e9      	b.n	80072e0 <_vfiprintf_r+0x4c>
 800730c:	2300      	movs	r3, #0
 800730e:	9309      	str	r3, [sp, #36]	; 0x24
 8007310:	2320      	movs	r3, #32
 8007312:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007316:	f8cd 800c 	str.w	r8, [sp, #12]
 800731a:	2330      	movs	r3, #48	; 0x30
 800731c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80074e0 <_vfiprintf_r+0x24c>
 8007320:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007324:	f04f 0901 	mov.w	r9, #1
 8007328:	4623      	mov	r3, r4
 800732a:	469a      	mov	sl, r3
 800732c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007330:	b10a      	cbz	r2, 8007336 <_vfiprintf_r+0xa2>
 8007332:	2a25      	cmp	r2, #37	; 0x25
 8007334:	d1f9      	bne.n	800732a <_vfiprintf_r+0x96>
 8007336:	ebba 0b04 	subs.w	fp, sl, r4
 800733a:	d00b      	beq.n	8007354 <_vfiprintf_r+0xc0>
 800733c:	465b      	mov	r3, fp
 800733e:	4622      	mov	r2, r4
 8007340:	4629      	mov	r1, r5
 8007342:	4630      	mov	r0, r6
 8007344:	f7ff ff93 	bl	800726e <__sfputs_r>
 8007348:	3001      	adds	r0, #1
 800734a:	f000 80aa 	beq.w	80074a2 <_vfiprintf_r+0x20e>
 800734e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007350:	445a      	add	r2, fp
 8007352:	9209      	str	r2, [sp, #36]	; 0x24
 8007354:	f89a 3000 	ldrb.w	r3, [sl]
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 80a2 	beq.w	80074a2 <_vfiprintf_r+0x20e>
 800735e:	2300      	movs	r3, #0
 8007360:	f04f 32ff 	mov.w	r2, #4294967295
 8007364:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007368:	f10a 0a01 	add.w	sl, sl, #1
 800736c:	9304      	str	r3, [sp, #16]
 800736e:	9307      	str	r3, [sp, #28]
 8007370:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007374:	931a      	str	r3, [sp, #104]	; 0x68
 8007376:	4654      	mov	r4, sl
 8007378:	2205      	movs	r2, #5
 800737a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800737e:	4858      	ldr	r0, [pc, #352]	; (80074e0 <_vfiprintf_r+0x24c>)
 8007380:	f7f8 ff26 	bl	80001d0 <memchr>
 8007384:	9a04      	ldr	r2, [sp, #16]
 8007386:	b9d8      	cbnz	r0, 80073c0 <_vfiprintf_r+0x12c>
 8007388:	06d1      	lsls	r1, r2, #27
 800738a:	bf44      	itt	mi
 800738c:	2320      	movmi	r3, #32
 800738e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007392:	0713      	lsls	r3, r2, #28
 8007394:	bf44      	itt	mi
 8007396:	232b      	movmi	r3, #43	; 0x2b
 8007398:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800739c:	f89a 3000 	ldrb.w	r3, [sl]
 80073a0:	2b2a      	cmp	r3, #42	; 0x2a
 80073a2:	d015      	beq.n	80073d0 <_vfiprintf_r+0x13c>
 80073a4:	9a07      	ldr	r2, [sp, #28]
 80073a6:	4654      	mov	r4, sl
 80073a8:	2000      	movs	r0, #0
 80073aa:	f04f 0c0a 	mov.w	ip, #10
 80073ae:	4621      	mov	r1, r4
 80073b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073b4:	3b30      	subs	r3, #48	; 0x30
 80073b6:	2b09      	cmp	r3, #9
 80073b8:	d94e      	bls.n	8007458 <_vfiprintf_r+0x1c4>
 80073ba:	b1b0      	cbz	r0, 80073ea <_vfiprintf_r+0x156>
 80073bc:	9207      	str	r2, [sp, #28]
 80073be:	e014      	b.n	80073ea <_vfiprintf_r+0x156>
 80073c0:	eba0 0308 	sub.w	r3, r0, r8
 80073c4:	fa09 f303 	lsl.w	r3, r9, r3
 80073c8:	4313      	orrs	r3, r2
 80073ca:	9304      	str	r3, [sp, #16]
 80073cc:	46a2      	mov	sl, r4
 80073ce:	e7d2      	b.n	8007376 <_vfiprintf_r+0xe2>
 80073d0:	9b03      	ldr	r3, [sp, #12]
 80073d2:	1d19      	adds	r1, r3, #4
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	9103      	str	r1, [sp, #12]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	bfbb      	ittet	lt
 80073dc:	425b      	neglt	r3, r3
 80073de:	f042 0202 	orrlt.w	r2, r2, #2
 80073e2:	9307      	strge	r3, [sp, #28]
 80073e4:	9307      	strlt	r3, [sp, #28]
 80073e6:	bfb8      	it	lt
 80073e8:	9204      	strlt	r2, [sp, #16]
 80073ea:	7823      	ldrb	r3, [r4, #0]
 80073ec:	2b2e      	cmp	r3, #46	; 0x2e
 80073ee:	d10c      	bne.n	800740a <_vfiprintf_r+0x176>
 80073f0:	7863      	ldrb	r3, [r4, #1]
 80073f2:	2b2a      	cmp	r3, #42	; 0x2a
 80073f4:	d135      	bne.n	8007462 <_vfiprintf_r+0x1ce>
 80073f6:	9b03      	ldr	r3, [sp, #12]
 80073f8:	1d1a      	adds	r2, r3, #4
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	9203      	str	r2, [sp, #12]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	bfb8      	it	lt
 8007402:	f04f 33ff 	movlt.w	r3, #4294967295
 8007406:	3402      	adds	r4, #2
 8007408:	9305      	str	r3, [sp, #20]
 800740a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80074f0 <_vfiprintf_r+0x25c>
 800740e:	7821      	ldrb	r1, [r4, #0]
 8007410:	2203      	movs	r2, #3
 8007412:	4650      	mov	r0, sl
 8007414:	f7f8 fedc 	bl	80001d0 <memchr>
 8007418:	b140      	cbz	r0, 800742c <_vfiprintf_r+0x198>
 800741a:	2340      	movs	r3, #64	; 0x40
 800741c:	eba0 000a 	sub.w	r0, r0, sl
 8007420:	fa03 f000 	lsl.w	r0, r3, r0
 8007424:	9b04      	ldr	r3, [sp, #16]
 8007426:	4303      	orrs	r3, r0
 8007428:	3401      	adds	r4, #1
 800742a:	9304      	str	r3, [sp, #16]
 800742c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007430:	482c      	ldr	r0, [pc, #176]	; (80074e4 <_vfiprintf_r+0x250>)
 8007432:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007436:	2206      	movs	r2, #6
 8007438:	f7f8 feca 	bl	80001d0 <memchr>
 800743c:	2800      	cmp	r0, #0
 800743e:	d03f      	beq.n	80074c0 <_vfiprintf_r+0x22c>
 8007440:	4b29      	ldr	r3, [pc, #164]	; (80074e8 <_vfiprintf_r+0x254>)
 8007442:	bb1b      	cbnz	r3, 800748c <_vfiprintf_r+0x1f8>
 8007444:	9b03      	ldr	r3, [sp, #12]
 8007446:	3307      	adds	r3, #7
 8007448:	f023 0307 	bic.w	r3, r3, #7
 800744c:	3308      	adds	r3, #8
 800744e:	9303      	str	r3, [sp, #12]
 8007450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007452:	443b      	add	r3, r7
 8007454:	9309      	str	r3, [sp, #36]	; 0x24
 8007456:	e767      	b.n	8007328 <_vfiprintf_r+0x94>
 8007458:	fb0c 3202 	mla	r2, ip, r2, r3
 800745c:	460c      	mov	r4, r1
 800745e:	2001      	movs	r0, #1
 8007460:	e7a5      	b.n	80073ae <_vfiprintf_r+0x11a>
 8007462:	2300      	movs	r3, #0
 8007464:	3401      	adds	r4, #1
 8007466:	9305      	str	r3, [sp, #20]
 8007468:	4619      	mov	r1, r3
 800746a:	f04f 0c0a 	mov.w	ip, #10
 800746e:	4620      	mov	r0, r4
 8007470:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007474:	3a30      	subs	r2, #48	; 0x30
 8007476:	2a09      	cmp	r2, #9
 8007478:	d903      	bls.n	8007482 <_vfiprintf_r+0x1ee>
 800747a:	2b00      	cmp	r3, #0
 800747c:	d0c5      	beq.n	800740a <_vfiprintf_r+0x176>
 800747e:	9105      	str	r1, [sp, #20]
 8007480:	e7c3      	b.n	800740a <_vfiprintf_r+0x176>
 8007482:	fb0c 2101 	mla	r1, ip, r1, r2
 8007486:	4604      	mov	r4, r0
 8007488:	2301      	movs	r3, #1
 800748a:	e7f0      	b.n	800746e <_vfiprintf_r+0x1da>
 800748c:	ab03      	add	r3, sp, #12
 800748e:	9300      	str	r3, [sp, #0]
 8007490:	462a      	mov	r2, r5
 8007492:	4b16      	ldr	r3, [pc, #88]	; (80074ec <_vfiprintf_r+0x258>)
 8007494:	a904      	add	r1, sp, #16
 8007496:	4630      	mov	r0, r6
 8007498:	f3af 8000 	nop.w
 800749c:	4607      	mov	r7, r0
 800749e:	1c78      	adds	r0, r7, #1
 80074a0:	d1d6      	bne.n	8007450 <_vfiprintf_r+0x1bc>
 80074a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074a4:	07d9      	lsls	r1, r3, #31
 80074a6:	d405      	bmi.n	80074b4 <_vfiprintf_r+0x220>
 80074a8:	89ab      	ldrh	r3, [r5, #12]
 80074aa:	059a      	lsls	r2, r3, #22
 80074ac:	d402      	bmi.n	80074b4 <_vfiprintf_r+0x220>
 80074ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074b0:	f000 fcd9 	bl	8007e66 <__retarget_lock_release_recursive>
 80074b4:	89ab      	ldrh	r3, [r5, #12]
 80074b6:	065b      	lsls	r3, r3, #25
 80074b8:	f53f af12 	bmi.w	80072e0 <_vfiprintf_r+0x4c>
 80074bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074be:	e711      	b.n	80072e4 <_vfiprintf_r+0x50>
 80074c0:	ab03      	add	r3, sp, #12
 80074c2:	9300      	str	r3, [sp, #0]
 80074c4:	462a      	mov	r2, r5
 80074c6:	4b09      	ldr	r3, [pc, #36]	; (80074ec <_vfiprintf_r+0x258>)
 80074c8:	a904      	add	r1, sp, #16
 80074ca:	4630      	mov	r0, r6
 80074cc:	f000 f880 	bl	80075d0 <_printf_i>
 80074d0:	e7e4      	b.n	800749c <_vfiprintf_r+0x208>
 80074d2:	bf00      	nop
 80074d4:	0800885c 	.word	0x0800885c
 80074d8:	0800887c 	.word	0x0800887c
 80074dc:	0800883c 	.word	0x0800883c
 80074e0:	08008808 	.word	0x08008808
 80074e4:	08008812 	.word	0x08008812
 80074e8:	00000000 	.word	0x00000000
 80074ec:	0800726f 	.word	0x0800726f
 80074f0:	0800880e 	.word	0x0800880e

080074f4 <_printf_common>:
 80074f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074f8:	4616      	mov	r6, r2
 80074fa:	4699      	mov	r9, r3
 80074fc:	688a      	ldr	r2, [r1, #8]
 80074fe:	690b      	ldr	r3, [r1, #16]
 8007500:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007504:	4293      	cmp	r3, r2
 8007506:	bfb8      	it	lt
 8007508:	4613      	movlt	r3, r2
 800750a:	6033      	str	r3, [r6, #0]
 800750c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007510:	4607      	mov	r7, r0
 8007512:	460c      	mov	r4, r1
 8007514:	b10a      	cbz	r2, 800751a <_printf_common+0x26>
 8007516:	3301      	adds	r3, #1
 8007518:	6033      	str	r3, [r6, #0]
 800751a:	6823      	ldr	r3, [r4, #0]
 800751c:	0699      	lsls	r1, r3, #26
 800751e:	bf42      	ittt	mi
 8007520:	6833      	ldrmi	r3, [r6, #0]
 8007522:	3302      	addmi	r3, #2
 8007524:	6033      	strmi	r3, [r6, #0]
 8007526:	6825      	ldr	r5, [r4, #0]
 8007528:	f015 0506 	ands.w	r5, r5, #6
 800752c:	d106      	bne.n	800753c <_printf_common+0x48>
 800752e:	f104 0a19 	add.w	sl, r4, #25
 8007532:	68e3      	ldr	r3, [r4, #12]
 8007534:	6832      	ldr	r2, [r6, #0]
 8007536:	1a9b      	subs	r3, r3, r2
 8007538:	42ab      	cmp	r3, r5
 800753a:	dc26      	bgt.n	800758a <_printf_common+0x96>
 800753c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007540:	1e13      	subs	r3, r2, #0
 8007542:	6822      	ldr	r2, [r4, #0]
 8007544:	bf18      	it	ne
 8007546:	2301      	movne	r3, #1
 8007548:	0692      	lsls	r2, r2, #26
 800754a:	d42b      	bmi.n	80075a4 <_printf_common+0xb0>
 800754c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007550:	4649      	mov	r1, r9
 8007552:	4638      	mov	r0, r7
 8007554:	47c0      	blx	r8
 8007556:	3001      	adds	r0, #1
 8007558:	d01e      	beq.n	8007598 <_printf_common+0xa4>
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	68e5      	ldr	r5, [r4, #12]
 800755e:	6832      	ldr	r2, [r6, #0]
 8007560:	f003 0306 	and.w	r3, r3, #6
 8007564:	2b04      	cmp	r3, #4
 8007566:	bf08      	it	eq
 8007568:	1aad      	subeq	r5, r5, r2
 800756a:	68a3      	ldr	r3, [r4, #8]
 800756c:	6922      	ldr	r2, [r4, #16]
 800756e:	bf0c      	ite	eq
 8007570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007574:	2500      	movne	r5, #0
 8007576:	4293      	cmp	r3, r2
 8007578:	bfc4      	itt	gt
 800757a:	1a9b      	subgt	r3, r3, r2
 800757c:	18ed      	addgt	r5, r5, r3
 800757e:	2600      	movs	r6, #0
 8007580:	341a      	adds	r4, #26
 8007582:	42b5      	cmp	r5, r6
 8007584:	d11a      	bne.n	80075bc <_printf_common+0xc8>
 8007586:	2000      	movs	r0, #0
 8007588:	e008      	b.n	800759c <_printf_common+0xa8>
 800758a:	2301      	movs	r3, #1
 800758c:	4652      	mov	r2, sl
 800758e:	4649      	mov	r1, r9
 8007590:	4638      	mov	r0, r7
 8007592:	47c0      	blx	r8
 8007594:	3001      	adds	r0, #1
 8007596:	d103      	bne.n	80075a0 <_printf_common+0xac>
 8007598:	f04f 30ff 	mov.w	r0, #4294967295
 800759c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a0:	3501      	adds	r5, #1
 80075a2:	e7c6      	b.n	8007532 <_printf_common+0x3e>
 80075a4:	18e1      	adds	r1, r4, r3
 80075a6:	1c5a      	adds	r2, r3, #1
 80075a8:	2030      	movs	r0, #48	; 0x30
 80075aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075ae:	4422      	add	r2, r4
 80075b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075b8:	3302      	adds	r3, #2
 80075ba:	e7c7      	b.n	800754c <_printf_common+0x58>
 80075bc:	2301      	movs	r3, #1
 80075be:	4622      	mov	r2, r4
 80075c0:	4649      	mov	r1, r9
 80075c2:	4638      	mov	r0, r7
 80075c4:	47c0      	blx	r8
 80075c6:	3001      	adds	r0, #1
 80075c8:	d0e6      	beq.n	8007598 <_printf_common+0xa4>
 80075ca:	3601      	adds	r6, #1
 80075cc:	e7d9      	b.n	8007582 <_printf_common+0x8e>
	...

080075d0 <_printf_i>:
 80075d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075d4:	7e0f      	ldrb	r7, [r1, #24]
 80075d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075d8:	2f78      	cmp	r7, #120	; 0x78
 80075da:	4691      	mov	r9, r2
 80075dc:	4680      	mov	r8, r0
 80075de:	460c      	mov	r4, r1
 80075e0:	469a      	mov	sl, r3
 80075e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075e6:	d807      	bhi.n	80075f8 <_printf_i+0x28>
 80075e8:	2f62      	cmp	r7, #98	; 0x62
 80075ea:	d80a      	bhi.n	8007602 <_printf_i+0x32>
 80075ec:	2f00      	cmp	r7, #0
 80075ee:	f000 80d8 	beq.w	80077a2 <_printf_i+0x1d2>
 80075f2:	2f58      	cmp	r7, #88	; 0x58
 80075f4:	f000 80a3 	beq.w	800773e <_printf_i+0x16e>
 80075f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007600:	e03a      	b.n	8007678 <_printf_i+0xa8>
 8007602:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007606:	2b15      	cmp	r3, #21
 8007608:	d8f6      	bhi.n	80075f8 <_printf_i+0x28>
 800760a:	a101      	add	r1, pc, #4	; (adr r1, 8007610 <_printf_i+0x40>)
 800760c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007610:	08007669 	.word	0x08007669
 8007614:	0800767d 	.word	0x0800767d
 8007618:	080075f9 	.word	0x080075f9
 800761c:	080075f9 	.word	0x080075f9
 8007620:	080075f9 	.word	0x080075f9
 8007624:	080075f9 	.word	0x080075f9
 8007628:	0800767d 	.word	0x0800767d
 800762c:	080075f9 	.word	0x080075f9
 8007630:	080075f9 	.word	0x080075f9
 8007634:	080075f9 	.word	0x080075f9
 8007638:	080075f9 	.word	0x080075f9
 800763c:	08007789 	.word	0x08007789
 8007640:	080076ad 	.word	0x080076ad
 8007644:	0800776b 	.word	0x0800776b
 8007648:	080075f9 	.word	0x080075f9
 800764c:	080075f9 	.word	0x080075f9
 8007650:	080077ab 	.word	0x080077ab
 8007654:	080075f9 	.word	0x080075f9
 8007658:	080076ad 	.word	0x080076ad
 800765c:	080075f9 	.word	0x080075f9
 8007660:	080075f9 	.word	0x080075f9
 8007664:	08007773 	.word	0x08007773
 8007668:	682b      	ldr	r3, [r5, #0]
 800766a:	1d1a      	adds	r2, r3, #4
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	602a      	str	r2, [r5, #0]
 8007670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007674:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007678:	2301      	movs	r3, #1
 800767a:	e0a3      	b.n	80077c4 <_printf_i+0x1f4>
 800767c:	6820      	ldr	r0, [r4, #0]
 800767e:	6829      	ldr	r1, [r5, #0]
 8007680:	0606      	lsls	r6, r0, #24
 8007682:	f101 0304 	add.w	r3, r1, #4
 8007686:	d50a      	bpl.n	800769e <_printf_i+0xce>
 8007688:	680e      	ldr	r6, [r1, #0]
 800768a:	602b      	str	r3, [r5, #0]
 800768c:	2e00      	cmp	r6, #0
 800768e:	da03      	bge.n	8007698 <_printf_i+0xc8>
 8007690:	232d      	movs	r3, #45	; 0x2d
 8007692:	4276      	negs	r6, r6
 8007694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007698:	485e      	ldr	r0, [pc, #376]	; (8007814 <_printf_i+0x244>)
 800769a:	230a      	movs	r3, #10
 800769c:	e019      	b.n	80076d2 <_printf_i+0x102>
 800769e:	680e      	ldr	r6, [r1, #0]
 80076a0:	602b      	str	r3, [r5, #0]
 80076a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80076a6:	bf18      	it	ne
 80076a8:	b236      	sxthne	r6, r6
 80076aa:	e7ef      	b.n	800768c <_printf_i+0xbc>
 80076ac:	682b      	ldr	r3, [r5, #0]
 80076ae:	6820      	ldr	r0, [r4, #0]
 80076b0:	1d19      	adds	r1, r3, #4
 80076b2:	6029      	str	r1, [r5, #0]
 80076b4:	0601      	lsls	r1, r0, #24
 80076b6:	d501      	bpl.n	80076bc <_printf_i+0xec>
 80076b8:	681e      	ldr	r6, [r3, #0]
 80076ba:	e002      	b.n	80076c2 <_printf_i+0xf2>
 80076bc:	0646      	lsls	r6, r0, #25
 80076be:	d5fb      	bpl.n	80076b8 <_printf_i+0xe8>
 80076c0:	881e      	ldrh	r6, [r3, #0]
 80076c2:	4854      	ldr	r0, [pc, #336]	; (8007814 <_printf_i+0x244>)
 80076c4:	2f6f      	cmp	r7, #111	; 0x6f
 80076c6:	bf0c      	ite	eq
 80076c8:	2308      	moveq	r3, #8
 80076ca:	230a      	movne	r3, #10
 80076cc:	2100      	movs	r1, #0
 80076ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076d2:	6865      	ldr	r5, [r4, #4]
 80076d4:	60a5      	str	r5, [r4, #8]
 80076d6:	2d00      	cmp	r5, #0
 80076d8:	bfa2      	ittt	ge
 80076da:	6821      	ldrge	r1, [r4, #0]
 80076dc:	f021 0104 	bicge.w	r1, r1, #4
 80076e0:	6021      	strge	r1, [r4, #0]
 80076e2:	b90e      	cbnz	r6, 80076e8 <_printf_i+0x118>
 80076e4:	2d00      	cmp	r5, #0
 80076e6:	d04d      	beq.n	8007784 <_printf_i+0x1b4>
 80076e8:	4615      	mov	r5, r2
 80076ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80076ee:	fb03 6711 	mls	r7, r3, r1, r6
 80076f2:	5dc7      	ldrb	r7, [r0, r7]
 80076f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076f8:	4637      	mov	r7, r6
 80076fa:	42bb      	cmp	r3, r7
 80076fc:	460e      	mov	r6, r1
 80076fe:	d9f4      	bls.n	80076ea <_printf_i+0x11a>
 8007700:	2b08      	cmp	r3, #8
 8007702:	d10b      	bne.n	800771c <_printf_i+0x14c>
 8007704:	6823      	ldr	r3, [r4, #0]
 8007706:	07de      	lsls	r6, r3, #31
 8007708:	d508      	bpl.n	800771c <_printf_i+0x14c>
 800770a:	6923      	ldr	r3, [r4, #16]
 800770c:	6861      	ldr	r1, [r4, #4]
 800770e:	4299      	cmp	r1, r3
 8007710:	bfde      	ittt	le
 8007712:	2330      	movle	r3, #48	; 0x30
 8007714:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007718:	f105 35ff 	addle.w	r5, r5, #4294967295
 800771c:	1b52      	subs	r2, r2, r5
 800771e:	6122      	str	r2, [r4, #16]
 8007720:	f8cd a000 	str.w	sl, [sp]
 8007724:	464b      	mov	r3, r9
 8007726:	aa03      	add	r2, sp, #12
 8007728:	4621      	mov	r1, r4
 800772a:	4640      	mov	r0, r8
 800772c:	f7ff fee2 	bl	80074f4 <_printf_common>
 8007730:	3001      	adds	r0, #1
 8007732:	d14c      	bne.n	80077ce <_printf_i+0x1fe>
 8007734:	f04f 30ff 	mov.w	r0, #4294967295
 8007738:	b004      	add	sp, #16
 800773a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800773e:	4835      	ldr	r0, [pc, #212]	; (8007814 <_printf_i+0x244>)
 8007740:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007744:	6829      	ldr	r1, [r5, #0]
 8007746:	6823      	ldr	r3, [r4, #0]
 8007748:	f851 6b04 	ldr.w	r6, [r1], #4
 800774c:	6029      	str	r1, [r5, #0]
 800774e:	061d      	lsls	r5, r3, #24
 8007750:	d514      	bpl.n	800777c <_printf_i+0x1ac>
 8007752:	07df      	lsls	r7, r3, #31
 8007754:	bf44      	itt	mi
 8007756:	f043 0320 	orrmi.w	r3, r3, #32
 800775a:	6023      	strmi	r3, [r4, #0]
 800775c:	b91e      	cbnz	r6, 8007766 <_printf_i+0x196>
 800775e:	6823      	ldr	r3, [r4, #0]
 8007760:	f023 0320 	bic.w	r3, r3, #32
 8007764:	6023      	str	r3, [r4, #0]
 8007766:	2310      	movs	r3, #16
 8007768:	e7b0      	b.n	80076cc <_printf_i+0xfc>
 800776a:	6823      	ldr	r3, [r4, #0]
 800776c:	f043 0320 	orr.w	r3, r3, #32
 8007770:	6023      	str	r3, [r4, #0]
 8007772:	2378      	movs	r3, #120	; 0x78
 8007774:	4828      	ldr	r0, [pc, #160]	; (8007818 <_printf_i+0x248>)
 8007776:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800777a:	e7e3      	b.n	8007744 <_printf_i+0x174>
 800777c:	0659      	lsls	r1, r3, #25
 800777e:	bf48      	it	mi
 8007780:	b2b6      	uxthmi	r6, r6
 8007782:	e7e6      	b.n	8007752 <_printf_i+0x182>
 8007784:	4615      	mov	r5, r2
 8007786:	e7bb      	b.n	8007700 <_printf_i+0x130>
 8007788:	682b      	ldr	r3, [r5, #0]
 800778a:	6826      	ldr	r6, [r4, #0]
 800778c:	6961      	ldr	r1, [r4, #20]
 800778e:	1d18      	adds	r0, r3, #4
 8007790:	6028      	str	r0, [r5, #0]
 8007792:	0635      	lsls	r5, r6, #24
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	d501      	bpl.n	800779c <_printf_i+0x1cc>
 8007798:	6019      	str	r1, [r3, #0]
 800779a:	e002      	b.n	80077a2 <_printf_i+0x1d2>
 800779c:	0670      	lsls	r0, r6, #25
 800779e:	d5fb      	bpl.n	8007798 <_printf_i+0x1c8>
 80077a0:	8019      	strh	r1, [r3, #0]
 80077a2:	2300      	movs	r3, #0
 80077a4:	6123      	str	r3, [r4, #16]
 80077a6:	4615      	mov	r5, r2
 80077a8:	e7ba      	b.n	8007720 <_printf_i+0x150>
 80077aa:	682b      	ldr	r3, [r5, #0]
 80077ac:	1d1a      	adds	r2, r3, #4
 80077ae:	602a      	str	r2, [r5, #0]
 80077b0:	681d      	ldr	r5, [r3, #0]
 80077b2:	6862      	ldr	r2, [r4, #4]
 80077b4:	2100      	movs	r1, #0
 80077b6:	4628      	mov	r0, r5
 80077b8:	f7f8 fd0a 	bl	80001d0 <memchr>
 80077bc:	b108      	cbz	r0, 80077c2 <_printf_i+0x1f2>
 80077be:	1b40      	subs	r0, r0, r5
 80077c0:	6060      	str	r0, [r4, #4]
 80077c2:	6863      	ldr	r3, [r4, #4]
 80077c4:	6123      	str	r3, [r4, #16]
 80077c6:	2300      	movs	r3, #0
 80077c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077cc:	e7a8      	b.n	8007720 <_printf_i+0x150>
 80077ce:	6923      	ldr	r3, [r4, #16]
 80077d0:	462a      	mov	r2, r5
 80077d2:	4649      	mov	r1, r9
 80077d4:	4640      	mov	r0, r8
 80077d6:	47d0      	blx	sl
 80077d8:	3001      	adds	r0, #1
 80077da:	d0ab      	beq.n	8007734 <_printf_i+0x164>
 80077dc:	6823      	ldr	r3, [r4, #0]
 80077de:	079b      	lsls	r3, r3, #30
 80077e0:	d413      	bmi.n	800780a <_printf_i+0x23a>
 80077e2:	68e0      	ldr	r0, [r4, #12]
 80077e4:	9b03      	ldr	r3, [sp, #12]
 80077e6:	4298      	cmp	r0, r3
 80077e8:	bfb8      	it	lt
 80077ea:	4618      	movlt	r0, r3
 80077ec:	e7a4      	b.n	8007738 <_printf_i+0x168>
 80077ee:	2301      	movs	r3, #1
 80077f0:	4632      	mov	r2, r6
 80077f2:	4649      	mov	r1, r9
 80077f4:	4640      	mov	r0, r8
 80077f6:	47d0      	blx	sl
 80077f8:	3001      	adds	r0, #1
 80077fa:	d09b      	beq.n	8007734 <_printf_i+0x164>
 80077fc:	3501      	adds	r5, #1
 80077fe:	68e3      	ldr	r3, [r4, #12]
 8007800:	9903      	ldr	r1, [sp, #12]
 8007802:	1a5b      	subs	r3, r3, r1
 8007804:	42ab      	cmp	r3, r5
 8007806:	dcf2      	bgt.n	80077ee <_printf_i+0x21e>
 8007808:	e7eb      	b.n	80077e2 <_printf_i+0x212>
 800780a:	2500      	movs	r5, #0
 800780c:	f104 0619 	add.w	r6, r4, #25
 8007810:	e7f5      	b.n	80077fe <_printf_i+0x22e>
 8007812:	bf00      	nop
 8007814:	08008819 	.word	0x08008819
 8007818:	0800882a 	.word	0x0800882a

0800781c <iprintf>:
 800781c:	b40f      	push	{r0, r1, r2, r3}
 800781e:	4b0a      	ldr	r3, [pc, #40]	; (8007848 <iprintf+0x2c>)
 8007820:	b513      	push	{r0, r1, r4, lr}
 8007822:	681c      	ldr	r4, [r3, #0]
 8007824:	b124      	cbz	r4, 8007830 <iprintf+0x14>
 8007826:	69a3      	ldr	r3, [r4, #24]
 8007828:	b913      	cbnz	r3, 8007830 <iprintf+0x14>
 800782a:	4620      	mov	r0, r4
 800782c:	f000 fa7c 	bl	8007d28 <__sinit>
 8007830:	ab05      	add	r3, sp, #20
 8007832:	9a04      	ldr	r2, [sp, #16]
 8007834:	68a1      	ldr	r1, [r4, #8]
 8007836:	9301      	str	r3, [sp, #4]
 8007838:	4620      	mov	r0, r4
 800783a:	f7ff fd2b 	bl	8007294 <_vfiprintf_r>
 800783e:	b002      	add	sp, #8
 8007840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007844:	b004      	add	sp, #16
 8007846:	4770      	bx	lr
 8007848:	200001c4 	.word	0x200001c4

0800784c <putchar>:
 800784c:	4b09      	ldr	r3, [pc, #36]	; (8007874 <putchar+0x28>)
 800784e:	b513      	push	{r0, r1, r4, lr}
 8007850:	681c      	ldr	r4, [r3, #0]
 8007852:	4601      	mov	r1, r0
 8007854:	b134      	cbz	r4, 8007864 <putchar+0x18>
 8007856:	69a3      	ldr	r3, [r4, #24]
 8007858:	b923      	cbnz	r3, 8007864 <putchar+0x18>
 800785a:	9001      	str	r0, [sp, #4]
 800785c:	4620      	mov	r0, r4
 800785e:	f000 fa63 	bl	8007d28 <__sinit>
 8007862:	9901      	ldr	r1, [sp, #4]
 8007864:	68a2      	ldr	r2, [r4, #8]
 8007866:	4620      	mov	r0, r4
 8007868:	b002      	add	sp, #8
 800786a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800786e:	f000 bc41 	b.w	80080f4 <_putc_r>
 8007872:	bf00      	nop
 8007874:	200001c4 	.word	0x200001c4

08007878 <_puts_r>:
 8007878:	b570      	push	{r4, r5, r6, lr}
 800787a:	460e      	mov	r6, r1
 800787c:	4605      	mov	r5, r0
 800787e:	b118      	cbz	r0, 8007888 <_puts_r+0x10>
 8007880:	6983      	ldr	r3, [r0, #24]
 8007882:	b90b      	cbnz	r3, 8007888 <_puts_r+0x10>
 8007884:	f000 fa50 	bl	8007d28 <__sinit>
 8007888:	69ab      	ldr	r3, [r5, #24]
 800788a:	68ac      	ldr	r4, [r5, #8]
 800788c:	b913      	cbnz	r3, 8007894 <_puts_r+0x1c>
 800788e:	4628      	mov	r0, r5
 8007890:	f000 fa4a 	bl	8007d28 <__sinit>
 8007894:	4b2c      	ldr	r3, [pc, #176]	; (8007948 <_puts_r+0xd0>)
 8007896:	429c      	cmp	r4, r3
 8007898:	d120      	bne.n	80078dc <_puts_r+0x64>
 800789a:	686c      	ldr	r4, [r5, #4]
 800789c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800789e:	07db      	lsls	r3, r3, #31
 80078a0:	d405      	bmi.n	80078ae <_puts_r+0x36>
 80078a2:	89a3      	ldrh	r3, [r4, #12]
 80078a4:	0598      	lsls	r0, r3, #22
 80078a6:	d402      	bmi.n	80078ae <_puts_r+0x36>
 80078a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078aa:	f000 fadb 	bl	8007e64 <__retarget_lock_acquire_recursive>
 80078ae:	89a3      	ldrh	r3, [r4, #12]
 80078b0:	0719      	lsls	r1, r3, #28
 80078b2:	d51d      	bpl.n	80078f0 <_puts_r+0x78>
 80078b4:	6923      	ldr	r3, [r4, #16]
 80078b6:	b1db      	cbz	r3, 80078f0 <_puts_r+0x78>
 80078b8:	3e01      	subs	r6, #1
 80078ba:	68a3      	ldr	r3, [r4, #8]
 80078bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80078c0:	3b01      	subs	r3, #1
 80078c2:	60a3      	str	r3, [r4, #8]
 80078c4:	bb39      	cbnz	r1, 8007916 <_puts_r+0x9e>
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	da38      	bge.n	800793c <_puts_r+0xc4>
 80078ca:	4622      	mov	r2, r4
 80078cc:	210a      	movs	r1, #10
 80078ce:	4628      	mov	r0, r5
 80078d0:	f000 f848 	bl	8007964 <__swbuf_r>
 80078d4:	3001      	adds	r0, #1
 80078d6:	d011      	beq.n	80078fc <_puts_r+0x84>
 80078d8:	250a      	movs	r5, #10
 80078da:	e011      	b.n	8007900 <_puts_r+0x88>
 80078dc:	4b1b      	ldr	r3, [pc, #108]	; (800794c <_puts_r+0xd4>)
 80078de:	429c      	cmp	r4, r3
 80078e0:	d101      	bne.n	80078e6 <_puts_r+0x6e>
 80078e2:	68ac      	ldr	r4, [r5, #8]
 80078e4:	e7da      	b.n	800789c <_puts_r+0x24>
 80078e6:	4b1a      	ldr	r3, [pc, #104]	; (8007950 <_puts_r+0xd8>)
 80078e8:	429c      	cmp	r4, r3
 80078ea:	bf08      	it	eq
 80078ec:	68ec      	ldreq	r4, [r5, #12]
 80078ee:	e7d5      	b.n	800789c <_puts_r+0x24>
 80078f0:	4621      	mov	r1, r4
 80078f2:	4628      	mov	r0, r5
 80078f4:	f000 f888 	bl	8007a08 <__swsetup_r>
 80078f8:	2800      	cmp	r0, #0
 80078fa:	d0dd      	beq.n	80078b8 <_puts_r+0x40>
 80078fc:	f04f 35ff 	mov.w	r5, #4294967295
 8007900:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007902:	07da      	lsls	r2, r3, #31
 8007904:	d405      	bmi.n	8007912 <_puts_r+0x9a>
 8007906:	89a3      	ldrh	r3, [r4, #12]
 8007908:	059b      	lsls	r3, r3, #22
 800790a:	d402      	bmi.n	8007912 <_puts_r+0x9a>
 800790c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800790e:	f000 faaa 	bl	8007e66 <__retarget_lock_release_recursive>
 8007912:	4628      	mov	r0, r5
 8007914:	bd70      	pop	{r4, r5, r6, pc}
 8007916:	2b00      	cmp	r3, #0
 8007918:	da04      	bge.n	8007924 <_puts_r+0xac>
 800791a:	69a2      	ldr	r2, [r4, #24]
 800791c:	429a      	cmp	r2, r3
 800791e:	dc06      	bgt.n	800792e <_puts_r+0xb6>
 8007920:	290a      	cmp	r1, #10
 8007922:	d004      	beq.n	800792e <_puts_r+0xb6>
 8007924:	6823      	ldr	r3, [r4, #0]
 8007926:	1c5a      	adds	r2, r3, #1
 8007928:	6022      	str	r2, [r4, #0]
 800792a:	7019      	strb	r1, [r3, #0]
 800792c:	e7c5      	b.n	80078ba <_puts_r+0x42>
 800792e:	4622      	mov	r2, r4
 8007930:	4628      	mov	r0, r5
 8007932:	f000 f817 	bl	8007964 <__swbuf_r>
 8007936:	3001      	adds	r0, #1
 8007938:	d1bf      	bne.n	80078ba <_puts_r+0x42>
 800793a:	e7df      	b.n	80078fc <_puts_r+0x84>
 800793c:	6823      	ldr	r3, [r4, #0]
 800793e:	250a      	movs	r5, #10
 8007940:	1c5a      	adds	r2, r3, #1
 8007942:	6022      	str	r2, [r4, #0]
 8007944:	701d      	strb	r5, [r3, #0]
 8007946:	e7db      	b.n	8007900 <_puts_r+0x88>
 8007948:	0800885c 	.word	0x0800885c
 800794c:	0800887c 	.word	0x0800887c
 8007950:	0800883c 	.word	0x0800883c

08007954 <puts>:
 8007954:	4b02      	ldr	r3, [pc, #8]	; (8007960 <puts+0xc>)
 8007956:	4601      	mov	r1, r0
 8007958:	6818      	ldr	r0, [r3, #0]
 800795a:	f7ff bf8d 	b.w	8007878 <_puts_r>
 800795e:	bf00      	nop
 8007960:	200001c4 	.word	0x200001c4

08007964 <__swbuf_r>:
 8007964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007966:	460e      	mov	r6, r1
 8007968:	4614      	mov	r4, r2
 800796a:	4605      	mov	r5, r0
 800796c:	b118      	cbz	r0, 8007976 <__swbuf_r+0x12>
 800796e:	6983      	ldr	r3, [r0, #24]
 8007970:	b90b      	cbnz	r3, 8007976 <__swbuf_r+0x12>
 8007972:	f000 f9d9 	bl	8007d28 <__sinit>
 8007976:	4b21      	ldr	r3, [pc, #132]	; (80079fc <__swbuf_r+0x98>)
 8007978:	429c      	cmp	r4, r3
 800797a:	d12b      	bne.n	80079d4 <__swbuf_r+0x70>
 800797c:	686c      	ldr	r4, [r5, #4]
 800797e:	69a3      	ldr	r3, [r4, #24]
 8007980:	60a3      	str	r3, [r4, #8]
 8007982:	89a3      	ldrh	r3, [r4, #12]
 8007984:	071a      	lsls	r2, r3, #28
 8007986:	d52f      	bpl.n	80079e8 <__swbuf_r+0x84>
 8007988:	6923      	ldr	r3, [r4, #16]
 800798a:	b36b      	cbz	r3, 80079e8 <__swbuf_r+0x84>
 800798c:	6923      	ldr	r3, [r4, #16]
 800798e:	6820      	ldr	r0, [r4, #0]
 8007990:	1ac0      	subs	r0, r0, r3
 8007992:	6963      	ldr	r3, [r4, #20]
 8007994:	b2f6      	uxtb	r6, r6
 8007996:	4283      	cmp	r3, r0
 8007998:	4637      	mov	r7, r6
 800799a:	dc04      	bgt.n	80079a6 <__swbuf_r+0x42>
 800799c:	4621      	mov	r1, r4
 800799e:	4628      	mov	r0, r5
 80079a0:	f000 f92e 	bl	8007c00 <_fflush_r>
 80079a4:	bb30      	cbnz	r0, 80079f4 <__swbuf_r+0x90>
 80079a6:	68a3      	ldr	r3, [r4, #8]
 80079a8:	3b01      	subs	r3, #1
 80079aa:	60a3      	str	r3, [r4, #8]
 80079ac:	6823      	ldr	r3, [r4, #0]
 80079ae:	1c5a      	adds	r2, r3, #1
 80079b0:	6022      	str	r2, [r4, #0]
 80079b2:	701e      	strb	r6, [r3, #0]
 80079b4:	6963      	ldr	r3, [r4, #20]
 80079b6:	3001      	adds	r0, #1
 80079b8:	4283      	cmp	r3, r0
 80079ba:	d004      	beq.n	80079c6 <__swbuf_r+0x62>
 80079bc:	89a3      	ldrh	r3, [r4, #12]
 80079be:	07db      	lsls	r3, r3, #31
 80079c0:	d506      	bpl.n	80079d0 <__swbuf_r+0x6c>
 80079c2:	2e0a      	cmp	r6, #10
 80079c4:	d104      	bne.n	80079d0 <__swbuf_r+0x6c>
 80079c6:	4621      	mov	r1, r4
 80079c8:	4628      	mov	r0, r5
 80079ca:	f000 f919 	bl	8007c00 <_fflush_r>
 80079ce:	b988      	cbnz	r0, 80079f4 <__swbuf_r+0x90>
 80079d0:	4638      	mov	r0, r7
 80079d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079d4:	4b0a      	ldr	r3, [pc, #40]	; (8007a00 <__swbuf_r+0x9c>)
 80079d6:	429c      	cmp	r4, r3
 80079d8:	d101      	bne.n	80079de <__swbuf_r+0x7a>
 80079da:	68ac      	ldr	r4, [r5, #8]
 80079dc:	e7cf      	b.n	800797e <__swbuf_r+0x1a>
 80079de:	4b09      	ldr	r3, [pc, #36]	; (8007a04 <__swbuf_r+0xa0>)
 80079e0:	429c      	cmp	r4, r3
 80079e2:	bf08      	it	eq
 80079e4:	68ec      	ldreq	r4, [r5, #12]
 80079e6:	e7ca      	b.n	800797e <__swbuf_r+0x1a>
 80079e8:	4621      	mov	r1, r4
 80079ea:	4628      	mov	r0, r5
 80079ec:	f000 f80c 	bl	8007a08 <__swsetup_r>
 80079f0:	2800      	cmp	r0, #0
 80079f2:	d0cb      	beq.n	800798c <__swbuf_r+0x28>
 80079f4:	f04f 37ff 	mov.w	r7, #4294967295
 80079f8:	e7ea      	b.n	80079d0 <__swbuf_r+0x6c>
 80079fa:	bf00      	nop
 80079fc:	0800885c 	.word	0x0800885c
 8007a00:	0800887c 	.word	0x0800887c
 8007a04:	0800883c 	.word	0x0800883c

08007a08 <__swsetup_r>:
 8007a08:	4b32      	ldr	r3, [pc, #200]	; (8007ad4 <__swsetup_r+0xcc>)
 8007a0a:	b570      	push	{r4, r5, r6, lr}
 8007a0c:	681d      	ldr	r5, [r3, #0]
 8007a0e:	4606      	mov	r6, r0
 8007a10:	460c      	mov	r4, r1
 8007a12:	b125      	cbz	r5, 8007a1e <__swsetup_r+0x16>
 8007a14:	69ab      	ldr	r3, [r5, #24]
 8007a16:	b913      	cbnz	r3, 8007a1e <__swsetup_r+0x16>
 8007a18:	4628      	mov	r0, r5
 8007a1a:	f000 f985 	bl	8007d28 <__sinit>
 8007a1e:	4b2e      	ldr	r3, [pc, #184]	; (8007ad8 <__swsetup_r+0xd0>)
 8007a20:	429c      	cmp	r4, r3
 8007a22:	d10f      	bne.n	8007a44 <__swsetup_r+0x3c>
 8007a24:	686c      	ldr	r4, [r5, #4]
 8007a26:	89a3      	ldrh	r3, [r4, #12]
 8007a28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a2c:	0719      	lsls	r1, r3, #28
 8007a2e:	d42c      	bmi.n	8007a8a <__swsetup_r+0x82>
 8007a30:	06dd      	lsls	r5, r3, #27
 8007a32:	d411      	bmi.n	8007a58 <__swsetup_r+0x50>
 8007a34:	2309      	movs	r3, #9
 8007a36:	6033      	str	r3, [r6, #0]
 8007a38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a3c:	81a3      	strh	r3, [r4, #12]
 8007a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a42:	e03e      	b.n	8007ac2 <__swsetup_r+0xba>
 8007a44:	4b25      	ldr	r3, [pc, #148]	; (8007adc <__swsetup_r+0xd4>)
 8007a46:	429c      	cmp	r4, r3
 8007a48:	d101      	bne.n	8007a4e <__swsetup_r+0x46>
 8007a4a:	68ac      	ldr	r4, [r5, #8]
 8007a4c:	e7eb      	b.n	8007a26 <__swsetup_r+0x1e>
 8007a4e:	4b24      	ldr	r3, [pc, #144]	; (8007ae0 <__swsetup_r+0xd8>)
 8007a50:	429c      	cmp	r4, r3
 8007a52:	bf08      	it	eq
 8007a54:	68ec      	ldreq	r4, [r5, #12]
 8007a56:	e7e6      	b.n	8007a26 <__swsetup_r+0x1e>
 8007a58:	0758      	lsls	r0, r3, #29
 8007a5a:	d512      	bpl.n	8007a82 <__swsetup_r+0x7a>
 8007a5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a5e:	b141      	cbz	r1, 8007a72 <__swsetup_r+0x6a>
 8007a60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a64:	4299      	cmp	r1, r3
 8007a66:	d002      	beq.n	8007a6e <__swsetup_r+0x66>
 8007a68:	4630      	mov	r0, r6
 8007a6a:	f000 fa63 	bl	8007f34 <_free_r>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	6363      	str	r3, [r4, #52]	; 0x34
 8007a72:	89a3      	ldrh	r3, [r4, #12]
 8007a74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a78:	81a3      	strh	r3, [r4, #12]
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	6063      	str	r3, [r4, #4]
 8007a7e:	6923      	ldr	r3, [r4, #16]
 8007a80:	6023      	str	r3, [r4, #0]
 8007a82:	89a3      	ldrh	r3, [r4, #12]
 8007a84:	f043 0308 	orr.w	r3, r3, #8
 8007a88:	81a3      	strh	r3, [r4, #12]
 8007a8a:	6923      	ldr	r3, [r4, #16]
 8007a8c:	b94b      	cbnz	r3, 8007aa2 <__swsetup_r+0x9a>
 8007a8e:	89a3      	ldrh	r3, [r4, #12]
 8007a90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a98:	d003      	beq.n	8007aa2 <__swsetup_r+0x9a>
 8007a9a:	4621      	mov	r1, r4
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	f000 fa09 	bl	8007eb4 <__smakebuf_r>
 8007aa2:	89a0      	ldrh	r0, [r4, #12]
 8007aa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007aa8:	f010 0301 	ands.w	r3, r0, #1
 8007aac:	d00a      	beq.n	8007ac4 <__swsetup_r+0xbc>
 8007aae:	2300      	movs	r3, #0
 8007ab0:	60a3      	str	r3, [r4, #8]
 8007ab2:	6963      	ldr	r3, [r4, #20]
 8007ab4:	425b      	negs	r3, r3
 8007ab6:	61a3      	str	r3, [r4, #24]
 8007ab8:	6923      	ldr	r3, [r4, #16]
 8007aba:	b943      	cbnz	r3, 8007ace <__swsetup_r+0xc6>
 8007abc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ac0:	d1ba      	bne.n	8007a38 <__swsetup_r+0x30>
 8007ac2:	bd70      	pop	{r4, r5, r6, pc}
 8007ac4:	0781      	lsls	r1, r0, #30
 8007ac6:	bf58      	it	pl
 8007ac8:	6963      	ldrpl	r3, [r4, #20]
 8007aca:	60a3      	str	r3, [r4, #8]
 8007acc:	e7f4      	b.n	8007ab8 <__swsetup_r+0xb0>
 8007ace:	2000      	movs	r0, #0
 8007ad0:	e7f7      	b.n	8007ac2 <__swsetup_r+0xba>
 8007ad2:	bf00      	nop
 8007ad4:	200001c4 	.word	0x200001c4
 8007ad8:	0800885c 	.word	0x0800885c
 8007adc:	0800887c 	.word	0x0800887c
 8007ae0:	0800883c 	.word	0x0800883c

08007ae4 <abort>:
 8007ae4:	b508      	push	{r3, lr}
 8007ae6:	2006      	movs	r0, #6
 8007ae8:	f000 fb84 	bl	80081f4 <raise>
 8007aec:	2001      	movs	r0, #1
 8007aee:	f7fa fd3d 	bl	800256c <_exit>
	...

08007af4 <__sflush_r>:
 8007af4:	898a      	ldrh	r2, [r1, #12]
 8007af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007afa:	4605      	mov	r5, r0
 8007afc:	0710      	lsls	r0, r2, #28
 8007afe:	460c      	mov	r4, r1
 8007b00:	d458      	bmi.n	8007bb4 <__sflush_r+0xc0>
 8007b02:	684b      	ldr	r3, [r1, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	dc05      	bgt.n	8007b14 <__sflush_r+0x20>
 8007b08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	dc02      	bgt.n	8007b14 <__sflush_r+0x20>
 8007b0e:	2000      	movs	r0, #0
 8007b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b16:	2e00      	cmp	r6, #0
 8007b18:	d0f9      	beq.n	8007b0e <__sflush_r+0x1a>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b20:	682f      	ldr	r7, [r5, #0]
 8007b22:	602b      	str	r3, [r5, #0]
 8007b24:	d032      	beq.n	8007b8c <__sflush_r+0x98>
 8007b26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b28:	89a3      	ldrh	r3, [r4, #12]
 8007b2a:	075a      	lsls	r2, r3, #29
 8007b2c:	d505      	bpl.n	8007b3a <__sflush_r+0x46>
 8007b2e:	6863      	ldr	r3, [r4, #4]
 8007b30:	1ac0      	subs	r0, r0, r3
 8007b32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b34:	b10b      	cbz	r3, 8007b3a <__sflush_r+0x46>
 8007b36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b38:	1ac0      	subs	r0, r0, r3
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b40:	6a21      	ldr	r1, [r4, #32]
 8007b42:	4628      	mov	r0, r5
 8007b44:	47b0      	blx	r6
 8007b46:	1c43      	adds	r3, r0, #1
 8007b48:	89a3      	ldrh	r3, [r4, #12]
 8007b4a:	d106      	bne.n	8007b5a <__sflush_r+0x66>
 8007b4c:	6829      	ldr	r1, [r5, #0]
 8007b4e:	291d      	cmp	r1, #29
 8007b50:	d82c      	bhi.n	8007bac <__sflush_r+0xb8>
 8007b52:	4a2a      	ldr	r2, [pc, #168]	; (8007bfc <__sflush_r+0x108>)
 8007b54:	40ca      	lsrs	r2, r1
 8007b56:	07d6      	lsls	r6, r2, #31
 8007b58:	d528      	bpl.n	8007bac <__sflush_r+0xb8>
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	6062      	str	r2, [r4, #4]
 8007b5e:	04d9      	lsls	r1, r3, #19
 8007b60:	6922      	ldr	r2, [r4, #16]
 8007b62:	6022      	str	r2, [r4, #0]
 8007b64:	d504      	bpl.n	8007b70 <__sflush_r+0x7c>
 8007b66:	1c42      	adds	r2, r0, #1
 8007b68:	d101      	bne.n	8007b6e <__sflush_r+0x7a>
 8007b6a:	682b      	ldr	r3, [r5, #0]
 8007b6c:	b903      	cbnz	r3, 8007b70 <__sflush_r+0x7c>
 8007b6e:	6560      	str	r0, [r4, #84]	; 0x54
 8007b70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b72:	602f      	str	r7, [r5, #0]
 8007b74:	2900      	cmp	r1, #0
 8007b76:	d0ca      	beq.n	8007b0e <__sflush_r+0x1a>
 8007b78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b7c:	4299      	cmp	r1, r3
 8007b7e:	d002      	beq.n	8007b86 <__sflush_r+0x92>
 8007b80:	4628      	mov	r0, r5
 8007b82:	f000 f9d7 	bl	8007f34 <_free_r>
 8007b86:	2000      	movs	r0, #0
 8007b88:	6360      	str	r0, [r4, #52]	; 0x34
 8007b8a:	e7c1      	b.n	8007b10 <__sflush_r+0x1c>
 8007b8c:	6a21      	ldr	r1, [r4, #32]
 8007b8e:	2301      	movs	r3, #1
 8007b90:	4628      	mov	r0, r5
 8007b92:	47b0      	blx	r6
 8007b94:	1c41      	adds	r1, r0, #1
 8007b96:	d1c7      	bne.n	8007b28 <__sflush_r+0x34>
 8007b98:	682b      	ldr	r3, [r5, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d0c4      	beq.n	8007b28 <__sflush_r+0x34>
 8007b9e:	2b1d      	cmp	r3, #29
 8007ba0:	d001      	beq.n	8007ba6 <__sflush_r+0xb2>
 8007ba2:	2b16      	cmp	r3, #22
 8007ba4:	d101      	bne.n	8007baa <__sflush_r+0xb6>
 8007ba6:	602f      	str	r7, [r5, #0]
 8007ba8:	e7b1      	b.n	8007b0e <__sflush_r+0x1a>
 8007baa:	89a3      	ldrh	r3, [r4, #12]
 8007bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bb0:	81a3      	strh	r3, [r4, #12]
 8007bb2:	e7ad      	b.n	8007b10 <__sflush_r+0x1c>
 8007bb4:	690f      	ldr	r7, [r1, #16]
 8007bb6:	2f00      	cmp	r7, #0
 8007bb8:	d0a9      	beq.n	8007b0e <__sflush_r+0x1a>
 8007bba:	0793      	lsls	r3, r2, #30
 8007bbc:	680e      	ldr	r6, [r1, #0]
 8007bbe:	bf08      	it	eq
 8007bc0:	694b      	ldreq	r3, [r1, #20]
 8007bc2:	600f      	str	r7, [r1, #0]
 8007bc4:	bf18      	it	ne
 8007bc6:	2300      	movne	r3, #0
 8007bc8:	eba6 0807 	sub.w	r8, r6, r7
 8007bcc:	608b      	str	r3, [r1, #8]
 8007bce:	f1b8 0f00 	cmp.w	r8, #0
 8007bd2:	dd9c      	ble.n	8007b0e <__sflush_r+0x1a>
 8007bd4:	6a21      	ldr	r1, [r4, #32]
 8007bd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007bd8:	4643      	mov	r3, r8
 8007bda:	463a      	mov	r2, r7
 8007bdc:	4628      	mov	r0, r5
 8007bde:	47b0      	blx	r6
 8007be0:	2800      	cmp	r0, #0
 8007be2:	dc06      	bgt.n	8007bf2 <__sflush_r+0xfe>
 8007be4:	89a3      	ldrh	r3, [r4, #12]
 8007be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bea:	81a3      	strh	r3, [r4, #12]
 8007bec:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf0:	e78e      	b.n	8007b10 <__sflush_r+0x1c>
 8007bf2:	4407      	add	r7, r0
 8007bf4:	eba8 0800 	sub.w	r8, r8, r0
 8007bf8:	e7e9      	b.n	8007bce <__sflush_r+0xda>
 8007bfa:	bf00      	nop
 8007bfc:	20400001 	.word	0x20400001

08007c00 <_fflush_r>:
 8007c00:	b538      	push	{r3, r4, r5, lr}
 8007c02:	690b      	ldr	r3, [r1, #16]
 8007c04:	4605      	mov	r5, r0
 8007c06:	460c      	mov	r4, r1
 8007c08:	b913      	cbnz	r3, 8007c10 <_fflush_r+0x10>
 8007c0a:	2500      	movs	r5, #0
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	bd38      	pop	{r3, r4, r5, pc}
 8007c10:	b118      	cbz	r0, 8007c1a <_fflush_r+0x1a>
 8007c12:	6983      	ldr	r3, [r0, #24]
 8007c14:	b90b      	cbnz	r3, 8007c1a <_fflush_r+0x1a>
 8007c16:	f000 f887 	bl	8007d28 <__sinit>
 8007c1a:	4b14      	ldr	r3, [pc, #80]	; (8007c6c <_fflush_r+0x6c>)
 8007c1c:	429c      	cmp	r4, r3
 8007c1e:	d11b      	bne.n	8007c58 <_fflush_r+0x58>
 8007c20:	686c      	ldr	r4, [r5, #4]
 8007c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d0ef      	beq.n	8007c0a <_fflush_r+0xa>
 8007c2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c2c:	07d0      	lsls	r0, r2, #31
 8007c2e:	d404      	bmi.n	8007c3a <_fflush_r+0x3a>
 8007c30:	0599      	lsls	r1, r3, #22
 8007c32:	d402      	bmi.n	8007c3a <_fflush_r+0x3a>
 8007c34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c36:	f000 f915 	bl	8007e64 <__retarget_lock_acquire_recursive>
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	f7ff ff59 	bl	8007af4 <__sflush_r>
 8007c42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c44:	07da      	lsls	r2, r3, #31
 8007c46:	4605      	mov	r5, r0
 8007c48:	d4e0      	bmi.n	8007c0c <_fflush_r+0xc>
 8007c4a:	89a3      	ldrh	r3, [r4, #12]
 8007c4c:	059b      	lsls	r3, r3, #22
 8007c4e:	d4dd      	bmi.n	8007c0c <_fflush_r+0xc>
 8007c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c52:	f000 f908 	bl	8007e66 <__retarget_lock_release_recursive>
 8007c56:	e7d9      	b.n	8007c0c <_fflush_r+0xc>
 8007c58:	4b05      	ldr	r3, [pc, #20]	; (8007c70 <_fflush_r+0x70>)
 8007c5a:	429c      	cmp	r4, r3
 8007c5c:	d101      	bne.n	8007c62 <_fflush_r+0x62>
 8007c5e:	68ac      	ldr	r4, [r5, #8]
 8007c60:	e7df      	b.n	8007c22 <_fflush_r+0x22>
 8007c62:	4b04      	ldr	r3, [pc, #16]	; (8007c74 <_fflush_r+0x74>)
 8007c64:	429c      	cmp	r4, r3
 8007c66:	bf08      	it	eq
 8007c68:	68ec      	ldreq	r4, [r5, #12]
 8007c6a:	e7da      	b.n	8007c22 <_fflush_r+0x22>
 8007c6c:	0800885c 	.word	0x0800885c
 8007c70:	0800887c 	.word	0x0800887c
 8007c74:	0800883c 	.word	0x0800883c

08007c78 <std>:
 8007c78:	2300      	movs	r3, #0
 8007c7a:	b510      	push	{r4, lr}
 8007c7c:	4604      	mov	r4, r0
 8007c7e:	e9c0 3300 	strd	r3, r3, [r0]
 8007c82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c86:	6083      	str	r3, [r0, #8]
 8007c88:	8181      	strh	r1, [r0, #12]
 8007c8a:	6643      	str	r3, [r0, #100]	; 0x64
 8007c8c:	81c2      	strh	r2, [r0, #14]
 8007c8e:	6183      	str	r3, [r0, #24]
 8007c90:	4619      	mov	r1, r3
 8007c92:	2208      	movs	r2, #8
 8007c94:	305c      	adds	r0, #92	; 0x5c
 8007c96:	f7ff facb 	bl	8007230 <memset>
 8007c9a:	4b05      	ldr	r3, [pc, #20]	; (8007cb0 <std+0x38>)
 8007c9c:	6263      	str	r3, [r4, #36]	; 0x24
 8007c9e:	4b05      	ldr	r3, [pc, #20]	; (8007cb4 <std+0x3c>)
 8007ca0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ca2:	4b05      	ldr	r3, [pc, #20]	; (8007cb8 <std+0x40>)
 8007ca4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ca6:	4b05      	ldr	r3, [pc, #20]	; (8007cbc <std+0x44>)
 8007ca8:	6224      	str	r4, [r4, #32]
 8007caa:	6323      	str	r3, [r4, #48]	; 0x30
 8007cac:	bd10      	pop	{r4, pc}
 8007cae:	bf00      	nop
 8007cb0:	0800822d 	.word	0x0800822d
 8007cb4:	0800824f 	.word	0x0800824f
 8007cb8:	08008287 	.word	0x08008287
 8007cbc:	080082ab 	.word	0x080082ab

08007cc0 <_cleanup_r>:
 8007cc0:	4901      	ldr	r1, [pc, #4]	; (8007cc8 <_cleanup_r+0x8>)
 8007cc2:	f000 b8af 	b.w	8007e24 <_fwalk_reent>
 8007cc6:	bf00      	nop
 8007cc8:	08007c01 	.word	0x08007c01

08007ccc <__sfmoreglue>:
 8007ccc:	b570      	push	{r4, r5, r6, lr}
 8007cce:	2268      	movs	r2, #104	; 0x68
 8007cd0:	1e4d      	subs	r5, r1, #1
 8007cd2:	4355      	muls	r5, r2
 8007cd4:	460e      	mov	r6, r1
 8007cd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007cda:	f000 f997 	bl	800800c <_malloc_r>
 8007cde:	4604      	mov	r4, r0
 8007ce0:	b140      	cbz	r0, 8007cf4 <__sfmoreglue+0x28>
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	e9c0 1600 	strd	r1, r6, [r0]
 8007ce8:	300c      	adds	r0, #12
 8007cea:	60a0      	str	r0, [r4, #8]
 8007cec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007cf0:	f7ff fa9e 	bl	8007230 <memset>
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	bd70      	pop	{r4, r5, r6, pc}

08007cf8 <__sfp_lock_acquire>:
 8007cf8:	4801      	ldr	r0, [pc, #4]	; (8007d00 <__sfp_lock_acquire+0x8>)
 8007cfa:	f000 b8b3 	b.w	8007e64 <__retarget_lock_acquire_recursive>
 8007cfe:	bf00      	nop
 8007d00:	200003e5 	.word	0x200003e5

08007d04 <__sfp_lock_release>:
 8007d04:	4801      	ldr	r0, [pc, #4]	; (8007d0c <__sfp_lock_release+0x8>)
 8007d06:	f000 b8ae 	b.w	8007e66 <__retarget_lock_release_recursive>
 8007d0a:	bf00      	nop
 8007d0c:	200003e5 	.word	0x200003e5

08007d10 <__sinit_lock_acquire>:
 8007d10:	4801      	ldr	r0, [pc, #4]	; (8007d18 <__sinit_lock_acquire+0x8>)
 8007d12:	f000 b8a7 	b.w	8007e64 <__retarget_lock_acquire_recursive>
 8007d16:	bf00      	nop
 8007d18:	200003e6 	.word	0x200003e6

08007d1c <__sinit_lock_release>:
 8007d1c:	4801      	ldr	r0, [pc, #4]	; (8007d24 <__sinit_lock_release+0x8>)
 8007d1e:	f000 b8a2 	b.w	8007e66 <__retarget_lock_release_recursive>
 8007d22:	bf00      	nop
 8007d24:	200003e6 	.word	0x200003e6

08007d28 <__sinit>:
 8007d28:	b510      	push	{r4, lr}
 8007d2a:	4604      	mov	r4, r0
 8007d2c:	f7ff fff0 	bl	8007d10 <__sinit_lock_acquire>
 8007d30:	69a3      	ldr	r3, [r4, #24]
 8007d32:	b11b      	cbz	r3, 8007d3c <__sinit+0x14>
 8007d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d38:	f7ff bff0 	b.w	8007d1c <__sinit_lock_release>
 8007d3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d40:	6523      	str	r3, [r4, #80]	; 0x50
 8007d42:	4b13      	ldr	r3, [pc, #76]	; (8007d90 <__sinit+0x68>)
 8007d44:	4a13      	ldr	r2, [pc, #76]	; (8007d94 <__sinit+0x6c>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d4a:	42a3      	cmp	r3, r4
 8007d4c:	bf04      	itt	eq
 8007d4e:	2301      	moveq	r3, #1
 8007d50:	61a3      	streq	r3, [r4, #24]
 8007d52:	4620      	mov	r0, r4
 8007d54:	f000 f820 	bl	8007d98 <__sfp>
 8007d58:	6060      	str	r0, [r4, #4]
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	f000 f81c 	bl	8007d98 <__sfp>
 8007d60:	60a0      	str	r0, [r4, #8]
 8007d62:	4620      	mov	r0, r4
 8007d64:	f000 f818 	bl	8007d98 <__sfp>
 8007d68:	2200      	movs	r2, #0
 8007d6a:	60e0      	str	r0, [r4, #12]
 8007d6c:	2104      	movs	r1, #4
 8007d6e:	6860      	ldr	r0, [r4, #4]
 8007d70:	f7ff ff82 	bl	8007c78 <std>
 8007d74:	68a0      	ldr	r0, [r4, #8]
 8007d76:	2201      	movs	r2, #1
 8007d78:	2109      	movs	r1, #9
 8007d7a:	f7ff ff7d 	bl	8007c78 <std>
 8007d7e:	68e0      	ldr	r0, [r4, #12]
 8007d80:	2202      	movs	r2, #2
 8007d82:	2112      	movs	r1, #18
 8007d84:	f7ff ff78 	bl	8007c78 <std>
 8007d88:	2301      	movs	r3, #1
 8007d8a:	61a3      	str	r3, [r4, #24]
 8007d8c:	e7d2      	b.n	8007d34 <__sinit+0xc>
 8007d8e:	bf00      	nop
 8007d90:	08008804 	.word	0x08008804
 8007d94:	08007cc1 	.word	0x08007cc1

08007d98 <__sfp>:
 8007d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9a:	4607      	mov	r7, r0
 8007d9c:	f7ff ffac 	bl	8007cf8 <__sfp_lock_acquire>
 8007da0:	4b1e      	ldr	r3, [pc, #120]	; (8007e1c <__sfp+0x84>)
 8007da2:	681e      	ldr	r6, [r3, #0]
 8007da4:	69b3      	ldr	r3, [r6, #24]
 8007da6:	b913      	cbnz	r3, 8007dae <__sfp+0x16>
 8007da8:	4630      	mov	r0, r6
 8007daa:	f7ff ffbd 	bl	8007d28 <__sinit>
 8007dae:	3648      	adds	r6, #72	; 0x48
 8007db0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007db4:	3b01      	subs	r3, #1
 8007db6:	d503      	bpl.n	8007dc0 <__sfp+0x28>
 8007db8:	6833      	ldr	r3, [r6, #0]
 8007dba:	b30b      	cbz	r3, 8007e00 <__sfp+0x68>
 8007dbc:	6836      	ldr	r6, [r6, #0]
 8007dbe:	e7f7      	b.n	8007db0 <__sfp+0x18>
 8007dc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007dc4:	b9d5      	cbnz	r5, 8007dfc <__sfp+0x64>
 8007dc6:	4b16      	ldr	r3, [pc, #88]	; (8007e20 <__sfp+0x88>)
 8007dc8:	60e3      	str	r3, [r4, #12]
 8007dca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007dce:	6665      	str	r5, [r4, #100]	; 0x64
 8007dd0:	f000 f847 	bl	8007e62 <__retarget_lock_init_recursive>
 8007dd4:	f7ff ff96 	bl	8007d04 <__sfp_lock_release>
 8007dd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ddc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007de0:	6025      	str	r5, [r4, #0]
 8007de2:	61a5      	str	r5, [r4, #24]
 8007de4:	2208      	movs	r2, #8
 8007de6:	4629      	mov	r1, r5
 8007de8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007dec:	f7ff fa20 	bl	8007230 <memset>
 8007df0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007df4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007df8:	4620      	mov	r0, r4
 8007dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dfc:	3468      	adds	r4, #104	; 0x68
 8007dfe:	e7d9      	b.n	8007db4 <__sfp+0x1c>
 8007e00:	2104      	movs	r1, #4
 8007e02:	4638      	mov	r0, r7
 8007e04:	f7ff ff62 	bl	8007ccc <__sfmoreglue>
 8007e08:	4604      	mov	r4, r0
 8007e0a:	6030      	str	r0, [r6, #0]
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	d1d5      	bne.n	8007dbc <__sfp+0x24>
 8007e10:	f7ff ff78 	bl	8007d04 <__sfp_lock_release>
 8007e14:	230c      	movs	r3, #12
 8007e16:	603b      	str	r3, [r7, #0]
 8007e18:	e7ee      	b.n	8007df8 <__sfp+0x60>
 8007e1a:	bf00      	nop
 8007e1c:	08008804 	.word	0x08008804
 8007e20:	ffff0001 	.word	0xffff0001

08007e24 <_fwalk_reent>:
 8007e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e28:	4606      	mov	r6, r0
 8007e2a:	4688      	mov	r8, r1
 8007e2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e30:	2700      	movs	r7, #0
 8007e32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e36:	f1b9 0901 	subs.w	r9, r9, #1
 8007e3a:	d505      	bpl.n	8007e48 <_fwalk_reent+0x24>
 8007e3c:	6824      	ldr	r4, [r4, #0]
 8007e3e:	2c00      	cmp	r4, #0
 8007e40:	d1f7      	bne.n	8007e32 <_fwalk_reent+0xe>
 8007e42:	4638      	mov	r0, r7
 8007e44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e48:	89ab      	ldrh	r3, [r5, #12]
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d907      	bls.n	8007e5e <_fwalk_reent+0x3a>
 8007e4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e52:	3301      	adds	r3, #1
 8007e54:	d003      	beq.n	8007e5e <_fwalk_reent+0x3a>
 8007e56:	4629      	mov	r1, r5
 8007e58:	4630      	mov	r0, r6
 8007e5a:	47c0      	blx	r8
 8007e5c:	4307      	orrs	r7, r0
 8007e5e:	3568      	adds	r5, #104	; 0x68
 8007e60:	e7e9      	b.n	8007e36 <_fwalk_reent+0x12>

08007e62 <__retarget_lock_init_recursive>:
 8007e62:	4770      	bx	lr

08007e64 <__retarget_lock_acquire_recursive>:
 8007e64:	4770      	bx	lr

08007e66 <__retarget_lock_release_recursive>:
 8007e66:	4770      	bx	lr

08007e68 <__swhatbuf_r>:
 8007e68:	b570      	push	{r4, r5, r6, lr}
 8007e6a:	460e      	mov	r6, r1
 8007e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e70:	2900      	cmp	r1, #0
 8007e72:	b096      	sub	sp, #88	; 0x58
 8007e74:	4614      	mov	r4, r2
 8007e76:	461d      	mov	r5, r3
 8007e78:	da08      	bge.n	8007e8c <__swhatbuf_r+0x24>
 8007e7a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	602a      	str	r2, [r5, #0]
 8007e82:	061a      	lsls	r2, r3, #24
 8007e84:	d410      	bmi.n	8007ea8 <__swhatbuf_r+0x40>
 8007e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e8a:	e00e      	b.n	8007eaa <__swhatbuf_r+0x42>
 8007e8c:	466a      	mov	r2, sp
 8007e8e:	f000 fa33 	bl	80082f8 <_fstat_r>
 8007e92:	2800      	cmp	r0, #0
 8007e94:	dbf1      	blt.n	8007e7a <__swhatbuf_r+0x12>
 8007e96:	9a01      	ldr	r2, [sp, #4]
 8007e98:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e9c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ea0:	425a      	negs	r2, r3
 8007ea2:	415a      	adcs	r2, r3
 8007ea4:	602a      	str	r2, [r5, #0]
 8007ea6:	e7ee      	b.n	8007e86 <__swhatbuf_r+0x1e>
 8007ea8:	2340      	movs	r3, #64	; 0x40
 8007eaa:	2000      	movs	r0, #0
 8007eac:	6023      	str	r3, [r4, #0]
 8007eae:	b016      	add	sp, #88	; 0x58
 8007eb0:	bd70      	pop	{r4, r5, r6, pc}
	...

08007eb4 <__smakebuf_r>:
 8007eb4:	898b      	ldrh	r3, [r1, #12]
 8007eb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007eb8:	079d      	lsls	r5, r3, #30
 8007eba:	4606      	mov	r6, r0
 8007ebc:	460c      	mov	r4, r1
 8007ebe:	d507      	bpl.n	8007ed0 <__smakebuf_r+0x1c>
 8007ec0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ec4:	6023      	str	r3, [r4, #0]
 8007ec6:	6123      	str	r3, [r4, #16]
 8007ec8:	2301      	movs	r3, #1
 8007eca:	6163      	str	r3, [r4, #20]
 8007ecc:	b002      	add	sp, #8
 8007ece:	bd70      	pop	{r4, r5, r6, pc}
 8007ed0:	ab01      	add	r3, sp, #4
 8007ed2:	466a      	mov	r2, sp
 8007ed4:	f7ff ffc8 	bl	8007e68 <__swhatbuf_r>
 8007ed8:	9900      	ldr	r1, [sp, #0]
 8007eda:	4605      	mov	r5, r0
 8007edc:	4630      	mov	r0, r6
 8007ede:	f000 f895 	bl	800800c <_malloc_r>
 8007ee2:	b948      	cbnz	r0, 8007ef8 <__smakebuf_r+0x44>
 8007ee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ee8:	059a      	lsls	r2, r3, #22
 8007eea:	d4ef      	bmi.n	8007ecc <__smakebuf_r+0x18>
 8007eec:	f023 0303 	bic.w	r3, r3, #3
 8007ef0:	f043 0302 	orr.w	r3, r3, #2
 8007ef4:	81a3      	strh	r3, [r4, #12]
 8007ef6:	e7e3      	b.n	8007ec0 <__smakebuf_r+0xc>
 8007ef8:	4b0d      	ldr	r3, [pc, #52]	; (8007f30 <__smakebuf_r+0x7c>)
 8007efa:	62b3      	str	r3, [r6, #40]	; 0x28
 8007efc:	89a3      	ldrh	r3, [r4, #12]
 8007efe:	6020      	str	r0, [r4, #0]
 8007f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f04:	81a3      	strh	r3, [r4, #12]
 8007f06:	9b00      	ldr	r3, [sp, #0]
 8007f08:	6163      	str	r3, [r4, #20]
 8007f0a:	9b01      	ldr	r3, [sp, #4]
 8007f0c:	6120      	str	r0, [r4, #16]
 8007f0e:	b15b      	cbz	r3, 8007f28 <__smakebuf_r+0x74>
 8007f10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f14:	4630      	mov	r0, r6
 8007f16:	f000 fa01 	bl	800831c <_isatty_r>
 8007f1a:	b128      	cbz	r0, 8007f28 <__smakebuf_r+0x74>
 8007f1c:	89a3      	ldrh	r3, [r4, #12]
 8007f1e:	f023 0303 	bic.w	r3, r3, #3
 8007f22:	f043 0301 	orr.w	r3, r3, #1
 8007f26:	81a3      	strh	r3, [r4, #12]
 8007f28:	89a0      	ldrh	r0, [r4, #12]
 8007f2a:	4305      	orrs	r5, r0
 8007f2c:	81a5      	strh	r5, [r4, #12]
 8007f2e:	e7cd      	b.n	8007ecc <__smakebuf_r+0x18>
 8007f30:	08007cc1 	.word	0x08007cc1

08007f34 <_free_r>:
 8007f34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f36:	2900      	cmp	r1, #0
 8007f38:	d044      	beq.n	8007fc4 <_free_r+0x90>
 8007f3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f3e:	9001      	str	r0, [sp, #4]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f1a1 0404 	sub.w	r4, r1, #4
 8007f46:	bfb8      	it	lt
 8007f48:	18e4      	addlt	r4, r4, r3
 8007f4a:	f000 fa09 	bl	8008360 <__malloc_lock>
 8007f4e:	4a1e      	ldr	r2, [pc, #120]	; (8007fc8 <_free_r+0x94>)
 8007f50:	9801      	ldr	r0, [sp, #4]
 8007f52:	6813      	ldr	r3, [r2, #0]
 8007f54:	b933      	cbnz	r3, 8007f64 <_free_r+0x30>
 8007f56:	6063      	str	r3, [r4, #4]
 8007f58:	6014      	str	r4, [r2, #0]
 8007f5a:	b003      	add	sp, #12
 8007f5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f60:	f000 ba04 	b.w	800836c <__malloc_unlock>
 8007f64:	42a3      	cmp	r3, r4
 8007f66:	d908      	bls.n	8007f7a <_free_r+0x46>
 8007f68:	6825      	ldr	r5, [r4, #0]
 8007f6a:	1961      	adds	r1, r4, r5
 8007f6c:	428b      	cmp	r3, r1
 8007f6e:	bf01      	itttt	eq
 8007f70:	6819      	ldreq	r1, [r3, #0]
 8007f72:	685b      	ldreq	r3, [r3, #4]
 8007f74:	1949      	addeq	r1, r1, r5
 8007f76:	6021      	streq	r1, [r4, #0]
 8007f78:	e7ed      	b.n	8007f56 <_free_r+0x22>
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	b10b      	cbz	r3, 8007f84 <_free_r+0x50>
 8007f80:	42a3      	cmp	r3, r4
 8007f82:	d9fa      	bls.n	8007f7a <_free_r+0x46>
 8007f84:	6811      	ldr	r1, [r2, #0]
 8007f86:	1855      	adds	r5, r2, r1
 8007f88:	42a5      	cmp	r5, r4
 8007f8a:	d10b      	bne.n	8007fa4 <_free_r+0x70>
 8007f8c:	6824      	ldr	r4, [r4, #0]
 8007f8e:	4421      	add	r1, r4
 8007f90:	1854      	adds	r4, r2, r1
 8007f92:	42a3      	cmp	r3, r4
 8007f94:	6011      	str	r1, [r2, #0]
 8007f96:	d1e0      	bne.n	8007f5a <_free_r+0x26>
 8007f98:	681c      	ldr	r4, [r3, #0]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	6053      	str	r3, [r2, #4]
 8007f9e:	4421      	add	r1, r4
 8007fa0:	6011      	str	r1, [r2, #0]
 8007fa2:	e7da      	b.n	8007f5a <_free_r+0x26>
 8007fa4:	d902      	bls.n	8007fac <_free_r+0x78>
 8007fa6:	230c      	movs	r3, #12
 8007fa8:	6003      	str	r3, [r0, #0]
 8007faa:	e7d6      	b.n	8007f5a <_free_r+0x26>
 8007fac:	6825      	ldr	r5, [r4, #0]
 8007fae:	1961      	adds	r1, r4, r5
 8007fb0:	428b      	cmp	r3, r1
 8007fb2:	bf04      	itt	eq
 8007fb4:	6819      	ldreq	r1, [r3, #0]
 8007fb6:	685b      	ldreq	r3, [r3, #4]
 8007fb8:	6063      	str	r3, [r4, #4]
 8007fba:	bf04      	itt	eq
 8007fbc:	1949      	addeq	r1, r1, r5
 8007fbe:	6021      	streq	r1, [r4, #0]
 8007fc0:	6054      	str	r4, [r2, #4]
 8007fc2:	e7ca      	b.n	8007f5a <_free_r+0x26>
 8007fc4:	b003      	add	sp, #12
 8007fc6:	bd30      	pop	{r4, r5, pc}
 8007fc8:	200003e8 	.word	0x200003e8

08007fcc <sbrk_aligned>:
 8007fcc:	b570      	push	{r4, r5, r6, lr}
 8007fce:	4e0e      	ldr	r6, [pc, #56]	; (8008008 <sbrk_aligned+0x3c>)
 8007fd0:	460c      	mov	r4, r1
 8007fd2:	6831      	ldr	r1, [r6, #0]
 8007fd4:	4605      	mov	r5, r0
 8007fd6:	b911      	cbnz	r1, 8007fde <sbrk_aligned+0x12>
 8007fd8:	f000 f8d4 	bl	8008184 <_sbrk_r>
 8007fdc:	6030      	str	r0, [r6, #0]
 8007fde:	4621      	mov	r1, r4
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	f000 f8cf 	bl	8008184 <_sbrk_r>
 8007fe6:	1c43      	adds	r3, r0, #1
 8007fe8:	d00a      	beq.n	8008000 <sbrk_aligned+0x34>
 8007fea:	1cc4      	adds	r4, r0, #3
 8007fec:	f024 0403 	bic.w	r4, r4, #3
 8007ff0:	42a0      	cmp	r0, r4
 8007ff2:	d007      	beq.n	8008004 <sbrk_aligned+0x38>
 8007ff4:	1a21      	subs	r1, r4, r0
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	f000 f8c4 	bl	8008184 <_sbrk_r>
 8007ffc:	3001      	adds	r0, #1
 8007ffe:	d101      	bne.n	8008004 <sbrk_aligned+0x38>
 8008000:	f04f 34ff 	mov.w	r4, #4294967295
 8008004:	4620      	mov	r0, r4
 8008006:	bd70      	pop	{r4, r5, r6, pc}
 8008008:	200003ec 	.word	0x200003ec

0800800c <_malloc_r>:
 800800c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008010:	1ccd      	adds	r5, r1, #3
 8008012:	f025 0503 	bic.w	r5, r5, #3
 8008016:	3508      	adds	r5, #8
 8008018:	2d0c      	cmp	r5, #12
 800801a:	bf38      	it	cc
 800801c:	250c      	movcc	r5, #12
 800801e:	2d00      	cmp	r5, #0
 8008020:	4607      	mov	r7, r0
 8008022:	db01      	blt.n	8008028 <_malloc_r+0x1c>
 8008024:	42a9      	cmp	r1, r5
 8008026:	d905      	bls.n	8008034 <_malloc_r+0x28>
 8008028:	230c      	movs	r3, #12
 800802a:	603b      	str	r3, [r7, #0]
 800802c:	2600      	movs	r6, #0
 800802e:	4630      	mov	r0, r6
 8008030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008034:	4e2e      	ldr	r6, [pc, #184]	; (80080f0 <_malloc_r+0xe4>)
 8008036:	f000 f993 	bl	8008360 <__malloc_lock>
 800803a:	6833      	ldr	r3, [r6, #0]
 800803c:	461c      	mov	r4, r3
 800803e:	bb34      	cbnz	r4, 800808e <_malloc_r+0x82>
 8008040:	4629      	mov	r1, r5
 8008042:	4638      	mov	r0, r7
 8008044:	f7ff ffc2 	bl	8007fcc <sbrk_aligned>
 8008048:	1c43      	adds	r3, r0, #1
 800804a:	4604      	mov	r4, r0
 800804c:	d14d      	bne.n	80080ea <_malloc_r+0xde>
 800804e:	6834      	ldr	r4, [r6, #0]
 8008050:	4626      	mov	r6, r4
 8008052:	2e00      	cmp	r6, #0
 8008054:	d140      	bne.n	80080d8 <_malloc_r+0xcc>
 8008056:	6823      	ldr	r3, [r4, #0]
 8008058:	4631      	mov	r1, r6
 800805a:	4638      	mov	r0, r7
 800805c:	eb04 0803 	add.w	r8, r4, r3
 8008060:	f000 f890 	bl	8008184 <_sbrk_r>
 8008064:	4580      	cmp	r8, r0
 8008066:	d13a      	bne.n	80080de <_malloc_r+0xd2>
 8008068:	6821      	ldr	r1, [r4, #0]
 800806a:	3503      	adds	r5, #3
 800806c:	1a6d      	subs	r5, r5, r1
 800806e:	f025 0503 	bic.w	r5, r5, #3
 8008072:	3508      	adds	r5, #8
 8008074:	2d0c      	cmp	r5, #12
 8008076:	bf38      	it	cc
 8008078:	250c      	movcc	r5, #12
 800807a:	4629      	mov	r1, r5
 800807c:	4638      	mov	r0, r7
 800807e:	f7ff ffa5 	bl	8007fcc <sbrk_aligned>
 8008082:	3001      	adds	r0, #1
 8008084:	d02b      	beq.n	80080de <_malloc_r+0xd2>
 8008086:	6823      	ldr	r3, [r4, #0]
 8008088:	442b      	add	r3, r5
 800808a:	6023      	str	r3, [r4, #0]
 800808c:	e00e      	b.n	80080ac <_malloc_r+0xa0>
 800808e:	6822      	ldr	r2, [r4, #0]
 8008090:	1b52      	subs	r2, r2, r5
 8008092:	d41e      	bmi.n	80080d2 <_malloc_r+0xc6>
 8008094:	2a0b      	cmp	r2, #11
 8008096:	d916      	bls.n	80080c6 <_malloc_r+0xba>
 8008098:	1961      	adds	r1, r4, r5
 800809a:	42a3      	cmp	r3, r4
 800809c:	6025      	str	r5, [r4, #0]
 800809e:	bf18      	it	ne
 80080a0:	6059      	strne	r1, [r3, #4]
 80080a2:	6863      	ldr	r3, [r4, #4]
 80080a4:	bf08      	it	eq
 80080a6:	6031      	streq	r1, [r6, #0]
 80080a8:	5162      	str	r2, [r4, r5]
 80080aa:	604b      	str	r3, [r1, #4]
 80080ac:	4638      	mov	r0, r7
 80080ae:	f104 060b 	add.w	r6, r4, #11
 80080b2:	f000 f95b 	bl	800836c <__malloc_unlock>
 80080b6:	f026 0607 	bic.w	r6, r6, #7
 80080ba:	1d23      	adds	r3, r4, #4
 80080bc:	1af2      	subs	r2, r6, r3
 80080be:	d0b6      	beq.n	800802e <_malloc_r+0x22>
 80080c0:	1b9b      	subs	r3, r3, r6
 80080c2:	50a3      	str	r3, [r4, r2]
 80080c4:	e7b3      	b.n	800802e <_malloc_r+0x22>
 80080c6:	6862      	ldr	r2, [r4, #4]
 80080c8:	42a3      	cmp	r3, r4
 80080ca:	bf0c      	ite	eq
 80080cc:	6032      	streq	r2, [r6, #0]
 80080ce:	605a      	strne	r2, [r3, #4]
 80080d0:	e7ec      	b.n	80080ac <_malloc_r+0xa0>
 80080d2:	4623      	mov	r3, r4
 80080d4:	6864      	ldr	r4, [r4, #4]
 80080d6:	e7b2      	b.n	800803e <_malloc_r+0x32>
 80080d8:	4634      	mov	r4, r6
 80080da:	6876      	ldr	r6, [r6, #4]
 80080dc:	e7b9      	b.n	8008052 <_malloc_r+0x46>
 80080de:	230c      	movs	r3, #12
 80080e0:	603b      	str	r3, [r7, #0]
 80080e2:	4638      	mov	r0, r7
 80080e4:	f000 f942 	bl	800836c <__malloc_unlock>
 80080e8:	e7a1      	b.n	800802e <_malloc_r+0x22>
 80080ea:	6025      	str	r5, [r4, #0]
 80080ec:	e7de      	b.n	80080ac <_malloc_r+0xa0>
 80080ee:	bf00      	nop
 80080f0:	200003e8 	.word	0x200003e8

080080f4 <_putc_r>:
 80080f4:	b570      	push	{r4, r5, r6, lr}
 80080f6:	460d      	mov	r5, r1
 80080f8:	4614      	mov	r4, r2
 80080fa:	4606      	mov	r6, r0
 80080fc:	b118      	cbz	r0, 8008106 <_putc_r+0x12>
 80080fe:	6983      	ldr	r3, [r0, #24]
 8008100:	b90b      	cbnz	r3, 8008106 <_putc_r+0x12>
 8008102:	f7ff fe11 	bl	8007d28 <__sinit>
 8008106:	4b1c      	ldr	r3, [pc, #112]	; (8008178 <_putc_r+0x84>)
 8008108:	429c      	cmp	r4, r3
 800810a:	d124      	bne.n	8008156 <_putc_r+0x62>
 800810c:	6874      	ldr	r4, [r6, #4]
 800810e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008110:	07d8      	lsls	r0, r3, #31
 8008112:	d405      	bmi.n	8008120 <_putc_r+0x2c>
 8008114:	89a3      	ldrh	r3, [r4, #12]
 8008116:	0599      	lsls	r1, r3, #22
 8008118:	d402      	bmi.n	8008120 <_putc_r+0x2c>
 800811a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800811c:	f7ff fea2 	bl	8007e64 <__retarget_lock_acquire_recursive>
 8008120:	68a3      	ldr	r3, [r4, #8]
 8008122:	3b01      	subs	r3, #1
 8008124:	2b00      	cmp	r3, #0
 8008126:	60a3      	str	r3, [r4, #8]
 8008128:	da05      	bge.n	8008136 <_putc_r+0x42>
 800812a:	69a2      	ldr	r2, [r4, #24]
 800812c:	4293      	cmp	r3, r2
 800812e:	db1c      	blt.n	800816a <_putc_r+0x76>
 8008130:	b2eb      	uxtb	r3, r5
 8008132:	2b0a      	cmp	r3, #10
 8008134:	d019      	beq.n	800816a <_putc_r+0x76>
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	6022      	str	r2, [r4, #0]
 800813c:	701d      	strb	r5, [r3, #0]
 800813e:	b2ed      	uxtb	r5, r5
 8008140:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008142:	07da      	lsls	r2, r3, #31
 8008144:	d405      	bmi.n	8008152 <_putc_r+0x5e>
 8008146:	89a3      	ldrh	r3, [r4, #12]
 8008148:	059b      	lsls	r3, r3, #22
 800814a:	d402      	bmi.n	8008152 <_putc_r+0x5e>
 800814c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800814e:	f7ff fe8a 	bl	8007e66 <__retarget_lock_release_recursive>
 8008152:	4628      	mov	r0, r5
 8008154:	bd70      	pop	{r4, r5, r6, pc}
 8008156:	4b09      	ldr	r3, [pc, #36]	; (800817c <_putc_r+0x88>)
 8008158:	429c      	cmp	r4, r3
 800815a:	d101      	bne.n	8008160 <_putc_r+0x6c>
 800815c:	68b4      	ldr	r4, [r6, #8]
 800815e:	e7d6      	b.n	800810e <_putc_r+0x1a>
 8008160:	4b07      	ldr	r3, [pc, #28]	; (8008180 <_putc_r+0x8c>)
 8008162:	429c      	cmp	r4, r3
 8008164:	bf08      	it	eq
 8008166:	68f4      	ldreq	r4, [r6, #12]
 8008168:	e7d1      	b.n	800810e <_putc_r+0x1a>
 800816a:	4629      	mov	r1, r5
 800816c:	4622      	mov	r2, r4
 800816e:	4630      	mov	r0, r6
 8008170:	f7ff fbf8 	bl	8007964 <__swbuf_r>
 8008174:	4605      	mov	r5, r0
 8008176:	e7e3      	b.n	8008140 <_putc_r+0x4c>
 8008178:	0800885c 	.word	0x0800885c
 800817c:	0800887c 	.word	0x0800887c
 8008180:	0800883c 	.word	0x0800883c

08008184 <_sbrk_r>:
 8008184:	b538      	push	{r3, r4, r5, lr}
 8008186:	4d06      	ldr	r5, [pc, #24]	; (80081a0 <_sbrk_r+0x1c>)
 8008188:	2300      	movs	r3, #0
 800818a:	4604      	mov	r4, r0
 800818c:	4608      	mov	r0, r1
 800818e:	602b      	str	r3, [r5, #0]
 8008190:	f7fa fa48 	bl	8002624 <_sbrk>
 8008194:	1c43      	adds	r3, r0, #1
 8008196:	d102      	bne.n	800819e <_sbrk_r+0x1a>
 8008198:	682b      	ldr	r3, [r5, #0]
 800819a:	b103      	cbz	r3, 800819e <_sbrk_r+0x1a>
 800819c:	6023      	str	r3, [r4, #0]
 800819e:	bd38      	pop	{r3, r4, r5, pc}
 80081a0:	200003f0 	.word	0x200003f0

080081a4 <_raise_r>:
 80081a4:	291f      	cmp	r1, #31
 80081a6:	b538      	push	{r3, r4, r5, lr}
 80081a8:	4604      	mov	r4, r0
 80081aa:	460d      	mov	r5, r1
 80081ac:	d904      	bls.n	80081b8 <_raise_r+0x14>
 80081ae:	2316      	movs	r3, #22
 80081b0:	6003      	str	r3, [r0, #0]
 80081b2:	f04f 30ff 	mov.w	r0, #4294967295
 80081b6:	bd38      	pop	{r3, r4, r5, pc}
 80081b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80081ba:	b112      	cbz	r2, 80081c2 <_raise_r+0x1e>
 80081bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081c0:	b94b      	cbnz	r3, 80081d6 <_raise_r+0x32>
 80081c2:	4620      	mov	r0, r4
 80081c4:	f000 f830 	bl	8008228 <_getpid_r>
 80081c8:	462a      	mov	r2, r5
 80081ca:	4601      	mov	r1, r0
 80081cc:	4620      	mov	r0, r4
 80081ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081d2:	f000 b817 	b.w	8008204 <_kill_r>
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d00a      	beq.n	80081f0 <_raise_r+0x4c>
 80081da:	1c59      	adds	r1, r3, #1
 80081dc:	d103      	bne.n	80081e6 <_raise_r+0x42>
 80081de:	2316      	movs	r3, #22
 80081e0:	6003      	str	r3, [r0, #0]
 80081e2:	2001      	movs	r0, #1
 80081e4:	e7e7      	b.n	80081b6 <_raise_r+0x12>
 80081e6:	2400      	movs	r4, #0
 80081e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80081ec:	4628      	mov	r0, r5
 80081ee:	4798      	blx	r3
 80081f0:	2000      	movs	r0, #0
 80081f2:	e7e0      	b.n	80081b6 <_raise_r+0x12>

080081f4 <raise>:
 80081f4:	4b02      	ldr	r3, [pc, #8]	; (8008200 <raise+0xc>)
 80081f6:	4601      	mov	r1, r0
 80081f8:	6818      	ldr	r0, [r3, #0]
 80081fa:	f7ff bfd3 	b.w	80081a4 <_raise_r>
 80081fe:	bf00      	nop
 8008200:	200001c4 	.word	0x200001c4

08008204 <_kill_r>:
 8008204:	b538      	push	{r3, r4, r5, lr}
 8008206:	4d07      	ldr	r5, [pc, #28]	; (8008224 <_kill_r+0x20>)
 8008208:	2300      	movs	r3, #0
 800820a:	4604      	mov	r4, r0
 800820c:	4608      	mov	r0, r1
 800820e:	4611      	mov	r1, r2
 8008210:	602b      	str	r3, [r5, #0]
 8008212:	f7fa f99b 	bl	800254c <_kill>
 8008216:	1c43      	adds	r3, r0, #1
 8008218:	d102      	bne.n	8008220 <_kill_r+0x1c>
 800821a:	682b      	ldr	r3, [r5, #0]
 800821c:	b103      	cbz	r3, 8008220 <_kill_r+0x1c>
 800821e:	6023      	str	r3, [r4, #0]
 8008220:	bd38      	pop	{r3, r4, r5, pc}
 8008222:	bf00      	nop
 8008224:	200003f0 	.word	0x200003f0

08008228 <_getpid_r>:
 8008228:	f7fa b988 	b.w	800253c <_getpid>

0800822c <__sread>:
 800822c:	b510      	push	{r4, lr}
 800822e:	460c      	mov	r4, r1
 8008230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008234:	f000 f8a0 	bl	8008378 <_read_r>
 8008238:	2800      	cmp	r0, #0
 800823a:	bfab      	itete	ge
 800823c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800823e:	89a3      	ldrhlt	r3, [r4, #12]
 8008240:	181b      	addge	r3, r3, r0
 8008242:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008246:	bfac      	ite	ge
 8008248:	6563      	strge	r3, [r4, #84]	; 0x54
 800824a:	81a3      	strhlt	r3, [r4, #12]
 800824c:	bd10      	pop	{r4, pc}

0800824e <__swrite>:
 800824e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008252:	461f      	mov	r7, r3
 8008254:	898b      	ldrh	r3, [r1, #12]
 8008256:	05db      	lsls	r3, r3, #23
 8008258:	4605      	mov	r5, r0
 800825a:	460c      	mov	r4, r1
 800825c:	4616      	mov	r6, r2
 800825e:	d505      	bpl.n	800826c <__swrite+0x1e>
 8008260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008264:	2302      	movs	r3, #2
 8008266:	2200      	movs	r2, #0
 8008268:	f000 f868 	bl	800833c <_lseek_r>
 800826c:	89a3      	ldrh	r3, [r4, #12]
 800826e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008272:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008276:	81a3      	strh	r3, [r4, #12]
 8008278:	4632      	mov	r2, r6
 800827a:	463b      	mov	r3, r7
 800827c:	4628      	mov	r0, r5
 800827e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008282:	f000 b817 	b.w	80082b4 <_write_r>

08008286 <__sseek>:
 8008286:	b510      	push	{r4, lr}
 8008288:	460c      	mov	r4, r1
 800828a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800828e:	f000 f855 	bl	800833c <_lseek_r>
 8008292:	1c43      	adds	r3, r0, #1
 8008294:	89a3      	ldrh	r3, [r4, #12]
 8008296:	bf15      	itete	ne
 8008298:	6560      	strne	r0, [r4, #84]	; 0x54
 800829a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800829e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80082a2:	81a3      	strheq	r3, [r4, #12]
 80082a4:	bf18      	it	ne
 80082a6:	81a3      	strhne	r3, [r4, #12]
 80082a8:	bd10      	pop	{r4, pc}

080082aa <__sclose>:
 80082aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ae:	f000 b813 	b.w	80082d8 <_close_r>
	...

080082b4 <_write_r>:
 80082b4:	b538      	push	{r3, r4, r5, lr}
 80082b6:	4d07      	ldr	r5, [pc, #28]	; (80082d4 <_write_r+0x20>)
 80082b8:	4604      	mov	r4, r0
 80082ba:	4608      	mov	r0, r1
 80082bc:	4611      	mov	r1, r2
 80082be:	2200      	movs	r2, #0
 80082c0:	602a      	str	r2, [r5, #0]
 80082c2:	461a      	mov	r2, r3
 80082c4:	f7f8 fefd 	bl	80010c2 <_write>
 80082c8:	1c43      	adds	r3, r0, #1
 80082ca:	d102      	bne.n	80082d2 <_write_r+0x1e>
 80082cc:	682b      	ldr	r3, [r5, #0]
 80082ce:	b103      	cbz	r3, 80082d2 <_write_r+0x1e>
 80082d0:	6023      	str	r3, [r4, #0]
 80082d2:	bd38      	pop	{r3, r4, r5, pc}
 80082d4:	200003f0 	.word	0x200003f0

080082d8 <_close_r>:
 80082d8:	b538      	push	{r3, r4, r5, lr}
 80082da:	4d06      	ldr	r5, [pc, #24]	; (80082f4 <_close_r+0x1c>)
 80082dc:	2300      	movs	r3, #0
 80082de:	4604      	mov	r4, r0
 80082e0:	4608      	mov	r0, r1
 80082e2:	602b      	str	r3, [r5, #0]
 80082e4:	f7fa f969 	bl	80025ba <_close>
 80082e8:	1c43      	adds	r3, r0, #1
 80082ea:	d102      	bne.n	80082f2 <_close_r+0x1a>
 80082ec:	682b      	ldr	r3, [r5, #0]
 80082ee:	b103      	cbz	r3, 80082f2 <_close_r+0x1a>
 80082f0:	6023      	str	r3, [r4, #0]
 80082f2:	bd38      	pop	{r3, r4, r5, pc}
 80082f4:	200003f0 	.word	0x200003f0

080082f8 <_fstat_r>:
 80082f8:	b538      	push	{r3, r4, r5, lr}
 80082fa:	4d07      	ldr	r5, [pc, #28]	; (8008318 <_fstat_r+0x20>)
 80082fc:	2300      	movs	r3, #0
 80082fe:	4604      	mov	r4, r0
 8008300:	4608      	mov	r0, r1
 8008302:	4611      	mov	r1, r2
 8008304:	602b      	str	r3, [r5, #0]
 8008306:	f7fa f964 	bl	80025d2 <_fstat>
 800830a:	1c43      	adds	r3, r0, #1
 800830c:	d102      	bne.n	8008314 <_fstat_r+0x1c>
 800830e:	682b      	ldr	r3, [r5, #0]
 8008310:	b103      	cbz	r3, 8008314 <_fstat_r+0x1c>
 8008312:	6023      	str	r3, [r4, #0]
 8008314:	bd38      	pop	{r3, r4, r5, pc}
 8008316:	bf00      	nop
 8008318:	200003f0 	.word	0x200003f0

0800831c <_isatty_r>:
 800831c:	b538      	push	{r3, r4, r5, lr}
 800831e:	4d06      	ldr	r5, [pc, #24]	; (8008338 <_isatty_r+0x1c>)
 8008320:	2300      	movs	r3, #0
 8008322:	4604      	mov	r4, r0
 8008324:	4608      	mov	r0, r1
 8008326:	602b      	str	r3, [r5, #0]
 8008328:	f7fa f963 	bl	80025f2 <_isatty>
 800832c:	1c43      	adds	r3, r0, #1
 800832e:	d102      	bne.n	8008336 <_isatty_r+0x1a>
 8008330:	682b      	ldr	r3, [r5, #0]
 8008332:	b103      	cbz	r3, 8008336 <_isatty_r+0x1a>
 8008334:	6023      	str	r3, [r4, #0]
 8008336:	bd38      	pop	{r3, r4, r5, pc}
 8008338:	200003f0 	.word	0x200003f0

0800833c <_lseek_r>:
 800833c:	b538      	push	{r3, r4, r5, lr}
 800833e:	4d07      	ldr	r5, [pc, #28]	; (800835c <_lseek_r+0x20>)
 8008340:	4604      	mov	r4, r0
 8008342:	4608      	mov	r0, r1
 8008344:	4611      	mov	r1, r2
 8008346:	2200      	movs	r2, #0
 8008348:	602a      	str	r2, [r5, #0]
 800834a:	461a      	mov	r2, r3
 800834c:	f7fa f95c 	bl	8002608 <_lseek>
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	d102      	bne.n	800835a <_lseek_r+0x1e>
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	b103      	cbz	r3, 800835a <_lseek_r+0x1e>
 8008358:	6023      	str	r3, [r4, #0]
 800835a:	bd38      	pop	{r3, r4, r5, pc}
 800835c:	200003f0 	.word	0x200003f0

08008360 <__malloc_lock>:
 8008360:	4801      	ldr	r0, [pc, #4]	; (8008368 <__malloc_lock+0x8>)
 8008362:	f7ff bd7f 	b.w	8007e64 <__retarget_lock_acquire_recursive>
 8008366:	bf00      	nop
 8008368:	200003e4 	.word	0x200003e4

0800836c <__malloc_unlock>:
 800836c:	4801      	ldr	r0, [pc, #4]	; (8008374 <__malloc_unlock+0x8>)
 800836e:	f7ff bd7a 	b.w	8007e66 <__retarget_lock_release_recursive>
 8008372:	bf00      	nop
 8008374:	200003e4 	.word	0x200003e4

08008378 <_read_r>:
 8008378:	b538      	push	{r3, r4, r5, lr}
 800837a:	4d07      	ldr	r5, [pc, #28]	; (8008398 <_read_r+0x20>)
 800837c:	4604      	mov	r4, r0
 800837e:	4608      	mov	r0, r1
 8008380:	4611      	mov	r1, r2
 8008382:	2200      	movs	r2, #0
 8008384:	602a      	str	r2, [r5, #0]
 8008386:	461a      	mov	r2, r3
 8008388:	f7fa f8fa 	bl	8002580 <_read>
 800838c:	1c43      	adds	r3, r0, #1
 800838e:	d102      	bne.n	8008396 <_read_r+0x1e>
 8008390:	682b      	ldr	r3, [r5, #0]
 8008392:	b103      	cbz	r3, 8008396 <_read_r+0x1e>
 8008394:	6023      	str	r3, [r4, #0]
 8008396:	bd38      	pop	{r3, r4, r5, pc}
 8008398:	200003f0 	.word	0x200003f0

0800839c <_init>:
 800839c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800839e:	bf00      	nop
 80083a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083a2:	bc08      	pop	{r3}
 80083a4:	469e      	mov	lr, r3
 80083a6:	4770      	bx	lr

080083a8 <_fini>:
 80083a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083aa:	bf00      	nop
 80083ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ae:	bc08      	pop	{r3}
 80083b0:	469e      	mov	lr, r3
 80083b2:	4770      	bx	lr
