
BBBeacon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000819c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  0800832c  0800832c  0001832c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008870  08008870  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  08008870  08008870  00018870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008878  08008878  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008878  08008878  00018878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800887c  0800887c  0001887c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  08008880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000228  08008aa8  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  08008aa8  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149bb  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000294b  00000000  00000000  00034c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  00037560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001050  00000000  00000000  000386b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dd79  00000000  00000000  00039708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015503  00000000  00000000  00057481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0c34  00000000  00000000  0006c984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d5b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000540c  00000000  00000000  0011d608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008314 	.word	0x08008314

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	08008314 	.word	0x08008314

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <AES_Encrypt>:
* Arguments   : *Data   Data to encrypt is a 16 byte long arry
*               *Key    Key to encrypt data with is a 16 byte long arry
*****************************************************************************************
*/
void AES_Encrypt(unsigned char *Data, unsigned char *Key)
{
 8000574:	b5b0      	push	{r4, r5, r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
	unsigned char i;
	unsigned char Row,Collum;
	unsigned char Round = 0x00;
 800057e:	2300      	movs	r3, #0
 8000580:	773b      	strb	r3, [r7, #28]
	unsigned char Round_Key[16];

	//Copy input to State arry
	for(Collum = 0; Collum < 4; Collum++)
 8000582:	2300      	movs	r3, #0
 8000584:	777b      	strb	r3, [r7, #29]
 8000586:	e01b      	b.n	80005c0 <AES_Encrypt+0x4c>
	{
		for(Row = 0; Row < 4; Row++)
 8000588:	2300      	movs	r3, #0
 800058a:	77bb      	strb	r3, [r7, #30]
 800058c:	e012      	b.n	80005b4 <AES_Encrypt+0x40>
		{
			State[Row][Collum] = Data[Row + (4*Collum)];
 800058e:	7fba      	ldrb	r2, [r7, #30]
 8000590:	7f7b      	ldrb	r3, [r7, #29]
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	4413      	add	r3, r2
 8000596:	461a      	mov	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	1899      	adds	r1, r3, r2
 800059c:	7fba      	ldrb	r2, [r7, #30]
 800059e:	7f7b      	ldrb	r3, [r7, #29]
 80005a0:	7808      	ldrb	r0, [r1, #0]
 80005a2:	4961      	ldr	r1, [pc, #388]	; (8000728 <AES_Encrypt+0x1b4>)
 80005a4:	0092      	lsls	r2, r2, #2
 80005a6:	440a      	add	r2, r1
 80005a8:	4413      	add	r3, r2
 80005aa:	4602      	mov	r2, r0
 80005ac:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 80005ae:	7fbb      	ldrb	r3, [r7, #30]
 80005b0:	3301      	adds	r3, #1
 80005b2:	77bb      	strb	r3, [r7, #30]
 80005b4:	7fbb      	ldrb	r3, [r7, #30]
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	d9e9      	bls.n	800058e <AES_Encrypt+0x1a>
	for(Collum = 0; Collum < 4; Collum++)
 80005ba:	7f7b      	ldrb	r3, [r7, #29]
 80005bc:	3301      	adds	r3, #1
 80005be:	777b      	strb	r3, [r7, #29]
 80005c0:	7f7b      	ldrb	r3, [r7, #29]
 80005c2:	2b03      	cmp	r3, #3
 80005c4:	d9e0      	bls.n	8000588 <AES_Encrypt+0x14>
		}
	}

	//Copy key to round key
	for(i = 0; i < 16; i++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	77fb      	strb	r3, [r7, #31]
 80005ca:	e00b      	b.n	80005e4 <AES_Encrypt+0x70>
	{
		Round_Key[i] = Key[i];
 80005cc:	7ffb      	ldrb	r3, [r7, #31]
 80005ce:	683a      	ldr	r2, [r7, #0]
 80005d0:	441a      	add	r2, r3
 80005d2:	7ffb      	ldrb	r3, [r7, #31]
 80005d4:	7812      	ldrb	r2, [r2, #0]
 80005d6:	3320      	adds	r3, #32
 80005d8:	443b      	add	r3, r7
 80005da:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(i = 0; i < 16; i++)
 80005de:	7ffb      	ldrb	r3, [r7, #31]
 80005e0:	3301      	adds	r3, #1
 80005e2:	77fb      	strb	r3, [r7, #31]
 80005e4:	7ffb      	ldrb	r3, [r7, #31]
 80005e6:	2b0f      	cmp	r3, #15
 80005e8:	d9f0      	bls.n	80005cc <AES_Encrypt+0x58>
	}

	//Add round key
	AES_Add_Round_Key(Round_Key);
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 f89c 	bl	800072c <AES_Add_Round_Key>

	//Preform 9 full rounds
	for(Round = 1; Round < 10; Round++)
 80005f4:	2301      	movs	r3, #1
 80005f6:	773b      	strb	r3, [r7, #28]
 80005f8:	e038      	b.n	800066c <AES_Encrypt+0xf8>
	{
		//Preform Byte substitution with S table
		for(Collum = 0; Collum < 4; Collum++)
 80005fa:	2300      	movs	r3, #0
 80005fc:	777b      	strb	r3, [r7, #29]
 80005fe:	e01f      	b.n	8000640 <AES_Encrypt+0xcc>
		{
			for(Row = 0; Row < 4; Row++)
 8000600:	2300      	movs	r3, #0
 8000602:	77bb      	strb	r3, [r7, #30]
 8000604:	e016      	b.n	8000634 <AES_Encrypt+0xc0>
			{
				State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 8000606:	7fba      	ldrb	r2, [r7, #30]
 8000608:	7f7b      	ldrb	r3, [r7, #29]
 800060a:	4947      	ldr	r1, [pc, #284]	; (8000728 <AES_Encrypt+0x1b4>)
 800060c:	0092      	lsls	r2, r2, #2
 800060e:	440a      	add	r2, r1
 8000610:	4413      	add	r3, r2
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	7fbd      	ldrb	r5, [r7, #30]
 8000616:	7f7c      	ldrb	r4, [r7, #29]
 8000618:	4618      	mov	r0, r3
 800061a:	f000 f8bf 	bl	800079c <AES_Sub_Byte>
 800061e:	4603      	mov	r3, r0
 8000620:	4619      	mov	r1, r3
 8000622:	4a41      	ldr	r2, [pc, #260]	; (8000728 <AES_Encrypt+0x1b4>)
 8000624:	00ab      	lsls	r3, r5, #2
 8000626:	4413      	add	r3, r2
 8000628:	4423      	add	r3, r4
 800062a:	460a      	mov	r2, r1
 800062c:	701a      	strb	r2, [r3, #0]
			for(Row = 0; Row < 4; Row++)
 800062e:	7fbb      	ldrb	r3, [r7, #30]
 8000630:	3301      	adds	r3, #1
 8000632:	77bb      	strb	r3, [r7, #30]
 8000634:	7fbb      	ldrb	r3, [r7, #30]
 8000636:	2b03      	cmp	r3, #3
 8000638:	d9e5      	bls.n	8000606 <AES_Encrypt+0x92>
		for(Collum = 0; Collum < 4; Collum++)
 800063a:	7f7b      	ldrb	r3, [r7, #29]
 800063c:	3301      	adds	r3, #1
 800063e:	777b      	strb	r3, [r7, #29]
 8000640:	7f7b      	ldrb	r3, [r7, #29]
 8000642:	2b03      	cmp	r3, #3
 8000644:	d9dc      	bls.n	8000600 <AES_Encrypt+0x8c>
			}
		}

		//Preform Row Shift
		AES_Shift_Rows();
 8000646:	f000 f8c7 	bl	80007d8 <AES_Shift_Rows>

		//Mix Collums
		AES_Mix_Collums();
 800064a:	f000 f909 	bl	8000860 <AES_Mix_Collums>

		//Calculate new round key
		AES_Calculate_Round_Key(Round,Round_Key);
 800064e:	f107 020c 	add.w	r2, r7, #12
 8000652:	7f3b      	ldrb	r3, [r7, #28]
 8000654:	4611      	mov	r1, r2
 8000656:	4618      	mov	r0, r3
 8000658:	f000 f998 	bl	800098c <AES_Calculate_Round_Key>

		//Add round key
		AES_Add_Round_Key(Round_Key);
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	4618      	mov	r0, r3
 8000662:	f000 f863 	bl	800072c <AES_Add_Round_Key>
	for(Round = 1; Round < 10; Round++)
 8000666:	7f3b      	ldrb	r3, [r7, #28]
 8000668:	3301      	adds	r3, #1
 800066a:	773b      	strb	r3, [r7, #28]
 800066c:	7f3b      	ldrb	r3, [r7, #28]
 800066e:	2b09      	cmp	r3, #9
 8000670:	d9c3      	bls.n	80005fa <AES_Encrypt+0x86>
	}

	//Last round whitout mix collums
	//Preform Byte substitution with S table
	for(Collum = 0; Collum < 4; Collum++)
 8000672:	2300      	movs	r3, #0
 8000674:	777b      	strb	r3, [r7, #29]
 8000676:	e01f      	b.n	80006b8 <AES_Encrypt+0x144>
	{
		for(Row = 0; Row < 4; Row++)
 8000678:	2300      	movs	r3, #0
 800067a:	77bb      	strb	r3, [r7, #30]
 800067c:	e016      	b.n	80006ac <AES_Encrypt+0x138>
		{
			State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 800067e:	7fba      	ldrb	r2, [r7, #30]
 8000680:	7f7b      	ldrb	r3, [r7, #29]
 8000682:	4929      	ldr	r1, [pc, #164]	; (8000728 <AES_Encrypt+0x1b4>)
 8000684:	0092      	lsls	r2, r2, #2
 8000686:	440a      	add	r2, r1
 8000688:	4413      	add	r3, r2
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	7fbd      	ldrb	r5, [r7, #30]
 800068e:	7f7c      	ldrb	r4, [r7, #29]
 8000690:	4618      	mov	r0, r3
 8000692:	f000 f883 	bl	800079c <AES_Sub_Byte>
 8000696:	4603      	mov	r3, r0
 8000698:	4619      	mov	r1, r3
 800069a:	4a23      	ldr	r2, [pc, #140]	; (8000728 <AES_Encrypt+0x1b4>)
 800069c:	00ab      	lsls	r3, r5, #2
 800069e:	4413      	add	r3, r2
 80006a0:	4423      	add	r3, r4
 80006a2:	460a      	mov	r2, r1
 80006a4:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 80006a6:	7fbb      	ldrb	r3, [r7, #30]
 80006a8:	3301      	adds	r3, #1
 80006aa:	77bb      	strb	r3, [r7, #30]
 80006ac:	7fbb      	ldrb	r3, [r7, #30]
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d9e5      	bls.n	800067e <AES_Encrypt+0x10a>
	for(Collum = 0; Collum < 4; Collum++)
 80006b2:	7f7b      	ldrb	r3, [r7, #29]
 80006b4:	3301      	adds	r3, #1
 80006b6:	777b      	strb	r3, [r7, #29]
 80006b8:	7f7b      	ldrb	r3, [r7, #29]
 80006ba:	2b03      	cmp	r3, #3
 80006bc:	d9dc      	bls.n	8000678 <AES_Encrypt+0x104>
		}
	}

	//Shift rows
	AES_Shift_Rows();
 80006be:	f000 f88b 	bl	80007d8 <AES_Shift_Rows>

	//Calculate new round key
	AES_Calculate_Round_Key(Round,Round_Key);
 80006c2:	f107 020c 	add.w	r2, r7, #12
 80006c6:	7f3b      	ldrb	r3, [r7, #28]
 80006c8:	4611      	mov	r1, r2
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f95e 	bl	800098c <AES_Calculate_Round_Key>

	//Add round Key
	AES_Add_Round_Key(Round_Key);
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 f829 	bl	800072c <AES_Add_Round_Key>

	//Copy the State into the data array
	for(Collum = 0; Collum < 4; Collum++)
 80006da:	2300      	movs	r3, #0
 80006dc:	777b      	strb	r3, [r7, #29]
 80006de:	e01a      	b.n	8000716 <AES_Encrypt+0x1a2>
	{
		for(Row = 0; Row < 4; Row++)
 80006e0:	2300      	movs	r3, #0
 80006e2:	77bb      	strb	r3, [r7, #30]
 80006e4:	e011      	b.n	800070a <AES_Encrypt+0x196>
		{
			Data[Row + (4*Collum)] = State[Row][Collum];
 80006e6:	7fb9      	ldrb	r1, [r7, #30]
 80006e8:	7f7a      	ldrb	r2, [r7, #29]
 80006ea:	7fb8      	ldrb	r0, [r7, #30]
 80006ec:	7f7b      	ldrb	r3, [r7, #29]
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	4403      	add	r3, r0
 80006f2:	4618      	mov	r0, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4403      	add	r3, r0
 80006f8:	480b      	ldr	r0, [pc, #44]	; (8000728 <AES_Encrypt+0x1b4>)
 80006fa:	0089      	lsls	r1, r1, #2
 80006fc:	4401      	add	r1, r0
 80006fe:	440a      	add	r2, r1
 8000700:	7812      	ldrb	r2, [r2, #0]
 8000702:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8000704:	7fbb      	ldrb	r3, [r7, #30]
 8000706:	3301      	adds	r3, #1
 8000708:	77bb      	strb	r3, [r7, #30]
 800070a:	7fbb      	ldrb	r3, [r7, #30]
 800070c:	2b03      	cmp	r3, #3
 800070e:	d9ea      	bls.n	80006e6 <AES_Encrypt+0x172>
	for(Collum = 0; Collum < 4; Collum++)
 8000710:	7f7b      	ldrb	r3, [r7, #29]
 8000712:	3301      	adds	r3, #1
 8000714:	777b      	strb	r3, [r7, #29]
 8000716:	7f7b      	ldrb	r3, [r7, #29]
 8000718:	2b03      	cmp	r3, #3
 800071a:	d9e1      	bls.n	80006e0 <AES_Encrypt+0x16c>
		}
	}

}
 800071c:	bf00      	nop
 800071e:	bf00      	nop
 8000720:	3720      	adds	r7, #32
 8000722:	46bd      	mov	sp, r7
 8000724:	bdb0      	pop	{r4, r5, r7, pc}
 8000726:	bf00      	nop
 8000728:	20000244 	.word	0x20000244

0800072c <AES_Add_Round_Key>:
*
* Arguments   : *Round_Key    16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Add_Round_Key(unsigned char *Round_Key)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	unsigned char Row,Collum;

	for(Collum = 0; Collum < 4; Collum++)
 8000734:	2300      	movs	r3, #0
 8000736:	73bb      	strb	r3, [r7, #14]
 8000738:	e024      	b.n	8000784 <AES_Add_Round_Key+0x58>
	{
		for(Row = 0; Row < 4; Row++)
 800073a:	2300      	movs	r3, #0
 800073c:	73fb      	strb	r3, [r7, #15]
 800073e:	e01b      	b.n	8000778 <AES_Add_Round_Key+0x4c>
		{
			State[Row][Collum] = State[Row][Collum] ^ Round_Key[Row + (4*Collum)];
 8000740:	7bfa      	ldrb	r2, [r7, #15]
 8000742:	7bbb      	ldrb	r3, [r7, #14]
 8000744:	4914      	ldr	r1, [pc, #80]	; (8000798 <AES_Add_Round_Key+0x6c>)
 8000746:	0092      	lsls	r2, r2, #2
 8000748:	440a      	add	r2, r1
 800074a:	4413      	add	r3, r2
 800074c:	7818      	ldrb	r0, [r3, #0]
 800074e:	7bfa      	ldrb	r2, [r7, #15]
 8000750:	7bbb      	ldrb	r3, [r7, #14]
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	4413      	add	r3, r2
 8000756:	461a      	mov	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4413      	add	r3, r2
 800075c:	7819      	ldrb	r1, [r3, #0]
 800075e:	7bfa      	ldrb	r2, [r7, #15]
 8000760:	7bbb      	ldrb	r3, [r7, #14]
 8000762:	4041      	eors	r1, r0
 8000764:	b2c8      	uxtb	r0, r1
 8000766:	490c      	ldr	r1, [pc, #48]	; (8000798 <AES_Add_Round_Key+0x6c>)
 8000768:	0092      	lsls	r2, r2, #2
 800076a:	440a      	add	r2, r1
 800076c:	4413      	add	r3, r2
 800076e:	4602      	mov	r2, r0
 8000770:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	3301      	adds	r3, #1
 8000776:	73fb      	strb	r3, [r7, #15]
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	2b03      	cmp	r3, #3
 800077c:	d9e0      	bls.n	8000740 <AES_Add_Round_Key+0x14>
	for(Collum = 0; Collum < 4; Collum++)
 800077e:	7bbb      	ldrb	r3, [r7, #14]
 8000780:	3301      	adds	r3, #1
 8000782:	73bb      	strb	r3, [r7, #14]
 8000784:	7bbb      	ldrb	r3, [r7, #14]
 8000786:	2b03      	cmp	r3, #3
 8000788:	d9d7      	bls.n	800073a <AES_Add_Round_Key+0xe>
		}
	}
}
 800078a:	bf00      	nop
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	20000244 	.word	0x20000244

0800079c <AES_Sub_Byte>:
*
* Return      : The return is the found byte in the S_Table
*****************************************************************************************
*/
unsigned char AES_Sub_Byte(unsigned char Byte)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
	unsigned char S_Row,S_Collum;
	unsigned char S_Byte;

	//Split byte up in Row and Collum
	S_Row = ((Byte >> 4) & 0x0F);
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	091b      	lsrs	r3, r3, #4
 80007aa:	73fb      	strb	r3, [r7, #15]
	S_Collum = (Byte & 0x0F);
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	f003 030f 	and.w	r3, r3, #15
 80007b2:	73bb      	strb	r3, [r7, #14]

	//Find the correct byte in the S_Table
	S_Byte = S_Table[S_Row][S_Collum];
 80007b4:	7bfa      	ldrb	r2, [r7, #15]
 80007b6:	7bbb      	ldrb	r3, [r7, #14]
 80007b8:	4906      	ldr	r1, [pc, #24]	; (80007d4 <AES_Sub_Byte+0x38>)
 80007ba:	0112      	lsls	r2, r2, #4
 80007bc:	440a      	add	r2, r1
 80007be:	4413      	add	r3, r2
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	737b      	strb	r3, [r7, #13]

	return S_Byte;
 80007c4:	7b7b      	ldrb	r3, [r7, #13]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3714      	adds	r7, #20
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	20000000 	.word	0x20000000

080007d8 <AES_Shift_Rows>:
*****************************************************************************************
* Description : Function that preforms the shift row operation described in the AES standard
*****************************************************************************************
*/
void AES_Shift_Rows()
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0

	//Row 0 doesn't change

	//Shift Row 1 one left
	//Store firt byte in buffer
	Buffer = State[1][0];
 80007de:	4b1f      	ldr	r3, [pc, #124]	; (800085c <AES_Shift_Rows+0x84>)
 80007e0:	791b      	ldrb	r3, [r3, #4]
 80007e2:	71fb      	strb	r3, [r7, #7]
	//Shift all bytes
	State[1][0] = State[1][1];
 80007e4:	4b1d      	ldr	r3, [pc, #116]	; (800085c <AES_Shift_Rows+0x84>)
 80007e6:	795a      	ldrb	r2, [r3, #5]
 80007e8:	4b1c      	ldr	r3, [pc, #112]	; (800085c <AES_Shift_Rows+0x84>)
 80007ea:	711a      	strb	r2, [r3, #4]
	State[1][1] = State[1][2];
 80007ec:	4b1b      	ldr	r3, [pc, #108]	; (800085c <AES_Shift_Rows+0x84>)
 80007ee:	799a      	ldrb	r2, [r3, #6]
 80007f0:	4b1a      	ldr	r3, [pc, #104]	; (800085c <AES_Shift_Rows+0x84>)
 80007f2:	715a      	strb	r2, [r3, #5]
	State[1][2] = State[1][3];
 80007f4:	4b19      	ldr	r3, [pc, #100]	; (800085c <AES_Shift_Rows+0x84>)
 80007f6:	79da      	ldrb	r2, [r3, #7]
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <AES_Shift_Rows+0x84>)
 80007fa:	719a      	strb	r2, [r3, #6]
	State[1][3] = Buffer;
 80007fc:	4a17      	ldr	r2, [pc, #92]	; (800085c <AES_Shift_Rows+0x84>)
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	71d3      	strb	r3, [r2, #7]

	//Shift row 2 two left
	Buffer = State[2][0];
 8000802:	4b16      	ldr	r3, [pc, #88]	; (800085c <AES_Shift_Rows+0x84>)
 8000804:	7a1b      	ldrb	r3, [r3, #8]
 8000806:	71fb      	strb	r3, [r7, #7]
	State[2][0] = State[2][2];
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <AES_Shift_Rows+0x84>)
 800080a:	7a9a      	ldrb	r2, [r3, #10]
 800080c:	4b13      	ldr	r3, [pc, #76]	; (800085c <AES_Shift_Rows+0x84>)
 800080e:	721a      	strb	r2, [r3, #8]
	State[2][2] = Buffer;
 8000810:	4a12      	ldr	r2, [pc, #72]	; (800085c <AES_Shift_Rows+0x84>)
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	7293      	strb	r3, [r2, #10]
	Buffer = State[2][1];
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <AES_Shift_Rows+0x84>)
 8000818:	7a5b      	ldrb	r3, [r3, #9]
 800081a:	71fb      	strb	r3, [r7, #7]
	State[2][1] = State[2][3];
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <AES_Shift_Rows+0x84>)
 800081e:	7ada      	ldrb	r2, [r3, #11]
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <AES_Shift_Rows+0x84>)
 8000822:	725a      	strb	r2, [r3, #9]
	State[2][3] = Buffer;
 8000824:	4a0d      	ldr	r2, [pc, #52]	; (800085c <AES_Shift_Rows+0x84>)
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	72d3      	strb	r3, [r2, #11]

	//Shift row 3 three left
	Buffer = State[3][3];
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <AES_Shift_Rows+0x84>)
 800082c:	7bdb      	ldrb	r3, [r3, #15]
 800082e:	71fb      	strb	r3, [r7, #7]
	State[3][3] = State[3][2];
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <AES_Shift_Rows+0x84>)
 8000832:	7b9a      	ldrb	r2, [r3, #14]
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <AES_Shift_Rows+0x84>)
 8000836:	73da      	strb	r2, [r3, #15]
	State[3][2] = State[3][1];
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <AES_Shift_Rows+0x84>)
 800083a:	7b5a      	ldrb	r2, [r3, #13]
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <AES_Shift_Rows+0x84>)
 800083e:	739a      	strb	r2, [r3, #14]
	State[3][1] = State[3][0];
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <AES_Shift_Rows+0x84>)
 8000842:	7b1a      	ldrb	r2, [r3, #12]
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <AES_Shift_Rows+0x84>)
 8000846:	735a      	strb	r2, [r3, #13]
	State[3][0] = Buffer;
 8000848:	4a04      	ldr	r2, [pc, #16]	; (800085c <AES_Shift_Rows+0x84>)
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	7313      	strb	r3, [r2, #12]
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	20000244 	.word	0x20000244

08000860 <AES_Mix_Collums>:
*****************************************************************************************
* Description : Function that preforms the Mix Collums operation described in the AES standard
*****************************************************************************************
*/
void AES_Mix_Collums()
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
	unsigned char Row,Collum;
	unsigned char a[4], b[4];
	for(Collum = 0; Collum < 4; Collum++)
 8000866:	2300      	movs	r3, #0
 8000868:	73bb      	strb	r3, [r7, #14]
 800086a:	e082      	b.n	8000972 <AES_Mix_Collums+0x112>
	{
		for(Row = 0; Row < 4; Row++)
 800086c:	2300      	movs	r3, #0
 800086e:	73fb      	strb	r3, [r7, #15]
 8000870:	e033      	b.n	80008da <AES_Mix_Collums+0x7a>
		{
			a[Row] = State[Row][Collum];
 8000872:	7bf9      	ldrb	r1, [r7, #15]
 8000874:	7bba      	ldrb	r2, [r7, #14]
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	4843      	ldr	r0, [pc, #268]	; (8000988 <AES_Mix_Collums+0x128>)
 800087a:	0089      	lsls	r1, r1, #2
 800087c:	4401      	add	r1, r0
 800087e:	440a      	add	r2, r1
 8000880:	7812      	ldrb	r2, [r2, #0]
 8000882:	3310      	adds	r3, #16
 8000884:	443b      	add	r3, r7
 8000886:	f803 2c08 	strb.w	r2, [r3, #-8]
			b[Row] = (State[Row][Collum] << 1);
 800088a:	7bfa      	ldrb	r2, [r7, #15]
 800088c:	7bbb      	ldrb	r3, [r7, #14]
 800088e:	493e      	ldr	r1, [pc, #248]	; (8000988 <AES_Mix_Collums+0x128>)
 8000890:	0092      	lsls	r2, r2, #2
 8000892:	440a      	add	r2, r1
 8000894:	4413      	add	r3, r2
 8000896:	781a      	ldrb	r2, [r3, #0]
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	0052      	lsls	r2, r2, #1
 800089c:	b2d2      	uxtb	r2, r2
 800089e:	3310      	adds	r3, #16
 80008a0:	443b      	add	r3, r7
 80008a2:	f803 2c0c 	strb.w	r2, [r3, #-12]

			if((State[Row][Collum] & 0x80) == 0x80)
 80008a6:	7bfa      	ldrb	r2, [r7, #15]
 80008a8:	7bbb      	ldrb	r3, [r7, #14]
 80008aa:	4937      	ldr	r1, [pc, #220]	; (8000988 <AES_Mix_Collums+0x128>)
 80008ac:	0092      	lsls	r2, r2, #2
 80008ae:	440a      	add	r2, r1
 80008b0:	4413      	add	r3, r2
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	b25b      	sxtb	r3, r3
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	da0c      	bge.n	80008d4 <AES_Mix_Collums+0x74>
			{
				b[Row] = b[Row] ^ 0x1B;
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	3310      	adds	r3, #16
 80008be:	443b      	add	r3, r7
 80008c0:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	f082 021b 	eor.w	r2, r2, #27
 80008ca:	b2d2      	uxtb	r2, r2
 80008cc:	3310      	adds	r3, #16
 80008ce:	443b      	add	r3, r7
 80008d0:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(Row = 0; Row < 4; Row++)
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	3301      	adds	r3, #1
 80008d8:	73fb      	strb	r3, [r7, #15]
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	2b03      	cmp	r3, #3
 80008de:	d9c8      	bls.n	8000872 <AES_Mix_Collums+0x12>
			}
		}
		State[0][Collum] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3];
 80008e0:	793a      	ldrb	r2, [r7, #4]
 80008e2:	7a7b      	ldrb	r3, [r7, #9]
 80008e4:	4053      	eors	r3, r2
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	797b      	ldrb	r3, [r7, #5]
 80008ea:	4053      	eors	r3, r2
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	7abb      	ldrb	r3, [r7, #10]
 80008f0:	4053      	eors	r3, r2
 80008f2:	b2d9      	uxtb	r1, r3
 80008f4:	7afa      	ldrb	r2, [r7, #11]
 80008f6:	7bbb      	ldrb	r3, [r7, #14]
 80008f8:	404a      	eors	r2, r1
 80008fa:	b2d1      	uxtb	r1, r2
 80008fc:	4a22      	ldr	r2, [pc, #136]	; (8000988 <AES_Mix_Collums+0x128>)
 80008fe:	54d1      	strb	r1, [r2, r3]
		State[1][Collum] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3];
 8000900:	7a3a      	ldrb	r2, [r7, #8]
 8000902:	797b      	ldrb	r3, [r7, #5]
 8000904:	4053      	eors	r3, r2
 8000906:	b2da      	uxtb	r2, r3
 8000908:	7abb      	ldrb	r3, [r7, #10]
 800090a:	4053      	eors	r3, r2
 800090c:	b2da      	uxtb	r2, r3
 800090e:	79bb      	ldrb	r3, [r7, #6]
 8000910:	4053      	eors	r3, r2
 8000912:	b2d9      	uxtb	r1, r3
 8000914:	7afa      	ldrb	r2, [r7, #11]
 8000916:	7bbb      	ldrb	r3, [r7, #14]
 8000918:	404a      	eors	r2, r1
 800091a:	b2d1      	uxtb	r1, r2
 800091c:	4a1a      	ldr	r2, [pc, #104]	; (8000988 <AES_Mix_Collums+0x128>)
 800091e:	4413      	add	r3, r2
 8000920:	460a      	mov	r2, r1
 8000922:	711a      	strb	r2, [r3, #4]
		State[2][Collum] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3];
 8000924:	7a3a      	ldrb	r2, [r7, #8]
 8000926:	7a7b      	ldrb	r3, [r7, #9]
 8000928:	4053      	eors	r3, r2
 800092a:	b2da      	uxtb	r2, r3
 800092c:	79bb      	ldrb	r3, [r7, #6]
 800092e:	4053      	eors	r3, r2
 8000930:	b2da      	uxtb	r2, r3
 8000932:	7afb      	ldrb	r3, [r7, #11]
 8000934:	4053      	eors	r3, r2
 8000936:	b2d9      	uxtb	r1, r3
 8000938:	79fa      	ldrb	r2, [r7, #7]
 800093a:	7bbb      	ldrb	r3, [r7, #14]
 800093c:	404a      	eors	r2, r1
 800093e:	b2d1      	uxtb	r1, r2
 8000940:	4a11      	ldr	r2, [pc, #68]	; (8000988 <AES_Mix_Collums+0x128>)
 8000942:	4413      	add	r3, r2
 8000944:	460a      	mov	r2, r1
 8000946:	721a      	strb	r2, [r3, #8]
		State[3][Collum] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3];
 8000948:	7a3a      	ldrb	r2, [r7, #8]
 800094a:	793b      	ldrb	r3, [r7, #4]
 800094c:	4053      	eors	r3, r2
 800094e:	b2da      	uxtb	r2, r3
 8000950:	7a7b      	ldrb	r3, [r7, #9]
 8000952:	4053      	eors	r3, r2
 8000954:	b2da      	uxtb	r2, r3
 8000956:	7abb      	ldrb	r3, [r7, #10]
 8000958:	4053      	eors	r3, r2
 800095a:	b2d9      	uxtb	r1, r3
 800095c:	79fa      	ldrb	r2, [r7, #7]
 800095e:	7bbb      	ldrb	r3, [r7, #14]
 8000960:	404a      	eors	r2, r1
 8000962:	b2d1      	uxtb	r1, r2
 8000964:	4a08      	ldr	r2, [pc, #32]	; (8000988 <AES_Mix_Collums+0x128>)
 8000966:	4413      	add	r3, r2
 8000968:	460a      	mov	r2, r1
 800096a:	731a      	strb	r2, [r3, #12]
	for(Collum = 0; Collum < 4; Collum++)
 800096c:	7bbb      	ldrb	r3, [r7, #14]
 800096e:	3301      	adds	r3, #1
 8000970:	73bb      	strb	r3, [r7, #14]
 8000972:	7bbb      	ldrb	r3, [r7, #14]
 8000974:	2b03      	cmp	r3, #3
 8000976:	f67f af79 	bls.w	800086c <AES_Mix_Collums+0xc>
	}
}
 800097a:	bf00      	nop
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	20000244 	.word	0x20000244

0800098c <AES_Calculate_Round_Key>:
* Arguments   :   Round         Number of current Round
*                *Round_Key     16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Calculate_Round_Key(unsigned char Round, unsigned char *Round_Key)
{
 800098c:	b590      	push	{r4, r7, lr}
 800098e:	b087      	sub	sp, #28
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	6039      	str	r1, [r7, #0]
 8000996:	71fb      	strb	r3, [r7, #7]
	unsigned char Buffer;
	unsigned char Rcon;

	//Calculate first Temp
	//Copy laste byte from previous key
	for(i = 0; i < 4; i++)
 8000998:	2300      	movs	r3, #0
 800099a:	75fb      	strb	r3, [r7, #23]
 800099c:	e00c      	b.n	80009b8 <AES_Calculate_Round_Key+0x2c>
	{
		Temp[i] = Round_Key[i+12];
 800099e:	7dfb      	ldrb	r3, [r7, #23]
 80009a0:	330c      	adds	r3, #12
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	441a      	add	r2, r3
 80009a6:	7dfb      	ldrb	r3, [r7, #23]
 80009a8:	7812      	ldrb	r2, [r2, #0]
 80009aa:	3318      	adds	r3, #24
 80009ac:	443b      	add	r3, r7
 80009ae:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 80009b2:	7dfb      	ldrb	r3, [r7, #23]
 80009b4:	3301      	adds	r3, #1
 80009b6:	75fb      	strb	r3, [r7, #23]
 80009b8:	7dfb      	ldrb	r3, [r7, #23]
 80009ba:	2b03      	cmp	r3, #3
 80009bc:	d9ef      	bls.n	800099e <AES_Calculate_Round_Key+0x12>
	}

	//Rotate Temp
	Buffer = Temp[0];
 80009be:	7b3b      	ldrb	r3, [r7, #12]
 80009c0:	753b      	strb	r3, [r7, #20]
	Temp[0] = Temp[1];
 80009c2:	7b7b      	ldrb	r3, [r7, #13]
 80009c4:	733b      	strb	r3, [r7, #12]
	Temp[1] = Temp[2];
 80009c6:	7bbb      	ldrb	r3, [r7, #14]
 80009c8:	737b      	strb	r3, [r7, #13]
	Temp[2] = Temp[3];
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
 80009cc:	73bb      	strb	r3, [r7, #14]
	Temp[3] = Buffer;
 80009ce:	7d3b      	ldrb	r3, [r7, #20]
 80009d0:	73fb      	strb	r3, [r7, #15]

	//Substitute Temp
	for(i = 0; i < 4; i++)
 80009d2:	2300      	movs	r3, #0
 80009d4:	75fb      	strb	r3, [r7, #23]
 80009d6:	e012      	b.n	80009fe <AES_Calculate_Round_Key+0x72>
	{
		Temp[i] = AES_Sub_Byte(Temp[i]);
 80009d8:	7dfb      	ldrb	r3, [r7, #23]
 80009da:	3318      	adds	r3, #24
 80009dc:	443b      	add	r3, r7
 80009de:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80009e2:	7dfc      	ldrb	r4, [r7, #23]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fed9 	bl	800079c <AES_Sub_Byte>
 80009ea:	4603      	mov	r3, r0
 80009ec:	461a      	mov	r2, r3
 80009ee:	f104 0318 	add.w	r3, r4, #24
 80009f2:	443b      	add	r3, r7
 80009f4:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 80009f8:	7dfb      	ldrb	r3, [r7, #23]
 80009fa:	3301      	adds	r3, #1
 80009fc:	75fb      	strb	r3, [r7, #23]
 80009fe:	7dfb      	ldrb	r3, [r7, #23]
 8000a00:	2b03      	cmp	r3, #3
 8000a02:	d9e9      	bls.n	80009d8 <AES_Calculate_Round_Key+0x4c>
	}

	//Calculate Rcon
	Rcon = 0x01;
 8000a04:	2301      	movs	r3, #1
 8000a06:	757b      	strb	r3, [r7, #21]
	while(Round != 1)
 8000a08:	e010      	b.n	8000a2c <AES_Calculate_Round_Key+0xa0>
	{
		b = Rcon & 0x80;
 8000a0a:	7d7b      	ldrb	r3, [r7, #21]
 8000a0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000a10:	74fb      	strb	r3, [r7, #19]
		Rcon = Rcon << 1;
 8000a12:	7d7b      	ldrb	r3, [r7, #21]
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	757b      	strb	r3, [r7, #21]
		if(b == 0x80)
 8000a18:	7cfb      	ldrb	r3, [r7, #19]
 8000a1a:	2b80      	cmp	r3, #128	; 0x80
 8000a1c:	d103      	bne.n	8000a26 <AES_Calculate_Round_Key+0x9a>
		{
			Rcon = Rcon ^ 0x1b;
 8000a1e:	7d7b      	ldrb	r3, [r7, #21]
 8000a20:	f083 031b 	eor.w	r3, r3, #27
 8000a24:	757b      	strb	r3, [r7, #21]
		}
		Round--;
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	71fb      	strb	r3, [r7, #7]
	while(Round != 1)
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d1eb      	bne.n	8000a0a <AES_Calculate_Round_Key+0x7e>
	}

	//XOR Rcon
	Temp[0] = Temp[0] ^ Rcon;
 8000a32:	7b3a      	ldrb	r2, [r7, #12]
 8000a34:	7d7b      	ldrb	r3, [r7, #21]
 8000a36:	4053      	eors	r3, r2
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	733b      	strb	r3, [r7, #12]

	//Calculate new key
	for(i = 0; i < 4; i++)
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	75fb      	strb	r3, [r7, #23]
 8000a40:	e02f      	b.n	8000aa2 <AES_Calculate_Round_Key+0x116>
	{
		for(j = 0; j < 4; j++)
 8000a42:	2300      	movs	r3, #0
 8000a44:	75bb      	strb	r3, [r7, #22]
 8000a46:	e026      	b.n	8000a96 <AES_Calculate_Round_Key+0x10a>
		{
			Round_Key[j + (4*i)] = Round_Key[j + (4*i)] ^ Temp[j];
 8000a48:	7dba      	ldrb	r2, [r7, #22]
 8000a4a:	7dfb      	ldrb	r3, [r7, #23]
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	4413      	add	r3, r2
 8000a50:	461a      	mov	r2, r3
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	4413      	add	r3, r2
 8000a56:	7819      	ldrb	r1, [r3, #0]
 8000a58:	7dbb      	ldrb	r3, [r7, #22]
 8000a5a:	3318      	adds	r3, #24
 8000a5c:	443b      	add	r3, r7
 8000a5e:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8000a62:	7db8      	ldrb	r0, [r7, #22]
 8000a64:	7dfb      	ldrb	r3, [r7, #23]
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	4403      	add	r3, r0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	4403      	add	r3, r0
 8000a70:	404a      	eors	r2, r1
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	701a      	strb	r2, [r3, #0]
			Temp[j] = Round_Key[j + (4*i)];
 8000a76:	7dba      	ldrb	r2, [r7, #22]
 8000a78:	7dfb      	ldrb	r3, [r7, #23]
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	4413      	add	r3, r2
 8000a7e:	461a      	mov	r2, r3
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	441a      	add	r2, r3
 8000a84:	7dbb      	ldrb	r3, [r7, #22]
 8000a86:	7812      	ldrb	r2, [r2, #0]
 8000a88:	3318      	adds	r3, #24
 8000a8a:	443b      	add	r3, r7
 8000a8c:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(j = 0; j < 4; j++)
 8000a90:	7dbb      	ldrb	r3, [r7, #22]
 8000a92:	3301      	adds	r3, #1
 8000a94:	75bb      	strb	r3, [r7, #22]
 8000a96:	7dbb      	ldrb	r3, [r7, #22]
 8000a98:	2b03      	cmp	r3, #3
 8000a9a:	d9d5      	bls.n	8000a48 <AES_Calculate_Round_Key+0xbc>
	for(i = 0; i < 4; i++)
 8000a9c:	7dfb      	ldrb	r3, [r7, #23]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	75fb      	strb	r3, [r7, #23]
 8000aa2:	7dfb      	ldrb	r3, [r7, #23]
 8000aa4:	2b03      	cmp	r3, #3
 8000aa6:	d9cc      	bls.n	8000a42 <AES_Calculate_Round_Key+0xb6>
		}
	}
}
 8000aa8:	bf00      	nop
 8000aaa:	bf00      	nop
 8000aac:	371c      	adds	r7, #28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd90      	pop	{r4, r7, pc}

08000ab2 <Encrypt_Payload>:
#include "Encrypt_V31.h"
#include "AES-128_V10.h"

void Encrypt_Payload(unsigned char *Data, unsigned char Data_Length, unsigned int Frame_Counter,
                     unsigned char Direction, unsigned char Key[16], unsigned char DevAddr[4])
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b08a      	sub	sp, #40	; 0x28
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	60f8      	str	r0, [r7, #12]
 8000aba:	607a      	str	r2, [r7, #4]
 8000abc:	461a      	mov	r2, r3
 8000abe:	460b      	mov	r3, r1
 8000ac0:	72fb      	strb	r3, [r7, #11]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	72bb      	strb	r3, [r7, #10]
	unsigned char i = 0x00;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	unsigned char j;
	unsigned char Number_of_Blocks = 0x00;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	unsigned char Incomplete_Block_Size = 0x00;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	unsigned char Block_A[16];

	//Calculate number of blocks
	Number_of_Blocks = Data_Length / 16;
 8000ad8:	7afb      	ldrb	r3, [r7, #11]
 8000ada:	091b      	lsrs	r3, r3, #4
 8000adc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	Incomplete_Block_Size = Data_Length % 16;
 8000ae0:	7afb      	ldrb	r3, [r7, #11]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if(Incomplete_Block_Size != 0)
 8000aea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d004      	beq.n	8000afc <Encrypt_Payload+0x4a>
	{
		Number_of_Blocks++;
 8000af2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000af6:	3301      	adds	r3, #1
 8000af8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	for(i = 1; i <= Number_of_Blocks; i++)
 8000afc:	2301      	movs	r3, #1
 8000afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000b02:	e07e      	b.n	8000c02 <Encrypt_Payload+0x150>
	{
		Block_A[0] = 0x01;
 8000b04:	2301      	movs	r3, #1
 8000b06:	753b      	strb	r3, [r7, #20]
		Block_A[1] = 0x00;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	757b      	strb	r3, [r7, #21]
		Block_A[2] = 0x00;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	75bb      	strb	r3, [r7, #22]
		Block_A[3] = 0x00;
 8000b10:	2300      	movs	r3, #0
 8000b12:	75fb      	strb	r3, [r7, #23]
		Block_A[4] = 0x00;
 8000b14:	2300      	movs	r3, #0
 8000b16:	763b      	strb	r3, [r7, #24]

		Block_A[5] = Direction;
 8000b18:	7abb      	ldrb	r3, [r7, #10]
 8000b1a:	767b      	strb	r3, [r7, #25]

		Block_A[6] = DevAddr[3];
 8000b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b1e:	78db      	ldrb	r3, [r3, #3]
 8000b20:	76bb      	strb	r3, [r7, #26]
		Block_A[7] = DevAddr[2];
 8000b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b24:	789b      	ldrb	r3, [r3, #2]
 8000b26:	76fb      	strb	r3, [r7, #27]
		Block_A[8] = DevAddr[1];
 8000b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b2a:	785b      	ldrb	r3, [r3, #1]
 8000b2c:	773b      	strb	r3, [r7, #28]
		Block_A[9] = DevAddr[0];
 8000b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	777b      	strb	r3, [r7, #29]

		Block_A[10] = (Frame_Counter & 0x00FF);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	77bb      	strb	r3, [r7, #30]
		Block_A[11] = ((Frame_Counter >> 8) & 0x00FF);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	0a1b      	lsrs	r3, r3, #8
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	77fb      	strb	r3, [r7, #31]

		Block_A[12] = 0x00; //Frame counter upper Bytes
 8000b42:	2300      	movs	r3, #0
 8000b44:	f887 3020 	strb.w	r3, [r7, #32]
		Block_A[13] = 0x00;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		Block_A[14] = 0x00;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		Block_A[15] = i;
 8000b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		//Calculate S
		AES_Encrypt(Block_A, Key);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fd06 	bl	8000574 <AES_Encrypt>

		//Check for last block
		if(i != Number_of_Blocks)
 8000b68:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000b6c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d01c      	beq.n	8000bae <Encrypt_Payload+0xfc>
		{
			for(j = 0; j < 16; j++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000b7a:	e013      	b.n	8000ba4 <Encrypt_Payload+0xf2>
			{
				*Data = *Data ^ Block_A[j];
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	781a      	ldrb	r2, [r3, #0]
 8000b80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b84:	3328      	adds	r3, #40	; 0x28
 8000b86:	443b      	add	r3, r7
 8000b88:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000b8c:	4053      	eors	r3, r2
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	701a      	strb	r2, [r3, #0]
				Data++;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	3301      	adds	r3, #1
 8000b98:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < 16; j++)
 8000b9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ba4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ba8:	2b0f      	cmp	r3, #15
 8000baa:	d9e7      	bls.n	8000b7c <Encrypt_Payload+0xca>
 8000bac:	e024      	b.n	8000bf8 <Encrypt_Payload+0x146>
			}
		}
		else
		{
			if(Incomplete_Block_Size == 0)
 8000bae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d102      	bne.n	8000bbc <Encrypt_Payload+0x10a>
			{
				Incomplete_Block_Size = 16;
 8000bb6:	2310      	movs	r3, #16
 8000bb8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			}
			for(j = 0; j < Incomplete_Block_Size; j++)
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000bc2:	e013      	b.n	8000bec <Encrypt_Payload+0x13a>
			{
				*Data = *Data ^ Block_A[j];
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	781a      	ldrb	r2, [r3, #0]
 8000bc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000bcc:	3328      	adds	r3, #40	; 0x28
 8000bce:	443b      	add	r3, r7
 8000bd0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000bd4:	4053      	eors	r3, r2
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	701a      	strb	r2, [r3, #0]
				Data++;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	3301      	adds	r3, #1
 8000be0:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < Incomplete_Block_Size; j++)
 8000be2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000be6:	3301      	adds	r3, #1
 8000be8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000bec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000bf0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d3e5      	bcc.n	8000bc4 <Encrypt_Payload+0x112>
	for(i = 1; i <= Number_of_Blocks; i++)
 8000bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000c06:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	f67f af7a 	bls.w	8000b04 <Encrypt_Payload+0x52>
			}
		}
	}
}
 8000c10:	bf00      	nop
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	; 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <Calculate_MIC>:

void Calculate_MIC(unsigned char *Data, unsigned char *Final_MIC, unsigned char Data_Length, unsigned int Frame_Counter,
                   unsigned char Direction, unsigned char NwkSkey[16], unsigned char DevAddr[4])
{
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b09b      	sub	sp, #108	; 0x6c
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	unsigned char Block_B[16];
	unsigned char Key_K1[16] = {
 8000c2c:	4bba      	ldr	r3, [pc, #744]	; (8000f18 <Calculate_MIC+0x2fc>)
 8000c2e:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000c32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char Key_K2[16] = {
 8000c38:	4bb7      	ldr	r3, [pc, #732]	; (8000f18 <Calculate_MIC+0x2fc>)
 8000c3a:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000c3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	//unsigned char Data_Copy[16];

	unsigned char Old_Data[16] = {
 8000c44:	4bb4      	ldr	r3, [pc, #720]	; (8000f18 <Calculate_MIC+0x2fc>)
 8000c46:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000c4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char New_Data[16] = {
 8000c50:	4bb1      	ldr	r3, [pc, #708]	; (8000f18 <Calculate_MIC+0x2fc>)
 8000c52:	f107 0414 	add.w	r4, r7, #20
 8000c56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	unsigned char Number_of_Blocks = 0x00;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	unsigned char Incomplete_Block_Size = 0x00;
 8000c62:	2300      	movs	r3, #0
 8000c64:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	unsigned char Block_Counter = 0x01;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

	//Create Block_B
	Block_B[0] = 0x49;
 8000c6e:	2349      	movs	r3, #73	; 0x49
 8000c70:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	Block_B[1] = 0x00;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	Block_B[2] = 0x00;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	Block_B[3] = 0x00;
 8000c80:	2300      	movs	r3, #0
 8000c82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Block_B[4] = 0x00;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

	Block_B[5] = Direction;
 8000c8c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8000c90:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	Block_B[6] = DevAddr[3];
 8000c94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000c98:	78db      	ldrb	r3, [r3, #3]
 8000c9a:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	Block_B[7] = DevAddr[2];
 8000c9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ca2:	789b      	ldrb	r3, [r3, #2]
 8000ca4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	Block_B[8] = DevAddr[1];
 8000ca8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000cac:	785b      	ldrb	r3, [r3, #1]
 8000cae:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	Block_B[9] = DevAddr[0];
 8000cb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	Block_B[10] = (Frame_Counter & 0x00FF);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	Block_B[11] = ((Frame_Counter >> 8) & 0x00FF);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	0a1b      	lsrs	r3, r3, #8
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	Block_B[12] = 0x00; //Frame counter upper bytes
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	Block_B[13] = 0x00;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	Block_B[14] = 0x00;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	Block_B[15] = Data_Length;
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	//Calculate number of Blocks and blocksize of last block
	Number_of_Blocks = Data_Length / 16;
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	091b      	lsrs	r3, r3, #4
 8000cea:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	Incomplete_Block_Size = Data_Length % 16;
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	f003 030f 	and.w	r3, r3, #15
 8000cf4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

	if(Incomplete_Block_Size != 0)
 8000cf8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d004      	beq.n	8000d0a <Calculate_MIC+0xee>
	{
		Number_of_Blocks++;
 8000d00:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d04:	3301      	adds	r3, #1
 8000d06:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	}

	Generate_Keys(Key_K1, Key_K2, NwkSkey);
 8000d0a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000d0e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d12:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 f901 	bl	8000f1c <Generate_Keys>

	//Preform Calculation on Block B0

	//Preform AES encryption
	AES_Encrypt(Block_B, NwkSkey);
 8000d1a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d1e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fc27 	bl	8000574 <AES_Encrypt>

	//Copy Block_B to Old_Data
	for(i = 0; i < 16; i++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000d2c:	e010      	b.n	8000d50 <Calculate_MIC+0x134>
	{
		Old_Data[i] = Block_B[i];
 8000d2e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000d32:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d36:	3268      	adds	r2, #104	; 0x68
 8000d38:	443a      	add	r2, r7
 8000d3a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8000d3e:	3368      	adds	r3, #104	; 0x68
 8000d40:	443b      	add	r3, r7
 8000d42:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(i = 0; i < 16; i++)
 8000d46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000d50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d54:	2b0f      	cmp	r3, #15
 8000d56:	d9ea      	bls.n	8000d2e <Calculate_MIC+0x112>
	}

	//Preform full calculating until n-1 messsage blocks
	while(Block_Counter < Number_of_Blocks)
 8000d58:	e043      	b.n	8000de2 <Calculate_MIC+0x1c6>
	{
		//Copy data into array
		for(i = 0; i < 16; i++)
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000d60:	e00f      	b.n	8000d82 <Calculate_MIC+0x166>
		{
			New_Data[i] = *Data;
 8000d62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	7812      	ldrb	r2, [r2, #0]
 8000d6a:	3368      	adds	r3, #104	; 0x68
 8000d6c:	443b      	add	r3, r7
 8000d6e:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	3301      	adds	r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 8000d78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000d82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d86:	2b0f      	cmp	r3, #15
 8000d88:	d9eb      	bls.n	8000d62 <Calculate_MIC+0x146>
		}

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 8000d8a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 f94a 	bl	800102e <XOR>

		//Preform AES encryption
		AES_Encrypt(New_Data, NwkSkey);
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fbe7 	bl	8000574 <AES_Encrypt>

		//Copy New_Data to Old_Data
		for(i = 0; i < 16; i++)
 8000da6:	2300      	movs	r3, #0
 8000da8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000dac:	e010      	b.n	8000dd0 <Calculate_MIC+0x1b4>
		{
			Old_Data[i] = New_Data[i];
 8000dae:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000db2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000db6:	3268      	adds	r2, #104	; 0x68
 8000db8:	443a      	add	r2, r7
 8000dba:	f812 2c54 	ldrb.w	r2, [r2, #-84]
 8000dbe:	3368      	adds	r3, #104	; 0x68
 8000dc0:	443b      	add	r3, r7
 8000dc2:	f803 2c44 	strb.w	r2, [r3, #-68]
		for(i = 0; i < 16; i++)
 8000dc6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000dca:	3301      	adds	r3, #1
 8000dcc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000dd0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	d9ea      	bls.n	8000dae <Calculate_MIC+0x192>
		}

		//Raise Block counter
		Block_Counter++;
 8000dd8:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8000ddc:	3301      	adds	r3, #1
 8000dde:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	while(Block_Counter < Number_of_Blocks)
 8000de2:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8000de6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d3b5      	bcc.n	8000d5a <Calculate_MIC+0x13e>
	}

	//Perform calculation on last block
	//Check if Datalength is a multiple of 16
	if(Incomplete_Block_Size == 0)
 8000dee:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d12e      	bne.n	8000e54 <Calculate_MIC+0x238>
	{
		//Copy last data into array
		for(i = 0; i < 16; i++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000dfc:	e00f      	b.n	8000e1e <Calculate_MIC+0x202>
		{
			New_Data[i] = *Data;
 8000dfe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	7812      	ldrb	r2, [r2, #0]
 8000e06:	3368      	adds	r3, #104	; 0x68
 8000e08:	443b      	add	r3, r7
 8000e0a:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	3301      	adds	r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 8000e14:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e18:	3301      	adds	r3, #1
 8000e1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000e1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e22:	2b0f      	cmp	r3, #15
 8000e24:	d9eb      	bls.n	8000dfe <Calculate_MIC+0x1e2>
		}

		//Preform XOR with Key 1
		XOR(New_Data,Key_K1);
 8000e26:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 f8fc 	bl	800102e <XOR>

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 8000e36:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 f8f4 	bl	800102e <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fb91 	bl	8000574 <AES_Encrypt>
 8000e52:	e04d      	b.n	8000ef0 <Calculate_MIC+0x2d4>
	}
	else
	{
		//Copy the remaining data and fill the rest
		for(i =  0; i < 16; i++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000e5a:	e02f      	b.n	8000ebc <Calculate_MIC+0x2a0>
		{
			if(i < Incomplete_Block_Size)
 8000e5c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000e60:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d20a      	bcs.n	8000e7e <Calculate_MIC+0x262>
			{
				New_Data[i] = *Data;
 8000e68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	7812      	ldrb	r2, [r2, #0]
 8000e70:	3368      	adds	r3, #104	; 0x68
 8000e72:	443b      	add	r3, r7
 8000e74:	f803 2c54 	strb.w	r2, [r3, #-84]
				Data++;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	60fb      	str	r3, [r7, #12]
			}
			if(i == Incomplete_Block_Size)
 8000e7e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000e82:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d106      	bne.n	8000e98 <Calculate_MIC+0x27c>
			{
				New_Data[i] = 0x80;
 8000e8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e8e:	3368      	adds	r3, #104	; 0x68
 8000e90:	443b      	add	r3, r7
 8000e92:	2280      	movs	r2, #128	; 0x80
 8000e94:	f803 2c54 	strb.w	r2, [r3, #-84]
			}
			if(i > Incomplete_Block_Size)
 8000e98:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000e9c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d906      	bls.n	8000eb2 <Calculate_MIC+0x296>
			{
				New_Data[i] = 0x00;
 8000ea4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ea8:	3368      	adds	r3, #104	; 0x68
 8000eaa:	443b      	add	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	f803 2c54 	strb.w	r2, [r3, #-84]
		for(i =  0; i < 16; i++)
 8000eb2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000ebc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ec0:	2b0f      	cmp	r3, #15
 8000ec2:	d9cb      	bls.n	8000e5c <Calculate_MIC+0x240>
			}
		}

		//Preform XOR with Key 2
		XOR(New_Data,Key_K2);
 8000ec4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4611      	mov	r1, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f8ad 	bl	800102e <XOR>

		//Preform XOR with Old data
		XOR(New_Data,Old_Data);
 8000ed4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f8a5 	bl	800102e <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fb42 	bl	8000574 <AES_Encrypt>
	}

	Final_MIC[0] = New_Data[0];
 8000ef0:	7d3a      	ldrb	r2, [r7, #20]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	701a      	strb	r2, [r3, #0]
	Final_MIC[1] = New_Data[1];
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	7d7a      	ldrb	r2, [r7, #21]
 8000efc:	701a      	strb	r2, [r3, #0]
	Final_MIC[2] = New_Data[2];
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	3302      	adds	r3, #2
 8000f02:	7dba      	ldrb	r2, [r7, #22]
 8000f04:	701a      	strb	r2, [r3, #0]
	Final_MIC[3] = New_Data[3];
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	3303      	adds	r3, #3
 8000f0a:	7dfa      	ldrb	r2, [r7, #23]
 8000f0c:	701a      	strb	r2, [r3, #0]
}
 8000f0e:	bf00      	nop
 8000f10:	376c      	adds	r7, #108	; 0x6c
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd90      	pop	{r4, r7, pc}
 8000f16:	bf00      	nop
 8000f18:	0800832c 	.word	0x0800832c

08000f1c <Generate_Keys>:

void Generate_Keys(unsigned char *K1, unsigned char *K2, unsigned char NwkSkey[16])
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
	unsigned char i;
	unsigned char MSB_Key;

	//Encrypt the zeros in K1 with the NwkSkey
	AES_Encrypt(K1, NwkSkey);
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	68f8      	ldr	r0, [r7, #12]
 8000f2c:	f7ff fb22 	bl	8000574 <AES_Encrypt>

	//Create K1
	//Check if MSB is 1
	if((K1[0] & 0x80) == 0x80)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	b25b      	sxtb	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	da02      	bge.n	8000f40 <Generate_Keys+0x24>
	{
		MSB_Key = 1;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	75bb      	strb	r3, [r7, #22]
 8000f3e:	e001      	b.n	8000f44 <Generate_Keys+0x28>
	}
	else
	{
		MSB_Key = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	75bb      	strb	r3, [r7, #22]
	}

	//Shift K1 one bit left
	Shift_Left(K1);
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f000 f83c 	bl	8000fc2 <Shift_Left>

	//if MSB was 1
	if(MSB_Key == 1)
 8000f4a:	7dbb      	ldrb	r3, [r7, #22]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d109      	bne.n	8000f64 <Generate_Keys+0x48>
	{
		K1[15] = K1[15] ^ 0x87;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	330f      	adds	r3, #15
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	320f      	adds	r2, #15
 8000f5a:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	7013      	strb	r3, [r2, #0]
	}

	//Copy K1 to K2
	for( i = 0; i < 16; i++)
 8000f64:	2300      	movs	r3, #0
 8000f66:	75fb      	strb	r3, [r7, #23]
 8000f68:	e00a      	b.n	8000f80 <Generate_Keys+0x64>
	{
		K2[i] = K1[i];
 8000f6a:	7dfb      	ldrb	r3, [r7, #23]
 8000f6c:	68fa      	ldr	r2, [r7, #12]
 8000f6e:	441a      	add	r2, r3
 8000f70:	7dfb      	ldrb	r3, [r7, #23]
 8000f72:	68b9      	ldr	r1, [r7, #8]
 8000f74:	440b      	add	r3, r1
 8000f76:	7812      	ldrb	r2, [r2, #0]
 8000f78:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < 16; i++)
 8000f7a:	7dfb      	ldrb	r3, [r7, #23]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	75fb      	strb	r3, [r7, #23]
 8000f80:	7dfb      	ldrb	r3, [r7, #23]
 8000f82:	2b0f      	cmp	r3, #15
 8000f84:	d9f1      	bls.n	8000f6a <Generate_Keys+0x4e>
	}

	//Check if MSB is 1
	if((K2[0] & 0x80) == 0x80)
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	b25b      	sxtb	r3, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	da02      	bge.n	8000f96 <Generate_Keys+0x7a>
	{
		MSB_Key = 1;
 8000f90:	2301      	movs	r3, #1
 8000f92:	75bb      	strb	r3, [r7, #22]
 8000f94:	e001      	b.n	8000f9a <Generate_Keys+0x7e>
	}
	else
	{
		MSB_Key = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	75bb      	strb	r3, [r7, #22]
	}

	//Shift K2 one bit left
	Shift_Left(K2);
 8000f9a:	68b8      	ldr	r0, [r7, #8]
 8000f9c:	f000 f811 	bl	8000fc2 <Shift_Left>

	//Check if MSB was 1
	if(MSB_Key == 1)
 8000fa0:	7dbb      	ldrb	r3, [r7, #22]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d109      	bne.n	8000fba <Generate_Keys+0x9e>
	{
		K2[15] = K2[15] ^ 0x87;
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	330f      	adds	r3, #15
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	68ba      	ldr	r2, [r7, #8]
 8000fae:	320f      	adds	r2, #15
 8000fb0:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	7013      	strb	r3, [r2, #0]
	}
}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <Shift_Left>:

void Shift_Left(unsigned char *Data)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b085      	sub	sp, #20
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
	unsigned char i;
	unsigned char Overflow = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73bb      	strb	r3, [r7, #14]
	//unsigned char High_Byte, Low_Byte;

	for(i = 0; i < 16; i++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	73fb      	strb	r3, [r7, #15]
 8000fd2:	e022      	b.n	800101a <Shift_Left+0x58>
	{
		//Check for overflow on next byte except for the last byte
		if(i < 15)
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	2b0e      	cmp	r3, #14
 8000fd8:	d80d      	bhi.n	8000ff6 <Shift_Left+0x34>
		{
			//Check if upper bit is one
			if((Data[i+1] & 0x80) == 0x80)
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b25b      	sxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	da02      	bge.n	8000ff0 <Shift_Left+0x2e>
			{
				Overflow = 1;
 8000fea:	2301      	movs	r3, #1
 8000fec:	73bb      	strb	r3, [r7, #14]
 8000fee:	e004      	b.n	8000ffa <Shift_Left+0x38>
			}
			else
			{
				Overflow = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	73bb      	strb	r3, [r7, #14]
 8000ff4:	e001      	b.n	8000ffa <Shift_Left+0x38>
			}
		}
		else
		{
			Overflow = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73bb      	strb	r3, [r7, #14]
		}

		//Shift one left
		Data[i] = (Data[i] << 1) + Overflow;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	4413      	add	r3, r2
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	b2d9      	uxtb	r1, r3
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	4413      	add	r3, r2
 800100c:	7bba      	ldrb	r2, [r7, #14]
 800100e:	440a      	add	r2, r1
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	3301      	adds	r3, #1
 8001018:	73fb      	strb	r3, [r7, #15]
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	d9d9      	bls.n	8000fd4 <Shift_Left+0x12>
	}
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <XOR>:

void XOR(unsigned char *New_Data,unsigned char *Old_Data)
{
 800102e:	b480      	push	{r7}
 8001030:	b085      	sub	sp, #20
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
	unsigned char i;

	for(i = 0; i < 16; i++)
 8001038:	2300      	movs	r3, #0
 800103a:	73fb      	strb	r3, [r7, #15]
 800103c:	e010      	b.n	8001060 <XOR+0x32>
	{
		New_Data[i] = New_Data[i] ^ Old_Data[i];
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	4413      	add	r3, r2
 8001044:	7819      	ldrb	r1, [r3, #0]
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	4413      	add	r3, r2
 800104c:	781a      	ldrb	r2, [r3, #0]
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	4403      	add	r3, r0
 8001054:	404a      	eors	r2, r1
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	3301      	adds	r3, #1
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	2b0f      	cmp	r3, #15
 8001064:	d9eb      	bls.n	800103e <XOR+0x10>
	}
}
 8001066:	bf00      	nop
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800107c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001080:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b00      	cmp	r3, #0
 800108a:	d013      	beq.n	80010b4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800108c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001090:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001094:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001098:	2b00      	cmp	r3, #0
 800109a:	d00b      	beq.n	80010b4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800109c:	e000      	b.n	80010a0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800109e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80010a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d0f9      	beq.n	800109e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80010aa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80010b4:	687b      	ldr	r3, [r7, #4]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	e009      	b.n	80010e8 <_write+0x26>
	{
	  ITM_SendChar(*ptr++);
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	60ba      	str	r2, [r7, #8]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ffc9 	bl	8001074 <ITM_SendChar>
	for (int i = 0; i < len; i++)
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	3301      	adds	r3, #1
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	dbf1      	blt.n	80010d4 <_write+0x12>
	}
	return len;
 80010f0:	687b      	ldr	r3, [r7, #4]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <get_precision_tick>:

static uint32_t get_precision_tick()
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001102:	b672      	cpsid	i
}
 8001104:	bf00      	nop
    __disable_irq();

    printf("TIM1 value: %ld\n", __HAL_TIM_GET_COUNTER(&htim1));
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <get_precision_tick+0x34>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110c:	4619      	mov	r1, r3
 800110e:	4809      	ldr	r0, [pc, #36]	; (8001134 <get_precision_tick+0x38>)
 8001110:	f006 fb40 	bl	8007794 <iprintf>
    uint32_t precision_tick = tim_tick_msb | __HAL_TIM_GET_COUNTER(&htim1);
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <get_precision_tick+0x34>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800111a:	4b07      	ldr	r3, [pc, #28]	; (8001138 <get_precision_tick+0x3c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4313      	orrs	r3, r2
 8001120:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8001122:	b662      	cpsie	i
}
 8001124:	bf00      	nop

    __enable_irq();

    return precision_tick;
 8001126:	687b      	ldr	r3, [r7, #4]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000308 	.word	0x20000308
 8001134:	0800833c 	.word	0x0800833c
 8001138:	200003d8 	.word	0x200003d8

0800113c <random_int>:

static uint8_t random_int(uint8_t max)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
    return 0; // TODO: MAKE IT RANDOM
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115a:	f001 fab9 	bl	80026d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115e:	f000 f875 	bl	800124c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001162:	f000 f9ef 	bl	8001544 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001166:	f000 f9bd 	bl	80014e4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800116a:	f000 f8cd 	bl	8001308 <MX_ADC1_Init>
  MX_SPI2_Init();
 800116e:	f000 f927 	bl	80013c0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001172:	f000 f963 	bl	800143c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  printf("\n");
 8001176:	200a      	movs	r0, #10
 8001178:	f006 fb24 	bl	80077c4 <putchar>

  HAL_TIM_Base_Start(&htim1);
 800117c:	482a      	ldr	r0, [pc, #168]	; (8001228 <main+0xd4>)
 800117e:	f005 f885 	bl	800628c <HAL_TIM_Base_Start>

  if (!rfm95_init(&rfm95_handle)) {
 8001182:	482a      	ldr	r0, [pc, #168]	; (800122c <main+0xd8>)
 8001184:	f000 fccc 	bl	8001b20 <rfm95_init>
 8001188:	4603      	mov	r3, r0
 800118a:	f083 0301 	eor.w	r3, r3, #1
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <main+0x48>
	  printf("LoRa RFM9x: Init FAIL\n");
 8001194:	4826      	ldr	r0, [pc, #152]	; (8001230 <main+0xdc>)
 8001196:	f006 fb99 	bl	80078cc <puts>
 800119a:	e002      	b.n	80011a2 <main+0x4e>
  }
  else {
	  printf("LoRa RFM9x: LoRa SUCCESS\n");
 800119c:	4825      	ldr	r0, [pc, #148]	; (8001234 <main+0xe0>)
 800119e:	f006 fb95 	bl	80078cc <puts>
  }

  uint8_t data_packet[] = {0x01, 0x02, 0x03, 0x4};
 80011a2:	4b25      	ldr	r3, [pc, #148]	; (8001238 <main+0xe4>)
 80011a4:	603b      	str	r3, [r7, #0]
  if (!rfm95_send_receive_cycle(&rfm95_handle, data_packet, sizeof(data_packet))) {
 80011a6:	463b      	mov	r3, r7
 80011a8:	2204      	movs	r2, #4
 80011aa:	4619      	mov	r1, r3
 80011ac:	481f      	ldr	r0, [pc, #124]	; (800122c <main+0xd8>)
 80011ae:	f000 ffb8 	bl	8002122 <rfm95_send_receive_cycle>
 80011b2:	4603      	mov	r3, r0
 80011b4:	f083 0301 	eor.w	r3, r3, #1
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <main+0x72>
	  printf("LoRa RFM9x: Send FAIL\n");
 80011be:	481f      	ldr	r0, [pc, #124]	; (800123c <main+0xe8>)
 80011c0:	f006 fb84 	bl	80078cc <puts>
 80011c4:	e002      	b.n	80011cc <main+0x78>
  } else {
	  printf("LoRa RFM9x: Send SUCCESS\n");
 80011c6:	481e      	ldr	r0, [pc, #120]	; (8001240 <main+0xec>)
 80011c8:	f006 fb80 	bl	80078cc <puts>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  //Example ADC
	  HAL_ADC_Start(&hadc1);
 80011cc:	481d      	ldr	r0, [pc, #116]	; (8001244 <main+0xf0>)
 80011ce:	f001 fc8f 	bl	8002af0 <HAL_ADC_Start>
	  uint8_t val_analogue;
	  if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 80011d2:	210a      	movs	r1, #10
 80011d4:	481b      	ldr	r0, [pc, #108]	; (8001244 <main+0xf0>)
 80011d6:	f001 fd2d 	bl	8002c34 <HAL_ADC_PollForConversion>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d104      	bne.n	80011ea <main+0x96>
		  val_analogue = HAL_ADC_GetValue(&hadc1);
 80011e0:	4818      	ldr	r0, [pc, #96]	; (8001244 <main+0xf0>)
 80011e2:	f001 fde5 	bl	8002db0 <HAL_ADC_GetValue>
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
	  }
	  HAL_ADC_Stop(&hadc1);
 80011ea:	4816      	ldr	r0, [pc, #88]	; (8001244 <main+0xf0>)
 80011ec:	f001 fced 	bl	8002bca <HAL_ADC_Stop>
	  printf("ADC1: %d\n", val_analogue);
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	4619      	mov	r1, r3
 80011f4:	4814      	ldr	r0, [pc, #80]	; (8001248 <main+0xf4>)
 80011f6:	f006 facd 	bl	8007794 <iprintf>

	  //Example GPIO
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80011fa:	2201      	movs	r2, #1
 80011fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001204:	f002 fc9c 	bl	8003b40 <HAL_GPIO_WritePin>
	  HAL_Delay(2000);
 8001208:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800120c:	f001 fac6 	bl	800279c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001210:	2200      	movs	r2, #0
 8001212:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121a:	f002 fc91 	bl	8003b40 <HAL_GPIO_WritePin>
	  HAL_Delay(2000);
 800121e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001222:	f001 fabb 	bl	800279c <HAL_Delay>
  {
 8001226:	e7d1      	b.n	80011cc <main+0x78>
 8001228:	20000308 	.word	0x20000308
 800122c:	20000100 	.word	0x20000100
 8001230:	08008350 	.word	0x08008350
 8001234:	08008368 	.word	0x08008368
 8001238:	04030201 	.word	0x04030201
 800123c:	08008384 	.word	0x08008384
 8001240:	0800839c 	.word	0x0800839c
 8001244:	20000254 	.word	0x20000254
 8001248:	080083b8 	.word	0x080083b8

0800124c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b09c      	sub	sp, #112	; 0x70
 8001250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001252:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001256:	2228      	movs	r2, #40	; 0x28
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f005 ffa4 	bl	80071a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001260:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001270:	463b      	mov	r3, r7
 8001272:	2234      	movs	r2, #52	; 0x34
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f005 ff96 	bl	80071a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800127c:	2301      	movs	r3, #1
 800127e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001280:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001284:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001286:	2300      	movs	r3, #0
 8001288:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800128a:	2301      	movs	r3, #1
 800128c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128e:	2302      	movs	r3, #2
 8001290:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001292:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001296:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001298:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800129c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012a2:	4618      	mov	r0, r3
 80012a4:	f002 fc7c 	bl	8003ba0 <HAL_RCC_OscConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80012ae:	f000 fa13 	bl	80016d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b2:	230f      	movs	r3, #15
 80012b4:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b6:	2302      	movs	r3, #2
 80012b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012cc:	2102      	movs	r1, #2
 80012ce:	4618      	mov	r0, r3
 80012d0:	f003 fca4 	bl	8004c1c <HAL_RCC_ClockConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <SystemClock_Config+0x92>
  {
    Error_Handler();
 80012da:	f000 f9fd 	bl	80016d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC1;
 80012de:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 80012e2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 80012e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ee:	463b      	mov	r3, r7
 80012f0:	4618      	mov	r0, r3
 80012f2:	f003 fec9 	bl	8005088 <HAL_RCCEx_PeriphCLKConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80012fc:	f000 f9ec 	bl	80016d8 <Error_Handler>
  }
}
 8001300:	bf00      	nop
 8001302:	3770      	adds	r7, #112	; 0x70
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800130e:	463b      	mov	r3, r7
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
 800131c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800131e:	4b27      	ldr	r3, [pc, #156]	; (80013bc <MX_ADC1_Init+0xb4>)
 8001320:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001324:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001326:	4b25      	ldr	r3, [pc, #148]	; (80013bc <MX_ADC1_Init+0xb4>)
 8001328:	2200      	movs	r2, #0
 800132a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800132c:	4b23      	ldr	r3, [pc, #140]	; (80013bc <MX_ADC1_Init+0xb4>)
 800132e:	2210      	movs	r2, #16
 8001330:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <MX_ADC1_Init+0xb4>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001338:	4b20      	ldr	r3, [pc, #128]	; (80013bc <MX_ADC1_Init+0xb4>)
 800133a:	2200      	movs	r2, #0
 800133c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800133e:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <MX_ADC1_Init+0xb4>)
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <MX_ADC1_Init+0xb4>)
 8001348:	2200      	movs	r2, #0
 800134a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800134c:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <MX_ADC1_Init+0xb4>)
 800134e:	2201      	movs	r2, #1
 8001350:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001352:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <MX_ADC1_Init+0xb4>)
 8001354:	2200      	movs	r2, #0
 8001356:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001358:	4b18      	ldr	r3, [pc, #96]	; (80013bc <MX_ADC1_Init+0xb4>)
 800135a:	2201      	movs	r2, #1
 800135c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800135e:	4b17      	ldr	r3, [pc, #92]	; (80013bc <MX_ADC1_Init+0xb4>)
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <MX_ADC1_Init+0xb4>)
 8001368:	2204      	movs	r2, #4
 800136a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800136c:	4b13      	ldr	r3, [pc, #76]	; (80013bc <MX_ADC1_Init+0xb4>)
 800136e:	2200      	movs	r2, #0
 8001370:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001372:	4b12      	ldr	r3, [pc, #72]	; (80013bc <MX_ADC1_Init+0xb4>)
 8001374:	2200      	movs	r2, #0
 8001376:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001378:	4810      	ldr	r0, [pc, #64]	; (80013bc <MX_ADC1_Init+0xb4>)
 800137a:	f001 fa33 	bl	80027e4 <HAL_ADC_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8001384:	f000 f9a8 	bl	80016d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001388:	2301      	movs	r3, #1
 800138a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800138c:	2301      	movs	r3, #1
 800138e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a0:	463b      	mov	r3, r7
 80013a2:	4619      	mov	r1, r3
 80013a4:	4805      	ldr	r0, [pc, #20]	; (80013bc <MX_ADC1_Init+0xb4>)
 80013a6:	f001 fd11 	bl	8002dcc <HAL_ADC_ConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80013b0:	f000 f992 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000254 	.word	0x20000254

080013c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013c4:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <MX_SPI2_Init+0x74>)
 80013c6:	4a1c      	ldr	r2, [pc, #112]	; (8001438 <MX_SPI2_Init+0x78>)
 80013c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013ca:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <MX_SPI2_Init+0x74>)
 80013cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013d2:	4b18      	ldr	r3, [pc, #96]	; (8001434 <MX_SPI2_Init+0x74>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013d8:	4b16      	ldr	r3, [pc, #88]	; (8001434 <MX_SPI2_Init+0x74>)
 80013da:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013de:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <MX_SPI2_Init+0x74>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <MX_SPI2_Init+0x74>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <MX_SPI2_Init+0x74>)
 80013ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013f2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <MX_SPI2_Init+0x74>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <MX_SPI2_Init+0x74>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <MX_SPI2_Init+0x74>)
 8001402:	2200      	movs	r2, #0
 8001404:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <MX_SPI2_Init+0x74>)
 8001408:	2200      	movs	r2, #0
 800140a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <MX_SPI2_Init+0x74>)
 800140e:	2207      	movs	r2, #7
 8001410:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <MX_SPI2_Init+0x74>)
 8001414:	2200      	movs	r2, #0
 8001416:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <MX_SPI2_Init+0x74>)
 800141a:	2208      	movs	r2, #8
 800141c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800141e:	4805      	ldr	r0, [pc, #20]	; (8001434 <MX_SPI2_Init+0x74>)
 8001420:	f003 ffc4 	bl	80053ac <HAL_SPI_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800142a:	f000 f955 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200002a4 	.word	0x200002a4
 8001438:	40003800 	.word	0x40003800

0800143c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800145a:	4b20      	ldr	r3, [pc, #128]	; (80014dc <MX_TIM1_Init+0xa0>)
 800145c:	4a20      	ldr	r2, [pc, #128]	; (80014e0 <MX_TIM1_Init+0xa4>)
 800145e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001460:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <MX_TIM1_Init+0xa0>)
 8001462:	2200      	movs	r2, #0
 8001464:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001466:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <MX_TIM1_Init+0xa0>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <MX_TIM1_Init+0xa0>)
 800146e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001472:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001474:	4b19      	ldr	r3, [pc, #100]	; (80014dc <MX_TIM1_Init+0xa0>)
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800147a:	4b18      	ldr	r3, [pc, #96]	; (80014dc <MX_TIM1_Init+0xa0>)
 800147c:	2200      	movs	r2, #0
 800147e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <MX_TIM1_Init+0xa0>)
 8001482:	2200      	movs	r2, #0
 8001484:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001486:	4815      	ldr	r0, [pc, #84]	; (80014dc <MX_TIM1_Init+0xa0>)
 8001488:	f004 fea8 	bl	80061dc <HAL_TIM_Base_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001492:	f000 f921 	bl	80016d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800149c:	f107 0310 	add.w	r3, r7, #16
 80014a0:	4619      	mov	r1, r3
 80014a2:	480e      	ldr	r0, [pc, #56]	; (80014dc <MX_TIM1_Init+0xa0>)
 80014a4:	f005 f85d 	bl	8006562 <HAL_TIM_ConfigClockSource>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80014ae:	f000 f913 	bl	80016d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	4619      	mov	r1, r3
 80014c2:	4806      	ldr	r0, [pc, #24]	; (80014dc <MX_TIM1_Init+0xa0>)
 80014c4:	f005 fa50 	bl	8006968 <HAL_TIMEx_MasterConfigSynchronization>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80014ce:	f000 f903 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	3720      	adds	r7, #32
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000308 	.word	0x20000308
 80014e0:	40012c00 	.word	0x40012c00

080014e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <MX_USART2_UART_Init+0x58>)
 80014ea:	4a15      	ldr	r2, [pc, #84]	; (8001540 <MX_USART2_UART_Init+0x5c>)
 80014ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80014ee:	4b13      	ldr	r3, [pc, #76]	; (800153c <MX_USART2_UART_Init+0x58>)
 80014f0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80014f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_USART2_UART_Init+0x58>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <MX_USART2_UART_Init+0x58>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <MX_USART2_UART_Init+0x58>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <MX_USART2_UART_Init+0x58>)
 800150a:	220c      	movs	r2, #12
 800150c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <MX_USART2_UART_Init+0x58>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <MX_USART2_UART_Init+0x58>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <MX_USART2_UART_Init+0x58>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <MX_USART2_UART_Init+0x58>)
 8001522:	2200      	movs	r2, #0
 8001524:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001526:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_USART2_UART_Init+0x58>)
 8001528:	f005 faa2 	bl	8006a70 <HAL_UART_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001532:	f000 f8d1 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000354 	.word	0x20000354
 8001540:	40004400 	.word	0x40004400

08001544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
 8001558:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800155a:	4b42      	ldr	r3, [pc, #264]	; (8001664 <MX_GPIO_Init+0x120>)
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	4a41      	ldr	r2, [pc, #260]	; (8001664 <MX_GPIO_Init+0x120>)
 8001560:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001564:	6153      	str	r3, [r2, #20]
 8001566:	4b3f      	ldr	r3, [pc, #252]	; (8001664 <MX_GPIO_Init+0x120>)
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001572:	4b3c      	ldr	r3, [pc, #240]	; (8001664 <MX_GPIO_Init+0x120>)
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	4a3b      	ldr	r2, [pc, #236]	; (8001664 <MX_GPIO_Init+0x120>)
 8001578:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800157c:	6153      	str	r3, [r2, #20]
 800157e:	4b39      	ldr	r3, [pc, #228]	; (8001664 <MX_GPIO_Init+0x120>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	4b36      	ldr	r3, [pc, #216]	; (8001664 <MX_GPIO_Init+0x120>)
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	4a35      	ldr	r2, [pc, #212]	; (8001664 <MX_GPIO_Init+0x120>)
 8001590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001594:	6153      	str	r3, [r2, #20]
 8001596:	4b33      	ldr	r3, [pc, #204]	; (8001664 <MX_GPIO_Init+0x120>)
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	4b30      	ldr	r3, [pc, #192]	; (8001664 <MX_GPIO_Init+0x120>)
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	4a2f      	ldr	r2, [pc, #188]	; (8001664 <MX_GPIO_Init+0x120>)
 80015a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ac:	6153      	str	r3, [r2, #20]
 80015ae:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <MX_GPIO_Init+0x120>)
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFM9x_RST_GPIO_Port, RFM9x_RST_Pin, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015c0:	4829      	ldr	r0, [pc, #164]	; (8001668 <MX_GPIO_Init+0x124>)
 80015c2:	f002 fabd 	bl	8003b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFM9x_NSS_GPIO_Port, RFM9x_NSS_Pin, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d0:	f002 fab6 	bl	8003b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015da:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	4619      	mov	r1, r3
 80015ea:	481f      	ldr	r0, [pc, #124]	; (8001668 <MX_GPIO_Init+0x124>)
 80015ec:	f002 f936 	bl	800385c <HAL_GPIO_Init>

  /*Configure GPIO pins : RFM9x_DIO5_Pin RFM9x_DIO1_Pin RFM9x_DIO0_Pin */
  GPIO_InitStruct.Pin = RFM9x_DIO5_Pin|RFM9x_DIO1_Pin|RFM9x_DIO0_Pin;
 80015f0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80015f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80015f6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80015fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015fc:	2301      	movs	r3, #1
 80015fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	4619      	mov	r1, r3
 8001606:	4818      	ldr	r0, [pc, #96]	; (8001668 <MX_GPIO_Init+0x124>)
 8001608:	f002 f928 	bl	800385c <HAL_GPIO_Init>

  /*Configure GPIO pin : RFM9x_RST_Pin */
  GPIO_InitStruct.Pin = RFM9x_RST_Pin;
 800160c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001612:	2301      	movs	r3, #1
 8001614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RFM9x_RST_GPIO_Port, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	4810      	ldr	r0, [pc, #64]	; (8001668 <MX_GPIO_Init+0x124>)
 8001626:	f002 f919 	bl	800385c <HAL_GPIO_Init>

  /*Configure GPIO pin : RFM9x_NSS_Pin */
  GPIO_InitStruct.Pin = RFM9x_NSS_Pin;
 800162a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800162e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001630:	2301      	movs	r3, #1
 8001632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RFM9x_NSS_GPIO_Port, &GPIO_InitStruct);
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4619      	mov	r1, r3
 8001642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001646:	f002 f909 	bl	800385c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2100      	movs	r1, #0
 800164e:	2017      	movs	r0, #23
 8001650:	f002 f8cd 	bl	80037ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001654:	2017      	movs	r0, #23
 8001656:	f002 f8e6 	bl	8003826 <HAL_NVIC_EnableIRQ>

}
 800165a:	bf00      	nop
 800165c:	3728      	adds	r7, #40	; 0x28
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40021000 	.word	0x40021000
 8001668:	48000800 	.word	0x48000800

0800166c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == RFM9x_DIO0_Pin)
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800167c:	d107      	bne.n	800168e <HAL_GPIO_EXTI_Callback+0x22>
    {
    	printf("EXTI CB on DIO0\n");
 800167e:	4812      	ldr	r0, [pc, #72]	; (80016c8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001680:	f006 f924 	bl	80078cc <puts>
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO0);
 8001684:	2100      	movs	r1, #0
 8001686:	4811      	ldr	r0, [pc, #68]	; (80016cc <HAL_GPIO_EXTI_Callback+0x60>)
 8001688:	f000 fd92 	bl	80021b0 <rfm95_on_interrupt>
    else if (GPIO_Pin == RFM9x_DIO5_Pin)
    {
    	printf("EXTI CB on DIO5\n", GPIO_Pin);
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO5);
    }
}
 800168c:	e018      	b.n	80016c0 <HAL_GPIO_EXTI_Callback+0x54>
    else if (GPIO_Pin == RFM9x_DIO1_Pin)
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	2b80      	cmp	r3, #128	; 0x80
 8001692:	d109      	bne.n	80016a8 <HAL_GPIO_EXTI_Callback+0x3c>
    	printf("EXTI CB on DIO1\n", GPIO_Pin);
 8001694:	88fb      	ldrh	r3, [r7, #6]
 8001696:	4619      	mov	r1, r3
 8001698:	480d      	ldr	r0, [pc, #52]	; (80016d0 <HAL_GPIO_EXTI_Callback+0x64>)
 800169a:	f006 f87b 	bl	8007794 <iprintf>
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO1);
 800169e:	2101      	movs	r1, #1
 80016a0:	480a      	ldr	r0, [pc, #40]	; (80016cc <HAL_GPIO_EXTI_Callback+0x60>)
 80016a2:	f000 fd85 	bl	80021b0 <rfm95_on_interrupt>
}
 80016a6:	e00b      	b.n	80016c0 <HAL_GPIO_EXTI_Callback+0x54>
    else if (GPIO_Pin == RFM9x_DIO5_Pin)
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	2b40      	cmp	r3, #64	; 0x40
 80016ac:	d108      	bne.n	80016c0 <HAL_GPIO_EXTI_Callback+0x54>
    	printf("EXTI CB on DIO5\n", GPIO_Pin);
 80016ae:	88fb      	ldrh	r3, [r7, #6]
 80016b0:	4619      	mov	r1, r3
 80016b2:	4808      	ldr	r0, [pc, #32]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x68>)
 80016b4:	f006 f86e 	bl	8007794 <iprintf>
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO5);
 80016b8:	2102      	movs	r1, #2
 80016ba:	4804      	ldr	r0, [pc, #16]	; (80016cc <HAL_GPIO_EXTI_Callback+0x60>)
 80016bc:	f000 fd78 	bl	80021b0 <rfm95_on_interrupt>
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	080083c4 	.word	0x080083c4
 80016cc:	20000100 	.word	0x20000100
 80016d0:	080083d4 	.word	0x080083d4
 80016d4:	080083e8 	.word	0x080083e8

080016d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016dc:	b672      	cpsid	i
}
 80016de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <Error_Handler+0x8>

080016e2 <read_register>:

#define RFM95_REGISTER_INVERT_IQ_1_RX                    		0x67
#define RFM95_REGISTER_INVERT_IQ_2_RX							0x19

static bool read_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t *buffer, size_t length)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b086      	sub	sp, #24
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	60f8      	str	r0, [r7, #12]
 80016ea:	607a      	str	r2, [r7, #4]
 80016ec:	603b      	str	r3, [r7, #0]
 80016ee:	460b      	mov	r3, r1
 80016f0:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6858      	ldr	r0, [r3, #4]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	891b      	ldrh	r3, [r3, #8]
 80016fa:	2200      	movs	r2, #0
 80016fc:	4619      	mov	r1, r3
 80016fe:	f002 fa1f 	bl	8003b40 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer = (uint8_t)reg & 0x7fu;
 8001702:	7afb      	ldrb	r3, [r7, #11]
 8001704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001708:	b2db      	uxtb	r3, r3
 800170a:	75fb      	strb	r3, [r7, #23]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6818      	ldr	r0, [r3, #0]
 8001710:	f107 0117 	add.w	r1, r7, #23
 8001714:	230a      	movs	r3, #10
 8001716:	2201      	movs	r2, #1
 8001718:	f003 fef3 	bl	8005502 <HAL_SPI_Transmit>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <read_register+0x44>
		return false;
 8001722:	2300      	movs	r3, #0
 8001724:	e015      	b.n	8001752 <read_register+0x70>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, length, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6818      	ldr	r0, [r3, #0]
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	b29a      	uxth	r2, r3
 800172e:	230a      	movs	r3, #10
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	f004 f854 	bl	80057de <HAL_SPI_Receive>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <read_register+0x5e>
		return false;
 800173c:	2300      	movs	r3, #0
 800173e:	e008      	b.n	8001752 <read_register+0x70>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6858      	ldr	r0, [r3, #4]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	891b      	ldrh	r3, [r3, #8]
 8001748:	2201      	movs	r2, #1
 800174a:	4619      	mov	r1, r3
 800174c:	f002 f9f8 	bl	8003b40 <HAL_GPIO_WritePin>

	return true;
 8001750:	2301      	movs	r3, #1
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <write_register>:

static bool write_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t value)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b084      	sub	sp, #16
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	460b      	mov	r3, r1
 8001764:	70fb      	strb	r3, [r7, #3]
 8001766:	4613      	mov	r3, r2
 8001768:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6858      	ldr	r0, [r3, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	891b      	ldrh	r3, [r3, #8]
 8001772:	2200      	movs	r2, #0
 8001774:	4619      	mov	r1, r3
 8001776:	f002 f9e3 	bl	8003b40 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = {((uint8_t)reg | 0x80u), value};
 800177a:	78fb      	ldrb	r3, [r7, #3]
 800177c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001780:	b2db      	uxtb	r3, r3
 8001782:	733b      	strb	r3, [r7, #12]
 8001784:	78bb      	ldrb	r3, [r7, #2]
 8001786:	737b      	strb	r3, [r7, #13]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6818      	ldr	r0, [r3, #0]
 800178c:	f107 010c 	add.w	r1, r7, #12
 8001790:	230a      	movs	r3, #10
 8001792:	2202      	movs	r2, #2
 8001794:	f003 feb5 	bl	8005502 <HAL_SPI_Transmit>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <write_register+0x48>
		return false;
 800179e:	2300      	movs	r3, #0
 80017a0:	e008      	b.n	80017b4 <write_register+0x5a>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6858      	ldr	r0, [r3, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	891b      	ldrh	r3, [r3, #8]
 80017aa:	2201      	movs	r2, #1
 80017ac:	4619      	mov	r1, r3
 80017ae:	f002 f9c7 	bl	8003b40 <HAL_GPIO_WritePin>

	return true;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <config_set_channel>:

static void config_set_channel(rfm95_handle_t *handle, uint8_t channel_index, uint32_t frequency)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	460b      	mov	r3, r1
 80017c6:	607a      	str	r2, [r7, #4]
 80017c8:	72fb      	strb	r3, [r7, #11]
	assert(channel_index < 16);
 80017ca:	7afb      	ldrb	r3, [r7, #11]
 80017cc:	2b0f      	cmp	r3, #15
 80017ce:	d905      	bls.n	80017dc <config_set_channel+0x20>
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <config_set_channel+0x54>)
 80017d2:	4a10      	ldr	r2, [pc, #64]	; (8001814 <config_set_channel+0x58>)
 80017d4:	216e      	movs	r1, #110	; 0x6e
 80017d6:	4810      	ldr	r0, [pc, #64]	; (8001818 <config_set_channel+0x5c>)
 80017d8:	f005 fc7e 	bl	80070d8 <__assert_func>
	handle->config.channels[channel_index].frequency = frequency;
 80017dc:	7afa      	ldrb	r2, [r7, #11]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	321a      	adds	r2, #26
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	handle->config.channel_mask |= (1 << channel_index);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80017ee:	b21a      	sxth	r2, r3
 80017f0:	7afb      	ldrb	r3, [r7, #11]
 80017f2:	2101      	movs	r1, #1
 80017f4:	fa01 f303 	lsl.w	r3, r1, r3
 80017f8:	b21b      	sxth	r3, r3
 80017fa:	4313      	orrs	r3, r2
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	b29a      	uxth	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	080083fc 	.word	0x080083fc
 8001814:	0800870c 	.word	0x0800870c
 8001818:	08008410 	.word	0x08008410

0800181c <config_load_default>:

static void config_load_default(rfm95_handle_t *handle)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	handle->config.magic = RFM95_EEPROM_CONFIG_MAGIC;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f64a 3267 	movw	r2, #43879	; 0xab67
 800182a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	handle->config.tx_frame_count = 0;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	handle->config.rx_frame_count = 0;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	handle->config.rx1_delay = 1;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	handle->config.channel_mask = 0;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	config_set_channel(handle, 0, 868100000);
 800184e:	4a09      	ldr	r2, [pc, #36]	; (8001874 <config_load_default+0x58>)
 8001850:	2100      	movs	r1, #0
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff ffb2 	bl	80017bc <config_set_channel>
	config_set_channel(handle, 1, 868300000);
 8001858:	4a07      	ldr	r2, [pc, #28]	; (8001878 <config_load_default+0x5c>)
 800185a:	2101      	movs	r1, #1
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff ffad 	bl	80017bc <config_set_channel>
	config_set_channel(handle, 2, 868500000);
 8001862:	4a06      	ldr	r2, [pc, #24]	; (800187c <config_load_default+0x60>)
 8001864:	2102      	movs	r1, #2
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff ffa8 	bl	80017bc <config_set_channel>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	33be27a0 	.word	0x33be27a0
 8001878:	33c134e0 	.word	0x33c134e0
 800187c:	33c44220 	.word	0x33c44220

08001880 <reset>:

static void reset(rfm95_handle_t *handle)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68d8      	ldr	r0, [r3, #12]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	8a1b      	ldrh	r3, [r3, #16]
 8001890:	2200      	movs	r2, #0
 8001892:	4619      	mov	r1, r3
 8001894:	f002 f954 	bl	8003b40 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 0.1ms would theoretically be enough
 8001898:	2001      	movs	r0, #1
 800189a:	f000 ff7f 	bl	800279c <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68d8      	ldr	r0, [r3, #12]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	8a1b      	ldrh	r3, [r3, #16]
 80018a6:	2201      	movs	r2, #1
 80018a8:	4619      	mov	r1, r3
 80018aa:	f002 f949 	bl	8003b40 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80018ae:	2005      	movs	r0, #5
 80018b0:	f000 ff74 	bl	800279c <HAL_Delay>
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <configure_frequency>:

static bool configure_frequency(rfm95_handle_t *handle, uint32_t frequency)
{
 80018bc:	b5b0      	push	{r4, r5, r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
	// FQ = (FRF * 32 Mhz) / (2 ^ 19)
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 80018c6:	6839      	ldr	r1, [r7, #0]
 80018c8:	2000      	movs	r0, #0
 80018ca:	460a      	mov	r2, r1
 80018cc:	4603      	mov	r3, r0
 80018ce:	0b55      	lsrs	r5, r2, #13
 80018d0:	04d4      	lsls	r4, r2, #19
 80018d2:	4a27      	ldr	r2, [pc, #156]	; (8001970 <configure_frequency+0xb4>)
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	4620      	mov	r0, r4
 80018da:	4629      	mov	r1, r5
 80018dc:	f7fe fcc8 	bl	8000270 <__aeabi_uldivmod>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (!write_register(handle, RFM95_REGISTER_FR_MSB, (uint8_t)(frf >> 16))) return false;
 80018e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	f04f 0300 	mov.w	r3, #0
 80018f4:	0c02      	lsrs	r2, r0, #16
 80018f6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80018fa:	0c0b      	lsrs	r3, r1, #16
 80018fc:	b2d3      	uxtb	r3, r2
 80018fe:	461a      	mov	r2, r3
 8001900:	2106      	movs	r1, #6
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff ff29 	bl	800175a <write_register>
 8001908:	4603      	mov	r3, r0
 800190a:	f083 0301 	eor.w	r3, r3, #1
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <configure_frequency+0x5c>
 8001914:	2300      	movs	r3, #0
 8001916:	e026      	b.n	8001966 <configure_frequency+0xaa>
	if (!write_register(handle, RFM95_REGISTER_FR_MID, (uint8_t)(frf >> 8))) return false;
 8001918:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	0a02      	lsrs	r2, r0, #8
 8001926:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800192a:	0a0b      	lsrs	r3, r1, #8
 800192c:	b2d3      	uxtb	r3, r2
 800192e:	461a      	mov	r2, r3
 8001930:	2107      	movs	r1, #7
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff ff11 	bl	800175a <write_register>
 8001938:	4603      	mov	r3, r0
 800193a:	f083 0301 	eor.w	r3, r3, #1
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <configure_frequency+0x8c>
 8001944:	2300      	movs	r3, #0
 8001946:	e00e      	b.n	8001966 <configure_frequency+0xaa>
	if (!write_register(handle, RFM95_REGISTER_FR_LSB, (uint8_t)(frf >> 0))) return false;
 8001948:	7a3b      	ldrb	r3, [r7, #8]
 800194a:	461a      	mov	r2, r3
 800194c:	2108      	movs	r1, #8
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff ff03 	bl	800175a <write_register>
 8001954:	4603      	mov	r3, r0
 8001956:	f083 0301 	eor.w	r3, r3, #1
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <configure_frequency+0xa8>
 8001960:	2300      	movs	r3, #0
 8001962:	e000      	b.n	8001966 <configure_frequency+0xaa>

	return true;
 8001964:	2301      	movs	r3, #1
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bdb0      	pop	{r4, r5, r7, pc}
 800196e:	bf00      	nop
 8001970:	01e84800 	.word	0x01e84800

08001974 <configure_channel>:

static bool configure_channel(rfm95_handle_t *handle, size_t channel_index)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
	assert(handle->config.channel_mask & (1 << channel_index));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8001984:	461a      	mov	r2, r3
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	fa42 f303 	asr.w	r3, r2, r3
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b00      	cmp	r3, #0
 8001992:	d105      	bne.n	80019a0 <configure_channel+0x2c>
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <configure_channel+0x48>)
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <configure_channel+0x4c>)
 8001998:	2195      	movs	r1, #149	; 0x95
 800199a:	480a      	ldr	r0, [pc, #40]	; (80019c4 <configure_channel+0x50>)
 800199c:	f005 fb9c 	bl	80070d8 <__assert_func>
	return configure_frequency(handle, handle->config.channels[channel_index].frequency);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	321a      	adds	r2, #26
 80019a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019aa:	4619      	mov	r1, r3
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff ff85 	bl	80018bc <configure_frequency>
 80019b2:	4603      	mov	r3, r0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	08008424 	.word	0x08008424
 80019c0:	08008720 	.word	0x08008720
 80019c4:	08008410 	.word	0x08008410

080019c8 <wait_for_irq>:

static bool wait_for_irq(rfm95_handle_t *handle, rfm95_interrupt_t interrupt, uint32_t timeout_ms)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	460b      	mov	r3, r1
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	72fb      	strb	r3, [r7, #11]
	uint32_t timeout_tick = handle->get_precision_tick() + timeout_ms * handle->precision_tick_frequency / 1000;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	4798      	blx	r3
 80019dc:	4601      	mov	r1, r0
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	fb02 f303 	mul.w	r3, r2, r3
 80019e8:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <wait_for_irq+0x6c>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	099b      	lsrs	r3, r3, #6
 80019f0:	440b      	add	r3, r1
 80019f2:	617b      	str	r3, [r7, #20]

	while (handle->interrupt_times[interrupt] == 0) {
 80019f4:	e011      	b.n	8001a1a <wait_for_irq+0x52>
		printf("Waiting for interrupt %d...\n", interrupt);
 80019f6:	7afb      	ldrb	r3, [r7, #11]
 80019f8:	4619      	mov	r1, r3
 80019fa:	480f      	ldr	r0, [pc, #60]	; (8001a38 <wait_for_irq+0x70>)
 80019fc:	f005 feca 	bl	8007794 <iprintf>
		HAL_Delay(2000);
 8001a00:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a04:	f000 feca 	bl	800279c <HAL_Delay>
		if (handle->get_precision_tick() >= timeout_tick) {
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0c:	4798      	blx	r3
 8001a0e:	4602      	mov	r2, r0
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d801      	bhi.n	8001a1a <wait_for_irq+0x52>
			return false;
 8001a16:	2300      	movs	r3, #0
 8001a18:	e008      	b.n	8001a2c <wait_for_irq+0x64>
	while (handle->interrupt_times[interrupt] == 0) {
 8001a1a:	7afb      	ldrb	r3, [r7, #11]
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	332a      	adds	r3, #42	; 0x2a
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0e5      	beq.n	80019f6 <wait_for_irq+0x2e>
		}
	}

	return true;
 8001a2a:	2301      	movs	r3, #1
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	10624dd3 	.word	0x10624dd3
 8001a38:	08008458 	.word	0x08008458

08001a3c <rfm95_set_power>:

	return handle->interrupt_times[RFM95_INTERRUPT_DIO0] != 0;
}

bool rfm95_set_power(rfm95_handle_t *handle, int8_t power)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	70fb      	strb	r3, [r7, #3]
	assert((power >= 2 && power <= 17) || power == 20);
 8001a48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	dd03      	ble.n	8001a58 <rfm95_set_power+0x1c>
 8001a50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a54:	2b11      	cmp	r3, #17
 8001a56:	dd09      	ble.n	8001a6c <rfm95_set_power+0x30>
 8001a58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a5c:	2b14      	cmp	r3, #20
 8001a5e:	d005      	beq.n	8001a6c <rfm95_set_power+0x30>
 8001a60:	4b2c      	ldr	r3, [pc, #176]	; (8001b14 <rfm95_set_power+0xd8>)
 8001a62:	4a2d      	ldr	r2, [pc, #180]	; (8001b18 <rfm95_set_power+0xdc>)
 8001a64:	21b8      	movs	r1, #184	; 0xb8
 8001a66:	482d      	ldr	r0, [pc, #180]	; (8001b1c <rfm95_set_power+0xe0>)
 8001a68:	f005 fb36 	bl	80070d8 <__assert_func>

	rfm95_register_pa_config_t pa_config = {0};
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	733b      	strb	r3, [r7, #12]
	uint8_t pa_dac_config = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	73fb      	strb	r3, [r7, #15]

	if (power >= 2 && power <= 17) {
 8001a74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	dd18      	ble.n	8001aae <rfm95_set_power+0x72>
 8001a7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a80:	2b11      	cmp	r3, #17
 8001a82:	dc14      	bgt.n	8001aae <rfm95_set_power+0x72>
		pa_config.max_power = 7;
 8001a84:	7b3b      	ldrb	r3, [r7, #12]
 8001a86:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001a8a:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8001a8c:	7b3b      	ldrb	r3, [r7, #12]
 8001a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a92:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = (power - 2);
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	3b02      	subs	r3, #2
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	7b3b      	ldrb	r3, [r7, #12]
 8001aa2:	f362 0303 	bfi	r3, r2, #0, #4
 8001aa6:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER;
 8001aa8:	2384      	movs	r3, #132	; 0x84
 8001aaa:	73fb      	strb	r3, [r7, #15]
 8001aac:	e011      	b.n	8001ad2 <rfm95_set_power+0x96>

	} else if (power == 20) {
 8001aae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ab2:	2b14      	cmp	r3, #20
 8001ab4:	d10d      	bne.n	8001ad2 <rfm95_set_power+0x96>
		pa_config.max_power = 7;
 8001ab6:	7b3b      	ldrb	r3, [r7, #12]
 8001ab8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001abc:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8001abe:	7b3b      	ldrb	r3, [r7, #12]
 8001ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac4:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = 15;
 8001ac6:	7b3b      	ldrb	r3, [r7, #12]
 8001ac8:	f043 030f 	orr.w	r3, r3, #15
 8001acc:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 8001ace:	2387      	movs	r3, #135	; 0x87
 8001ad0:	73fb      	strb	r3, [r7, #15]
	}

	if (!write_register(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer)) return false;
 8001ad2:	7b3b      	ldrb	r3, [r7, #12]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	2109      	movs	r1, #9
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff fe3e 	bl	800175a <write_register>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f083 0301 	eor.w	r3, r3, #1
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <rfm95_set_power+0xb2>
 8001aea:	2300      	movs	r3, #0
 8001aec:	e00e      	b.n	8001b0c <rfm95_set_power+0xd0>
	if (!write_register(handle, RFM95_REGISTER_PA_DAC, pa_dac_config)) return false;
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	461a      	mov	r2, r3
 8001af2:	214d      	movs	r1, #77	; 0x4d
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff fe30 	bl	800175a <write_register>
 8001afa:	4603      	mov	r3, r0
 8001afc:	f083 0301 	eor.w	r3, r3, #1
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <rfm95_set_power+0xce>
 8001b06:	2300      	movs	r3, #0
 8001b08:	e000      	b.n	8001b0c <rfm95_set_power+0xd0>

	return true;
 8001b0a:	2301      	movs	r3, #1
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	08008478 	.word	0x08008478
 8001b18:	08008734 	.word	0x08008734
 8001b1c:	08008410 	.word	0x08008410

08001b20 <rfm95_init>:

bool rfm95_init(rfm95_handle_t *handle)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b32:	d005      	beq.n	8001b40 <rfm95_init+0x20>
 8001b34:	4b9b      	ldr	r3, [pc, #620]	; (8001da4 <rfm95_init+0x284>)
 8001b36:	4a9c      	ldr	r2, [pc, #624]	; (8001da8 <rfm95_init+0x288>)
 8001b38:	21d2      	movs	r1, #210	; 0xd2
 8001b3a:	489c      	ldr	r0, [pc, #624]	; (8001dac <rfm95_init+0x28c>)
 8001b3c:	f005 facc 	bl	80070d8 <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d005      	beq.n	8001b56 <rfm95_init+0x36>
 8001b4a:	4b99      	ldr	r3, [pc, #612]	; (8001db0 <rfm95_init+0x290>)
 8001b4c:	4a96      	ldr	r2, [pc, #600]	; (8001da8 <rfm95_init+0x288>)
 8001b4e:	21d3      	movs	r1, #211	; 0xd3
 8001b50:	4896      	ldr	r0, [pc, #600]	; (8001dac <rfm95_init+0x28c>)
 8001b52:	f005 fac1 	bl	80070d8 <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b60:	d005      	beq.n	8001b6e <rfm95_init+0x4e>
 8001b62:	4b94      	ldr	r3, [pc, #592]	; (8001db4 <rfm95_init+0x294>)
 8001b64:	4a90      	ldr	r2, [pc, #576]	; (8001da8 <rfm95_init+0x288>)
 8001b66:	21d4      	movs	r1, #212	; 0xd4
 8001b68:	4890      	ldr	r0, [pc, #576]	; (8001dac <rfm95_init+0x28c>)
 8001b6a:	f005 fab5 	bl	80070d8 <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <rfm95_init+0x64>
 8001b78:	4b8f      	ldr	r3, [pc, #572]	; (8001db8 <rfm95_init+0x298>)
 8001b7a:	4a8b      	ldr	r2, [pc, #556]	; (8001da8 <rfm95_init+0x288>)
 8001b7c:	21d5      	movs	r1, #213	; 0xd5
 8001b7e:	488b      	ldr	r0, [pc, #556]	; (8001dac <rfm95_init+0x28c>)
 8001b80:	f005 faaa 	bl	80070d8 <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d005      	beq.n	8001b9a <rfm95_init+0x7a>
 8001b8e:	4b8b      	ldr	r3, [pc, #556]	; (8001dbc <rfm95_init+0x29c>)
 8001b90:	4a85      	ldr	r2, [pc, #532]	; (8001da8 <rfm95_init+0x288>)
 8001b92:	21d6      	movs	r1, #214	; 0xd6
 8001b94:	4885      	ldr	r0, [pc, #532]	; (8001dac <rfm95_init+0x28c>)
 8001b96:	f005 fa9f 	bl	80070d8 <__assert_func>
	assert(handle->get_precision_tick != NULL);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d105      	bne.n	8001bae <rfm95_init+0x8e>
 8001ba2:	4b87      	ldr	r3, [pc, #540]	; (8001dc0 <rfm95_init+0x2a0>)
 8001ba4:	4a80      	ldr	r2, [pc, #512]	; (8001da8 <rfm95_init+0x288>)
 8001ba6:	21d7      	movs	r1, #215	; 0xd7
 8001ba8:	4880      	ldr	r0, [pc, #512]	; (8001dac <rfm95_init+0x28c>)
 8001baa:	f005 fa95 	bl	80070d8 <__assert_func>
	assert(handle->random_int != NULL);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d105      	bne.n	8001bc2 <rfm95_init+0xa2>
 8001bb6:	4b83      	ldr	r3, [pc, #524]	; (8001dc4 <rfm95_init+0x2a4>)
 8001bb8:	4a7b      	ldr	r2, [pc, #492]	; (8001da8 <rfm95_init+0x288>)
 8001bba:	21d8      	movs	r1, #216	; 0xd8
 8001bbc:	487b      	ldr	r0, [pc, #492]	; (8001dac <rfm95_init+0x28c>)
 8001bbe:	f005 fa8b 	bl	80070d8 <__assert_func>
	//assert(handle->precision_sleep_until != NULL);
	assert(handle->precision_tick_frequency > 10000);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc6:	f242 7210 	movw	r2, #10000	; 0x2710
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d805      	bhi.n	8001bda <rfm95_init+0xba>
 8001bce:	4b7e      	ldr	r3, [pc, #504]	; (8001dc8 <rfm95_init+0x2a8>)
 8001bd0:	4a75      	ldr	r2, [pc, #468]	; (8001da8 <rfm95_init+0x288>)
 8001bd2:	21da      	movs	r1, #218	; 0xda
 8001bd4:	4875      	ldr	r0, [pc, #468]	; (8001dac <rfm95_init+0x28c>)
 8001bd6:	f005 fa7f 	bl	80070d8 <__assert_func>

	reset(handle);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff fe50 	bl	8001880 <reset>

	// If there is reload function or the reload was unsuccessful or the magic does not match restore default.
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d012      	beq.n	8001c0e <rfm95_init+0xee>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	3260      	adds	r2, #96	; 0x60
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4798      	blx	r3
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f083 0301 	eor.w	r3, r3, #1
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d106      	bne.n	8001c0e <rfm95_init+0xee>
	    handle->config.magic != RFM95_EEPROM_CONFIG_MAGIC) {
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 8001c06:	f64a 3267 	movw	r2, #43879	; 0xab67
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d002      	beq.n	8001c14 <rfm95_init+0xf4>
		config_load_default(handle);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff fe04 	bl	800181c <config_load_default>
	}

	// Check for correct version.
	uint8_t version;
	if (!read_register(handle, RFM95_REGISTER_VERSION, &version, 1)) {
 8001c14:	f107 020f 	add.w	r2, r7, #15
 8001c18:	2301      	movs	r3, #1
 8001c1a:	2142      	movs	r1, #66	; 0x42
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff fd60 	bl	80016e2 <read_register>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f083 0301 	eor.w	r3, r3, #1
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d004      	beq.n	8001c38 <rfm95_init+0x118>
		printf("Could not read register\n\r");
 8001c2e:	4867      	ldr	r0, [pc, #412]	; (8001dcc <rfm95_init+0x2ac>)
 8001c30:	f005 fdb0 	bl	8007794 <iprintf>
		return false;
 8001c34:	2300      	movs	r3, #0
 8001c36:	e0b0      	b.n	8001d9a <rfm95_init+0x27a>
	}

	if (version != RFM9x_VER) {
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	2b12      	cmp	r3, #18
 8001c3c:	d00a      	beq.n	8001c54 <rfm95_init+0x134>
		printf("Wrong version, expected %d, got %d\n\r.", RFM9x_VER, version);
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	461a      	mov	r2, r3
 8001c42:	2112      	movs	r1, #18
 8001c44:	4862      	ldr	r0, [pc, #392]	; (8001dd0 <rfm95_init+0x2b0>)
 8001c46:	f005 fda5 	bl	8007794 <iprintf>
		printf("Make sure to use RFM9x module or check your SPI connections\n\r");
 8001c4a:	4862      	ldr	r0, [pc, #392]	; (8001dd4 <rfm95_init+0x2b4>)
 8001c4c:	f005 fda2 	bl	8007794 <iprintf>
		return false;
 8001c50:	2300      	movs	r3, #0
 8001c52:	e0a2      	b.n	8001d9a <rfm95_init+0x27a>
	}

	// Module must be placed in sleep mode before switching to lora.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP))
 8001c54:	2200      	movs	r2, #0
 8001c56:	2101      	movs	r1, #1
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f7ff fd7e 	bl	800175a <write_register>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f083 0301 	eor.w	r3, r3, #1
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <rfm95_init+0x14e>
		return false;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e095      	b.n	8001d9a <rfm95_init+0x27a>
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP))
 8001c6e:	2280      	movs	r2, #128	; 0x80
 8001c70:	2101      	movs	r1, #1
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff fd71 	bl	800175a <write_register>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	f083 0301 	eor.w	r3, r3, #1
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <rfm95_init+0x168>
		return false;
 8001c84:	2300      	movs	r3, #0
 8001c86:	e088      	b.n	8001d9a <rfm95_init+0x27a>

	// Default interrupt configuration, must be done to prevent DIO5 clock interrupts at 1Mhz
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE))
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2140      	movs	r1, #64	; 0x40
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff fd64 	bl	800175a <write_register>
 8001c92:	4603      	mov	r3, r0
 8001c94:	f083 0301 	eor.w	r3, r3, #1
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <rfm95_init+0x182>
		return false;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	e07b      	b.n	8001d9a <rfm95_init+0x27a>

	if (handle->on_after_interrupts_configured != NULL) {
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d002      	beq.n	8001cb0 <rfm95_init+0x190>
		handle->on_after_interrupts_configured();
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cae:	4798      	blx	r3
	}

	// Set module power to 17dbm.
	if (!rfm95_set_power(handle, 17))
 8001cb0:	2111      	movs	r1, #17
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff fec2 	bl	8001a3c <rfm95_set_power>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f083 0301 	eor.w	r3, r3, #1
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <rfm95_init+0x1a8>
		return false;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	e068      	b.n	8001d9a <rfm95_init+0x27a>

	// Set LNA to the highest gain with 150% boost.
	if (!write_register(handle, RFM95_REGISTER_LNA, 0x23))
 8001cc8:	2223      	movs	r2, #35	; 0x23
 8001cca:	210c      	movs	r1, #12
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff fd44 	bl	800175a <write_register>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	f083 0301 	eor.w	r3, r3, #1
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <rfm95_init+0x1c2>
		return false;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e05b      	b.n	8001d9a <rfm95_init+0x27a>

	// Preamble set to 8 + 4.25 = 12.25 symbols.
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00))
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2120      	movs	r1, #32
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff fd37 	bl	800175a <write_register>
 8001cec:	4603      	mov	r3, r0
 8001cee:	f083 0301 	eor.w	r3, r3, #1
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <rfm95_init+0x1dc>
		return false;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e04e      	b.n	8001d9a <rfm95_init+0x27a>
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x08))
 8001cfc:	2208      	movs	r2, #8
 8001cfe:	2121      	movs	r1, #33	; 0x21
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff fd2a 	bl	800175a <write_register>
 8001d06:	4603      	mov	r3, r0
 8001d08:	f083 0301 	eor.w	r3, r3, #1
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <rfm95_init+0x1f6>
		return false;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e041      	b.n	8001d9a <rfm95_init+0x27a>

	// Set TTN sync word 0x34.
	if (!write_register(handle, RFM95_REGISTER_SYNC_WORD, 0x34))
 8001d16:	2234      	movs	r2, #52	; 0x34
 8001d18:	2139      	movs	r1, #57	; 0x39
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff fd1d 	bl	800175a <write_register>
 8001d20:	4603      	mov	r3, r0
 8001d22:	f083 0301 	eor.w	r3, r3, #1
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <rfm95_init+0x210>
		return false;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e034      	b.n	8001d9a <rfm95_init+0x27a>

	// Set up TX and RX FIFO base addresses.
	if (!write_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80))
 8001d30:	2280      	movs	r2, #128	; 0x80
 8001d32:	210e      	movs	r1, #14
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff fd10 	bl	800175a <write_register>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	f083 0301 	eor.w	r3, r3, #1
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <rfm95_init+0x22a>
		return false;
 8001d46:	2300      	movs	r3, #0
 8001d48:	e027      	b.n	8001d9a <rfm95_init+0x27a>
	if (!write_register(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00))
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	210f      	movs	r1, #15
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff fd03 	bl	800175a <write_register>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f083 0301 	eor.w	r3, r3, #1
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <rfm95_init+0x244>
		return false;
 8001d60:	2300      	movs	r3, #0
 8001d62:	e01a      	b.n	8001d9a <rfm95_init+0x27a>

	// Maximum payload length of the RFM95 is 64.
	if (!write_register(handle, RFM95_REGISTER_MAX_PAYLOAD_LENGTH, 64))
 8001d64:	2240      	movs	r2, #64	; 0x40
 8001d66:	2123      	movs	r1, #35	; 0x23
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff fcf6 	bl	800175a <write_register>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	f083 0301 	eor.w	r3, r3, #1
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <rfm95_init+0x25e>
		return false;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e00d      	b.n	8001d9a <rfm95_init+0x27a>

	// Let module sleep after initialisation.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP))
 8001d7e:	2280      	movs	r2, #128	; 0x80
 8001d80:	2101      	movs	r1, #1
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff fce9 	bl	800175a <write_register>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f083 0301 	eor.w	r3, r3, #1
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <rfm95_init+0x278>
		return false;
 8001d94:	2300      	movs	r3, #0
 8001d96:	e000      	b.n	8001d9a <rfm95_init+0x27a>

	return true;
 8001d98:	2301      	movs	r3, #1
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	080084a4 	.word	0x080084a4
 8001da8:	08008744 	.word	0x08008744
 8001dac:	08008410 	.word	0x08008410
 8001db0:	080084d8 	.word	0x080084d8
 8001db4:	08008514 	.word	0x08008514
 8001db8:	0800854c 	.word	0x0800854c
 8001dbc:	08008588 	.word	0x08008588
 8001dc0:	080085c0 	.word	0x080085c0
 8001dc4:	080085e4 	.word	0x080085e4
 8001dc8:	08008600 	.word	0x08008600
 8001dcc:	0800862c 	.word	0x0800862c
 8001dd0:	08008648 	.word	0x08008648
 8001dd4:	08008670 	.word	0x08008670

08001dd8 <send_package>:
	return true;
}

static bool send_package(rfm95_handle_t *handle, uint8_t *payload_buf, size_t payload_len, uint8_t channel,
                         uint32_t *tx_ticks)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	70fb      	strb	r3, [r7, #3]
	// Configure channel for transmission.
	if (!configure_channel(handle, channel))
 8001de6:	78fb      	ldrb	r3, [r7, #3]
 8001de8:	4619      	mov	r1, r3
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f7ff fdc2 	bl	8001974 <configure_channel>
 8001df0:	4603      	mov	r3, r0
 8001df2:	f083 0301 	eor.w	r3, r3, #1
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <send_package+0x28>
		return false;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	e091      	b.n	8001f24 <send_package+0x14c>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72))
 8001e00:	2272      	movs	r2, #114	; 0x72
 8001e02:	211d      	movs	r1, #29
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f7ff fca8 	bl	800175a <write_register>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f083 0301 	eor.w	r3, r3, #1
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <send_package+0x42>
		return false;
 8001e16:	2300      	movs	r3, #0
 8001e18:	e084      	b.n	8001f24 <send_package+0x14c>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74))
 8001e1a:	2274      	movs	r2, #116	; 0x74
 8001e1c:	211e      	movs	r1, #30
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f7ff fc9b 	bl	800175a <write_register>
 8001e24:	4603      	mov	r3, r0
 8001e26:	f083 0301 	eor.w	r3, r3, #1
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <send_package+0x5c>
		return false;
 8001e30:	2300      	movs	r3, #0
 8001e32:	e077      	b.n	8001f24 <send_package+0x14c>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04))
 8001e34:	2204      	movs	r2, #4
 8001e36:	2126      	movs	r1, #38	; 0x26
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f7ff fc8e 	bl	800175a <write_register>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	f083 0301 	eor.w	r3, r3, #1
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <send_package+0x76>
		return false;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e06a      	b.n	8001f24 <send_package+0x14c>

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_TX))
 8001e4e:	2227      	movs	r2, #39	; 0x27
 8001e50:	2133      	movs	r1, #51	; 0x33
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f7ff fc81 	bl	800175a <write_register>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f083 0301 	eor.w	r3, r3, #1
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <send_package+0x90>
		return false;
 8001e64:	2300      	movs	r3, #0
 8001e66:	e05d      	b.n	8001f24 <send_package+0x14c>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_TX))
 8001e68:	221d      	movs	r2, #29
 8001e6a:	213b      	movs	r1, #59	; 0x3b
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f7ff fc74 	bl	800175a <write_register>
 8001e72:	4603      	mov	r3, r0
 8001e74:	f083 0301 	eor.w	r3, r3, #1
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <send_package+0xaa>
		return false;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e050      	b.n	8001f24 <send_package+0x14c>

	// Set the payload length.
	if (!write_register(handle, RFM95_REGISTER_PAYLOAD_LENGTH, payload_len))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	461a      	mov	r2, r3
 8001e88:	2122      	movs	r1, #34	; 0x22
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f7ff fc65 	bl	800175a <write_register>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f083 0301 	eor.w	r3, r3, #1
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <send_package+0xc8>
		return false;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	e041      	b.n	8001f24 <send_package+0x14c>

	// Enable tx-done interrupt, clear flags and previous interrupt time.
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_TXDONE))
 8001ea0:	2240      	movs	r2, #64	; 0x40
 8001ea2:	2140      	movs	r1, #64	; 0x40
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f7ff fc58 	bl	800175a <write_register>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f083 0301 	eor.w	r3, r3, #1
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <send_package+0xe2>
		return false;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e034      	b.n	8001f24 <send_package+0x14c>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff))
 8001eba:	22ff      	movs	r2, #255	; 0xff
 8001ebc:	2112      	movs	r1, #18
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f7ff fc4b 	bl	800175a <write_register>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f083 0301 	eor.w	r3, r3, #1
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <send_package+0xfc>
		return false;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	e027      	b.n	8001f24 <send_package+0x14c>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	// Move modem to lora standby.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY))
 8001ee4:	2281      	movs	r2, #129	; 0x81
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f7ff fc36 	bl	800175a <write_register>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	f083 0301 	eor.w	r3, r3, #1
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <send_package+0x126>
		return false;
 8001efa:	2300      	movs	r3, #0
 8001efc:	e012      	b.n	8001f24 <send_package+0x14c>

	// Wait for the modem to be ready.
	wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT);
 8001efe:	220a      	movs	r2, #10
 8001f00:	2102      	movs	r1, #2
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f7ff fd60 	bl	80019c8 <wait_for_irq>

	// Set pointer to start of TX section in FIFO.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0x80))
 8001f08:	2280      	movs	r2, #128	; 0x80
 8001f0a:	210d      	movs	r1, #13
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f7ff fc24 	bl	800175a <write_register>
 8001f12:	4603      	mov	r3, r0
 8001f14:	f083 0301 	eor.w	r3, r3, #1
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <send_package+0x14a>
		return false;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e000      	b.n	8001f24 <send_package+0x14c>
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;

	// Increment tx frame counter.
	handle->config.tx_frame_count++;*/

	return true;
 8001f22:	2301      	movs	r3, #1
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <encode_phy_payload>:

static size_t encode_phy_payload(rfm95_handle_t *handle, uint8_t payload_buf[64], const uint8_t *frame_payload,
                                 size_t frame_payload_length, uint8_t port)
{
 8001f2c:	b590      	push	{r4, r7, lr}
 8001f2e:	b08d      	sub	sp, #52	; 0x34
 8001f30:	af04      	add	r7, sp, #16
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	603b      	str	r3, [r7, #0]
	size_t payload_len = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]

	// 64 bytes is maximum size of FIFO
	assert(frame_payload_length + 4 + 9 <= 64);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	330d      	adds	r3, #13
 8001f42:	2b40      	cmp	r3, #64	; 0x40
 8001f44:	d906      	bls.n	8001f54 <encode_phy_payload+0x28>
 8001f46:	4b51      	ldr	r3, [pc, #324]	; (800208c <encode_phy_payload+0x160>)
 8001f48:	4a51      	ldr	r2, [pc, #324]	; (8002090 <encode_phy_payload+0x164>)
 8001f4a:	f240 2171 	movw	r1, #625	; 0x271
 8001f4e:	4851      	ldr	r0, [pc, #324]	; (8002094 <encode_phy_payload+0x168>)
 8001f50:	f005 f8c2 	bl	80070d8 <__assert_func>

	payload_buf[0] = 0x40; // MAC Header
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2240      	movs	r2, #64	; 0x40
 8001f58:	701a      	strb	r2, [r3, #0]
	payload_buf[1] = handle->device_address[3];
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	7d52      	ldrb	r2, [r2, #21]
 8001f62:	701a      	strb	r2, [r3, #0]
	payload_buf[2] = handle->device_address[2];
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	3302      	adds	r3, #2
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	7d12      	ldrb	r2, [r2, #20]
 8001f6c:	701a      	strb	r2, [r3, #0]
	payload_buf[3] = handle->device_address[1];
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	3303      	adds	r3, #3
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	7cd2      	ldrb	r2, [r2, #19]
 8001f76:	701a      	strb	r2, [r3, #0]
	payload_buf[4] = handle->device_address[0];
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	3304      	adds	r3, #4
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	7c92      	ldrb	r2, [r2, #18]
 8001f80:	701a      	strb	r2, [r3, #0]
	payload_buf[5] = 0x00; // Frame Control
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	3305      	adds	r3, #5
 8001f86:	2200      	movs	r2, #0
 8001f88:	701a      	strb	r2, [r3, #0]
	payload_buf[6] = (handle->config.tx_frame_count & 0x00ffu);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	3306      	adds	r3, #6
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	701a      	strb	r2, [r3, #0]
	payload_buf[7] = ((uint16_t)(handle->config.tx_frame_count >> 8u) & 0x00ffu);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	3307      	adds	r3, #7
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	701a      	strb	r2, [r3, #0]
	payload_buf[8] = port; // Frame Port
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	3308      	adds	r3, #8
 8001fae:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001fb2:	701a      	strb	r2, [r3, #0]
	payload_len += 9;
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	3309      	adds	r3, #9
 8001fb8:	61bb      	str	r3, [r7, #24]

	// Encrypt payload in place in payload_buf.
	memcpy(payload_buf + payload_len, frame_payload, frame_payload_length);
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f005 f8e1 	bl	800718c <memcpy>
	if (port == 0) {
 8001fca:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d113      	bne.n	8001ffa <encode_phy_payload+0xce>
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	18d0      	adds	r0, r2, r3
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	b2d9      	uxtb	r1, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8001fe2:	461c      	mov	r4, r3
		                0, handle->network_session_key, handle->device_address);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	3316      	adds	r3, #22
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	3212      	adds	r2, #18
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 8001fec:	9201      	str	r2, [sp, #4]
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	4622      	mov	r2, r4
 8001ff4:	f7fe fd5d 	bl	8000ab2 <Encrypt_Payload>
 8001ff8:	e012      	b.n	8002020 <encode_phy_payload+0xf4>
	} else {
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	18d0      	adds	r0, r2, r3
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	b2d9      	uxtb	r1, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800200a:	461c      	mov	r4, r3
		                0, handle->application_session_key, handle->device_address);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	3326      	adds	r3, #38	; 0x26
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	3212      	adds	r2, #18
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 8002014:	9201      	str	r2, [sp, #4]
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	2300      	movs	r3, #0
 800201a:	4622      	mov	r2, r4
 800201c:	f7fe fd49 	bl	8000ab2 <Encrypt_Payload>
	}
	payload_len += frame_payload_length;
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	4413      	add	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]

	// Calculate MIC and copy to last 4 bytes of the payload_buf.
	uint8_t mic[4];
	Calculate_MIC(payload_buf, mic, payload_len, handle->config.tx_frame_count, 0,
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	b2d8      	uxtb	r0, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002032:	461c      	mov	r4, r3
	              handle->network_session_key, handle->device_address);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	3316      	adds	r3, #22
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	3212      	adds	r2, #18
	Calculate_MIC(payload_buf, mic, payload_len, handle->config.tx_frame_count, 0,
 800203c:	f107 0114 	add.w	r1, r7, #20
 8002040:	9202      	str	r2, [sp, #8]
 8002042:	9301      	str	r3, [sp, #4]
 8002044:	2300      	movs	r3, #0
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	4623      	mov	r3, r4
 800204a:	4602      	mov	r2, r0
 800204c:	68b8      	ldr	r0, [r7, #8]
 800204e:	f7fe fde5 	bl	8000c1c <Calculate_MIC>
	for (uint8_t i = 0; i < 4; i++) {
 8002052:	2300      	movs	r3, #0
 8002054:	77fb      	strb	r3, [r7, #31]
 8002056:	e00d      	b.n	8002074 <encode_phy_payload+0x148>
		payload_buf[payload_len + i] = mic[i];
 8002058:	7ffa      	ldrb	r2, [r7, #31]
 800205a:	7ff9      	ldrb	r1, [r7, #31]
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	440b      	add	r3, r1
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	440b      	add	r3, r1
 8002064:	3220      	adds	r2, #32
 8002066:	443a      	add	r2, r7
 8002068:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800206c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++) {
 800206e:	7ffb      	ldrb	r3, [r7, #31]
 8002070:	3301      	adds	r3, #1
 8002072:	77fb      	strb	r3, [r7, #31]
 8002074:	7ffb      	ldrb	r3, [r7, #31]
 8002076:	2b03      	cmp	r3, #3
 8002078:	d9ee      	bls.n	8002058 <encode_phy_payload+0x12c>
	}
	payload_len += 4;
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	3304      	adds	r3, #4
 800207e:	61bb      	str	r3, [r7, #24]

	return payload_len;
 8002080:	69bb      	ldr	r3, [r7, #24]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3724      	adds	r7, #36	; 0x24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd90      	pop	{r4, r7, pc}
 800208a:	bf00      	nop
 800208c:	080086cc 	.word	0x080086cc
 8002090:	08008750 	.word	0x08008750
 8002094:	08008410 	.word	0x08008410

08002098 <select_random_channel>:

	return true;
}

static uint8_t select_random_channel(rfm95_handle_t *handle)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	uint8_t channel_count = 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < 16; i++) {
 80020a4:	2300      	movs	r3, #0
 80020a6:	73bb      	strb	r3, [r7, #14]
 80020a8:	e010      	b.n	80020cc <select_random_channel+0x34>
		if (handle->config.channel_mask & (1 << i)) {
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80020b0:	461a      	mov	r2, r3
 80020b2:	7bbb      	ldrb	r3, [r7, #14]
 80020b4:	fa42 f303 	asr.w	r3, r2, r3
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d002      	beq.n	80020c6 <select_random_channel+0x2e>
			channel_count++;
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	3301      	adds	r3, #1
 80020c4:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 16; i++) {
 80020c6:	7bbb      	ldrb	r3, [r7, #14]
 80020c8:	3301      	adds	r3, #1
 80020ca:	73bb      	strb	r3, [r7, #14]
 80020cc:	7bbb      	ldrb	r3, [r7, #14]
 80020ce:	2b0f      	cmp	r3, #15
 80020d0:	d9eb      	bls.n	80020aa <select_random_channel+0x12>
		}
	}

	uint8_t random_channel = handle->random_int(channel_count);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	4610      	mov	r0, r2
 80020da:	4798      	blx	r3
 80020dc:	4603      	mov	r3, r0
 80020de:	737b      	strb	r3, [r7, #13]

	for (uint8_t i = 0; i < 16; i++) {
 80020e0:	2300      	movs	r3, #0
 80020e2:	733b      	strb	r3, [r7, #12]
 80020e4:	e015      	b.n	8002112 <select_random_channel+0x7a>
		if (handle->config.channel_mask & (1 << i)) {
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80020ec:	461a      	mov	r2, r3
 80020ee:	7b3b      	ldrb	r3, [r7, #12]
 80020f0:	fa42 f303 	asr.w	r3, r2, r3
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d007      	beq.n	800210c <select_random_channel+0x74>
			if (random_channel == 0) {
 80020fc:	7b7b      	ldrb	r3, [r7, #13]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <select_random_channel+0x6e>
				return i;
 8002102:	7b3b      	ldrb	r3, [r7, #12]
 8002104:	e009      	b.n	800211a <select_random_channel+0x82>
			} else {
				random_channel--;
 8002106:	7b7b      	ldrb	r3, [r7, #13]
 8002108:	3b01      	subs	r3, #1
 800210a:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < 16; i++) {
 800210c:	7b3b      	ldrb	r3, [r7, #12]
 800210e:	3301      	adds	r3, #1
 8002110:	733b      	strb	r3, [r7, #12]
 8002112:	7b3b      	ldrb	r3, [r7, #12]
 8002114:	2b0f      	cmp	r3, #15
 8002116:	d9e6      	bls.n	80020e6 <select_random_channel+0x4e>
			}
		}
	}

	return 0;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <rfm95_send_receive_cycle>:

bool rfm95_send_receive_cycle(rfm95_handle_t *handle, const uint8_t *send_data, size_t send_data_length)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b09a      	sub	sp, #104	; 0x68
 8002126:	af02      	add	r7, sp, #8
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
	uint8_t phy_payload_buf[64] = { 0 };
 800212e:	2300      	movs	r3, #0
 8002130:	61bb      	str	r3, [r7, #24]
 8002132:	f107 031c 	add.w	r3, r7, #28
 8002136:	223c      	movs	r2, #60	; 0x3c
 8002138:	2100      	movs	r1, #0
 800213a:	4618      	mov	r0, r3
 800213c:	f005 f834 	bl	80071a8 <memset>

	// Build the up-link phy payload.
	size_t phy_payload_len = encode_phy_payload(handle, phy_payload_buf, send_data, send_data_length, 1);
 8002140:	f107 0118 	add.w	r1, r7, #24
 8002144:	2301      	movs	r3, #1
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f7ff feed 	bl	8001f2c <encode_phy_payload>
 8002152:	65f8      	str	r0, [r7, #92]	; 0x5c

	uint8_t random_channel = select_random_channel(handle);
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f7ff ff9f 	bl	8002098 <select_random_channel>
 800215a:	4603      	mov	r3, r0
 800215c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	uint32_t tx_ticks;

	// Send the requested up-link.
	if (!send_package(handle, phy_payload_buf, phy_payload_len, random_channel, &tx_ticks)) {
 8002160:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8002164:	f107 0118 	add.w	r1, r7, #24
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	4613      	mov	r3, r2
 8002170:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f7ff fe30 	bl	8001dd8 <send_package>
 8002178:	4603      	mov	r3, r0
 800217a:	f083 0301 	eor.w	r3, r3, #1
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d006      	beq.n	8002192 <rfm95_send_receive_cycle+0x70>
		write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 8002184:	2280      	movs	r2, #128	; 0x80
 8002186:	2101      	movs	r1, #1
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f7ff fae6 	bl	800175a <write_register>
		return false;
 800218e:	2300      	movs	r3, #0
 8002190:	e009      	b.n	80021a6 <rfm95_send_receive_cycle+0x84>
	}

	// Clear phy payload buffer to reuse for the down-link message.
	memset(phy_payload_buf, 0x00, sizeof(phy_payload_buf));
 8002192:	f107 0318 	add.w	r3, r7, #24
 8002196:	2240      	movs	r2, #64	; 0x40
 8002198:	2100      	movs	r1, #0
 800219a:	4618      	mov	r0, r3
 800219c:	f005 f804 	bl	80071a8 <memset>
	phy_payload_len = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (handle->save_config) {
		handle->save_config(&(handle->config));
	}*/

	return true;
 80021a4:	2301      	movs	r3, #1
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3760      	adds	r7, #96	; 0x60
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <rfm95_on_interrupt>:

void rfm95_on_interrupt(rfm95_handle_t *handle, rfm95_interrupt_t interrupt)
{
 80021b0:	b590      	push	{r4, r7, lr}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	70fb      	strb	r3, [r7, #3]
	printf("Setting interrupt %d to %d\n", handle->interrupt_times[interrupt], handle->get_precision_tick());
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	332a      	adds	r3, #42	; 0x2a
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	685c      	ldr	r4, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021cc:	4798      	blx	r3
 80021ce:	4603      	mov	r3, r0
 80021d0:	461a      	mov	r2, r3
 80021d2:	4621      	mov	r1, r4
 80021d4:	4808      	ldr	r0, [pc, #32]	; (80021f8 <rfm95_on_interrupt+0x48>)
 80021d6:	f005 fadd 	bl	8007794 <iprintf>
	handle->interrupt_times[interrupt] = handle->get_precision_tick();
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021de:	78fc      	ldrb	r4, [r7, #3]
 80021e0:	4798      	blx	r3
 80021e2:	4601      	mov	r1, r0
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	f104 032a 	add.w	r3, r4, #42	; 0x2a
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	6059      	str	r1, [r3, #4]
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd90      	pop	{r4, r7, pc}
 80021f8:	080086f0 	.word	0x080086f0

080021fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002202:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <HAL_MspInit+0x44>)
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	4a0e      	ldr	r2, [pc, #56]	; (8002240 <HAL_MspInit+0x44>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	6193      	str	r3, [r2, #24]
 800220e:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <HAL_MspInit+0x44>)
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	607b      	str	r3, [r7, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <HAL_MspInit+0x44>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	4a08      	ldr	r2, [pc, #32]	; (8002240 <HAL_MspInit+0x44>)
 8002220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002224:	61d3      	str	r3, [r2, #28]
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_MspInit+0x44>)
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222e:	603b      	str	r3, [r7, #0]
 8002230:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002232:	2007      	movs	r0, #7
 8002234:	f001 fad0 	bl	80037d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40021000 	.word	0x40021000

08002244 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	; 0x28
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002264:	d124      	bne.n	80022b0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002266:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <HAL_ADC_MspInit+0x74>)
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	4a13      	ldr	r2, [pc, #76]	; (80022b8 <HAL_ADC_MspInit+0x74>)
 800226c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002270:	6153      	str	r3, [r2, #20]
 8002272:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <HAL_ADC_MspInit+0x74>)
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227e:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <HAL_ADC_MspInit+0x74>)
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	4a0d      	ldr	r2, [pc, #52]	; (80022b8 <HAL_ADC_MspInit+0x74>)
 8002284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002288:	6153      	str	r3, [r2, #20]
 800228a:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <HAL_ADC_MspInit+0x74>)
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002296:	2301      	movs	r3, #1
 8002298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800229a:	2303      	movs	r3, #3
 800229c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a2:	f107 0314 	add.w	r3, r7, #20
 80022a6:	4619      	mov	r1, r3
 80022a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ac:	f001 fad6 	bl	800385c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022b0:	bf00      	nop
 80022b2:	3728      	adds	r7, #40	; 0x28
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000

080022bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08a      	sub	sp, #40	; 0x28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	f107 0314 	add.w	r3, r7, #20
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a17      	ldr	r2, [pc, #92]	; (8002338 <HAL_SPI_MspInit+0x7c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d128      	bne.n	8002330 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022de:	4b17      	ldr	r3, [pc, #92]	; (800233c <HAL_SPI_MspInit+0x80>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	4a16      	ldr	r2, [pc, #88]	; (800233c <HAL_SPI_MspInit+0x80>)
 80022e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e8:	61d3      	str	r3, [r2, #28]
 80022ea:	4b14      	ldr	r3, [pc, #80]	; (800233c <HAL_SPI_MspInit+0x80>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f6:	4b11      	ldr	r3, [pc, #68]	; (800233c <HAL_SPI_MspInit+0x80>)
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	4a10      	ldr	r2, [pc, #64]	; (800233c <HAL_SPI_MspInit+0x80>)
 80022fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002300:	6153      	str	r3, [r2, #20]
 8002302:	4b0e      	ldr	r3, [pc, #56]	; (800233c <HAL_SPI_MspInit+0x80>)
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800230e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002314:	2302      	movs	r3, #2
 8002316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800231c:	2303      	movs	r3, #3
 800231e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002320:	2305      	movs	r3, #5
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	4619      	mov	r1, r3
 800232a:	4805      	ldr	r0, [pc, #20]	; (8002340 <HAL_SPI_MspInit+0x84>)
 800232c:	f001 fa96 	bl	800385c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002330:	bf00      	nop
 8002332:	3728      	adds	r7, #40	; 0x28
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40003800 	.word	0x40003800
 800233c:	40021000 	.word	0x40021000
 8002340:	48000400 	.word	0x48000400

08002344 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a19      	ldr	r2, [pc, #100]	; (80023b8 <HAL_TIM_Base_MspInit+0x74>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d12b      	bne.n	80023ae <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002356:	4b19      	ldr	r3, [pc, #100]	; (80023bc <HAL_TIM_Base_MspInit+0x78>)
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	4a18      	ldr	r2, [pc, #96]	; (80023bc <HAL_TIM_Base_MspInit+0x78>)
 800235c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002360:	6193      	str	r3, [r2, #24]
 8002362:	4b16      	ldr	r3, [pc, #88]	; (80023bc <HAL_TIM_Base_MspInit+0x78>)
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800236e:	2200      	movs	r2, #0
 8002370:	2100      	movs	r1, #0
 8002372:	2018      	movs	r0, #24
 8002374:	f001 fa3b 	bl	80037ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002378:	2018      	movs	r0, #24
 800237a:	f001 fa54 	bl	8003826 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800237e:	2200      	movs	r2, #0
 8002380:	2100      	movs	r1, #0
 8002382:	2019      	movs	r0, #25
 8002384:	f001 fa33 	bl	80037ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002388:	2019      	movs	r0, #25
 800238a:	f001 fa4c 	bl	8003826 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800238e:	2200      	movs	r2, #0
 8002390:	2100      	movs	r1, #0
 8002392:	201a      	movs	r0, #26
 8002394:	f001 fa2b 	bl	80037ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002398:	201a      	movs	r0, #26
 800239a:	f001 fa44 	bl	8003826 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800239e:	2200      	movs	r2, #0
 80023a0:	2100      	movs	r1, #0
 80023a2:	201b      	movs	r0, #27
 80023a4:	f001 fa23 	bl	80037ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80023a8:	201b      	movs	r0, #27
 80023aa:	f001 fa3c 	bl	8003826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40012c00 	.word	0x40012c00
 80023bc:	40021000 	.word	0x40021000

080023c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08a      	sub	sp, #40	; 0x28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f107 0314 	add.w	r3, r7, #20
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a17      	ldr	r2, [pc, #92]	; (800243c <HAL_UART_MspInit+0x7c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d128      	bne.n	8002434 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023e2:	4b17      	ldr	r3, [pc, #92]	; (8002440 <HAL_UART_MspInit+0x80>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	4a16      	ldr	r2, [pc, #88]	; (8002440 <HAL_UART_MspInit+0x80>)
 80023e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ec:	61d3      	str	r3, [r2, #28]
 80023ee:	4b14      	ldr	r3, [pc, #80]	; (8002440 <HAL_UART_MspInit+0x80>)
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fa:	4b11      	ldr	r3, [pc, #68]	; (8002440 <HAL_UART_MspInit+0x80>)
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	4a10      	ldr	r2, [pc, #64]	; (8002440 <HAL_UART_MspInit+0x80>)
 8002400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002404:	6153      	str	r3, [r2, #20]
 8002406:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <HAL_UART_MspInit+0x80>)
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002412:	230c      	movs	r3, #12
 8002414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002416:	2302      	movs	r3, #2
 8002418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241e:	2300      	movs	r3, #0
 8002420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002422:	2307      	movs	r3, #7
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002426:	f107 0314 	add.w	r3, r7, #20
 800242a:	4619      	mov	r1, r3
 800242c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002430:	f001 fa14 	bl	800385c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002434:	bf00      	nop
 8002436:	3728      	adds	r7, #40	; 0x28
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40004400 	.word	0x40004400
 8002440:	40021000 	.word	0x40021000

08002444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002448:	e7fe      	b.n	8002448 <NMI_Handler+0x4>

0800244a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800244a:	b480      	push	{r7}
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800244e:	e7fe      	b.n	800244e <HardFault_Handler+0x4>

08002450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002454:	e7fe      	b.n	8002454 <MemManage_Handler+0x4>

08002456 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800245a:	e7fe      	b.n	800245a <BusFault_Handler+0x4>

0800245c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002460:	e7fe      	b.n	8002460 <UsageFault_Handler+0x4>

08002462 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002490:	f000 f964 	bl	800275c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002494:	bf00      	nop
 8002496:	bd80      	pop	{r7, pc}

08002498 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RFM9x_DIO5_Pin);
 800249c:	2040      	movs	r0, #64	; 0x40
 800249e:	f001 fb67 	bl	8003b70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RFM9x_DIO1_Pin);
 80024a2:	2080      	movs	r0, #128	; 0x80
 80024a4:	f001 fb64 	bl	8003b70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RFM9x_DIO0_Pin);
 80024a8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80024ac:	f001 fb60 	bl	8003b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024b8:	4802      	ldr	r0, [pc, #8]	; (80024c4 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80024ba:	f003 ff33 	bl	8006324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000308 	.word	0x20000308

080024c8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024cc:	4802      	ldr	r0, [pc, #8]	; (80024d8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80024ce:	f003 ff29 	bl	8006324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000308 	.word	0x20000308

080024dc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024e0:	4802      	ldr	r0, [pc, #8]	; (80024ec <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80024e2:	f003 ff1f 	bl	8006324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000308 	.word	0x20000308

080024f0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024f4:	4802      	ldr	r0, [pc, #8]	; (8002500 <TIM1_CC_IRQHandler+0x10>)
 80024f6:	f003 ff15 	bl	8006324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000308 	.word	0x20000308

08002504 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return 1;
 8002508:	2301      	movs	r3, #1
}
 800250a:	4618      	mov	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <_kill>:

int _kill(int pid, int sig)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800251e:	f004 fdf9 	bl	8007114 <__errno>
 8002522:	4603      	mov	r3, r0
 8002524:	2216      	movs	r2, #22
 8002526:	601a      	str	r2, [r3, #0]
  return -1;
 8002528:	f04f 33ff 	mov.w	r3, #4294967295
}
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <_exit>:

void _exit (int status)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800253c:	f04f 31ff 	mov.w	r1, #4294967295
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff ffe7 	bl	8002514 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002546:	e7fe      	b.n	8002546 <_exit+0x12>

08002548 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	e00a      	b.n	8002570 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800255a:	f3af 8000 	nop.w
 800255e:	4601      	mov	r1, r0
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	1c5a      	adds	r2, r3, #1
 8002564:	60ba      	str	r2, [r7, #8]
 8002566:	b2ca      	uxtb	r2, r1
 8002568:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	3301      	adds	r3, #1
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	429a      	cmp	r2, r3
 8002576:	dbf0      	blt.n	800255a <_read+0x12>
  }

  return len;
 8002578:	687b      	ldr	r3, [r7, #4]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800258a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025aa:	605a      	str	r2, [r3, #4]
  return 0;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <_isatty>:

int _isatty(int file)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025c2:	2301      	movs	r3, #1
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025f4:	4a14      	ldr	r2, [pc, #80]	; (8002648 <_sbrk+0x5c>)
 80025f6:	4b15      	ldr	r3, [pc, #84]	; (800264c <_sbrk+0x60>)
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002600:	4b13      	ldr	r3, [pc, #76]	; (8002650 <_sbrk+0x64>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d102      	bne.n	800260e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <_sbrk+0x64>)
 800260a:	4a12      	ldr	r2, [pc, #72]	; (8002654 <_sbrk+0x68>)
 800260c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <_sbrk+0x64>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	429a      	cmp	r2, r3
 800261a:	d207      	bcs.n	800262c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800261c:	f004 fd7a 	bl	8007114 <__errno>
 8002620:	4603      	mov	r3, r0
 8002622:	220c      	movs	r2, #12
 8002624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002626:	f04f 33ff 	mov.w	r3, #4294967295
 800262a:	e009      	b.n	8002640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <_sbrk+0x64>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002632:	4b07      	ldr	r3, [pc, #28]	; (8002650 <_sbrk+0x64>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4413      	add	r3, r2
 800263a:	4a05      	ldr	r2, [pc, #20]	; (8002650 <_sbrk+0x64>)
 800263c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800263e:	68fb      	ldr	r3, [r7, #12]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20004000 	.word	0x20004000
 800264c:	00000400 	.word	0x00000400
 8002650:	200003dc 	.word	0x200003dc
 8002654:	200003f8 	.word	0x200003f8

08002658 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <SystemInit+0x20>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002662:	4a05      	ldr	r2, [pc, #20]	; (8002678 <SystemInit+0x20>)
 8002664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800267c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026b4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002680:	480d      	ldr	r0, [pc, #52]	; (80026b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002682:	490e      	ldr	r1, [pc, #56]	; (80026bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002684:	4a0e      	ldr	r2, [pc, #56]	; (80026c0 <LoopForever+0xe>)
  movs r3, #0
 8002686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002688:	e002      	b.n	8002690 <LoopCopyDataInit>

0800268a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800268a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800268c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800268e:	3304      	adds	r3, #4

08002690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002694:	d3f9      	bcc.n	800268a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002696:	4a0b      	ldr	r2, [pc, #44]	; (80026c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002698:	4c0b      	ldr	r4, [pc, #44]	; (80026c8 <LoopForever+0x16>)
  movs r3, #0
 800269a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800269c:	e001      	b.n	80026a2 <LoopFillZerobss>

0800269e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800269e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026a0:	3204      	adds	r2, #4

080026a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026a4:	d3fb      	bcc.n	800269e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026a6:	f7ff ffd7 	bl	8002658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026aa:	f004 fd4b 	bl	8007144 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026ae:	f7fe fd51 	bl	8001154 <main>

080026b2 <LoopForever>:

LoopForever:
    b LoopForever
 80026b2:	e7fe      	b.n	80026b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026b4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80026b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026bc:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 80026c0:	08008880 	.word	0x08008880
  ldr r2, =_sbss
 80026c4:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 80026c8:	200003f4 	.word	0x200003f4

080026cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026cc:	e7fe      	b.n	80026cc <ADC1_IRQHandler>
	...

080026d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026d4:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <HAL_Init+0x28>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a07      	ldr	r2, [pc, #28]	; (80026f8 <HAL_Init+0x28>)
 80026da:	f043 0310 	orr.w	r3, r3, #16
 80026de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026e0:	2003      	movs	r0, #3
 80026e2:	f001 f879 	bl	80037d8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026e6:	2000      	movs	r0, #0
 80026e8:	f000 f808 	bl	80026fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026ec:	f7ff fd86 	bl	80021fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40022000 	.word	0x40022000

080026fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002704:	4b12      	ldr	r3, [pc, #72]	; (8002750 <HAL_InitTick+0x54>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4b12      	ldr	r3, [pc, #72]	; (8002754 <HAL_InitTick+0x58>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	4619      	mov	r1, r3
 800270e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002712:	fbb3 f3f1 	udiv	r3, r3, r1
 8002716:	fbb2 f3f3 	udiv	r3, r2, r3
 800271a:	4618      	mov	r0, r3
 800271c:	f001 f891 	bl	8003842 <HAL_SYSTICK_Config>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e00e      	b.n	8002748 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b0f      	cmp	r3, #15
 800272e:	d80a      	bhi.n	8002746 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002730:	2200      	movs	r2, #0
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	f04f 30ff 	mov.w	r0, #4294967295
 8002738:	f001 f859 	bl	80037ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800273c:	4a06      	ldr	r2, [pc, #24]	; (8002758 <HAL_InitTick+0x5c>)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
 8002744:	e000      	b.n	8002748 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
}
 8002748:	4618      	mov	r0, r3
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	200001b8 	.word	0x200001b8
 8002754:	200001c0 	.word	0x200001c0
 8002758:	200001bc 	.word	0x200001bc

0800275c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002760:	4b06      	ldr	r3, [pc, #24]	; (800277c <HAL_IncTick+0x20>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	461a      	mov	r2, r3
 8002766:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_IncTick+0x24>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4413      	add	r3, r2
 800276c:	4a04      	ldr	r2, [pc, #16]	; (8002780 <HAL_IncTick+0x24>)
 800276e:	6013      	str	r3, [r2, #0]
}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	200001c0 	.word	0x200001c0
 8002780:	200003e0 	.word	0x200003e0

08002784 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return uwTick;  
 8002788:	4b03      	ldr	r3, [pc, #12]	; (8002798 <HAL_GetTick+0x14>)
 800278a:	681b      	ldr	r3, [r3, #0]
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	200003e0 	.word	0x200003e0

0800279c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027a4:	f7ff ffee 	bl	8002784 <HAL_GetTick>
 80027a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b4:	d005      	beq.n	80027c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027b6:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <HAL_Delay+0x44>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4413      	add	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80027c2:	bf00      	nop
 80027c4:	f7ff ffde 	bl	8002784 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d8f7      	bhi.n	80027c4 <HAL_Delay+0x28>
  {
  }
}
 80027d4:	bf00      	nop
 80027d6:	bf00      	nop
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	200001c0 	.word	0x200001c0

080027e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b09a      	sub	sp, #104	; 0x68
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e169      	b.n	8002ad8 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f003 0310 	and.w	r3, r3, #16
 8002812:	2b00      	cmp	r3, #0
 8002814:	d176      	bne.n	8002904 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	2b00      	cmp	r3, #0
 800281c:	d152      	bne.n	80028c4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff fd03 	bl	8002244 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d13b      	bne.n	80028c4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 fdd7 	bl	8003400 <ADC_Disable>
 8002852:	4603      	mov	r3, r0
 8002854:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	f003 0310 	and.w	r3, r3, #16
 8002860:	2b00      	cmp	r3, #0
 8002862:	d12f      	bne.n	80028c4 <HAL_ADC_Init+0xe0>
 8002864:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002868:	2b00      	cmp	r3, #0
 800286a:	d12b      	bne.n	80028c4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002874:	f023 0302 	bic.w	r3, r3, #2
 8002878:	f043 0202 	orr.w	r2, r3, #2
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800288e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800289e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028a0:	4b8f      	ldr	r3, [pc, #572]	; (8002ae0 <HAL_ADC_Init+0x2fc>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a8f      	ldr	r2, [pc, #572]	; (8002ae4 <HAL_ADC_Init+0x300>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	0c9a      	lsrs	r2, r3, #18
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028b6:	e002      	b.n	80028be <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1f9      	bne.n	80028b8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d007      	beq.n	80028e2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80028dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028e0:	d110      	bne.n	8002904 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f023 0312 	bic.w	r3, r3, #18
 80028ea:	f043 0210 	orr.w	r2, r3, #16
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	f043 0201 	orr.w	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b00      	cmp	r3, #0
 800290e:	f040 80d6 	bne.w	8002abe <HAL_ADC_Init+0x2da>
 8002912:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002916:	2b00      	cmp	r3, #0
 8002918:	f040 80d1 	bne.w	8002abe <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002926:	2b00      	cmp	r3, #0
 8002928:	f040 80c9 	bne.w	8002abe <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002934:	f043 0202 	orr.w	r2, r3, #2
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800293c:	4b6a      	ldr	r3, [pc, #424]	; (8002ae8 <HAL_ADC_Init+0x304>)
 800293e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002940:	2300      	movs	r3, #0
 8002942:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	2b01      	cmp	r3, #1
 8002950:	d108      	bne.n	8002964 <HAL_ADC_Init+0x180>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_ADC_Init+0x180>
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <HAL_ADC_Init+0x182>
 8002964:	2300      	movs	r3, #0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d11c      	bne.n	80029a4 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800296a:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800296c:	2b00      	cmp	r3, #0
 800296e:	d010      	beq.n	8002992 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	2b01      	cmp	r3, #1
 800297a:	d107      	bne.n	800298c <HAL_ADC_Init+0x1a8>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_ADC_Init+0x1a8>
 8002988:	2301      	movs	r3, #1
 800298a:	e000      	b.n	800298e <HAL_ADC_Init+0x1aa>
 800298c:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800298e:	2b00      	cmp	r3, #0
 8002990:	d108      	bne.n	80029a4 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	431a      	orrs	r2, r3
 80029a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029a2:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	7e5b      	ldrb	r3, [r3, #25]
 80029a8:	035b      	lsls	r3, r3, #13
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029ae:	2a01      	cmp	r2, #1
 80029b0:	d002      	beq.n	80029b8 <HAL_ADC_Init+0x1d4>
 80029b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029b6:	e000      	b.n	80029ba <HAL_ADC_Init+0x1d6>
 80029b8:	2200      	movs	r2, #0
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	431a      	orrs	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029ca:	4313      	orrs	r3, r2
 80029cc:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d11b      	bne.n	8002a10 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	7e5b      	ldrb	r3, [r3, #25]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d109      	bne.n	80029f4 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	3b01      	subs	r3, #1
 80029e6:	045a      	lsls	r2, r3, #17
 80029e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f0:	663b      	str	r3, [r7, #96]	; 0x60
 80029f2:	e00d      	b.n	8002a10 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80029fc:	f043 0220 	orr.w	r2, r3, #32
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a08:	f043 0201 	orr.w	r2, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d007      	beq.n	8002a28 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	4313      	orrs	r3, r2
 8002a22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a24:	4313      	orrs	r3, r2
 8002a26:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d114      	bne.n	8002a60 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a44:	f023 0302 	bic.w	r3, r3, #2
 8002a48:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	7e1b      	ldrb	r3, [r3, #24]
 8002a4e:	039a      	lsls	r2, r3, #14
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	4b21      	ldr	r3, [pc, #132]	; (8002aec <HAL_ADC_Init+0x308>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002a70:	430b      	orrs	r3, r1
 8002a72:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d10c      	bne.n	8002a96 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f023 010f 	bic.w	r1, r3, #15
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	1e5a      	subs	r2, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	631a      	str	r2, [r3, #48]	; 0x30
 8002a94:	e007      	b.n	8002aa6 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 020f 	bic.w	r2, r2, #15
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	f023 0303 	bic.w	r3, r3, #3
 8002ab4:	f043 0201 	orr.w	r2, r3, #1
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	641a      	str	r2, [r3, #64]	; 0x40
 8002abc:	e00a      	b.n	8002ad4 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f023 0312 	bic.w	r3, r3, #18
 8002ac6:	f043 0210 	orr.w	r2, r3, #16
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002ace:	2301      	movs	r3, #1
 8002ad0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002ad4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3768      	adds	r7, #104	; 0x68
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	200001b8 	.word	0x200001b8
 8002ae4:	431bde83 	.word	0x431bde83
 8002ae8:	50000300 	.word	0x50000300
 8002aec:	fff0c007 	.word	0xfff0c007

08002af0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d158      	bne.n	8002bbc <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d101      	bne.n	8002b18 <HAL_ADC_Start+0x28>
 8002b14:	2302      	movs	r3, #2
 8002b16:	e054      	b.n	8002bc2 <HAL_ADC_Start+0xd2>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 fc09 	bl	8003338 <ADC_Enable>
 8002b26:	4603      	mov	r3, r0
 8002b28:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d140      	bne.n	8002bb2 <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d007      	beq.n	8002b6e <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b7a:	d106      	bne.n	8002b8a <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b80:	f023 0206 	bic.w	r2, r3, #6
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	645a      	str	r2, [r3, #68]	; 0x44
 8002b88:	e002      	b.n	8002b90 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	221c      	movs	r2, #28
 8002b9e:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0204 	orr.w	r2, r2, #4
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	e006      	b.n	8002bc0 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002bba:	e001      	b.n	8002bc0 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b084      	sub	sp, #16
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_ADC_Stop+0x1a>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e023      	b.n	8002c2c <HAL_ADC_Stop+0x62>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002bec:	216c      	movs	r1, #108	; 0x6c
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fc6c 	bl	80034cc <ADC_ConversionStop>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d111      	bne.n	8002c22 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fbfe 	bl	8003400 <ADC_Disable>
 8002c04:	4603      	mov	r3, r0
 8002c06:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d109      	bne.n	8002c22 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c16:	f023 0301 	bic.w	r3, r3, #1
 8002c1a:	f043 0201 	orr.w	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d102      	bne.n	8002c50 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002c4a:	2308      	movs	r3, #8
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	e02e      	b.n	8002cae <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c50:	4b56      	ldr	r3, [pc, #344]	; (8002dac <HAL_ADC_PollForConversion+0x178>)
 8002c52:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 031f 	and.w	r3, r3, #31
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d112      	bne.n	8002c86 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d11d      	bne.n	8002caa <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f043 0220 	orr.w	r2, r3, #32
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e08d      	b.n	8002da2 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00b      	beq.n	8002caa <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f043 0220 	orr.w	r2, r3, #32
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e07b      	b.n	8002da2 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002caa:	230c      	movs	r3, #12
 8002cac:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002cb6:	f7ff fd65 	bl	8002784 <HAL_GetTick>
 8002cba:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002cbc:	e021      	b.n	8002d02 <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d01d      	beq.n	8002d02 <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d007      	beq.n	8002cdc <HAL_ADC_PollForConversion+0xa8>
 8002ccc:	f7ff fd5a 	bl	8002784 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d212      	bcs.n	8002d02 <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10b      	bne.n	8002d02 <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f043 0204 	orr.w	r2, r3, #4
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e04f      	b.n	8002da2 <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0d6      	beq.n	8002cbe <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d131      	bne.n	8002d8e <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d12c      	bne.n	8002d8e <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d125      	bne.n	8002d8e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d112      	bne.n	8002d76 <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d112      	bne.n	8002d8e <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	f043 0201 	orr.w	r2, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	641a      	str	r2, [r3, #64]	; 0x40
 8002d74:	e00b      	b.n	8002d8e <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f043 0220 	orr.w	r2, r3, #32
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	f043 0201 	orr.w	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d103      	bne.n	8002da0 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	50000300 	.word	0x50000300

08002db0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b09b      	sub	sp, #108	; 0x6c
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <HAL_ADC_ConfigChannel+0x22>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e299      	b.n	8003322 <HAL_ADC_ConfigChannel+0x556>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f040 827d 	bne.w	8003300 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d81c      	bhi.n	8002e48 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	461a      	mov	r2, r3
 8002e22:	231f      	movs	r3, #31
 8002e24:	4093      	lsls	r3, r2
 8002e26:	43db      	mvns	r3, r3
 8002e28:	4019      	ands	r1, r3
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	4413      	add	r3, r2
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	631a      	str	r2, [r3, #48]	; 0x30
 8002e46:	e063      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b09      	cmp	r3, #9
 8002e4e:	d81e      	bhi.n	8002e8e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	4413      	add	r3, r2
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	3b1e      	subs	r3, #30
 8002e64:	221f      	movs	r2, #31
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	4019      	ands	r1, r3
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	4413      	add	r3, r2
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	3b1e      	subs	r3, #30
 8002e80:	fa00 f203 	lsl.w	r2, r0, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	635a      	str	r2, [r3, #52]	; 0x34
 8002e8c:	e040      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b0e      	cmp	r3, #14
 8002e94:	d81e      	bhi.n	8002ed4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	4413      	add	r3, r2
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	3b3c      	subs	r3, #60	; 0x3c
 8002eaa:	221f      	movs	r2, #31
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	4019      	ands	r1, r3
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	6818      	ldr	r0, [r3, #0]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	4413      	add	r3, r2
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	3b3c      	subs	r3, #60	; 0x3c
 8002ec6:	fa00 f203 	lsl.w	r2, r0, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	639a      	str	r2, [r3, #56]	; 0x38
 8002ed2:	e01d      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	4413      	add	r3, r2
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	3b5a      	subs	r3, #90	; 0x5a
 8002ee8:	221f      	movs	r2, #31
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	4019      	ands	r1, r3
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	6818      	ldr	r0, [r3, #0]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	4413      	add	r3, r2
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	3b5a      	subs	r3, #90	; 0x5a
 8002f04:	fa00 f203 	lsl.w	r2, r0, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 030c 	and.w	r3, r3, #12
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f040 80e5 	bne.w	80030ea <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b09      	cmp	r3, #9
 8002f26:	d91c      	bls.n	8002f62 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6999      	ldr	r1, [r3, #24]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	4613      	mov	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4413      	add	r3, r2
 8002f38:	3b1e      	subs	r3, #30
 8002f3a:	2207      	movs	r2, #7
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	4019      	ands	r1, r3
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	6898      	ldr	r0, [r3, #8]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	4413      	add	r3, r2
 8002f52:	3b1e      	subs	r3, #30
 8002f54:	fa00 f203 	lsl.w	r2, r0, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	619a      	str	r2, [r3, #24]
 8002f60:	e019      	b.n	8002f96 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6959      	ldr	r1, [r3, #20]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	4413      	add	r3, r2
 8002f72:	2207      	movs	r2, #7
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	4019      	ands	r1, r3
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	6898      	ldr	r0, [r3, #8]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	4613      	mov	r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4413      	add	r3, r2
 8002f8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	695a      	ldr	r2, [r3, #20]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	08db      	lsrs	r3, r3, #3
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d84f      	bhi.n	8003058 <HAL_ADC_ConfigChannel+0x28c>
 8002fb8:	a201      	add	r2, pc, #4	; (adr r2, 8002fc0 <HAL_ADC_ConfigChannel+0x1f4>)
 8002fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbe:	bf00      	nop
 8002fc0:	08002fd1 	.word	0x08002fd1
 8002fc4:	08002ff3 	.word	0x08002ff3
 8002fc8:	08003015 	.word	0x08003015
 8002fcc:	08003037 	.word	0x08003037
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fd6:	4b99      	ldr	r3, [pc, #612]	; (800323c <HAL_ADC_ConfigChannel+0x470>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	0691      	lsls	r1, r2, #26
 8002fe0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002fee:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ff0:	e07e      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ff8:	4b90      	ldr	r3, [pc, #576]	; (800323c <HAL_ADC_ConfigChannel+0x470>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	0691      	lsls	r1, r2, #26
 8003002:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003004:	430a      	orrs	r2, r1
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003010:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003012:	e06d      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800301a:	4b88      	ldr	r3, [pc, #544]	; (800323c <HAL_ADC_ConfigChannel+0x470>)
 800301c:	4013      	ands	r3, r2
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	0691      	lsls	r1, r2, #26
 8003024:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003026:	430a      	orrs	r2, r1
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003032:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003034:	e05c      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800303c:	4b7f      	ldr	r3, [pc, #508]	; (800323c <HAL_ADC_ConfigChannel+0x470>)
 800303e:	4013      	ands	r3, r2
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	0691      	lsls	r1, r2, #26
 8003046:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003048:	430a      	orrs	r2, r1
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003054:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003056:	e04b      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800305e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	069b      	lsls	r3, r3, #26
 8003068:	429a      	cmp	r2, r3
 800306a:	d107      	bne.n	800307c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800307a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003082:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	069b      	lsls	r3, r3, #26
 800308c:	429a      	cmp	r2, r3
 800308e:	d107      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800309e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	069b      	lsls	r3, r3, #26
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d107      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030c2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	069b      	lsls	r3, r3, #26
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d10a      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030e6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80030e8:	e001      	b.n	80030ee <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80030ea:	bf00      	nop
 80030ec:	e000      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80030ee:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d108      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x344>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x344>
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <HAL_ADC_ConfigChannel+0x346>
 8003110:	2300      	movs	r3, #0
 8003112:	2b00      	cmp	r3, #0
 8003114:	f040 80ff 	bne.w	8003316 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d00f      	beq.n	8003140 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2201      	movs	r2, #1
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43da      	mvns	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	400a      	ands	r2, r1
 800313a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800313e:	e049      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2201      	movs	r2, #1
 800314e:	409a      	lsls	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b09      	cmp	r3, #9
 8003160:	d91c      	bls.n	800319c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6999      	ldr	r1, [r3, #24]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	4613      	mov	r3, r2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	4413      	add	r3, r2
 8003172:	3b1b      	subs	r3, #27
 8003174:	2207      	movs	r2, #7
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43db      	mvns	r3, r3
 800317c:	4019      	ands	r1, r3
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	6898      	ldr	r0, [r3, #8]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	4613      	mov	r3, r2
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	4413      	add	r3, r2
 800318c:	3b1b      	subs	r3, #27
 800318e:	fa00 f203 	lsl.w	r2, r0, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	619a      	str	r2, [r3, #24]
 800319a:	e01b      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6959      	ldr	r1, [r3, #20]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	4613      	mov	r3, r2
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	4413      	add	r3, r2
 80031ae:	2207      	movs	r2, #7
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	4019      	ands	r1, r3
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	6898      	ldr	r0, [r3, #8]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	1c5a      	adds	r2, r3, #1
 80031c2:	4613      	mov	r3, r2
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	4413      	add	r3, r2
 80031c8:	fa00 f203 	lsl.w	r2, r0, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031d4:	4b1a      	ldr	r3, [pc, #104]	; (8003240 <HAL_ADC_ConfigChannel+0x474>)
 80031d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b10      	cmp	r3, #16
 80031de:	d105      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80031e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d014      	beq.n	8003216 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80031f0:	2b11      	cmp	r3, #17
 80031f2:	d105      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80031f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00a      	beq.n	8003216 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003204:	2b12      	cmp	r3, #18
 8003206:	f040 8086 	bne.w	8003316 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800320a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003212:	2b00      	cmp	r3, #0
 8003214:	d17f      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 0303 	and.w	r3, r3, #3
 8003224:	2b01      	cmp	r3, #1
 8003226:	d10d      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x478>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b01      	cmp	r3, #1
 8003234:	d106      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x478>
 8003236:	2301      	movs	r3, #1
 8003238:	e005      	b.n	8003246 <HAL_ADC_ConfigChannel+0x47a>
 800323a:	bf00      	nop
 800323c:	83fff000 	.word	0x83fff000
 8003240:	50000300 	.word	0x50000300
 8003244:	2300      	movs	r3, #0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d150      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800324a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800324c:	2b00      	cmp	r3, #0
 800324e:	d010      	beq.n	8003272 <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	2b01      	cmp	r3, #1
 800325a:	d107      	bne.n	800326c <HAL_ADC_ConfigChannel+0x4a0>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_ADC_ConfigChannel+0x4a0>
 8003268:	2301      	movs	r3, #1
 800326a:	e000      	b.n	800326e <HAL_ADC_ConfigChannel+0x4a2>
 800326c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800326e:	2b00      	cmp	r3, #0
 8003270:	d13c      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b10      	cmp	r3, #16
 8003278:	d11d      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x4ea>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003282:	d118      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800328c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800328e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003290:	4b27      	ldr	r3, [pc, #156]	; (8003330 <HAL_ADC_ConfigChannel+0x564>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a27      	ldr	r2, [pc, #156]	; (8003334 <HAL_ADC_ConfigChannel+0x568>)
 8003296:	fba2 2303 	umull	r2, r3, r2, r3
 800329a:	0c9a      	lsrs	r2, r3, #18
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032a6:	e002      	b.n	80032ae <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1f9      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80032b4:	e02e      	b.n	8003314 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b11      	cmp	r3, #17
 80032bc:	d10b      	bne.n	80032d6 <HAL_ADC_ConfigChannel+0x50a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032c6:	d106      	bne.n	80032d6 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80032c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80032d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032d2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80032d4:	e01e      	b.n	8003314 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b12      	cmp	r3, #18
 80032dc:	d11a      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80032de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80032e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032e8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80032ea:	e013      	b.n	8003314 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	f043 0220 	orr.w	r2, r3, #32
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80032fe:	e00a      	b.n	8003316 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	f043 0220 	orr.w	r2, r3, #32
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003312:	e000      	b.n	8003316 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003314:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800331e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003322:	4618      	mov	r0, r3
 8003324:	376c      	adds	r7, #108	; 0x6c
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	200001b8 	.word	0x200001b8
 8003334:	431bde83 	.word	0x431bde83

08003338 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	2b01      	cmp	r3, #1
 8003350:	d108      	bne.n	8003364 <ADC_Enable+0x2c>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <ADC_Enable+0x2c>
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <ADC_Enable+0x2e>
 8003364:	2300      	movs	r3, #0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d143      	bne.n	80033f2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	4b22      	ldr	r3, [pc, #136]	; (80033fc <ADC_Enable+0xc4>)
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00d      	beq.n	8003394 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	f043 0210 	orr.w	r2, r3, #16
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003388:	f043 0201 	orr.w	r2, r3, #1
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e02f      	b.n	80033f4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0201 	orr.w	r2, r2, #1
 80033a2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80033a4:	f7ff f9ee 	bl	8002784 <HAL_GetTick>
 80033a8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80033aa:	e01b      	b.n	80033e4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033ac:	f7ff f9ea 	bl	8002784 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d914      	bls.n	80033e4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d00d      	beq.n	80033e4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	f043 0210 	orr.w	r2, r3, #16
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d8:	f043 0201 	orr.w	r2, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e007      	b.n	80033f4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d1dc      	bne.n	80033ac <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	8000003f 	.word	0x8000003f

08003400 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b01      	cmp	r3, #1
 8003418:	d108      	bne.n	800342c <ADC_Disable+0x2c>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <ADC_Disable+0x2c>
 8003428:	2301      	movs	r3, #1
 800342a:	e000      	b.n	800342e <ADC_Disable+0x2e>
 800342c:	2300      	movs	r3, #0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d047      	beq.n	80034c2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 030d 	and.w	r3, r3, #13
 800343c:	2b01      	cmp	r3, #1
 800343e:	d10f      	bne.n	8003460 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0202 	orr.w	r2, r2, #2
 800344e:	609a      	str	r2, [r3, #8]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2203      	movs	r2, #3
 8003456:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003458:	f7ff f994 	bl	8002784 <HAL_GetTick>
 800345c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800345e:	e029      	b.n	80034b4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	f043 0210 	orr.w	r2, r3, #16
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003470:	f043 0201 	orr.w	r2, r3, #1
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e023      	b.n	80034c4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800347c:	f7ff f982 	bl	8002784 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d914      	bls.n	80034b4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b01      	cmp	r3, #1
 8003496:	d10d      	bne.n	80034b4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	f043 0210 	orr.w	r2, r3, #16
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a8:	f043 0201 	orr.w	r2, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e007      	b.n	80034c4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d0dc      	beq.n	800347c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80034de:	2300      	movs	r3, #0
 80034e0:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 030c 	and.w	r3, r3, #12
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 809b 	beq.w	8003628 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003500:	d12a      	bne.n	8003558 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003506:	2b01      	cmp	r3, #1
 8003508:	d126      	bne.n	8003558 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800350e:	2b01      	cmp	r3, #1
 8003510:	d122      	bne.n	8003558 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8003512:	230c      	movs	r3, #12
 8003514:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003516:	e014      	b.n	8003542 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	4a46      	ldr	r2, [pc, #280]	; (8003634 <ADC_ConversionStop+0x168>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d90d      	bls.n	800353c <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003524:	f043 0210 	orr.w	r2, r3, #16
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003530:	f043 0201 	orr.w	r2, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e076      	b.n	800362a <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	3301      	adds	r3, #1
 8003540:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354c:	2b40      	cmp	r3, #64	; 0x40
 800354e:	d1e3      	bne.n	8003518 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2240      	movs	r2, #64	; 0x40
 8003556:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	2b60      	cmp	r3, #96	; 0x60
 800355c:	d015      	beq.n	800358a <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b04      	cmp	r3, #4
 800356a:	d10e      	bne.n	800358a <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003576:	2b00      	cmp	r3, #0
 8003578:	d107      	bne.n	800358a <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f042 0210 	orr.w	r2, r2, #16
 8003588:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b0c      	cmp	r3, #12
 800358e:	d015      	beq.n	80035bc <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b08      	cmp	r3, #8
 800359c:	d10e      	bne.n	80035bc <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d107      	bne.n	80035bc <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0220 	orr.w	r2, r2, #32
 80035ba:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	2b60      	cmp	r3, #96	; 0x60
 80035c0:	d005      	beq.n	80035ce <ADC_ConversionStop+0x102>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b6c      	cmp	r3, #108	; 0x6c
 80035c6:	d105      	bne.n	80035d4 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80035c8:	230c      	movs	r3, #12
 80035ca:	617b      	str	r3, [r7, #20]
        break;
 80035cc:	e005      	b.n	80035da <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80035ce:	2308      	movs	r3, #8
 80035d0:	617b      	str	r3, [r7, #20]
        break;
 80035d2:	e002      	b.n	80035da <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80035d4:	2304      	movs	r3, #4
 80035d6:	617b      	str	r3, [r7, #20]
        break;
 80035d8:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80035da:	f7ff f8d3 	bl	8002784 <HAL_GetTick>
 80035de:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80035e0:	e01b      	b.n	800361a <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80035e2:	f7ff f8cf 	bl	8002784 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b0b      	cmp	r3, #11
 80035ee:	d914      	bls.n	800361a <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	4013      	ands	r3, r2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00d      	beq.n	800361a <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f043 0210 	orr.w	r2, r3, #16
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360e:	f043 0201 	orr.w	r2, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e007      	b.n	800362a <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	4013      	ands	r3, r2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1dc      	bne.n	80035e2 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	000993ff 	.word	0x000993ff

08003638 <__NVIC_SetPriorityGrouping>:
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003648:	4b0c      	ldr	r3, [pc, #48]	; (800367c <__NVIC_SetPriorityGrouping+0x44>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003654:	4013      	ands	r3, r2
 8003656:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800366a:	4a04      	ldr	r2, [pc, #16]	; (800367c <__NVIC_SetPriorityGrouping+0x44>)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	60d3      	str	r3, [r2, #12]
}
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	e000ed00 	.word	0xe000ed00

08003680 <__NVIC_GetPriorityGrouping>:
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003684:	4b04      	ldr	r3, [pc, #16]	; (8003698 <__NVIC_GetPriorityGrouping+0x18>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	0a1b      	lsrs	r3, r3, #8
 800368a:	f003 0307 	and.w	r3, r3, #7
}
 800368e:	4618      	mov	r0, r3
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	e000ed00 	.word	0xe000ed00

0800369c <__NVIC_EnableIRQ>:
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	db0b      	blt.n	80036c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ae:	79fb      	ldrb	r3, [r7, #7]
 80036b0:	f003 021f 	and.w	r2, r3, #31
 80036b4:	4907      	ldr	r1, [pc, #28]	; (80036d4 <__NVIC_EnableIRQ+0x38>)
 80036b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ba:	095b      	lsrs	r3, r3, #5
 80036bc:	2001      	movs	r0, #1
 80036be:	fa00 f202 	lsl.w	r2, r0, r2
 80036c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	e000e100 	.word	0xe000e100

080036d8 <__NVIC_SetPriority>:
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	6039      	str	r1, [r7, #0]
 80036e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	db0a      	blt.n	8003702 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	490c      	ldr	r1, [pc, #48]	; (8003724 <__NVIC_SetPriority+0x4c>)
 80036f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f6:	0112      	lsls	r2, r2, #4
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	440b      	add	r3, r1
 80036fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003700:	e00a      	b.n	8003718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	b2da      	uxtb	r2, r3
 8003706:	4908      	ldr	r1, [pc, #32]	; (8003728 <__NVIC_SetPriority+0x50>)
 8003708:	79fb      	ldrb	r3, [r7, #7]
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	3b04      	subs	r3, #4
 8003710:	0112      	lsls	r2, r2, #4
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	440b      	add	r3, r1
 8003716:	761a      	strb	r2, [r3, #24]
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	e000e100 	.word	0xe000e100
 8003728:	e000ed00 	.word	0xe000ed00

0800372c <NVIC_EncodePriority>:
{
 800372c:	b480      	push	{r7}
 800372e:	b089      	sub	sp, #36	; 0x24
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f1c3 0307 	rsb	r3, r3, #7
 8003746:	2b04      	cmp	r3, #4
 8003748:	bf28      	it	cs
 800374a:	2304      	movcs	r3, #4
 800374c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	3304      	adds	r3, #4
 8003752:	2b06      	cmp	r3, #6
 8003754:	d902      	bls.n	800375c <NVIC_EncodePriority+0x30>
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	3b03      	subs	r3, #3
 800375a:	e000      	b.n	800375e <NVIC_EncodePriority+0x32>
 800375c:	2300      	movs	r3, #0
 800375e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003760:	f04f 32ff 	mov.w	r2, #4294967295
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	43da      	mvns	r2, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	401a      	ands	r2, r3
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003774:	f04f 31ff 	mov.w	r1, #4294967295
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	fa01 f303 	lsl.w	r3, r1, r3
 800377e:	43d9      	mvns	r1, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003784:	4313      	orrs	r3, r2
}
 8003786:	4618      	mov	r0, r3
 8003788:	3724      	adds	r7, #36	; 0x24
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
	...

08003794 <SysTick_Config>:
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3b01      	subs	r3, #1
 80037a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037a4:	d301      	bcc.n	80037aa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80037a6:	2301      	movs	r3, #1
 80037a8:	e00f      	b.n	80037ca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037aa:	4a0a      	ldr	r2, [pc, #40]	; (80037d4 <SysTick_Config+0x40>)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037b2:	210f      	movs	r1, #15
 80037b4:	f04f 30ff 	mov.w	r0, #4294967295
 80037b8:	f7ff ff8e 	bl	80036d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037bc:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <SysTick_Config+0x40>)
 80037be:	2200      	movs	r2, #0
 80037c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037c2:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <SysTick_Config+0x40>)
 80037c4:	2207      	movs	r2, #7
 80037c6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	e000e010 	.word	0xe000e010

080037d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff ff29 	bl	8003638 <__NVIC_SetPriorityGrouping>
}
 80037e6:	bf00      	nop
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b086      	sub	sp, #24
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	4603      	mov	r3, r0
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	607a      	str	r2, [r7, #4]
 80037fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003800:	f7ff ff3e 	bl	8003680 <__NVIC_GetPriorityGrouping>
 8003804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	68b9      	ldr	r1, [r7, #8]
 800380a:	6978      	ldr	r0, [r7, #20]
 800380c:	f7ff ff8e 	bl	800372c <NVIC_EncodePriority>
 8003810:	4602      	mov	r2, r0
 8003812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003816:	4611      	mov	r1, r2
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff ff5d 	bl	80036d8 <__NVIC_SetPriority>
}
 800381e:	bf00      	nop
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	4603      	mov	r3, r0
 800382e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003834:	4618      	mov	r0, r3
 8003836:	f7ff ff31 	bl	800369c <__NVIC_EnableIRQ>
}
 800383a:	bf00      	nop
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b082      	sub	sp, #8
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7ff ffa2 	bl	8003794 <SysTick_Config>
 8003850:	4603      	mov	r3, r0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
	...

0800385c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800386a:	e14e      	b.n	8003b0a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	2101      	movs	r1, #1
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	fa01 f303 	lsl.w	r3, r1, r3
 8003878:	4013      	ands	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 8140 	beq.w	8003b04 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 0303 	and.w	r3, r3, #3
 800388c:	2b01      	cmp	r3, #1
 800388e:	d005      	beq.n	800389c <HAL_GPIO_Init+0x40>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 0303 	and.w	r3, r3, #3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d130      	bne.n	80038fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	2203      	movs	r2, #3
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	43db      	mvns	r3, r3
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4013      	ands	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038d2:	2201      	movs	r2, #1
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43db      	mvns	r3, r3
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4013      	ands	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	091b      	lsrs	r3, r3, #4
 80038e8:	f003 0201 	and.w	r2, r3, #1
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	2b03      	cmp	r3, #3
 8003908:	d017      	beq.n	800393a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	2203      	movs	r2, #3
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43db      	mvns	r3, r3
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d123      	bne.n	800398e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	08da      	lsrs	r2, r3, #3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3208      	adds	r2, #8
 800394e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003952:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	220f      	movs	r2, #15
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	43db      	mvns	r3, r3
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4013      	ands	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	691a      	ldr	r2, [r3, #16]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4313      	orrs	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	08da      	lsrs	r2, r3, #3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3208      	adds	r2, #8
 8003988:	6939      	ldr	r1, [r7, #16]
 800398a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	2203      	movs	r2, #3
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	43db      	mvns	r3, r3
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4013      	ands	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f003 0203 	and.w	r2, r3, #3
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 809a 	beq.w	8003b04 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d0:	4b55      	ldr	r3, [pc, #340]	; (8003b28 <HAL_GPIO_Init+0x2cc>)
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	4a54      	ldr	r2, [pc, #336]	; (8003b28 <HAL_GPIO_Init+0x2cc>)
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	6193      	str	r3, [r2, #24]
 80039dc:	4b52      	ldr	r3, [pc, #328]	; (8003b28 <HAL_GPIO_Init+0x2cc>)
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	60bb      	str	r3, [r7, #8]
 80039e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039e8:	4a50      	ldr	r2, [pc, #320]	; (8003b2c <HAL_GPIO_Init+0x2d0>)
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	089b      	lsrs	r3, r3, #2
 80039ee:	3302      	adds	r3, #2
 80039f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	220f      	movs	r2, #15
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a12:	d013      	beq.n	8003a3c <HAL_GPIO_Init+0x1e0>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a46      	ldr	r2, [pc, #280]	; (8003b30 <HAL_GPIO_Init+0x2d4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00d      	beq.n	8003a38 <HAL_GPIO_Init+0x1dc>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a45      	ldr	r2, [pc, #276]	; (8003b34 <HAL_GPIO_Init+0x2d8>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d007      	beq.n	8003a34 <HAL_GPIO_Init+0x1d8>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a44      	ldr	r2, [pc, #272]	; (8003b38 <HAL_GPIO_Init+0x2dc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d101      	bne.n	8003a30 <HAL_GPIO_Init+0x1d4>
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e006      	b.n	8003a3e <HAL_GPIO_Init+0x1e2>
 8003a30:	2305      	movs	r3, #5
 8003a32:	e004      	b.n	8003a3e <HAL_GPIO_Init+0x1e2>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e002      	b.n	8003a3e <HAL_GPIO_Init+0x1e2>
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <HAL_GPIO_Init+0x1e2>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	f002 0203 	and.w	r2, r2, #3
 8003a44:	0092      	lsls	r2, r2, #2
 8003a46:	4093      	lsls	r3, r2
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a4e:	4937      	ldr	r1, [pc, #220]	; (8003b2c <HAL_GPIO_Init+0x2d0>)
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	089b      	lsrs	r3, r3, #2
 8003a54:	3302      	adds	r3, #2
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a5c:	4b37      	ldr	r3, [pc, #220]	; (8003b3c <HAL_GPIO_Init+0x2e0>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	43db      	mvns	r3, r3
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d003      	beq.n	8003a80 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a80:	4a2e      	ldr	r2, [pc, #184]	; (8003b3c <HAL_GPIO_Init+0x2e0>)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a86:	4b2d      	ldr	r3, [pc, #180]	; (8003b3c <HAL_GPIO_Init+0x2e0>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4013      	ands	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003aaa:	4a24      	ldr	r2, [pc, #144]	; (8003b3c <HAL_GPIO_Init+0x2e0>)
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ab0:	4b22      	ldr	r3, [pc, #136]	; (8003b3c <HAL_GPIO_Init+0x2e0>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4013      	ands	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003ad4:	4a19      	ldr	r2, [pc, #100]	; (8003b3c <HAL_GPIO_Init+0x2e0>)
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ada:	4b18      	ldr	r3, [pc, #96]	; (8003b3c <HAL_GPIO_Init+0x2e0>)
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003afe:	4a0f      	ldr	r2, [pc, #60]	; (8003b3c <HAL_GPIO_Init+0x2e0>)
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	3301      	adds	r3, #1
 8003b08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	fa22 f303 	lsr.w	r3, r2, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f47f aea9 	bne.w	800386c <HAL_GPIO_Init+0x10>
  }
}
 8003b1a:	bf00      	nop
 8003b1c:	bf00      	nop
 8003b1e:	371c      	adds	r7, #28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	40010000 	.word	0x40010000
 8003b30:	48000400 	.word	0x48000400
 8003b34:	48000800 	.word	0x48000800
 8003b38:	48000c00 	.word	0x48000c00
 8003b3c:	40010400 	.word	0x40010400

08003b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	807b      	strh	r3, [r7, #2]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b50:	787b      	ldrb	r3, [r7, #1]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b56:	887a      	ldrh	r2, [r7, #2]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b5c:	e002      	b.n	8003b64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b5e:	887a      	ldrh	r2, [r7, #2]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b7a:	4b08      	ldr	r3, [pc, #32]	; (8003b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b7c:	695a      	ldr	r2, [r3, #20]
 8003b7e:	88fb      	ldrh	r3, [r7, #6]
 8003b80:	4013      	ands	r3, r2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d006      	beq.n	8003b94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b86:	4a05      	ldr	r2, [pc, #20]	; (8003b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b88:	88fb      	ldrh	r3, [r7, #6]
 8003b8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b8c:	88fb      	ldrh	r3, [r7, #6]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fd fd6c 	bl	800166c <HAL_GPIO_EXTI_Callback>
  }
}
 8003b94:	bf00      	nop
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40010400 	.word	0x40010400

08003ba0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bb0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d102      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	f001 b823 	b.w	8004c0c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 817d 	beq.w	8003ed6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003bdc:	4bbc      	ldr	r3, [pc, #752]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 030c 	and.w	r3, r3, #12
 8003be4:	2b04      	cmp	r3, #4
 8003be6:	d00c      	beq.n	8003c02 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003be8:	4bb9      	ldr	r3, [pc, #740]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 030c 	and.w	r3, r3, #12
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d15c      	bne.n	8003cae <HAL_RCC_OscConfig+0x10e>
 8003bf4:	4bb6      	ldr	r3, [pc, #728]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c00:	d155      	bne.n	8003cae <HAL_RCC_OscConfig+0x10e>
 8003c02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c06:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003c0e:	fa93 f3a3 	rbit	r3, r3
 8003c12:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c16:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c1a:	fab3 f383 	clz	r3, r3
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	095b      	lsrs	r3, r3, #5
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	f043 0301 	orr.w	r3, r3, #1
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d102      	bne.n	8003c34 <HAL_RCC_OscConfig+0x94>
 8003c2e:	4ba8      	ldr	r3, [pc, #672]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	e015      	b.n	8003c60 <HAL_RCC_OscConfig+0xc0>
 8003c34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c38:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003c40:	fa93 f3a3 	rbit	r3, r3
 8003c44:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003c48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c4c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003c50:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003c54:	fa93 f3a3 	rbit	r3, r3
 8003c58:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003c5c:	4b9c      	ldr	r3, [pc, #624]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c64:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003c68:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003c6c:	fa92 f2a2 	rbit	r2, r2
 8003c70:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003c74:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003c78:	fab2 f282 	clz	r2, r2
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	f042 0220 	orr.w	r2, r2, #32
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	f002 021f 	and.w	r2, r2, #31
 8003c88:	2101      	movs	r1, #1
 8003c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c8e:	4013      	ands	r3, r2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 811f 	beq.w	8003ed4 <HAL_RCC_OscConfig+0x334>
 8003c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f040 8116 	bne.w	8003ed4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	f000 bfaf 	b.w	8004c0c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cbe:	d106      	bne.n	8003cce <HAL_RCC_OscConfig+0x12e>
 8003cc0:	4b83      	ldr	r3, [pc, #524]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a82      	ldr	r2, [pc, #520]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cca:	6013      	str	r3, [r2, #0]
 8003ccc:	e036      	b.n	8003d3c <HAL_RCC_OscConfig+0x19c>
 8003cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10c      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x158>
 8003cde:	4b7c      	ldr	r3, [pc, #496]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a7b      	ldr	r2, [pc, #492]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	4b79      	ldr	r3, [pc, #484]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a78      	ldr	r2, [pc, #480]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003cf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	e021      	b.n	8003d3c <HAL_RCC_OscConfig+0x19c>
 8003cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cfc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d08:	d10c      	bne.n	8003d24 <HAL_RCC_OscConfig+0x184>
 8003d0a:	4b71      	ldr	r3, [pc, #452]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a70      	ldr	r2, [pc, #448]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	4b6e      	ldr	r3, [pc, #440]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a6d      	ldr	r2, [pc, #436]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	e00b      	b.n	8003d3c <HAL_RCC_OscConfig+0x19c>
 8003d24:	4b6a      	ldr	r3, [pc, #424]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a69      	ldr	r2, [pc, #420]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d2e:	6013      	str	r3, [r2, #0]
 8003d30:	4b67      	ldr	r3, [pc, #412]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a66      	ldr	r2, [pc, #408]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d3a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d3c:	4b64      	ldr	r3, [pc, #400]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d40:	f023 020f 	bic.w	r2, r3, #15
 8003d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	495f      	ldr	r1, [pc, #380]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d059      	beq.n	8003e1a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d66:	f7fe fd0d 	bl	8002784 <HAL_GetTick>
 8003d6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d6e:	e00a      	b.n	8003d86 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d70:	f7fe fd08 	bl	8002784 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b64      	cmp	r3, #100	; 0x64
 8003d7e:	d902      	bls.n	8003d86 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	f000 bf43 	b.w	8004c0c <HAL_RCC_OscConfig+0x106c>
 8003d86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d8a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003d92:	fa93 f3a3 	rbit	r3, r3
 8003d96:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003d9a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d9e:	fab3 f383 	clz	r3, r3
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	095b      	lsrs	r3, r3, #5
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	f043 0301 	orr.w	r3, r3, #1
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d102      	bne.n	8003db8 <HAL_RCC_OscConfig+0x218>
 8003db2:	4b47      	ldr	r3, [pc, #284]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	e015      	b.n	8003de4 <HAL_RCC_OscConfig+0x244>
 8003db8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dbc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003dc4:	fa93 f3a3 	rbit	r3, r3
 8003dc8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003dcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dd0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003dd4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003dd8:	fa93 f3a3 	rbit	r3, r3
 8003ddc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003de0:	4b3b      	ldr	r3, [pc, #236]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003de8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003dec:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003df0:	fa92 f2a2 	rbit	r2, r2
 8003df4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003df8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003dfc:	fab2 f282 	clz	r2, r2
 8003e00:	b2d2      	uxtb	r2, r2
 8003e02:	f042 0220 	orr.w	r2, r2, #32
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	f002 021f 	and.w	r2, r2, #31
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e12:	4013      	ands	r3, r2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0ab      	beq.n	8003d70 <HAL_RCC_OscConfig+0x1d0>
 8003e18:	e05d      	b.n	8003ed6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1a:	f7fe fcb3 	bl	8002784 <HAL_GetTick>
 8003e1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e22:	e00a      	b.n	8003e3a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e24:	f7fe fcae 	bl	8002784 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b64      	cmp	r3, #100	; 0x64
 8003e32:	d902      	bls.n	8003e3a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	f000 bee9 	b.w	8004c0c <HAL_RCC_OscConfig+0x106c>
 8003e3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e3e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e42:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003e46:	fa93 f3a3 	rbit	r3, r3
 8003e4a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003e4e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e52:	fab3 f383 	clz	r3, r3
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	095b      	lsrs	r3, r3, #5
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	f043 0301 	orr.w	r3, r3, #1
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d102      	bne.n	8003e6c <HAL_RCC_OscConfig+0x2cc>
 8003e66:	4b1a      	ldr	r3, [pc, #104]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	e015      	b.n	8003e98 <HAL_RCC_OscConfig+0x2f8>
 8003e6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e70:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e74:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003e78:	fa93 f3a3 	rbit	r3, r3
 8003e7c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003e80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e84:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003e88:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003e8c:	fa93 f3a3 	rbit	r3, r3
 8003e90:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003e94:	4b0e      	ldr	r3, [pc, #56]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e9c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003ea0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003ea4:	fa92 f2a2 	rbit	r2, r2
 8003ea8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003eac:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003eb0:	fab2 f282 	clz	r2, r2
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	f042 0220 	orr.w	r2, r2, #32
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	f002 021f 	and.w	r2, r2, #31
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1ab      	bne.n	8003e24 <HAL_RCC_OscConfig+0x284>
 8003ecc:	e003      	b.n	8003ed6 <HAL_RCC_OscConfig+0x336>
 8003ece:	bf00      	nop
 8003ed0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 817d 	beq.w	80041e6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003eec:	4ba6      	ldr	r3, [pc, #664]	; (8004188 <HAL_RCC_OscConfig+0x5e8>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 030c 	and.w	r3, r3, #12
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00b      	beq.n	8003f10 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ef8:	4ba3      	ldr	r3, [pc, #652]	; (8004188 <HAL_RCC_OscConfig+0x5e8>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 030c 	and.w	r3, r3, #12
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d172      	bne.n	8003fea <HAL_RCC_OscConfig+0x44a>
 8003f04:	4ba0      	ldr	r3, [pc, #640]	; (8004188 <HAL_RCC_OscConfig+0x5e8>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d16c      	bne.n	8003fea <HAL_RCC_OscConfig+0x44a>
 8003f10:	2302      	movs	r3, #2
 8003f12:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f16:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003f1a:	fa93 f3a3 	rbit	r3, r3
 8003f1e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003f22:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f26:	fab3 f383 	clz	r3, r3
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	095b      	lsrs	r3, r3, #5
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d102      	bne.n	8003f40 <HAL_RCC_OscConfig+0x3a0>
 8003f3a:	4b93      	ldr	r3, [pc, #588]	; (8004188 <HAL_RCC_OscConfig+0x5e8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	e013      	b.n	8003f68 <HAL_RCC_OscConfig+0x3c8>
 8003f40:	2302      	movs	r3, #2
 8003f42:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f46:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003f4a:	fa93 f3a3 	rbit	r3, r3
 8003f4e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003f52:	2302      	movs	r3, #2
 8003f54:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003f58:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003f5c:	fa93 f3a3 	rbit	r3, r3
 8003f60:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003f64:	4b88      	ldr	r3, [pc, #544]	; (8004188 <HAL_RCC_OscConfig+0x5e8>)
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	2202      	movs	r2, #2
 8003f6a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003f6e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003f72:	fa92 f2a2 	rbit	r2, r2
 8003f76:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003f7a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003f7e:	fab2 f282 	clz	r2, r2
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	f042 0220 	orr.w	r2, r2, #32
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	f002 021f 	and.w	r2, r2, #31
 8003f8e:	2101      	movs	r1, #1
 8003f90:	fa01 f202 	lsl.w	r2, r1, r2
 8003f94:	4013      	ands	r3, r2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x410>
 8003f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d002      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	f000 be2e 	b.w	8004c0c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb0:	4b75      	ldr	r3, [pc, #468]	; (8004188 <HAL_RCC_OscConfig+0x5e8>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	21f8      	movs	r1, #248	; 0xf8
 8003fc6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fca:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003fce:	fa91 f1a1 	rbit	r1, r1
 8003fd2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003fd6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003fda:	fab1 f181 	clz	r1, r1
 8003fde:	b2c9      	uxtb	r1, r1
 8003fe0:	408b      	lsls	r3, r1
 8003fe2:	4969      	ldr	r1, [pc, #420]	; (8004188 <HAL_RCC_OscConfig+0x5e8>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fe8:	e0fd      	b.n	80041e6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 8088 	beq.w	800410c <HAL_RCC_OscConfig+0x56c>
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004002:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004006:	fa93 f3a3 	rbit	r3, r3
 800400a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800400e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004012:	fab3 f383 	clz	r3, r3
 8004016:	b2db      	uxtb	r3, r3
 8004018:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800401c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	461a      	mov	r2, r3
 8004024:	2301      	movs	r3, #1
 8004026:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004028:	f7fe fbac 	bl	8002784 <HAL_GetTick>
 800402c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004030:	e00a      	b.n	8004048 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004032:	f7fe fba7 	bl	8002784 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d902      	bls.n	8004048 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	f000 bde2 	b.w	8004c0c <HAL_RCC_OscConfig+0x106c>
 8004048:	2302      	movs	r3, #2
 800404a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004052:	fa93 f3a3 	rbit	r3, r3
 8004056:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800405a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800405e:	fab3 f383 	clz	r3, r3
 8004062:	b2db      	uxtb	r3, r3
 8004064:	095b      	lsrs	r3, r3, #5
 8004066:	b2db      	uxtb	r3, r3
 8004068:	f043 0301 	orr.w	r3, r3, #1
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b01      	cmp	r3, #1
 8004070:	d102      	bne.n	8004078 <HAL_RCC_OscConfig+0x4d8>
 8004072:	4b45      	ldr	r3, [pc, #276]	; (8004188 <HAL_RCC_OscConfig+0x5e8>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	e013      	b.n	80040a0 <HAL_RCC_OscConfig+0x500>
 8004078:	2302      	movs	r3, #2
 800407a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004082:	fa93 f3a3 	rbit	r3, r3
 8004086:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800408a:	2302      	movs	r3, #2
 800408c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004090:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004094:	fa93 f3a3 	rbit	r3, r3
 8004098:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800409c:	4b3a      	ldr	r3, [pc, #232]	; (8004188 <HAL_RCC_OscConfig+0x5e8>)
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	2202      	movs	r2, #2
 80040a2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80040a6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80040aa:	fa92 f2a2 	rbit	r2, r2
 80040ae:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80040b2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80040b6:	fab2 f282 	clz	r2, r2
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	f042 0220 	orr.w	r2, r2, #32
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	f002 021f 	and.w	r2, r2, #31
 80040c6:	2101      	movs	r1, #1
 80040c8:	fa01 f202 	lsl.w	r2, r1, r2
 80040cc:	4013      	ands	r3, r2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0af      	beq.n	8004032 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d2:	4b2d      	ldr	r3, [pc, #180]	; (8004188 <HAL_RCC_OscConfig+0x5e8>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	21f8      	movs	r1, #248	; 0xf8
 80040e8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ec:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80040f0:	fa91 f1a1 	rbit	r1, r1
 80040f4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80040f8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80040fc:	fab1 f181 	clz	r1, r1
 8004100:	b2c9      	uxtb	r1, r1
 8004102:	408b      	lsls	r3, r1
 8004104:	4920      	ldr	r1, [pc, #128]	; (8004188 <HAL_RCC_OscConfig+0x5e8>)
 8004106:	4313      	orrs	r3, r2
 8004108:	600b      	str	r3, [r1, #0]
 800410a:	e06c      	b.n	80041e6 <HAL_RCC_OscConfig+0x646>
 800410c:	2301      	movs	r3, #1
 800410e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004112:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004116:	fa93 f3a3 	rbit	r3, r3
 800411a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800411e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004122:	fab3 f383 	clz	r3, r3
 8004126:	b2db      	uxtb	r3, r3
 8004128:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800412c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	461a      	mov	r2, r3
 8004134:	2300      	movs	r3, #0
 8004136:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004138:	f7fe fb24 	bl	8002784 <HAL_GetTick>
 800413c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004140:	e00a      	b.n	8004158 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004142:	f7fe fb1f 	bl	8002784 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d902      	bls.n	8004158 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	f000 bd5a 	b.w	8004c0c <HAL_RCC_OscConfig+0x106c>
 8004158:	2302      	movs	r3, #2
 800415a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004162:	fa93 f3a3 	rbit	r3, r3
 8004166:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800416a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800416e:	fab3 f383 	clz	r3, r3
 8004172:	b2db      	uxtb	r3, r3
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b01      	cmp	r3, #1
 8004180:	d104      	bne.n	800418c <HAL_RCC_OscConfig+0x5ec>
 8004182:	4b01      	ldr	r3, [pc, #4]	; (8004188 <HAL_RCC_OscConfig+0x5e8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	e015      	b.n	80041b4 <HAL_RCC_OscConfig+0x614>
 8004188:	40021000 	.word	0x40021000
 800418c:	2302      	movs	r3, #2
 800418e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004192:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004196:	fa93 f3a3 	rbit	r3, r3
 800419a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800419e:	2302      	movs	r3, #2
 80041a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80041a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80041a8:	fa93 f3a3 	rbit	r3, r3
 80041ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80041b0:	4bc8      	ldr	r3, [pc, #800]	; (80044d4 <HAL_RCC_OscConfig+0x934>)
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	2202      	movs	r2, #2
 80041b6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80041ba:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80041be:	fa92 f2a2 	rbit	r2, r2
 80041c2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80041c6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80041ca:	fab2 f282 	clz	r2, r2
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	f042 0220 	orr.w	r2, r2, #32
 80041d4:	b2d2      	uxtb	r2, r2
 80041d6:	f002 021f 	and.w	r2, r2, #31
 80041da:	2101      	movs	r1, #1
 80041dc:	fa01 f202 	lsl.w	r2, r1, r2
 80041e0:	4013      	ands	r3, r2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1ad      	bne.n	8004142 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 8110 	beq.w	800441c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004200:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d079      	beq.n	8004300 <HAL_RCC_OscConfig+0x760>
 800420c:	2301      	movs	r3, #1
 800420e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004212:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004216:	fa93 f3a3 	rbit	r3, r3
 800421a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800421e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004222:	fab3 f383 	clz	r3, r3
 8004226:	b2db      	uxtb	r3, r3
 8004228:	461a      	mov	r2, r3
 800422a:	4bab      	ldr	r3, [pc, #684]	; (80044d8 <HAL_RCC_OscConfig+0x938>)
 800422c:	4413      	add	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	461a      	mov	r2, r3
 8004232:	2301      	movs	r3, #1
 8004234:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004236:	f7fe faa5 	bl	8002784 <HAL_GetTick>
 800423a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800423e:	e00a      	b.n	8004256 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004240:	f7fe faa0 	bl	8002784 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d902      	bls.n	8004256 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	f000 bcdb 	b.w	8004c0c <HAL_RCC_OscConfig+0x106c>
 8004256:	2302      	movs	r3, #2
 8004258:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004260:	fa93 f3a3 	rbit	r3, r3
 8004264:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800426c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004270:	2202      	movs	r2, #2
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004278:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	fa93 f2a3 	rbit	r2, r3
 8004282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004286:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004294:	2202      	movs	r2, #2
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800429c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	fa93 f2a3 	rbit	r2, r3
 80042a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80042ae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042b0:	4b88      	ldr	r3, [pc, #544]	; (80044d4 <HAL_RCC_OscConfig+0x934>)
 80042b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80042bc:	2102      	movs	r1, #2
 80042be:	6019      	str	r1, [r3, #0]
 80042c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	fa93 f1a3 	rbit	r1, r3
 80042ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80042d6:	6019      	str	r1, [r3, #0]
  return result;
 80042d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042dc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	fab3 f383 	clz	r3, r3
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	f003 031f 	and.w	r3, r3, #31
 80042f2:	2101      	movs	r1, #1
 80042f4:	fa01 f303 	lsl.w	r3, r1, r3
 80042f8:	4013      	ands	r3, r2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0a0      	beq.n	8004240 <HAL_RCC_OscConfig+0x6a0>
 80042fe:	e08d      	b.n	800441c <HAL_RCC_OscConfig+0x87c>
 8004300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004304:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004308:	2201      	movs	r2, #1
 800430a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004310:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	fa93 f2a3 	rbit	r2, r3
 800431a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800431e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004322:	601a      	str	r2, [r3, #0]
  return result;
 8004324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004328:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800432c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800432e:	fab3 f383 	clz	r3, r3
 8004332:	b2db      	uxtb	r3, r3
 8004334:	461a      	mov	r2, r3
 8004336:	4b68      	ldr	r3, [pc, #416]	; (80044d8 <HAL_RCC_OscConfig+0x938>)
 8004338:	4413      	add	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	461a      	mov	r2, r3
 800433e:	2300      	movs	r3, #0
 8004340:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004342:	f7fe fa1f 	bl	8002784 <HAL_GetTick>
 8004346:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800434a:	e00a      	b.n	8004362 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800434c:	f7fe fa1a 	bl	8002784 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d902      	bls.n	8004362 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	f000 bc55 	b.w	8004c0c <HAL_RCC_OscConfig+0x106c>
 8004362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004366:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800436a:	2202      	movs	r2, #2
 800436c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004372:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	fa93 f2a3 	rbit	r2, r3
 800437c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004380:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800438a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800438e:	2202      	movs	r2, #2
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004396:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	fa93 f2a3 	rbit	r2, r3
 80043a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043b2:	2202      	movs	r2, #2
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	fa93 f2a3 	rbit	r2, r3
 80043c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80043cc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ce:	4b41      	ldr	r3, [pc, #260]	; (80044d4 <HAL_RCC_OscConfig+0x934>)
 80043d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80043da:	2102      	movs	r1, #2
 80043dc:	6019      	str	r1, [r3, #0]
 80043de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	fa93 f1a3 	rbit	r1, r3
 80043ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80043f4:	6019      	str	r1, [r3, #0]
  return result;
 80043f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043fa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	fab3 f383 	clz	r3, r3
 8004404:	b2db      	uxtb	r3, r3
 8004406:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800440a:	b2db      	uxtb	r3, r3
 800440c:	f003 031f 	and.w	r3, r3, #31
 8004410:	2101      	movs	r1, #1
 8004412:	fa01 f303 	lsl.w	r3, r1, r3
 8004416:	4013      	ands	r3, r2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d197      	bne.n	800434c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800441c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004420:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 81a1 	beq.w	8004774 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004432:	2300      	movs	r3, #0
 8004434:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004438:	4b26      	ldr	r3, [pc, #152]	; (80044d4 <HAL_RCC_OscConfig+0x934>)
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d116      	bne.n	8004472 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004444:	4b23      	ldr	r3, [pc, #140]	; (80044d4 <HAL_RCC_OscConfig+0x934>)
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	4a22      	ldr	r2, [pc, #136]	; (80044d4 <HAL_RCC_OscConfig+0x934>)
 800444a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800444e:	61d3      	str	r3, [r2, #28]
 8004450:	4b20      	ldr	r3, [pc, #128]	; (80044d4 <HAL_RCC_OscConfig+0x934>)
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800445c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004466:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800446a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800446c:	2301      	movs	r3, #1
 800446e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004472:	4b1a      	ldr	r3, [pc, #104]	; (80044dc <HAL_RCC_OscConfig+0x93c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447a:	2b00      	cmp	r3, #0
 800447c:	d11a      	bne.n	80044b4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800447e:	4b17      	ldr	r3, [pc, #92]	; (80044dc <HAL_RCC_OscConfig+0x93c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a16      	ldr	r2, [pc, #88]	; (80044dc <HAL_RCC_OscConfig+0x93c>)
 8004484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004488:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800448a:	f7fe f97b 	bl	8002784 <HAL_GetTick>
 800448e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004492:	e009      	b.n	80044a8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004494:	f7fe f976 	bl	8002784 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b64      	cmp	r3, #100	; 0x64
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e3b1      	b.n	8004c0c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a8:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <HAL_RCC_OscConfig+0x93c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0ef      	beq.n	8004494 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d10d      	bne.n	80044e0 <HAL_RCC_OscConfig+0x940>
 80044c4:	4b03      	ldr	r3, [pc, #12]	; (80044d4 <HAL_RCC_OscConfig+0x934>)
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	4a02      	ldr	r2, [pc, #8]	; (80044d4 <HAL_RCC_OscConfig+0x934>)
 80044ca:	f043 0301 	orr.w	r3, r3, #1
 80044ce:	6213      	str	r3, [r2, #32]
 80044d0:	e03c      	b.n	800454c <HAL_RCC_OscConfig+0x9ac>
 80044d2:	bf00      	nop
 80044d4:	40021000 	.word	0x40021000
 80044d8:	10908120 	.word	0x10908120
 80044dc:	40007000 	.word	0x40007000
 80044e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10c      	bne.n	800450a <HAL_RCC_OscConfig+0x96a>
 80044f0:	4bc1      	ldr	r3, [pc, #772]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	4ac0      	ldr	r2, [pc, #768]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 80044f6:	f023 0301 	bic.w	r3, r3, #1
 80044fa:	6213      	str	r3, [r2, #32]
 80044fc:	4bbe      	ldr	r3, [pc, #760]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	4abd      	ldr	r2, [pc, #756]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 8004502:	f023 0304 	bic.w	r3, r3, #4
 8004506:	6213      	str	r3, [r2, #32]
 8004508:	e020      	b.n	800454c <HAL_RCC_OscConfig+0x9ac>
 800450a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800450e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	2b05      	cmp	r3, #5
 8004518:	d10c      	bne.n	8004534 <HAL_RCC_OscConfig+0x994>
 800451a:	4bb7      	ldr	r3, [pc, #732]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	4ab6      	ldr	r2, [pc, #728]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 8004520:	f043 0304 	orr.w	r3, r3, #4
 8004524:	6213      	str	r3, [r2, #32]
 8004526:	4bb4      	ldr	r3, [pc, #720]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	4ab3      	ldr	r2, [pc, #716]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 800452c:	f043 0301 	orr.w	r3, r3, #1
 8004530:	6213      	str	r3, [r2, #32]
 8004532:	e00b      	b.n	800454c <HAL_RCC_OscConfig+0x9ac>
 8004534:	4bb0      	ldr	r3, [pc, #704]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	4aaf      	ldr	r2, [pc, #700]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 800453a:	f023 0301 	bic.w	r3, r3, #1
 800453e:	6213      	str	r3, [r2, #32]
 8004540:	4bad      	ldr	r3, [pc, #692]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	4aac      	ldr	r2, [pc, #688]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 8004546:	f023 0304 	bic.w	r3, r3, #4
 800454a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800454c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004550:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 8081 	beq.w	8004660 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800455e:	f7fe f911 	bl	8002784 <HAL_GetTick>
 8004562:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004566:	e00b      	b.n	8004580 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004568:	f7fe f90c 	bl	8002784 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	f241 3288 	movw	r2, #5000	; 0x1388
 8004578:	4293      	cmp	r3, r2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e345      	b.n	8004c0c <HAL_RCC_OscConfig+0x106c>
 8004580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004584:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004588:	2202      	movs	r2, #2
 800458a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004590:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	fa93 f2a3 	rbit	r2, r3
 800459a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800459e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80045ac:	2202      	movs	r2, #2
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045b4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	fa93 f2a3 	rbit	r2, r3
 80045be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045c2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80045c6:	601a      	str	r2, [r3, #0]
  return result;
 80045c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045cc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80045d0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d2:	fab3 f383 	clz	r3, r3
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	095b      	lsrs	r3, r3, #5
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	f043 0302 	orr.w	r3, r3, #2
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d102      	bne.n	80045ec <HAL_RCC_OscConfig+0xa4c>
 80045e6:	4b84      	ldr	r3, [pc, #528]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	e013      	b.n	8004614 <HAL_RCC_OscConfig+0xa74>
 80045ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045f0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80045f4:	2202      	movs	r2, #2
 80045f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045fc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	fa93 f2a3 	rbit	r2, r3
 8004606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800460a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	4b79      	ldr	r3, [pc, #484]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004618:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800461c:	2102      	movs	r1, #2
 800461e:	6011      	str	r1, [r2, #0]
 8004620:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004624:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	fa92 f1a2 	rbit	r1, r2
 800462e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004632:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004636:	6011      	str	r1, [r2, #0]
  return result;
 8004638:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800463c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004640:	6812      	ldr	r2, [r2, #0]
 8004642:	fab2 f282 	clz	r2, r2
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	f002 021f 	and.w	r2, r2, #31
 8004652:	2101      	movs	r1, #1
 8004654:	fa01 f202 	lsl.w	r2, r1, r2
 8004658:	4013      	ands	r3, r2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d084      	beq.n	8004568 <HAL_RCC_OscConfig+0x9c8>
 800465e:	e07f      	b.n	8004760 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004660:	f7fe f890 	bl	8002784 <HAL_GetTick>
 8004664:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004668:	e00b      	b.n	8004682 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800466a:	f7fe f88b 	bl	8002784 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	f241 3288 	movw	r2, #5000	; 0x1388
 800467a:	4293      	cmp	r3, r2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e2c4      	b.n	8004c0c <HAL_RCC_OscConfig+0x106c>
 8004682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004686:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800468a:	2202      	movs	r2, #2
 800468c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004692:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	fa93 f2a3 	rbit	r2, r3
 800469c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046aa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80046ae:	2202      	movs	r2, #2
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046b6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	fa93 f2a3 	rbit	r2, r3
 80046c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046c4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80046c8:	601a      	str	r2, [r3, #0]
  return result;
 80046ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ce:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80046d2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046d4:	fab3 f383 	clz	r3, r3
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	095b      	lsrs	r3, r3, #5
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	f043 0302 	orr.w	r3, r3, #2
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d102      	bne.n	80046ee <HAL_RCC_OscConfig+0xb4e>
 80046e8:	4b43      	ldr	r3, [pc, #268]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	e013      	b.n	8004716 <HAL_RCC_OscConfig+0xb76>
 80046ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046f2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80046f6:	2202      	movs	r2, #2
 80046f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046fe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	fa93 f2a3 	rbit	r2, r3
 8004708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800470c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	4b39      	ldr	r3, [pc, #228]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800471a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800471e:	2102      	movs	r1, #2
 8004720:	6011      	str	r1, [r2, #0]
 8004722:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004726:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800472a:	6812      	ldr	r2, [r2, #0]
 800472c:	fa92 f1a2 	rbit	r1, r2
 8004730:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004734:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004738:	6011      	str	r1, [r2, #0]
  return result;
 800473a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800473e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	fab2 f282 	clz	r2, r2
 8004748:	b2d2      	uxtb	r2, r2
 800474a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	f002 021f 	and.w	r2, r2, #31
 8004754:	2101      	movs	r1, #1
 8004756:	fa01 f202 	lsl.w	r2, r1, r2
 800475a:	4013      	ands	r3, r2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d184      	bne.n	800466a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004760:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004764:	2b01      	cmp	r3, #1
 8004766:	d105      	bne.n	8004774 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004768:	4b23      	ldr	r3, [pc, #140]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 800476a:	69db      	ldr	r3, [r3, #28]
 800476c:	4a22      	ldr	r2, [pc, #136]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 800476e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004772:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004778:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69db      	ldr	r3, [r3, #28]
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 8242 	beq.w	8004c0a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004786:	4b1c      	ldr	r3, [pc, #112]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f003 030c 	and.w	r3, r3, #12
 800478e:	2b08      	cmp	r3, #8
 8004790:	f000 8213 	beq.w	8004bba <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004798:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	f040 8162 	bne.w	8004a6a <HAL_RCC_OscConfig+0xeca>
 80047a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047aa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80047ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	fa93 f2a3 	rbit	r2, r3
 80047c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80047ca:	601a      	str	r2, [r3, #0]
  return result;
 80047cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80047d4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d6:	fab3 f383 	clz	r3, r3
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80047e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	461a      	mov	r2, r3
 80047e8:	2300      	movs	r3, #0
 80047ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ec:	f7fd ffca 	bl	8002784 <HAL_GetTick>
 80047f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047f4:	e00c      	b.n	8004810 <HAL_RCC_OscConfig+0xc70>
 80047f6:	bf00      	nop
 80047f8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047fc:	f7fd ffc2 	bl	8002784 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e1fd      	b.n	8004c0c <HAL_RCC_OscConfig+0x106c>
 8004810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004814:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004818:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800481c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004822:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	fa93 f2a3 	rbit	r2, r3
 800482c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004830:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004834:	601a      	str	r2, [r3, #0]
  return result;
 8004836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800483a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800483e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004840:	fab3 f383 	clz	r3, r3
 8004844:	b2db      	uxtb	r3, r3
 8004846:	095b      	lsrs	r3, r3, #5
 8004848:	b2db      	uxtb	r3, r3
 800484a:	f043 0301 	orr.w	r3, r3, #1
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b01      	cmp	r3, #1
 8004852:	d102      	bne.n	800485a <HAL_RCC_OscConfig+0xcba>
 8004854:	4bb0      	ldr	r3, [pc, #704]	; (8004b18 <HAL_RCC_OscConfig+0xf78>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	e027      	b.n	80048aa <HAL_RCC_OscConfig+0xd0a>
 800485a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800485e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004862:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004866:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800486c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	fa93 f2a3 	rbit	r2, r3
 8004876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800487a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004884:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004888:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004892:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	fa93 f2a3 	rbit	r2, r3
 800489c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	4b9c      	ldr	r3, [pc, #624]	; (8004b18 <HAL_RCC_OscConfig+0xf78>)
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048ae:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80048b2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80048b6:	6011      	str	r1, [r2, #0]
 80048b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048bc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80048c0:	6812      	ldr	r2, [r2, #0]
 80048c2:	fa92 f1a2 	rbit	r1, r2
 80048c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048ca:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80048ce:	6011      	str	r1, [r2, #0]
  return result;
 80048d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048d4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80048d8:	6812      	ldr	r2, [r2, #0]
 80048da:	fab2 f282 	clz	r2, r2
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	f042 0220 	orr.w	r2, r2, #32
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	f002 021f 	and.w	r2, r2, #31
 80048ea:	2101      	movs	r1, #1
 80048ec:	fa01 f202 	lsl.w	r2, r1, r2
 80048f0:	4013      	ands	r3, r2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d182      	bne.n	80047fc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048f6:	4b88      	ldr	r3, [pc, #544]	; (8004b18 <HAL_RCC_OscConfig+0xf78>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80048fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004902:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800490a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800490e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	430b      	orrs	r3, r1
 8004918:	497f      	ldr	r1, [pc, #508]	; (8004b18 <HAL_RCC_OscConfig+0xf78>)
 800491a:	4313      	orrs	r3, r2
 800491c:	604b      	str	r3, [r1, #4]
 800491e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004922:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004926:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800492a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004930:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	fa93 f2a3 	rbit	r2, r3
 800493a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800493e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004942:	601a      	str	r2, [r3, #0]
  return result;
 8004944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004948:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800494c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800494e:	fab3 f383 	clz	r3, r3
 8004952:	b2db      	uxtb	r3, r3
 8004954:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004958:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	461a      	mov	r2, r3
 8004960:	2301      	movs	r3, #1
 8004962:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004964:	f7fd ff0e 	bl	8002784 <HAL_GetTick>
 8004968:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800496c:	e009      	b.n	8004982 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800496e:	f7fd ff09 	bl	8002784 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e144      	b.n	8004c0c <HAL_RCC_OscConfig+0x106c>
 8004982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004986:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800498a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800498e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004994:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	fa93 f2a3 	rbit	r2, r3
 800499e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049a2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80049a6:	601a      	str	r2, [r3, #0]
  return result;
 80049a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ac:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80049b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049b2:	fab3 f383 	clz	r3, r3
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	095b      	lsrs	r3, r3, #5
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	f043 0301 	orr.w	r3, r3, #1
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d102      	bne.n	80049cc <HAL_RCC_OscConfig+0xe2c>
 80049c6:	4b54      	ldr	r3, [pc, #336]	; (8004b18 <HAL_RCC_OscConfig+0xf78>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	e027      	b.n	8004a1c <HAL_RCC_OscConfig+0xe7c>
 80049cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049d0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80049d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049de:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	fa93 f2a3 	rbit	r2, r3
 80049e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ec:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049f6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80049fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a04:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	fa93 f2a3 	rbit	r2, r3
 8004a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a12:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	4b3f      	ldr	r3, [pc, #252]	; (8004b18 <HAL_RCC_OscConfig+0xf78>)
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a20:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004a24:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004a28:	6011      	str	r1, [r2, #0]
 8004a2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a2e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004a32:	6812      	ldr	r2, [r2, #0]
 8004a34:	fa92 f1a2 	rbit	r1, r2
 8004a38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a3c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004a40:	6011      	str	r1, [r2, #0]
  return result;
 8004a42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a46:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004a4a:	6812      	ldr	r2, [r2, #0]
 8004a4c:	fab2 f282 	clz	r2, r2
 8004a50:	b2d2      	uxtb	r2, r2
 8004a52:	f042 0220 	orr.w	r2, r2, #32
 8004a56:	b2d2      	uxtb	r2, r2
 8004a58:	f002 021f 	and.w	r2, r2, #31
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a62:	4013      	ands	r3, r2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d082      	beq.n	800496e <HAL_RCC_OscConfig+0xdce>
 8004a68:	e0cf      	b.n	8004c0a <HAL_RCC_OscConfig+0x106a>
 8004a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a6e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004a72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a7c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	fa93 f2a3 	rbit	r2, r3
 8004a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a8a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004a8e:	601a      	str	r2, [r3, #0]
  return result;
 8004a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a94:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004a98:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a9a:	fab3 f383 	clz	r3, r3
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004aa4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	461a      	mov	r2, r3
 8004aac:	2300      	movs	r3, #0
 8004aae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab0:	f7fd fe68 	bl	8002784 <HAL_GetTick>
 8004ab4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ab8:	e009      	b.n	8004ace <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aba:	f7fd fe63 	bl	8002784 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e09e      	b.n	8004c0c <HAL_RCC_OscConfig+0x106c>
 8004ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004ad6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ada:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ae0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	fa93 f2a3 	rbit	r2, r3
 8004aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aee:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004af2:	601a      	str	r2, [r3, #0]
  return result;
 8004af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004afc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004afe:	fab3 f383 	clz	r3, r3
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	095b      	lsrs	r3, r3, #5
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	f043 0301 	orr.w	r3, r3, #1
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d104      	bne.n	8004b1c <HAL_RCC_OscConfig+0xf7c>
 8004b12:	4b01      	ldr	r3, [pc, #4]	; (8004b18 <HAL_RCC_OscConfig+0xf78>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	e029      	b.n	8004b6c <HAL_RCC_OscConfig+0xfcc>
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b20:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004b24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b2e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	fa93 f2a3 	rbit	r2, r3
 8004b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b3c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b46:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004b4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b54:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	fa93 f2a3 	rbit	r2, r3
 8004b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b62:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	4b2b      	ldr	r3, [pc, #172]	; (8004c18 <HAL_RCC_OscConfig+0x1078>)
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b70:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004b74:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004b78:	6011      	str	r1, [r2, #0]
 8004b7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b7e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004b82:	6812      	ldr	r2, [r2, #0]
 8004b84:	fa92 f1a2 	rbit	r1, r2
 8004b88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b8c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004b90:	6011      	str	r1, [r2, #0]
  return result;
 8004b92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b96:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004b9a:	6812      	ldr	r2, [r2, #0]
 8004b9c:	fab2 f282 	clz	r2, r2
 8004ba0:	b2d2      	uxtb	r2, r2
 8004ba2:	f042 0220 	orr.w	r2, r2, #32
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	f002 021f 	and.w	r2, r2, #31
 8004bac:	2101      	movs	r1, #1
 8004bae:	fa01 f202 	lsl.w	r2, r1, r2
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d180      	bne.n	8004aba <HAL_RCC_OscConfig+0xf1a>
 8004bb8:	e027      	b.n	8004c0a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d101      	bne.n	8004bce <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e01e      	b.n	8004c0c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004bce:	4b12      	ldr	r3, [pc, #72]	; (8004c18 <HAL_RCC_OscConfig+0x1078>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004bd6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004bda:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004be2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d10b      	bne.n	8004c06 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004bee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004bf2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d001      	beq.n	8004c0a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e000      	b.n	8004c0c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	40021000 	.word	0x40021000

08004c1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b09e      	sub	sp, #120	; 0x78
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e162      	b.n	8004efa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c34:	4b90      	ldr	r3, [pc, #576]	; (8004e78 <HAL_RCC_ClockConfig+0x25c>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d910      	bls.n	8004c64 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c42:	4b8d      	ldr	r3, [pc, #564]	; (8004e78 <HAL_RCC_ClockConfig+0x25c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f023 0207 	bic.w	r2, r3, #7
 8004c4a:	498b      	ldr	r1, [pc, #556]	; (8004e78 <HAL_RCC_ClockConfig+0x25c>)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c52:	4b89      	ldr	r3, [pc, #548]	; (8004e78 <HAL_RCC_ClockConfig+0x25c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d001      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e14a      	b.n	8004efa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d008      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c70:	4b82      	ldr	r3, [pc, #520]	; (8004e7c <HAL_RCC_ClockConfig+0x260>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	497f      	ldr	r1, [pc, #508]	; (8004e7c <HAL_RCC_ClockConfig+0x260>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 80dc 	beq.w	8004e48 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d13c      	bne.n	8004d12 <HAL_RCC_ClockConfig+0xf6>
 8004c98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c9c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ca0:	fa93 f3a3 	rbit	r3, r3
 8004ca4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ca8:	fab3 f383 	clz	r3, r3
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	095b      	lsrs	r3, r3, #5
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	f043 0301 	orr.w	r3, r3, #1
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d102      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0xa6>
 8004cbc:	4b6f      	ldr	r3, [pc, #444]	; (8004e7c <HAL_RCC_ClockConfig+0x260>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	e00f      	b.n	8004ce2 <HAL_RCC_ClockConfig+0xc6>
 8004cc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cc6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cca:	fa93 f3a3 	rbit	r3, r3
 8004cce:	667b      	str	r3, [r7, #100]	; 0x64
 8004cd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cd4:	663b      	str	r3, [r7, #96]	; 0x60
 8004cd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cd8:	fa93 f3a3 	rbit	r3, r3
 8004cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cde:	4b67      	ldr	r3, [pc, #412]	; (8004e7c <HAL_RCC_ClockConfig+0x260>)
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ce6:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ce8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cea:	fa92 f2a2 	rbit	r2, r2
 8004cee:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004cf0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004cf2:	fab2 f282 	clz	r2, r2
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	f042 0220 	orr.w	r2, r2, #32
 8004cfc:	b2d2      	uxtb	r2, r2
 8004cfe:	f002 021f 	and.w	r2, r2, #31
 8004d02:	2101      	movs	r1, #1
 8004d04:	fa01 f202 	lsl.w	r2, r1, r2
 8004d08:	4013      	ands	r3, r2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d17b      	bne.n	8004e06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e0f3      	b.n	8004efa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d13c      	bne.n	8004d94 <HAL_RCC_ClockConfig+0x178>
 8004d1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d1e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d22:	fa93 f3a3 	rbit	r3, r3
 8004d26:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d2a:	fab3 f383 	clz	r3, r3
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	095b      	lsrs	r3, r3, #5
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	f043 0301 	orr.w	r3, r3, #1
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d102      	bne.n	8004d44 <HAL_RCC_ClockConfig+0x128>
 8004d3e:	4b4f      	ldr	r3, [pc, #316]	; (8004e7c <HAL_RCC_ClockConfig+0x260>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	e00f      	b.n	8004d64 <HAL_RCC_ClockConfig+0x148>
 8004d44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d4c:	fa93 f3a3 	rbit	r3, r3
 8004d50:	647b      	str	r3, [r7, #68]	; 0x44
 8004d52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d56:	643b      	str	r3, [r7, #64]	; 0x40
 8004d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d5a:	fa93 f3a3 	rbit	r3, r3
 8004d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d60:	4b46      	ldr	r3, [pc, #280]	; (8004e7c <HAL_RCC_ClockConfig+0x260>)
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d68:	63ba      	str	r2, [r7, #56]	; 0x38
 8004d6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d6c:	fa92 f2a2 	rbit	r2, r2
 8004d70:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004d72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d74:	fab2 f282 	clz	r2, r2
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	f042 0220 	orr.w	r2, r2, #32
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	f002 021f 	and.w	r2, r2, #31
 8004d84:	2101      	movs	r1, #1
 8004d86:	fa01 f202 	lsl.w	r2, r1, r2
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d13a      	bne.n	8004e06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e0b2      	b.n	8004efa <HAL_RCC_ClockConfig+0x2de>
 8004d94:	2302      	movs	r3, #2
 8004d96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9a:	fa93 f3a3 	rbit	r3, r3
 8004d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da2:	fab3 f383 	clz	r3, r3
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	095b      	lsrs	r3, r3, #5
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	f043 0301 	orr.w	r3, r3, #1
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d102      	bne.n	8004dbc <HAL_RCC_ClockConfig+0x1a0>
 8004db6:	4b31      	ldr	r3, [pc, #196]	; (8004e7c <HAL_RCC_ClockConfig+0x260>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	e00d      	b.n	8004dd8 <HAL_RCC_ClockConfig+0x1bc>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc2:	fa93 f3a3 	rbit	r3, r3
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc8:	2302      	movs	r3, #2
 8004dca:	623b      	str	r3, [r7, #32]
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	fa93 f3a3 	rbit	r3, r3
 8004dd2:	61fb      	str	r3, [r7, #28]
 8004dd4:	4b29      	ldr	r3, [pc, #164]	; (8004e7c <HAL_RCC_ClockConfig+0x260>)
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	2202      	movs	r2, #2
 8004dda:	61ba      	str	r2, [r7, #24]
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	fa92 f2a2 	rbit	r2, r2
 8004de2:	617a      	str	r2, [r7, #20]
  return result;
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	fab2 f282 	clz	r2, r2
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	f042 0220 	orr.w	r2, r2, #32
 8004df0:	b2d2      	uxtb	r2, r2
 8004df2:	f002 021f 	and.w	r2, r2, #31
 8004df6:	2101      	movs	r1, #1
 8004df8:	fa01 f202 	lsl.w	r2, r1, r2
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e079      	b.n	8004efa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e06:	4b1d      	ldr	r3, [pc, #116]	; (8004e7c <HAL_RCC_ClockConfig+0x260>)
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f023 0203 	bic.w	r2, r3, #3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	491a      	ldr	r1, [pc, #104]	; (8004e7c <HAL_RCC_ClockConfig+0x260>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e18:	f7fd fcb4 	bl	8002784 <HAL_GetTick>
 8004e1c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e1e:	e00a      	b.n	8004e36 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e20:	f7fd fcb0 	bl	8002784 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e061      	b.n	8004efa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e36:	4b11      	ldr	r3, [pc, #68]	; (8004e7c <HAL_RCC_ClockConfig+0x260>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f003 020c 	and.w	r2, r3, #12
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d1eb      	bne.n	8004e20 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e48:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <HAL_RCC_ClockConfig+0x25c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0307 	and.w	r3, r3, #7
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d214      	bcs.n	8004e80 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e56:	4b08      	ldr	r3, [pc, #32]	; (8004e78 <HAL_RCC_ClockConfig+0x25c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f023 0207 	bic.w	r2, r3, #7
 8004e5e:	4906      	ldr	r1, [pc, #24]	; (8004e78 <HAL_RCC_ClockConfig+0x25c>)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e66:	4b04      	ldr	r3, [pc, #16]	; (8004e78 <HAL_RCC_ClockConfig+0x25c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0307 	and.w	r3, r3, #7
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d005      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e040      	b.n	8004efa <HAL_RCC_ClockConfig+0x2de>
 8004e78:	40022000 	.word	0x40022000
 8004e7c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d008      	beq.n	8004e9e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e8c:	4b1d      	ldr	r3, [pc, #116]	; (8004f04 <HAL_RCC_ClockConfig+0x2e8>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	491a      	ldr	r1, [pc, #104]	; (8004f04 <HAL_RCC_ClockConfig+0x2e8>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d009      	beq.n	8004ebe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eaa:	4b16      	ldr	r3, [pc, #88]	; (8004f04 <HAL_RCC_ClockConfig+0x2e8>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	4912      	ldr	r1, [pc, #72]	; (8004f04 <HAL_RCC_ClockConfig+0x2e8>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004ebe:	f000 f829 	bl	8004f14 <HAL_RCC_GetSysClockFreq>
 8004ec2:	4601      	mov	r1, r0
 8004ec4:	4b0f      	ldr	r3, [pc, #60]	; (8004f04 <HAL_RCC_ClockConfig+0x2e8>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ecc:	22f0      	movs	r2, #240	; 0xf0
 8004ece:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	fa92 f2a2 	rbit	r2, r2
 8004ed6:	60fa      	str	r2, [r7, #12]
  return result;
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	fab2 f282 	clz	r2, r2
 8004ede:	b2d2      	uxtb	r2, r2
 8004ee0:	40d3      	lsrs	r3, r2
 8004ee2:	4a09      	ldr	r2, [pc, #36]	; (8004f08 <HAL_RCC_ClockConfig+0x2ec>)
 8004ee4:	5cd3      	ldrb	r3, [r2, r3]
 8004ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8004eea:	4a08      	ldr	r2, [pc, #32]	; (8004f0c <HAL_RCC_ClockConfig+0x2f0>)
 8004eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004eee:	4b08      	ldr	r3, [pc, #32]	; (8004f10 <HAL_RCC_ClockConfig+0x2f4>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fd fc02 	bl	80026fc <HAL_InitTick>
  
  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3778      	adds	r7, #120	; 0x78
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	40021000 	.word	0x40021000
 8004f08:	08008764 	.word	0x08008764
 8004f0c:	200001b8 	.word	0x200001b8
 8004f10:	200001bc 	.word	0x200001bc

08004f14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b08b      	sub	sp, #44	; 0x2c
 8004f18:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	61fb      	str	r3, [r7, #28]
 8004f1e:	2300      	movs	r3, #0
 8004f20:	61bb      	str	r3, [r7, #24]
 8004f22:	2300      	movs	r3, #0
 8004f24:	627b      	str	r3, [r7, #36]	; 0x24
 8004f26:	2300      	movs	r3, #0
 8004f28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004f2e:	4b29      	ldr	r3, [pc, #164]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	f003 030c 	and.w	r3, r3, #12
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	d002      	beq.n	8004f44 <HAL_RCC_GetSysClockFreq+0x30>
 8004f3e:	2b08      	cmp	r3, #8
 8004f40:	d003      	beq.n	8004f4a <HAL_RCC_GetSysClockFreq+0x36>
 8004f42:	e03c      	b.n	8004fbe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f44:	4b24      	ldr	r3, [pc, #144]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004f46:	623b      	str	r3, [r7, #32]
      break;
 8004f48:	e03c      	b.n	8004fc4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004f50:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004f54:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	fa92 f2a2 	rbit	r2, r2
 8004f5c:	607a      	str	r2, [r7, #4]
  return result;
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	fab2 f282 	clz	r2, r2
 8004f64:	b2d2      	uxtb	r2, r2
 8004f66:	40d3      	lsrs	r3, r2
 8004f68:	4a1c      	ldr	r2, [pc, #112]	; (8004fdc <HAL_RCC_GetSysClockFreq+0xc8>)
 8004f6a:	5cd3      	ldrb	r3, [r2, r3]
 8004f6c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004f6e:	4b19      	ldr	r3, [pc, #100]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f72:	f003 030f 	and.w	r3, r3, #15
 8004f76:	220f      	movs	r2, #15
 8004f78:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	fa92 f2a2 	rbit	r2, r2
 8004f80:	60fa      	str	r2, [r7, #12]
  return result;
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	fab2 f282 	clz	r2, r2
 8004f88:	b2d2      	uxtb	r2, r2
 8004f8a:	40d3      	lsrs	r3, r2
 8004f8c:	4a14      	ldr	r2, [pc, #80]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004f8e:	5cd3      	ldrb	r3, [r2, r3]
 8004f90:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d008      	beq.n	8004fae <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f9c:	4a0e      	ldr	r2, [pc, #56]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	fb02 f303 	mul.w	r3, r2, r3
 8004faa:	627b      	str	r3, [r7, #36]	; 0x24
 8004fac:	e004      	b.n	8004fb8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	4a0c      	ldr	r2, [pc, #48]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004fb2:	fb02 f303 	mul.w	r3, r2, r3
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	623b      	str	r3, [r7, #32]
      break;
 8004fbc:	e002      	b.n	8004fc4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004fbe:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004fc0:	623b      	str	r3, [r7, #32]
      break;
 8004fc2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	372c      	adds	r7, #44	; 0x2c
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	007a1200 	.word	0x007a1200
 8004fdc:	0800877c 	.word	0x0800877c
 8004fe0:	0800878c 	.word	0x0800878c
 8004fe4:	003d0900 	.word	0x003d0900

08004fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fec:	4b03      	ldr	r3, [pc, #12]	; (8004ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8004fee:	681b      	ldr	r3, [r3, #0]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	200001b8 	.word	0x200001b8

08005000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005006:	f7ff ffef 	bl	8004fe8 <HAL_RCC_GetHCLKFreq>
 800500a:	4601      	mov	r1, r0
 800500c:	4b0b      	ldr	r3, [pc, #44]	; (800503c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005014:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005018:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	fa92 f2a2 	rbit	r2, r2
 8005020:	603a      	str	r2, [r7, #0]
  return result;
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	fab2 f282 	clz	r2, r2
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	40d3      	lsrs	r3, r2
 800502c:	4a04      	ldr	r2, [pc, #16]	; (8005040 <HAL_RCC_GetPCLK1Freq+0x40>)
 800502e:	5cd3      	ldrb	r3, [r2, r3]
 8005030:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005034:	4618      	mov	r0, r3
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40021000 	.word	0x40021000
 8005040:	08008774 	.word	0x08008774

08005044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800504a:	f7ff ffcd 	bl	8004fe8 <HAL_RCC_GetHCLKFreq>
 800504e:	4601      	mov	r1, r0
 8005050:	4b0b      	ldr	r3, [pc, #44]	; (8005080 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005058:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800505c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	fa92 f2a2 	rbit	r2, r2
 8005064:	603a      	str	r2, [r7, #0]
  return result;
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	fab2 f282 	clz	r2, r2
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	40d3      	lsrs	r3, r2
 8005070:	4a04      	ldr	r2, [pc, #16]	; (8005084 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005072:	5cd3      	ldrb	r3, [r2, r3]
 8005074:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005078:	4618      	mov	r0, r3
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	40021000 	.word	0x40021000
 8005084:	08008774 	.word	0x08008774

08005088 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b092      	sub	sp, #72	; 0x48
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005098:	2300      	movs	r3, #0
 800509a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 80d4 	beq.w	8005254 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ac:	4b4e      	ldr	r3, [pc, #312]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10e      	bne.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050b8:	4b4b      	ldr	r3, [pc, #300]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	4a4a      	ldr	r2, [pc, #296]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c2:	61d3      	str	r3, [r2, #28]
 80050c4:	4b48      	ldr	r3, [pc, #288]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050cc:	60bb      	str	r3, [r7, #8]
 80050ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050d0:	2301      	movs	r3, #1
 80050d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d6:	4b45      	ldr	r3, [pc, #276]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d118      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050e2:	4b42      	ldr	r3, [pc, #264]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a41      	ldr	r2, [pc, #260]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ee:	f7fd fb49 	bl	8002784 <HAL_GetTick>
 80050f2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f4:	e008      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f6:	f7fd fb45 	bl	8002784 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b64      	cmp	r3, #100	; 0x64
 8005102:	d901      	bls.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e14b      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005108:	4b38      	ldr	r3, [pc, #224]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0f0      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005114:	4b34      	ldr	r3, [pc, #208]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800511c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800511e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 8084 	beq.w	800522e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800512e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005130:	429a      	cmp	r2, r3
 8005132:	d07c      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005134:	4b2c      	ldr	r3, [pc, #176]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800513c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800513e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005142:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005146:	fa93 f3a3 	rbit	r3, r3
 800514a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800514c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800514e:	fab3 f383 	clz	r3, r3
 8005152:	b2db      	uxtb	r3, r3
 8005154:	461a      	mov	r2, r3
 8005156:	4b26      	ldr	r3, [pc, #152]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005158:	4413      	add	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	461a      	mov	r2, r3
 800515e:	2301      	movs	r3, #1
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005166:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516a:	fa93 f3a3 	rbit	r3, r3
 800516e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005172:	fab3 f383 	clz	r3, r3
 8005176:	b2db      	uxtb	r3, r3
 8005178:	461a      	mov	r2, r3
 800517a:	4b1d      	ldr	r3, [pc, #116]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800517c:	4413      	add	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	461a      	mov	r2, r3
 8005182:	2300      	movs	r3, #0
 8005184:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005186:	4a18      	ldr	r2, [pc, #96]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800518a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800518c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d04b      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005196:	f7fd faf5 	bl	8002784 <HAL_GetTick>
 800519a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800519c:	e00a      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800519e:	f7fd faf1 	bl	8002784 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e0f5      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80051b4:	2302      	movs	r3, #2
 80051b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	fa93 f3a3 	rbit	r3, r3
 80051be:	627b      	str	r3, [r7, #36]	; 0x24
 80051c0:	2302      	movs	r3, #2
 80051c2:	623b      	str	r3, [r7, #32]
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	fa93 f3a3 	rbit	r3, r3
 80051ca:	61fb      	str	r3, [r7, #28]
  return result;
 80051cc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ce:	fab3 f383 	clz	r3, r3
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	095b      	lsrs	r3, r3, #5
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	f043 0302 	orr.w	r3, r3, #2
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d108      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80051e2:	4b01      	ldr	r3, [pc, #4]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	e00d      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80051e8:	40021000 	.word	0x40021000
 80051ec:	40007000 	.word	0x40007000
 80051f0:	10908100 	.word	0x10908100
 80051f4:	2302      	movs	r3, #2
 80051f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	fa93 f3a3 	rbit	r3, r3
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	4b69      	ldr	r3, [pc, #420]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	2202      	movs	r2, #2
 8005206:	613a      	str	r2, [r7, #16]
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	fa92 f2a2 	rbit	r2, r2
 800520e:	60fa      	str	r2, [r7, #12]
  return result;
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	fab2 f282 	clz	r2, r2
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800521c:	b2d2      	uxtb	r2, r2
 800521e:	f002 021f 	and.w	r2, r2, #31
 8005222:	2101      	movs	r1, #1
 8005224:	fa01 f202 	lsl.w	r2, r1, r2
 8005228:	4013      	ands	r3, r2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0b7      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800522e:	4b5e      	ldr	r3, [pc, #376]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	495b      	ldr	r1, [pc, #364]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800523c:	4313      	orrs	r3, r2
 800523e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005240:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005244:	2b01      	cmp	r3, #1
 8005246:	d105      	bne.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005248:	4b57      	ldr	r3, [pc, #348]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	4a56      	ldr	r2, [pc, #344]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800524e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005252:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	2b00      	cmp	r3, #0
 800525e:	d008      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005260:	4b51      	ldr	r3, [pc, #324]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005264:	f023 0203 	bic.w	r2, r3, #3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	494e      	ldr	r1, [pc, #312]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800526e:	4313      	orrs	r3, r2
 8005270:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b00      	cmp	r3, #0
 800527c:	d008      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800527e:	4b4a      	ldr	r3, [pc, #296]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005282:	f023 0210 	bic.w	r2, r3, #16
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	4947      	ldr	r1, [pc, #284]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800528c:	4313      	orrs	r3, r2
 800528e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d008      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800529c:	4b42      	ldr	r3, [pc, #264]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a8:	493f      	ldr	r1, [pc, #252]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d008      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052ba:	4b3b      	ldr	r3, [pc, #236]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80052bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052be:	f023 0220 	bic.w	r2, r3, #32
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	4938      	ldr	r1, [pc, #224]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d008      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052d8:	4b33      	ldr	r3, [pc, #204]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80052da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052dc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	4930      	ldr	r1, [pc, #192]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d008      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80052f6:	4b2c      	ldr	r3, [pc, #176]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	4929      	ldr	r1, [pc, #164]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005304:	4313      	orrs	r3, r2
 8005306:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005310:	2b00      	cmp	r3, #0
 8005312:	d008      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8005314:	4b24      	ldr	r3, [pc, #144]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005318:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	4921      	ldr	r1, [pc, #132]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005322:	4313      	orrs	r3, r2
 8005324:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d008      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005332:	4b1d      	ldr	r3, [pc, #116]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005336:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	491a      	ldr	r1, [pc, #104]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005340:	4313      	orrs	r3, r2
 8005342:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d008      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005350:	4b15      	ldr	r3, [pc, #84]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005354:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535c:	4912      	ldr	r1, [pc, #72]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800535e:	4313      	orrs	r3, r2
 8005360:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d008      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800536e:	4b0e      	ldr	r3, [pc, #56]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005372:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537a:	490b      	ldr	r1, [pc, #44]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800537c:	4313      	orrs	r3, r2
 800537e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d008      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800538c:	4b06      	ldr	r3, [pc, #24]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800538e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005390:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005398:	4903      	ldr	r1, [pc, #12]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800539a:	4313      	orrs	r3, r2
 800539c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3748      	adds	r7, #72	; 0x48
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40021000 	.word	0x40021000

080053ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e09d      	b.n	80054fa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d108      	bne.n	80053d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053ce:	d009      	beq.n	80053e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	61da      	str	r2, [r3, #28]
 80053d6:	e005      	b.n	80053e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d106      	bne.n	8005404 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7fc ff5c 	bl	80022bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800541a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005424:	d902      	bls.n	800542c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005426:	2300      	movs	r3, #0
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	e002      	b.n	8005432 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800542c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005430:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800543a:	d007      	beq.n	800544c <HAL_SPI_Init+0xa0>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005444:	d002      	beq.n	800544c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800545c:	431a      	orrs	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	431a      	orrs	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800547a:	431a      	orrs	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005484:	431a      	orrs	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800548e:	ea42 0103 	orr.w	r1, r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005496:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	0c1b      	lsrs	r3, r3, #16
 80054a8:	f003 0204 	and.w	r2, r3, #4
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	f003 0310 	and.w	r3, r3, #16
 80054b4:	431a      	orrs	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ba:	f003 0308 	and.w	r3, r3, #8
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80054c8:	ea42 0103 	orr.w	r1, r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69da      	ldr	r2, [r3, #28]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b088      	sub	sp, #32
 8005506:	af00      	add	r7, sp, #0
 8005508:	60f8      	str	r0, [r7, #12]
 800550a:	60b9      	str	r1, [r7, #8]
 800550c:	603b      	str	r3, [r7, #0]
 800550e:	4613      	mov	r3, r2
 8005510:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800551c:	2b01      	cmp	r3, #1
 800551e:	d101      	bne.n	8005524 <HAL_SPI_Transmit+0x22>
 8005520:	2302      	movs	r3, #2
 8005522:	e158      	b.n	80057d6 <HAL_SPI_Transmit+0x2d4>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800552c:	f7fd f92a 	bl	8002784 <HAL_GetTick>
 8005530:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005532:	88fb      	ldrh	r3, [r7, #6]
 8005534:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b01      	cmp	r3, #1
 8005540:	d002      	beq.n	8005548 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005542:	2302      	movs	r3, #2
 8005544:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005546:	e13d      	b.n	80057c4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <HAL_SPI_Transmit+0x52>
 800554e:	88fb      	ldrh	r3, [r7, #6]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d102      	bne.n	800555a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005558:	e134      	b.n	80057c4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2203      	movs	r2, #3
 800555e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	88fa      	ldrh	r2, [r7, #6]
 8005572:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	88fa      	ldrh	r2, [r7, #6]
 8005578:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055a4:	d10f      	bne.n	80055c6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d0:	2b40      	cmp	r3, #64	; 0x40
 80055d2:	d007      	beq.n	80055e4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055ec:	d94b      	bls.n	8005686 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <HAL_SPI_Transmit+0xfa>
 80055f6:	8afb      	ldrh	r3, [r7, #22]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d13e      	bne.n	800567a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005600:	881a      	ldrh	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	1c9a      	adds	r2, r3, #2
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005616:	b29b      	uxth	r3, r3
 8005618:	3b01      	subs	r3, #1
 800561a:	b29a      	uxth	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005620:	e02b      	b.n	800567a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b02      	cmp	r3, #2
 800562e:	d112      	bne.n	8005656 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005634:	881a      	ldrh	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005640:	1c9a      	adds	r2, r3, #2
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800564a:	b29b      	uxth	r3, r3
 800564c:	3b01      	subs	r3, #1
 800564e:	b29a      	uxth	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005654:	e011      	b.n	800567a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005656:	f7fd f895 	bl	8002784 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	429a      	cmp	r2, r3
 8005664:	d803      	bhi.n	800566e <HAL_SPI_Transmit+0x16c>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566c:	d102      	bne.n	8005674 <HAL_SPI_Transmit+0x172>
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d102      	bne.n	800567a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005678:	e0a4      	b.n	80057c4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800567e:	b29b      	uxth	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1ce      	bne.n	8005622 <HAL_SPI_Transmit+0x120>
 8005684:	e07c      	b.n	8005780 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <HAL_SPI_Transmit+0x192>
 800568e:	8afb      	ldrh	r3, [r7, #22]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d170      	bne.n	8005776 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b01      	cmp	r3, #1
 800569c:	d912      	bls.n	80056c4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a2:	881a      	ldrh	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ae:	1c9a      	adds	r2, r3, #2
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3b02      	subs	r3, #2
 80056bc:	b29a      	uxth	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056c2:	e058      	b.n	8005776 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	330c      	adds	r3, #12
 80056ce:	7812      	ldrb	r2, [r2, #0]
 80056d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	3b01      	subs	r3, #1
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80056ea:	e044      	b.n	8005776 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d12b      	bne.n	8005752 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056fe:	b29b      	uxth	r3, r3
 8005700:	2b01      	cmp	r3, #1
 8005702:	d912      	bls.n	800572a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005708:	881a      	ldrh	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005714:	1c9a      	adds	r2, r3, #2
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800571e:	b29b      	uxth	r3, r3
 8005720:	3b02      	subs	r3, #2
 8005722:	b29a      	uxth	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005728:	e025      	b.n	8005776 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	330c      	adds	r3, #12
 8005734:	7812      	ldrb	r2, [r2, #0]
 8005736:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573c:	1c5a      	adds	r2, r3, #1
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005746:	b29b      	uxth	r3, r3
 8005748:	3b01      	subs	r3, #1
 800574a:	b29a      	uxth	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005750:	e011      	b.n	8005776 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005752:	f7fd f817 	bl	8002784 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	429a      	cmp	r2, r3
 8005760:	d803      	bhi.n	800576a <HAL_SPI_Transmit+0x268>
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005768:	d102      	bne.n	8005770 <HAL_SPI_Transmit+0x26e>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d102      	bne.n	8005776 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005774:	e026      	b.n	80057c4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800577a:	b29b      	uxth	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1b5      	bne.n	80056ec <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	6839      	ldr	r1, [r7, #0]
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 fce3 	bl	8006150 <SPI_EndRxTxTransaction>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2220      	movs	r2, #32
 8005794:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10a      	bne.n	80057b4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800579e:	2300      	movs	r3, #0
 80057a0:	613b      	str	r3, [r7, #16]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	613b      	str	r3, [r7, #16]
 80057b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d002      	beq.n	80057c2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	77fb      	strb	r3, [r7, #31]
 80057c0:	e000      	b.n	80057c4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80057c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80057d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3720      	adds	r7, #32
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b088      	sub	sp, #32
 80057e2:	af02      	add	r7, sp, #8
 80057e4:	60f8      	str	r0, [r7, #12]
 80057e6:	60b9      	str	r1, [r7, #8]
 80057e8:	603b      	str	r3, [r7, #0]
 80057ea:	4613      	mov	r3, r2
 80057ec:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057fa:	d112      	bne.n	8005822 <HAL_SPI_Receive+0x44>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10e      	bne.n	8005822 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2204      	movs	r2, #4
 8005808:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800580c:	88fa      	ldrh	r2, [r7, #6]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	4613      	mov	r3, r2
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 f910 	bl	8005a3e <HAL_SPI_TransmitReceive>
 800581e:	4603      	mov	r3, r0
 8005820:	e109      	b.n	8005a36 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005828:	2b01      	cmp	r3, #1
 800582a:	d101      	bne.n	8005830 <HAL_SPI_Receive+0x52>
 800582c:	2302      	movs	r3, #2
 800582e:	e102      	b.n	8005a36 <HAL_SPI_Receive+0x258>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005838:	f7fc ffa4 	bl	8002784 <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b01      	cmp	r3, #1
 8005848:	d002      	beq.n	8005850 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800584a:	2302      	movs	r3, #2
 800584c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800584e:	e0e9      	b.n	8005a24 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <HAL_SPI_Receive+0x7e>
 8005856:	88fb      	ldrh	r3, [r7, #6]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d102      	bne.n	8005862 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005860:	e0e0      	b.n	8005a24 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2204      	movs	r2, #4
 8005866:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	88fa      	ldrh	r2, [r7, #6]
 800587a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	88fa      	ldrh	r2, [r7, #6]
 8005882:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058ac:	d908      	bls.n	80058c0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058bc:	605a      	str	r2, [r3, #4]
 80058be:	e007      	b.n	80058d0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058ce:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058d8:	d10f      	bne.n	80058fa <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058f8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005904:	2b40      	cmp	r3, #64	; 0x40
 8005906:	d007      	beq.n	8005918 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005916:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005920:	d867      	bhi.n	80059f2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005922:	e030      	b.n	8005986 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b01      	cmp	r3, #1
 8005930:	d117      	bne.n	8005962 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f103 020c 	add.w	r2, r3, #12
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	7812      	ldrb	r2, [r2, #0]
 8005940:	b2d2      	uxtb	r2, r2
 8005942:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005948:	1c5a      	adds	r2, r3, #1
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005954:	b29b      	uxth	r3, r3
 8005956:	3b01      	subs	r3, #1
 8005958:	b29a      	uxth	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005960:	e011      	b.n	8005986 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005962:	f7fc ff0f 	bl	8002784 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	429a      	cmp	r2, r3
 8005970:	d803      	bhi.n	800597a <HAL_SPI_Receive+0x19c>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005978:	d102      	bne.n	8005980 <HAL_SPI_Receive+0x1a2>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d102      	bne.n	8005986 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005984:	e04e      	b.n	8005a24 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800598c:	b29b      	uxth	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1c8      	bne.n	8005924 <HAL_SPI_Receive+0x146>
 8005992:	e034      	b.n	80059fe <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d115      	bne.n	80059ce <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68da      	ldr	r2, [r3, #12]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ac:	b292      	uxth	r2, r2
 80059ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b4:	1c9a      	adds	r2, r3, #2
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	3b01      	subs	r3, #1
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80059cc:	e011      	b.n	80059f2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059ce:	f7fc fed9 	bl	8002784 <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d803      	bhi.n	80059e6 <HAL_SPI_Receive+0x208>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e4:	d102      	bne.n	80059ec <HAL_SPI_Receive+0x20e>
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d102      	bne.n	80059f2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80059f0:	e018      	b.n	8005a24 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1ca      	bne.n	8005994 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	6839      	ldr	r1, [r7, #0]
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f000 fb4c 	bl	80060a0 <SPI_EndRxTransaction>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2220      	movs	r2, #32
 8005a12:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	75fb      	strb	r3, [r7, #23]
 8005a20:	e000      	b.n	8005a24 <HAL_SPI_Receive+0x246>
  }

error :
 8005a22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3718      	adds	r7, #24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b08a      	sub	sp, #40	; 0x28
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	60f8      	str	r0, [r7, #12]
 8005a46:	60b9      	str	r1, [r7, #8]
 8005a48:	607a      	str	r2, [r7, #4]
 8005a4a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a50:	2300      	movs	r3, #0
 8005a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d101      	bne.n	8005a64 <HAL_SPI_TransmitReceive+0x26>
 8005a60:	2302      	movs	r3, #2
 8005a62:	e1fb      	b.n	8005e5c <HAL_SPI_TransmitReceive+0x41e>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a6c:	f7fc fe8a 	bl	8002784 <HAL_GetTick>
 8005a70:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a78:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005a80:	887b      	ldrh	r3, [r7, #2]
 8005a82:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005a84:	887b      	ldrh	r3, [r7, #2]
 8005a86:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a88:	7efb      	ldrb	r3, [r7, #27]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d00e      	beq.n	8005aac <HAL_SPI_TransmitReceive+0x6e>
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a94:	d106      	bne.n	8005aa4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d102      	bne.n	8005aa4 <HAL_SPI_TransmitReceive+0x66>
 8005a9e:	7efb      	ldrb	r3, [r7, #27]
 8005aa0:	2b04      	cmp	r3, #4
 8005aa2:	d003      	beq.n	8005aac <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005aaa:	e1cd      	b.n	8005e48 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d005      	beq.n	8005abe <HAL_SPI_TransmitReceive+0x80>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <HAL_SPI_TransmitReceive+0x80>
 8005ab8:	887b      	ldrh	r3, [r7, #2]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d103      	bne.n	8005ac6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005ac4:	e1c0      	b.n	8005e48 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d003      	beq.n	8005ada <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2205      	movs	r2, #5
 8005ad6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	887a      	ldrh	r2, [r7, #2]
 8005aea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	887a      	ldrh	r2, [r7, #2]
 8005af2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	887a      	ldrh	r2, [r7, #2]
 8005b00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	887a      	ldrh	r2, [r7, #2]
 8005b06:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b1c:	d802      	bhi.n	8005b24 <HAL_SPI_TransmitReceive+0xe6>
 8005b1e:	8a3b      	ldrh	r3, [r7, #16]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d908      	bls.n	8005b36 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b32:	605a      	str	r2, [r3, #4]
 8005b34:	e007      	b.n	8005b46 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b44:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b50:	2b40      	cmp	r3, #64	; 0x40
 8005b52:	d007      	beq.n	8005b64 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b6c:	d97c      	bls.n	8005c68 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d002      	beq.n	8005b7c <HAL_SPI_TransmitReceive+0x13e>
 8005b76:	8a7b      	ldrh	r3, [r7, #18]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d169      	bne.n	8005c50 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b80:	881a      	ldrh	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8c:	1c9a      	adds	r2, r3, #2
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ba0:	e056      	b.n	8005c50 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d11b      	bne.n	8005be8 <HAL_SPI_TransmitReceive+0x1aa>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d016      	beq.n	8005be8 <HAL_SPI_TransmitReceive+0x1aa>
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d113      	bne.n	8005be8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc4:	881a      	ldrh	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd0:	1c9a      	adds	r2, r3, #2
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005be4:	2300      	movs	r3, #0
 8005be6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d11c      	bne.n	8005c30 <HAL_SPI_TransmitReceive+0x1f2>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d016      	beq.n	8005c30 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68da      	ldr	r2, [r3, #12]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0c:	b292      	uxth	r2, r2
 8005c0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c14:	1c9a      	adds	r2, r3, #2
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	3b01      	subs	r3, #1
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c30:	f7fc fda8 	bl	8002784 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d807      	bhi.n	8005c50 <HAL_SPI_TransmitReceive+0x212>
 8005c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c46:	d003      	beq.n	8005c50 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005c4e:	e0fb      	b.n	8005e48 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1a3      	bne.n	8005ba2 <HAL_SPI_TransmitReceive+0x164>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d19d      	bne.n	8005ba2 <HAL_SPI_TransmitReceive+0x164>
 8005c66:	e0df      	b.n	8005e28 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d003      	beq.n	8005c78 <HAL_SPI_TransmitReceive+0x23a>
 8005c70:	8a7b      	ldrh	r3, [r7, #18]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	f040 80cb 	bne.w	8005e0e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d912      	bls.n	8005ca8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c86:	881a      	ldrh	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c92:	1c9a      	adds	r2, r3, #2
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	3b02      	subs	r3, #2
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ca6:	e0b2      	b.n	8005e0e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	330c      	adds	r3, #12
 8005cb2:	7812      	ldrb	r2, [r2, #0]
 8005cb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cce:	e09e      	b.n	8005e0e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d134      	bne.n	8005d48 <HAL_SPI_TransmitReceive+0x30a>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d02f      	beq.n	8005d48 <HAL_SPI_TransmitReceive+0x30a>
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d12c      	bne.n	8005d48 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d912      	bls.n	8005d1e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfc:	881a      	ldrh	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d08:	1c9a      	adds	r2, r3, #2
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	3b02      	subs	r3, #2
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d1c:	e012      	b.n	8005d44 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	330c      	adds	r3, #12
 8005d28:	7812      	ldrb	r2, [r2, #0]
 8005d2a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d30:	1c5a      	adds	r2, r3, #1
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d148      	bne.n	8005de8 <HAL_SPI_TransmitReceive+0x3aa>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d042      	beq.n	8005de8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d923      	bls.n	8005db6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68da      	ldr	r2, [r3, #12]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d78:	b292      	uxth	r2, r2
 8005d7a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d80:	1c9a      	adds	r2, r3, #2
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	3b02      	subs	r3, #2
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d81f      	bhi.n	8005de4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005db2:	605a      	str	r2, [r3, #4]
 8005db4:	e016      	b.n	8005de4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f103 020c 	add.w	r2, r3, #12
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc2:	7812      	ldrb	r2, [r2, #0]
 8005dc4:	b2d2      	uxtb	r2, r2
 8005dc6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dcc:	1c5a      	adds	r2, r3, #1
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005de4:	2301      	movs	r3, #1
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005de8:	f7fc fccc 	bl	8002784 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d803      	bhi.n	8005e00 <HAL_SPI_TransmitReceive+0x3c2>
 8005df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfe:	d102      	bne.n	8005e06 <HAL_SPI_TransmitReceive+0x3c8>
 8005e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d103      	bne.n	8005e0e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005e0c:	e01c      	b.n	8005e48 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f47f af5b 	bne.w	8005cd0 <HAL_SPI_TransmitReceive+0x292>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f47f af54 	bne.w	8005cd0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e28:	69fa      	ldr	r2, [r7, #28]
 8005e2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f000 f98f 	bl	8006150 <SPI_EndRxTxTransaction>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d006      	beq.n	8005e46 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2220      	movs	r2, #32
 8005e42:	661a      	str	r2, [r3, #96]	; 0x60
 8005e44:	e000      	b.n	8005e48 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005e46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3728      	adds	r7, #40	; 0x28
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b088      	sub	sp, #32
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	603b      	str	r3, [r7, #0]
 8005e70:	4613      	mov	r3, r2
 8005e72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e74:	f7fc fc86 	bl	8002784 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7c:	1a9b      	subs	r3, r3, r2
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	4413      	add	r3, r2
 8005e82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e84:	f7fc fc7e 	bl	8002784 <HAL_GetTick>
 8005e88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e8a:	4b39      	ldr	r3, [pc, #228]	; (8005f70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	015b      	lsls	r3, r3, #5
 8005e90:	0d1b      	lsrs	r3, r3, #20
 8005e92:	69fa      	ldr	r2, [r7, #28]
 8005e94:	fb02 f303 	mul.w	r3, r2, r3
 8005e98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e9a:	e054      	b.n	8005f46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea2:	d050      	beq.n	8005f46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ea4:	f7fc fc6e 	bl	8002784 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	69fa      	ldr	r2, [r7, #28]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d902      	bls.n	8005eba <SPI_WaitFlagStateUntilTimeout+0x56>
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d13d      	bne.n	8005f36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ec8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ed2:	d111      	bne.n	8005ef8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005edc:	d004      	beq.n	8005ee8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ee6:	d107      	bne.n	8005ef8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ef6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f00:	d10f      	bne.n	8005f22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e017      	b.n	8005f66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	4013      	ands	r3, r2
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	bf0c      	ite	eq
 8005f56:	2301      	moveq	r3, #1
 8005f58:	2300      	movne	r3, #0
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	79fb      	ldrb	r3, [r7, #7]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d19b      	bne.n	8005e9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3720      	adds	r7, #32
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	200001b8 	.word	0x200001b8

08005f74 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08a      	sub	sp, #40	; 0x28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
 8005f80:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f82:	2300      	movs	r3, #0
 8005f84:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f86:	f7fc fbfd 	bl	8002784 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8e:	1a9b      	subs	r3, r3, r2
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	4413      	add	r3, r2
 8005f94:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005f96:	f7fc fbf5 	bl	8002784 <HAL_GetTick>
 8005f9a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	330c      	adds	r3, #12
 8005fa2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005fa4:	4b3d      	ldr	r3, [pc, #244]	; (800609c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	00da      	lsls	r2, r3, #3
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	0d1b      	lsrs	r3, r3, #20
 8005fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fb6:	fb02 f303 	mul.w	r3, r2, r3
 8005fba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005fbc:	e060      	b.n	8006080 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005fc4:	d107      	bne.n	8005fd6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d104      	bne.n	8005fd6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005fd4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fdc:	d050      	beq.n	8006080 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fde:	f7fc fbd1 	bl	8002784 <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	6a3b      	ldr	r3, [r7, #32]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d902      	bls.n	8005ff4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d13d      	bne.n	8006070 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006002:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800600c:	d111      	bne.n	8006032 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006016:	d004      	beq.n	8006022 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006020:	d107      	bne.n	8006032 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006030:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800603a:	d10f      	bne.n	800605c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800604a:	601a      	str	r2, [r3, #0]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800605a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e010      	b.n	8006092 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006076:	2300      	movs	r3, #0
 8006078:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	3b01      	subs	r3, #1
 800607e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689a      	ldr	r2, [r3, #8]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	4013      	ands	r3, r2
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	429a      	cmp	r2, r3
 800608e:	d196      	bne.n	8005fbe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3728      	adds	r7, #40	; 0x28
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	200001b8 	.word	0x200001b8

080060a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af02      	add	r7, sp, #8
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060b4:	d111      	bne.n	80060da <SPI_EndRxTransaction+0x3a>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060be:	d004      	beq.n	80060ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060c8:	d107      	bne.n	80060da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060d8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2200      	movs	r2, #0
 80060e2:	2180      	movs	r1, #128	; 0x80
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f7ff febd 	bl	8005e64 <SPI_WaitFlagStateUntilTimeout>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d007      	beq.n	8006100 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f4:	f043 0220 	orr.w	r2, r3, #32
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e023      	b.n	8006148 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006108:	d11d      	bne.n	8006146 <SPI_EndRxTransaction+0xa6>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006112:	d004      	beq.n	800611e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800611c:	d113      	bne.n	8006146 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	9300      	str	r3, [sp, #0]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	2200      	movs	r2, #0
 8006126:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f7ff ff22 	bl	8005f74 <SPI_WaitFifoStateUntilTimeout>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d007      	beq.n	8006146 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800613a:	f043 0220 	orr.w	r2, r3, #32
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e000      	b.n	8006148 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af02      	add	r7, sp, #8
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	2200      	movs	r2, #0
 8006164:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f7ff ff03 	bl	8005f74 <SPI_WaitFifoStateUntilTimeout>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d007      	beq.n	8006184 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006178:	f043 0220 	orr.w	r2, r3, #32
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e027      	b.n	80061d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	2200      	movs	r2, #0
 800618c:	2180      	movs	r1, #128	; 0x80
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f7ff fe68 	bl	8005e64 <SPI_WaitFlagStateUntilTimeout>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d007      	beq.n	80061aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800619e:	f043 0220 	orr.w	r2, r3, #32
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e014      	b.n	80061d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f7ff fedc 	bl	8005f74 <SPI_WaitFifoStateUntilTimeout>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d007      	beq.n	80061d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061c6:	f043 0220 	orr.w	r2, r3, #32
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e000      	b.n	80061d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e049      	b.n	8006282 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d106      	bne.n	8006208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7fc f89e 	bl	8002344 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2202      	movs	r2, #2
 800620c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	3304      	adds	r3, #4
 8006218:	4619      	mov	r1, r3
 800621a:	4610      	mov	r0, r2
 800621c:	f000 fa9c 	bl	8006758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
	...

0800628c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b01      	cmp	r3, #1
 800629e:	d001      	beq.n	80062a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e033      	b.n	800630c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2202      	movs	r2, #2
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a19      	ldr	r2, [pc, #100]	; (8006318 <HAL_TIM_Base_Start+0x8c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d009      	beq.n	80062ca <HAL_TIM_Base_Start+0x3e>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062be:	d004      	beq.n	80062ca <HAL_TIM_Base_Start+0x3e>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a15      	ldr	r2, [pc, #84]	; (800631c <HAL_TIM_Base_Start+0x90>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d115      	bne.n	80062f6 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	4b13      	ldr	r3, [pc, #76]	; (8006320 <HAL_TIM_Base_Start+0x94>)
 80062d2:	4013      	ands	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2b06      	cmp	r3, #6
 80062da:	d015      	beq.n	8006308 <HAL_TIM_Base_Start+0x7c>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062e2:	d011      	beq.n	8006308 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 0201 	orr.w	r2, r2, #1
 80062f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f4:	e008      	b.n	8006308 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f042 0201 	orr.w	r2, r2, #1
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	e000      	b.n	800630a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006308:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	40012c00 	.word	0x40012c00
 800631c:	40014000 	.word	0x40014000
 8006320:	00010007 	.word	0x00010007

08006324 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	f003 0302 	and.w	r3, r3, #2
 8006336:	2b02      	cmp	r3, #2
 8006338:	d122      	bne.n	8006380 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b02      	cmp	r3, #2
 8006346:	d11b      	bne.n	8006380 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f06f 0202 	mvn.w	r2, #2
 8006350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	f003 0303 	and.w	r3, r3, #3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f9d8 	bl	800671c <HAL_TIM_IC_CaptureCallback>
 800636c:	e005      	b.n	800637a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f9ca 	bl	8006708 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f9db 	bl	8006730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	f003 0304 	and.w	r3, r3, #4
 800638a:	2b04      	cmp	r3, #4
 800638c:	d122      	bne.n	80063d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	2b04      	cmp	r3, #4
 800639a:	d11b      	bne.n	80063d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f06f 0204 	mvn.w	r2, #4
 80063a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2202      	movs	r2, #2
 80063aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d003      	beq.n	80063c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f9ae 	bl	800671c <HAL_TIM_IC_CaptureCallback>
 80063c0:	e005      	b.n	80063ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f9a0 	bl	8006708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f9b1 	bl	8006730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	f003 0308 	and.w	r3, r3, #8
 80063de:	2b08      	cmp	r3, #8
 80063e0:	d122      	bne.n	8006428 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	f003 0308 	and.w	r3, r3, #8
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	d11b      	bne.n	8006428 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f06f 0208 	mvn.w	r2, #8
 80063f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2204      	movs	r2, #4
 80063fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	f003 0303 	and.w	r3, r3, #3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f984 	bl	800671c <HAL_TIM_IC_CaptureCallback>
 8006414:	e005      	b.n	8006422 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f976 	bl	8006708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f987 	bl	8006730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	f003 0310 	and.w	r3, r3, #16
 8006432:	2b10      	cmp	r3, #16
 8006434:	d122      	bne.n	800647c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	f003 0310 	and.w	r3, r3, #16
 8006440:	2b10      	cmp	r3, #16
 8006442:	d11b      	bne.n	800647c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f06f 0210 	mvn.w	r2, #16
 800644c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2208      	movs	r2, #8
 8006452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f95a 	bl	800671c <HAL_TIM_IC_CaptureCallback>
 8006468:	e005      	b.n	8006476 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f94c 	bl	8006708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f95d 	bl	8006730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b01      	cmp	r3, #1
 8006488:	d10e      	bne.n	80064a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b01      	cmp	r3, #1
 8006496:	d107      	bne.n	80064a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f06f 0201 	mvn.w	r2, #1
 80064a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f926 	bl	80066f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b2:	2b80      	cmp	r3, #128	; 0x80
 80064b4:	d10e      	bne.n	80064d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c0:	2b80      	cmp	r3, #128	; 0x80
 80064c2:	d107      	bne.n	80064d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 faba 	bl	8006a48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064e2:	d10e      	bne.n	8006502 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ee:	2b80      	cmp	r3, #128	; 0x80
 80064f0:	d107      	bne.n	8006502 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80064fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 faad 	bl	8006a5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650c:	2b40      	cmp	r3, #64	; 0x40
 800650e:	d10e      	bne.n	800652e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651a:	2b40      	cmp	r3, #64	; 0x40
 800651c:	d107      	bne.n	800652e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 f90b 	bl	8006744 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	f003 0320 	and.w	r3, r3, #32
 8006538:	2b20      	cmp	r3, #32
 800653a:	d10e      	bne.n	800655a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f003 0320 	and.w	r3, r3, #32
 8006546:	2b20      	cmp	r3, #32
 8006548:	d107      	bne.n	800655a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f06f 0220 	mvn.w	r2, #32
 8006552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fa6d 	bl	8006a34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800655a:	bf00      	nop
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b084      	sub	sp, #16
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800656c:	2300      	movs	r3, #0
 800656e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006576:	2b01      	cmp	r3, #1
 8006578:	d101      	bne.n	800657e <HAL_TIM_ConfigClockSource+0x1c>
 800657a:	2302      	movs	r3, #2
 800657c:	e0b6      	b.n	80066ec <HAL_TIM_ConfigClockSource+0x18a>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2202      	movs	r2, #2
 800658a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800659c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065a0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065a8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ba:	d03e      	beq.n	800663a <HAL_TIM_ConfigClockSource+0xd8>
 80065bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065c0:	f200 8087 	bhi.w	80066d2 <HAL_TIM_ConfigClockSource+0x170>
 80065c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c8:	f000 8086 	beq.w	80066d8 <HAL_TIM_ConfigClockSource+0x176>
 80065cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d0:	d87f      	bhi.n	80066d2 <HAL_TIM_ConfigClockSource+0x170>
 80065d2:	2b70      	cmp	r3, #112	; 0x70
 80065d4:	d01a      	beq.n	800660c <HAL_TIM_ConfigClockSource+0xaa>
 80065d6:	2b70      	cmp	r3, #112	; 0x70
 80065d8:	d87b      	bhi.n	80066d2 <HAL_TIM_ConfigClockSource+0x170>
 80065da:	2b60      	cmp	r3, #96	; 0x60
 80065dc:	d050      	beq.n	8006680 <HAL_TIM_ConfigClockSource+0x11e>
 80065de:	2b60      	cmp	r3, #96	; 0x60
 80065e0:	d877      	bhi.n	80066d2 <HAL_TIM_ConfigClockSource+0x170>
 80065e2:	2b50      	cmp	r3, #80	; 0x50
 80065e4:	d03c      	beq.n	8006660 <HAL_TIM_ConfigClockSource+0xfe>
 80065e6:	2b50      	cmp	r3, #80	; 0x50
 80065e8:	d873      	bhi.n	80066d2 <HAL_TIM_ConfigClockSource+0x170>
 80065ea:	2b40      	cmp	r3, #64	; 0x40
 80065ec:	d058      	beq.n	80066a0 <HAL_TIM_ConfigClockSource+0x13e>
 80065ee:	2b40      	cmp	r3, #64	; 0x40
 80065f0:	d86f      	bhi.n	80066d2 <HAL_TIM_ConfigClockSource+0x170>
 80065f2:	2b30      	cmp	r3, #48	; 0x30
 80065f4:	d064      	beq.n	80066c0 <HAL_TIM_ConfigClockSource+0x15e>
 80065f6:	2b30      	cmp	r3, #48	; 0x30
 80065f8:	d86b      	bhi.n	80066d2 <HAL_TIM_ConfigClockSource+0x170>
 80065fa:	2b20      	cmp	r3, #32
 80065fc:	d060      	beq.n	80066c0 <HAL_TIM_ConfigClockSource+0x15e>
 80065fe:	2b20      	cmp	r3, #32
 8006600:	d867      	bhi.n	80066d2 <HAL_TIM_ConfigClockSource+0x170>
 8006602:	2b00      	cmp	r3, #0
 8006604:	d05c      	beq.n	80066c0 <HAL_TIM_ConfigClockSource+0x15e>
 8006606:	2b10      	cmp	r3, #16
 8006608:	d05a      	beq.n	80066c0 <HAL_TIM_ConfigClockSource+0x15e>
 800660a:	e062      	b.n	80066d2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6818      	ldr	r0, [r3, #0]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	6899      	ldr	r1, [r3, #8]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f000 f984 	bl	8006928 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800662e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	609a      	str	r2, [r3, #8]
      break;
 8006638:	e04f      	b.n	80066da <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6818      	ldr	r0, [r3, #0]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	6899      	ldr	r1, [r3, #8]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	f000 f96d 	bl	8006928 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	689a      	ldr	r2, [r3, #8]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800665c:	609a      	str	r2, [r3, #8]
      break;
 800665e:	e03c      	b.n	80066da <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6818      	ldr	r0, [r3, #0]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	6859      	ldr	r1, [r3, #4]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	461a      	mov	r2, r3
 800666e:	f000 f8e1 	bl	8006834 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2150      	movs	r1, #80	; 0x50
 8006678:	4618      	mov	r0, r3
 800667a:	f000 f93a 	bl	80068f2 <TIM_ITRx_SetConfig>
      break;
 800667e:	e02c      	b.n	80066da <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6818      	ldr	r0, [r3, #0]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	6859      	ldr	r1, [r3, #4]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	461a      	mov	r2, r3
 800668e:	f000 f900 	bl	8006892 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2160      	movs	r1, #96	; 0x60
 8006698:	4618      	mov	r0, r3
 800669a:	f000 f92a 	bl	80068f2 <TIM_ITRx_SetConfig>
      break;
 800669e:	e01c      	b.n	80066da <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6818      	ldr	r0, [r3, #0]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	6859      	ldr	r1, [r3, #4]
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	461a      	mov	r2, r3
 80066ae:	f000 f8c1 	bl	8006834 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2140      	movs	r1, #64	; 0x40
 80066b8:	4618      	mov	r0, r3
 80066ba:	f000 f91a 	bl	80068f2 <TIM_ITRx_SetConfig>
      break;
 80066be:	e00c      	b.n	80066da <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4619      	mov	r1, r3
 80066ca:	4610      	mov	r0, r2
 80066cc:	f000 f911 	bl	80068f2 <TIM_ITRx_SetConfig>
      break;
 80066d0:	e003      	b.n	80066da <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	73fb      	strb	r3, [r7, #15]
      break;
 80066d6:	e000      	b.n	80066da <HAL_TIM_ConfigClockSource+0x178>
      break;
 80066d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a2e      	ldr	r2, [pc, #184]	; (8006824 <TIM_Base_SetConfig+0xcc>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d003      	beq.n	8006778 <TIM_Base_SetConfig+0x20>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006776:	d108      	bne.n	800678a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a25      	ldr	r2, [pc, #148]	; (8006824 <TIM_Base_SetConfig+0xcc>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d00f      	beq.n	80067b2 <TIM_Base_SetConfig+0x5a>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006798:	d00b      	beq.n	80067b2 <TIM_Base_SetConfig+0x5a>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a22      	ldr	r2, [pc, #136]	; (8006828 <TIM_Base_SetConfig+0xd0>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d007      	beq.n	80067b2 <TIM_Base_SetConfig+0x5a>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a21      	ldr	r2, [pc, #132]	; (800682c <TIM_Base_SetConfig+0xd4>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d003      	beq.n	80067b2 <TIM_Base_SetConfig+0x5a>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a20      	ldr	r2, [pc, #128]	; (8006830 <TIM_Base_SetConfig+0xd8>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d108      	bne.n	80067c4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	689a      	ldr	r2, [r3, #8]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a0e      	ldr	r2, [pc, #56]	; (8006824 <TIM_Base_SetConfig+0xcc>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d00b      	beq.n	8006808 <TIM_Base_SetConfig+0xb0>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a0d      	ldr	r2, [pc, #52]	; (8006828 <TIM_Base_SetConfig+0xd0>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d007      	beq.n	8006808 <TIM_Base_SetConfig+0xb0>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a0c      	ldr	r2, [pc, #48]	; (800682c <TIM_Base_SetConfig+0xd4>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d003      	beq.n	8006808 <TIM_Base_SetConfig+0xb0>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a0b      	ldr	r2, [pc, #44]	; (8006830 <TIM_Base_SetConfig+0xd8>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d103      	bne.n	8006810 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	691a      	ldr	r2, [r3, #16]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	615a      	str	r2, [r3, #20]
}
 8006816:	bf00      	nop
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	40012c00 	.word	0x40012c00
 8006828:	40014000 	.word	0x40014000
 800682c:	40014400 	.word	0x40014400
 8006830:	40014800 	.word	0x40014800

08006834 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	f023 0201 	bic.w	r2, r3, #1
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800685e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	011b      	lsls	r3, r3, #4
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	4313      	orrs	r3, r2
 8006868:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f023 030a 	bic.w	r3, r3, #10
 8006870:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	4313      	orrs	r3, r2
 8006878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	621a      	str	r2, [r3, #32]
}
 8006886:	bf00      	nop
 8006888:	371c      	adds	r7, #28
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006892:	b480      	push	{r7}
 8006894:	b087      	sub	sp, #28
 8006896:	af00      	add	r7, sp, #0
 8006898:	60f8      	str	r0, [r7, #12]
 800689a:	60b9      	str	r1, [r7, #8]
 800689c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	f023 0210 	bic.w	r2, r3, #16
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6a1b      	ldr	r3, [r3, #32]
 80068b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	031b      	lsls	r3, r3, #12
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	011b      	lsls	r3, r3, #4
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	621a      	str	r2, [r3, #32]
}
 80068e6:	bf00      	nop
 80068e8:	371c      	adds	r7, #28
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b085      	sub	sp, #20
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
 80068fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006908:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800690a:	683a      	ldr	r2, [r7, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4313      	orrs	r3, r2
 8006910:	f043 0307 	orr.w	r3, r3, #7
 8006914:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	609a      	str	r2, [r3, #8]
}
 800691c:	bf00      	nop
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006928:	b480      	push	{r7}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
 8006934:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006942:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	021a      	lsls	r2, r3, #8
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	431a      	orrs	r2, r3
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	4313      	orrs	r3, r2
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	4313      	orrs	r3, r2
 8006954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	609a      	str	r2, [r3, #8]
}
 800695c:	bf00      	nop
 800695e:	371c      	adds	r7, #28
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006978:	2b01      	cmp	r3, #1
 800697a:	d101      	bne.n	8006980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800697c:	2302      	movs	r3, #2
 800697e:	e04f      	b.n	8006a20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2202      	movs	r2, #2
 800698c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a21      	ldr	r2, [pc, #132]	; (8006a2c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d108      	bne.n	80069bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80069b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a14      	ldr	r2, [pc, #80]	; (8006a2c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d009      	beq.n	80069f4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e8:	d004      	beq.n	80069f4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a10      	ldr	r2, [pc, #64]	; (8006a30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d10c      	bne.n	8006a0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	40012c00 	.word	0x40012c00
 8006a30:	40014000 	.word	0x40014000

08006a34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e040      	b.n	8006b04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d106      	bne.n	8006a98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7fb fc94 	bl	80023c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2224      	movs	r2, #36	; 0x24
 8006a9c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f022 0201 	bic.w	r2, r2, #1
 8006aac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f82c 	bl	8006b0c <UART_SetConfig>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d101      	bne.n	8006abe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e022      	b.n	8006b04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d002      	beq.n	8006acc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f956 	bl	8006d78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ada:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689a      	ldr	r2, [r3, #8]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006aea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 0201 	orr.w	r2, r2, #1
 8006afa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 f9dd 	bl	8006ebc <UART_CheckIdleState>
 8006b02:	4603      	mov	r3, r0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b088      	sub	sp, #32
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689a      	ldr	r2, [r3, #8]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	431a      	orrs	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	431a      	orrs	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	69db      	ldr	r3, [r3, #28]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	4b8a      	ldr	r3, [pc, #552]	; (8006d60 <UART_SetConfig+0x254>)
 8006b38:	4013      	ands	r3, r2
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	6812      	ldr	r2, [r2, #0]
 8006b3e:	6979      	ldr	r1, [r7, #20]
 8006b40:	430b      	orrs	r3, r1
 8006b42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68da      	ldr	r2, [r3, #12]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	430a      	orrs	r2, r1
 8006b58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a78      	ldr	r2, [pc, #480]	; (8006d64 <UART_SetConfig+0x258>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d120      	bne.n	8006bca <UART_SetConfig+0xbe>
 8006b88:	4b77      	ldr	r3, [pc, #476]	; (8006d68 <UART_SetConfig+0x25c>)
 8006b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b8c:	f003 0303 	and.w	r3, r3, #3
 8006b90:	2b03      	cmp	r3, #3
 8006b92:	d817      	bhi.n	8006bc4 <UART_SetConfig+0xb8>
 8006b94:	a201      	add	r2, pc, #4	; (adr r2, 8006b9c <UART_SetConfig+0x90>)
 8006b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9a:	bf00      	nop
 8006b9c:	08006bad 	.word	0x08006bad
 8006ba0:	08006bb9 	.word	0x08006bb9
 8006ba4:	08006bbf 	.word	0x08006bbf
 8006ba8:	08006bb3 	.word	0x08006bb3
 8006bac:	2300      	movs	r3, #0
 8006bae:	77fb      	strb	r3, [r7, #31]
 8006bb0:	e01d      	b.n	8006bee <UART_SetConfig+0xe2>
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	77fb      	strb	r3, [r7, #31]
 8006bb6:	e01a      	b.n	8006bee <UART_SetConfig+0xe2>
 8006bb8:	2304      	movs	r3, #4
 8006bba:	77fb      	strb	r3, [r7, #31]
 8006bbc:	e017      	b.n	8006bee <UART_SetConfig+0xe2>
 8006bbe:	2308      	movs	r3, #8
 8006bc0:	77fb      	strb	r3, [r7, #31]
 8006bc2:	e014      	b.n	8006bee <UART_SetConfig+0xe2>
 8006bc4:	2310      	movs	r3, #16
 8006bc6:	77fb      	strb	r3, [r7, #31]
 8006bc8:	e011      	b.n	8006bee <UART_SetConfig+0xe2>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a67      	ldr	r2, [pc, #412]	; (8006d6c <UART_SetConfig+0x260>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d102      	bne.n	8006bda <UART_SetConfig+0xce>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	77fb      	strb	r3, [r7, #31]
 8006bd8:	e009      	b.n	8006bee <UART_SetConfig+0xe2>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a64      	ldr	r2, [pc, #400]	; (8006d70 <UART_SetConfig+0x264>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d102      	bne.n	8006bea <UART_SetConfig+0xde>
 8006be4:	2300      	movs	r3, #0
 8006be6:	77fb      	strb	r3, [r7, #31]
 8006be8:	e001      	b.n	8006bee <UART_SetConfig+0xe2>
 8006bea:	2310      	movs	r3, #16
 8006bec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bf6:	d15b      	bne.n	8006cb0 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8006bf8:	7ffb      	ldrb	r3, [r7, #31]
 8006bfa:	2b08      	cmp	r3, #8
 8006bfc:	d827      	bhi.n	8006c4e <UART_SetConfig+0x142>
 8006bfe:	a201      	add	r2, pc, #4	; (adr r2, 8006c04 <UART_SetConfig+0xf8>)
 8006c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c04:	08006c29 	.word	0x08006c29
 8006c08:	08006c31 	.word	0x08006c31
 8006c0c:	08006c39 	.word	0x08006c39
 8006c10:	08006c4f 	.word	0x08006c4f
 8006c14:	08006c3f 	.word	0x08006c3f
 8006c18:	08006c4f 	.word	0x08006c4f
 8006c1c:	08006c4f 	.word	0x08006c4f
 8006c20:	08006c4f 	.word	0x08006c4f
 8006c24:	08006c47 	.word	0x08006c47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c28:	f7fe f9ea 	bl	8005000 <HAL_RCC_GetPCLK1Freq>
 8006c2c:	61b8      	str	r0, [r7, #24]
        break;
 8006c2e:	e013      	b.n	8006c58 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c30:	f7fe fa08 	bl	8005044 <HAL_RCC_GetPCLK2Freq>
 8006c34:	61b8      	str	r0, [r7, #24]
        break;
 8006c36:	e00f      	b.n	8006c58 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c38:	4b4e      	ldr	r3, [pc, #312]	; (8006d74 <UART_SetConfig+0x268>)
 8006c3a:	61bb      	str	r3, [r7, #24]
        break;
 8006c3c:	e00c      	b.n	8006c58 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c3e:	f7fe f969 	bl	8004f14 <HAL_RCC_GetSysClockFreq>
 8006c42:	61b8      	str	r0, [r7, #24]
        break;
 8006c44:	e008      	b.n	8006c58 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c4a:	61bb      	str	r3, [r7, #24]
        break;
 8006c4c:	e004      	b.n	8006c58 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	77bb      	strb	r3, [r7, #30]
        break;
 8006c56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d074      	beq.n	8006d48 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	005a      	lsls	r2, r3, #1
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	085b      	lsrs	r3, r3, #1
 8006c68:	441a      	add	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	2b0f      	cmp	r3, #15
 8006c7a:	d916      	bls.n	8006caa <UART_SetConfig+0x19e>
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c82:	d212      	bcs.n	8006caa <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	f023 030f 	bic.w	r3, r3, #15
 8006c8c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	085b      	lsrs	r3, r3, #1
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	f003 0307 	and.w	r3, r3, #7
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	89fb      	ldrh	r3, [r7, #14]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	89fa      	ldrh	r2, [r7, #14]
 8006ca6:	60da      	str	r2, [r3, #12]
 8006ca8:	e04e      	b.n	8006d48 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	77bb      	strb	r3, [r7, #30]
 8006cae:	e04b      	b.n	8006d48 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cb0:	7ffb      	ldrb	r3, [r7, #31]
 8006cb2:	2b08      	cmp	r3, #8
 8006cb4:	d827      	bhi.n	8006d06 <UART_SetConfig+0x1fa>
 8006cb6:	a201      	add	r2, pc, #4	; (adr r2, 8006cbc <UART_SetConfig+0x1b0>)
 8006cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbc:	08006ce1 	.word	0x08006ce1
 8006cc0:	08006ce9 	.word	0x08006ce9
 8006cc4:	08006cf1 	.word	0x08006cf1
 8006cc8:	08006d07 	.word	0x08006d07
 8006ccc:	08006cf7 	.word	0x08006cf7
 8006cd0:	08006d07 	.word	0x08006d07
 8006cd4:	08006d07 	.word	0x08006d07
 8006cd8:	08006d07 	.word	0x08006d07
 8006cdc:	08006cff 	.word	0x08006cff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ce0:	f7fe f98e 	bl	8005000 <HAL_RCC_GetPCLK1Freq>
 8006ce4:	61b8      	str	r0, [r7, #24]
        break;
 8006ce6:	e013      	b.n	8006d10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ce8:	f7fe f9ac 	bl	8005044 <HAL_RCC_GetPCLK2Freq>
 8006cec:	61b8      	str	r0, [r7, #24]
        break;
 8006cee:	e00f      	b.n	8006d10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cf0:	4b20      	ldr	r3, [pc, #128]	; (8006d74 <UART_SetConfig+0x268>)
 8006cf2:	61bb      	str	r3, [r7, #24]
        break;
 8006cf4:	e00c      	b.n	8006d10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cf6:	f7fe f90d 	bl	8004f14 <HAL_RCC_GetSysClockFreq>
 8006cfa:	61b8      	str	r0, [r7, #24]
        break;
 8006cfc:	e008      	b.n	8006d10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d02:	61bb      	str	r3, [r7, #24]
        break;
 8006d04:	e004      	b.n	8006d10 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	77bb      	strb	r3, [r7, #30]
        break;
 8006d0e:	bf00      	nop
    }

    if (pclk != 0U)
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d018      	beq.n	8006d48 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	085a      	lsrs	r2, r3, #1
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	441a      	add	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	2b0f      	cmp	r3, #15
 8006d30:	d908      	bls.n	8006d44 <UART_SetConfig+0x238>
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d38:	d204      	bcs.n	8006d44 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	693a      	ldr	r2, [r7, #16]
 8006d40:	60da      	str	r2, [r3, #12]
 8006d42:	e001      	b.n	8006d48 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006d54:	7fbb      	ldrb	r3, [r7, #30]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3720      	adds	r7, #32
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	efff69f3 	.word	0xefff69f3
 8006d64:	40013800 	.word	0x40013800
 8006d68:	40021000 	.word	0x40021000
 8006d6c:	40004400 	.word	0x40004400
 8006d70:	40004800 	.word	0x40004800
 8006d74:	007a1200 	.word	0x007a1200

08006d78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00a      	beq.n	8006da2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00a      	beq.n	8006dc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc8:	f003 0304 	and.w	r3, r3, #4
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00a      	beq.n	8006de6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dea:	f003 0308 	and.w	r3, r3, #8
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00a      	beq.n	8006e08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	430a      	orrs	r2, r1
 8006e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0c:	f003 0310 	and.w	r3, r3, #16
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00a      	beq.n	8006e2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2e:	f003 0320 	and.w	r3, r3, #32
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00a      	beq.n	8006e4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	430a      	orrs	r2, r1
 8006e4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d01a      	beq.n	8006e8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e76:	d10a      	bne.n	8006e8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	430a      	orrs	r2, r1
 8006eae:	605a      	str	r2, [r3, #4]
  }
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af02      	add	r7, sp, #8
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ecc:	f7fb fc5a 	bl	8002784 <HAL_GetTick>
 8006ed0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0308 	and.w	r3, r3, #8
 8006edc:	2b08      	cmp	r3, #8
 8006ede:	d10e      	bne.n	8006efe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ee0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f82d 	bl	8006f4e <UART_WaitOnFlagUntilTimeout>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d001      	beq.n	8006efe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e023      	b.n	8006f46 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0304 	and.w	r3, r3, #4
 8006f08:	2b04      	cmp	r3, #4
 8006f0a:	d10e      	bne.n	8006f2a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 f817 	bl	8006f4e <UART_WaitOnFlagUntilTimeout>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e00d      	b.n	8006f46 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2220      	movs	r2, #32
 8006f2e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2220      	movs	r2, #32
 8006f34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b09c      	sub	sp, #112	; 0x70
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	60f8      	str	r0, [r7, #12]
 8006f56:	60b9      	str	r1, [r7, #8]
 8006f58:	603b      	str	r3, [r7, #0]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f5e:	e0a5      	b.n	80070ac <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f66:	f000 80a1 	beq.w	80070ac <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f6a:	f7fb fc0b 	bl	8002784 <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d302      	bcc.n	8006f80 <UART_WaitOnFlagUntilTimeout+0x32>
 8006f7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d13e      	bne.n	8006ffe <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f88:	e853 3f00 	ldrex	r3, [r3]
 8006f8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f94:	667b      	str	r3, [r7, #100]	; 0x64
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fa0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006fa4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006fa6:	e841 2300 	strex	r3, r2, [r1]
 8006faa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006fac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1e6      	bne.n	8006f80 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	3308      	adds	r3, #8
 8006fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fbc:	e853 3f00 	ldrex	r3, [r3]
 8006fc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc4:	f023 0301 	bic.w	r3, r3, #1
 8006fc8:	663b      	str	r3, [r7, #96]	; 0x60
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3308      	adds	r3, #8
 8006fd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006fd2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006fd4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fda:	e841 2300 	strex	r3, r2, [r1]
 8006fde:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1e5      	bne.n	8006fb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2220      	movs	r2, #32
 8006ff0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e067      	b.n	80070ce <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0304 	and.w	r3, r3, #4
 8007008:	2b00      	cmp	r3, #0
 800700a:	d04f      	beq.n	80070ac <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	69db      	ldr	r3, [r3, #28]
 8007012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800701a:	d147      	bne.n	80070ac <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007024:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702e:	e853 3f00 	ldrex	r3, [r3]
 8007032:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800703a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	461a      	mov	r2, r3
 8007042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007044:	637b      	str	r3, [r7, #52]	; 0x34
 8007046:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007048:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800704a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800704c:	e841 2300 	strex	r3, r2, [r1]
 8007050:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1e6      	bne.n	8007026 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	3308      	adds	r3, #8
 800705e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	e853 3f00 	ldrex	r3, [r3]
 8007066:	613b      	str	r3, [r7, #16]
   return(result);
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	f023 0301 	bic.w	r3, r3, #1
 800706e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	3308      	adds	r3, #8
 8007076:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007078:	623a      	str	r2, [r7, #32]
 800707a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707c:	69f9      	ldr	r1, [r7, #28]
 800707e:	6a3a      	ldr	r2, [r7, #32]
 8007080:	e841 2300 	strex	r3, r2, [r1]
 8007084:	61bb      	str	r3, [r7, #24]
   return(result);
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1e5      	bne.n	8007058 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2220      	movs	r2, #32
 8007090:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2220      	movs	r2, #32
 8007096:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2220      	movs	r2, #32
 800709c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e010      	b.n	80070ce <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	69da      	ldr	r2, [r3, #28]
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	4013      	ands	r3, r2
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	bf0c      	ite	eq
 80070bc:	2301      	moveq	r3, #1
 80070be:	2300      	movne	r3, #0
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	461a      	mov	r2, r3
 80070c4:	79fb      	ldrb	r3, [r7, #7]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	f43f af4a 	beq.w	8006f60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3770      	adds	r7, #112	; 0x70
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
	...

080070d8 <__assert_func>:
 80070d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070da:	4614      	mov	r4, r2
 80070dc:	461a      	mov	r2, r3
 80070de:	4b09      	ldr	r3, [pc, #36]	; (8007104 <__assert_func+0x2c>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4605      	mov	r5, r0
 80070e4:	68d8      	ldr	r0, [r3, #12]
 80070e6:	b14c      	cbz	r4, 80070fc <__assert_func+0x24>
 80070e8:	4b07      	ldr	r3, [pc, #28]	; (8007108 <__assert_func+0x30>)
 80070ea:	9100      	str	r1, [sp, #0]
 80070ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80070f0:	4906      	ldr	r1, [pc, #24]	; (800710c <__assert_func+0x34>)
 80070f2:	462b      	mov	r3, r5
 80070f4:	f000 f814 	bl	8007120 <fiprintf>
 80070f8:	f000 fcb0 	bl	8007a5c <abort>
 80070fc:	4b04      	ldr	r3, [pc, #16]	; (8007110 <__assert_func+0x38>)
 80070fe:	461c      	mov	r4, r3
 8007100:	e7f3      	b.n	80070ea <__assert_func+0x12>
 8007102:	bf00      	nop
 8007104:	200001c4 	.word	0x200001c4
 8007108:	0800879c 	.word	0x0800879c
 800710c:	080087a9 	.word	0x080087a9
 8007110:	080087d7 	.word	0x080087d7

08007114 <__errno>:
 8007114:	4b01      	ldr	r3, [pc, #4]	; (800711c <__errno+0x8>)
 8007116:	6818      	ldr	r0, [r3, #0]
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	200001c4 	.word	0x200001c4

08007120 <fiprintf>:
 8007120:	b40e      	push	{r1, r2, r3}
 8007122:	b503      	push	{r0, r1, lr}
 8007124:	4601      	mov	r1, r0
 8007126:	ab03      	add	r3, sp, #12
 8007128:	4805      	ldr	r0, [pc, #20]	; (8007140 <fiprintf+0x20>)
 800712a:	f853 2b04 	ldr.w	r2, [r3], #4
 800712e:	6800      	ldr	r0, [r0, #0]
 8007130:	9301      	str	r3, [sp, #4]
 8007132:	f000 f86b 	bl	800720c <_vfiprintf_r>
 8007136:	b002      	add	sp, #8
 8007138:	f85d eb04 	ldr.w	lr, [sp], #4
 800713c:	b003      	add	sp, #12
 800713e:	4770      	bx	lr
 8007140:	200001c4 	.word	0x200001c4

08007144 <__libc_init_array>:
 8007144:	b570      	push	{r4, r5, r6, lr}
 8007146:	4d0d      	ldr	r5, [pc, #52]	; (800717c <__libc_init_array+0x38>)
 8007148:	4c0d      	ldr	r4, [pc, #52]	; (8007180 <__libc_init_array+0x3c>)
 800714a:	1b64      	subs	r4, r4, r5
 800714c:	10a4      	asrs	r4, r4, #2
 800714e:	2600      	movs	r6, #0
 8007150:	42a6      	cmp	r6, r4
 8007152:	d109      	bne.n	8007168 <__libc_init_array+0x24>
 8007154:	4d0b      	ldr	r5, [pc, #44]	; (8007184 <__libc_init_array+0x40>)
 8007156:	4c0c      	ldr	r4, [pc, #48]	; (8007188 <__libc_init_array+0x44>)
 8007158:	f001 f8dc 	bl	8008314 <_init>
 800715c:	1b64      	subs	r4, r4, r5
 800715e:	10a4      	asrs	r4, r4, #2
 8007160:	2600      	movs	r6, #0
 8007162:	42a6      	cmp	r6, r4
 8007164:	d105      	bne.n	8007172 <__libc_init_array+0x2e>
 8007166:	bd70      	pop	{r4, r5, r6, pc}
 8007168:	f855 3b04 	ldr.w	r3, [r5], #4
 800716c:	4798      	blx	r3
 800716e:	3601      	adds	r6, #1
 8007170:	e7ee      	b.n	8007150 <__libc_init_array+0xc>
 8007172:	f855 3b04 	ldr.w	r3, [r5], #4
 8007176:	4798      	blx	r3
 8007178:	3601      	adds	r6, #1
 800717a:	e7f2      	b.n	8007162 <__libc_init_array+0x1e>
 800717c:	08008878 	.word	0x08008878
 8007180:	08008878 	.word	0x08008878
 8007184:	08008878 	.word	0x08008878
 8007188:	0800887c 	.word	0x0800887c

0800718c <memcpy>:
 800718c:	440a      	add	r2, r1
 800718e:	4291      	cmp	r1, r2
 8007190:	f100 33ff 	add.w	r3, r0, #4294967295
 8007194:	d100      	bne.n	8007198 <memcpy+0xc>
 8007196:	4770      	bx	lr
 8007198:	b510      	push	{r4, lr}
 800719a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800719e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071a2:	4291      	cmp	r1, r2
 80071a4:	d1f9      	bne.n	800719a <memcpy+0xe>
 80071a6:	bd10      	pop	{r4, pc}

080071a8 <memset>:
 80071a8:	4402      	add	r2, r0
 80071aa:	4603      	mov	r3, r0
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d100      	bne.n	80071b2 <memset+0xa>
 80071b0:	4770      	bx	lr
 80071b2:	f803 1b01 	strb.w	r1, [r3], #1
 80071b6:	e7f9      	b.n	80071ac <memset+0x4>

080071b8 <__sfputc_r>:
 80071b8:	6893      	ldr	r3, [r2, #8]
 80071ba:	3b01      	subs	r3, #1
 80071bc:	2b00      	cmp	r3, #0
 80071be:	b410      	push	{r4}
 80071c0:	6093      	str	r3, [r2, #8]
 80071c2:	da08      	bge.n	80071d6 <__sfputc_r+0x1e>
 80071c4:	6994      	ldr	r4, [r2, #24]
 80071c6:	42a3      	cmp	r3, r4
 80071c8:	db01      	blt.n	80071ce <__sfputc_r+0x16>
 80071ca:	290a      	cmp	r1, #10
 80071cc:	d103      	bne.n	80071d6 <__sfputc_r+0x1e>
 80071ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071d2:	f000 bb83 	b.w	80078dc <__swbuf_r>
 80071d6:	6813      	ldr	r3, [r2, #0]
 80071d8:	1c58      	adds	r0, r3, #1
 80071da:	6010      	str	r0, [r2, #0]
 80071dc:	7019      	strb	r1, [r3, #0]
 80071de:	4608      	mov	r0, r1
 80071e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <__sfputs_r>:
 80071e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e8:	4606      	mov	r6, r0
 80071ea:	460f      	mov	r7, r1
 80071ec:	4614      	mov	r4, r2
 80071ee:	18d5      	adds	r5, r2, r3
 80071f0:	42ac      	cmp	r4, r5
 80071f2:	d101      	bne.n	80071f8 <__sfputs_r+0x12>
 80071f4:	2000      	movs	r0, #0
 80071f6:	e007      	b.n	8007208 <__sfputs_r+0x22>
 80071f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071fc:	463a      	mov	r2, r7
 80071fe:	4630      	mov	r0, r6
 8007200:	f7ff ffda 	bl	80071b8 <__sfputc_r>
 8007204:	1c43      	adds	r3, r0, #1
 8007206:	d1f3      	bne.n	80071f0 <__sfputs_r+0xa>
 8007208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800720c <_vfiprintf_r>:
 800720c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007210:	460d      	mov	r5, r1
 8007212:	b09d      	sub	sp, #116	; 0x74
 8007214:	4614      	mov	r4, r2
 8007216:	4698      	mov	r8, r3
 8007218:	4606      	mov	r6, r0
 800721a:	b118      	cbz	r0, 8007224 <_vfiprintf_r+0x18>
 800721c:	6983      	ldr	r3, [r0, #24]
 800721e:	b90b      	cbnz	r3, 8007224 <_vfiprintf_r+0x18>
 8007220:	f000 fd3e 	bl	8007ca0 <__sinit>
 8007224:	4b89      	ldr	r3, [pc, #548]	; (800744c <_vfiprintf_r+0x240>)
 8007226:	429d      	cmp	r5, r3
 8007228:	d11b      	bne.n	8007262 <_vfiprintf_r+0x56>
 800722a:	6875      	ldr	r5, [r6, #4]
 800722c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800722e:	07d9      	lsls	r1, r3, #31
 8007230:	d405      	bmi.n	800723e <_vfiprintf_r+0x32>
 8007232:	89ab      	ldrh	r3, [r5, #12]
 8007234:	059a      	lsls	r2, r3, #22
 8007236:	d402      	bmi.n	800723e <_vfiprintf_r+0x32>
 8007238:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800723a:	f000 fdcf 	bl	8007ddc <__retarget_lock_acquire_recursive>
 800723e:	89ab      	ldrh	r3, [r5, #12]
 8007240:	071b      	lsls	r3, r3, #28
 8007242:	d501      	bpl.n	8007248 <_vfiprintf_r+0x3c>
 8007244:	692b      	ldr	r3, [r5, #16]
 8007246:	b9eb      	cbnz	r3, 8007284 <_vfiprintf_r+0x78>
 8007248:	4629      	mov	r1, r5
 800724a:	4630      	mov	r0, r6
 800724c:	f000 fb98 	bl	8007980 <__swsetup_r>
 8007250:	b1c0      	cbz	r0, 8007284 <_vfiprintf_r+0x78>
 8007252:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007254:	07dc      	lsls	r4, r3, #31
 8007256:	d50e      	bpl.n	8007276 <_vfiprintf_r+0x6a>
 8007258:	f04f 30ff 	mov.w	r0, #4294967295
 800725c:	b01d      	add	sp, #116	; 0x74
 800725e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007262:	4b7b      	ldr	r3, [pc, #492]	; (8007450 <_vfiprintf_r+0x244>)
 8007264:	429d      	cmp	r5, r3
 8007266:	d101      	bne.n	800726c <_vfiprintf_r+0x60>
 8007268:	68b5      	ldr	r5, [r6, #8]
 800726a:	e7df      	b.n	800722c <_vfiprintf_r+0x20>
 800726c:	4b79      	ldr	r3, [pc, #484]	; (8007454 <_vfiprintf_r+0x248>)
 800726e:	429d      	cmp	r5, r3
 8007270:	bf08      	it	eq
 8007272:	68f5      	ldreq	r5, [r6, #12]
 8007274:	e7da      	b.n	800722c <_vfiprintf_r+0x20>
 8007276:	89ab      	ldrh	r3, [r5, #12]
 8007278:	0598      	lsls	r0, r3, #22
 800727a:	d4ed      	bmi.n	8007258 <_vfiprintf_r+0x4c>
 800727c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800727e:	f000 fdae 	bl	8007dde <__retarget_lock_release_recursive>
 8007282:	e7e9      	b.n	8007258 <_vfiprintf_r+0x4c>
 8007284:	2300      	movs	r3, #0
 8007286:	9309      	str	r3, [sp, #36]	; 0x24
 8007288:	2320      	movs	r3, #32
 800728a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800728e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007292:	2330      	movs	r3, #48	; 0x30
 8007294:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007458 <_vfiprintf_r+0x24c>
 8007298:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800729c:	f04f 0901 	mov.w	r9, #1
 80072a0:	4623      	mov	r3, r4
 80072a2:	469a      	mov	sl, r3
 80072a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072a8:	b10a      	cbz	r2, 80072ae <_vfiprintf_r+0xa2>
 80072aa:	2a25      	cmp	r2, #37	; 0x25
 80072ac:	d1f9      	bne.n	80072a2 <_vfiprintf_r+0x96>
 80072ae:	ebba 0b04 	subs.w	fp, sl, r4
 80072b2:	d00b      	beq.n	80072cc <_vfiprintf_r+0xc0>
 80072b4:	465b      	mov	r3, fp
 80072b6:	4622      	mov	r2, r4
 80072b8:	4629      	mov	r1, r5
 80072ba:	4630      	mov	r0, r6
 80072bc:	f7ff ff93 	bl	80071e6 <__sfputs_r>
 80072c0:	3001      	adds	r0, #1
 80072c2:	f000 80aa 	beq.w	800741a <_vfiprintf_r+0x20e>
 80072c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072c8:	445a      	add	r2, fp
 80072ca:	9209      	str	r2, [sp, #36]	; 0x24
 80072cc:	f89a 3000 	ldrb.w	r3, [sl]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 80a2 	beq.w	800741a <_vfiprintf_r+0x20e>
 80072d6:	2300      	movs	r3, #0
 80072d8:	f04f 32ff 	mov.w	r2, #4294967295
 80072dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072e0:	f10a 0a01 	add.w	sl, sl, #1
 80072e4:	9304      	str	r3, [sp, #16]
 80072e6:	9307      	str	r3, [sp, #28]
 80072e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072ec:	931a      	str	r3, [sp, #104]	; 0x68
 80072ee:	4654      	mov	r4, sl
 80072f0:	2205      	movs	r2, #5
 80072f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072f6:	4858      	ldr	r0, [pc, #352]	; (8007458 <_vfiprintf_r+0x24c>)
 80072f8:	f7f8 ff6a 	bl	80001d0 <memchr>
 80072fc:	9a04      	ldr	r2, [sp, #16]
 80072fe:	b9d8      	cbnz	r0, 8007338 <_vfiprintf_r+0x12c>
 8007300:	06d1      	lsls	r1, r2, #27
 8007302:	bf44      	itt	mi
 8007304:	2320      	movmi	r3, #32
 8007306:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800730a:	0713      	lsls	r3, r2, #28
 800730c:	bf44      	itt	mi
 800730e:	232b      	movmi	r3, #43	; 0x2b
 8007310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007314:	f89a 3000 	ldrb.w	r3, [sl]
 8007318:	2b2a      	cmp	r3, #42	; 0x2a
 800731a:	d015      	beq.n	8007348 <_vfiprintf_r+0x13c>
 800731c:	9a07      	ldr	r2, [sp, #28]
 800731e:	4654      	mov	r4, sl
 8007320:	2000      	movs	r0, #0
 8007322:	f04f 0c0a 	mov.w	ip, #10
 8007326:	4621      	mov	r1, r4
 8007328:	f811 3b01 	ldrb.w	r3, [r1], #1
 800732c:	3b30      	subs	r3, #48	; 0x30
 800732e:	2b09      	cmp	r3, #9
 8007330:	d94e      	bls.n	80073d0 <_vfiprintf_r+0x1c4>
 8007332:	b1b0      	cbz	r0, 8007362 <_vfiprintf_r+0x156>
 8007334:	9207      	str	r2, [sp, #28]
 8007336:	e014      	b.n	8007362 <_vfiprintf_r+0x156>
 8007338:	eba0 0308 	sub.w	r3, r0, r8
 800733c:	fa09 f303 	lsl.w	r3, r9, r3
 8007340:	4313      	orrs	r3, r2
 8007342:	9304      	str	r3, [sp, #16]
 8007344:	46a2      	mov	sl, r4
 8007346:	e7d2      	b.n	80072ee <_vfiprintf_r+0xe2>
 8007348:	9b03      	ldr	r3, [sp, #12]
 800734a:	1d19      	adds	r1, r3, #4
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	9103      	str	r1, [sp, #12]
 8007350:	2b00      	cmp	r3, #0
 8007352:	bfbb      	ittet	lt
 8007354:	425b      	neglt	r3, r3
 8007356:	f042 0202 	orrlt.w	r2, r2, #2
 800735a:	9307      	strge	r3, [sp, #28]
 800735c:	9307      	strlt	r3, [sp, #28]
 800735e:	bfb8      	it	lt
 8007360:	9204      	strlt	r2, [sp, #16]
 8007362:	7823      	ldrb	r3, [r4, #0]
 8007364:	2b2e      	cmp	r3, #46	; 0x2e
 8007366:	d10c      	bne.n	8007382 <_vfiprintf_r+0x176>
 8007368:	7863      	ldrb	r3, [r4, #1]
 800736a:	2b2a      	cmp	r3, #42	; 0x2a
 800736c:	d135      	bne.n	80073da <_vfiprintf_r+0x1ce>
 800736e:	9b03      	ldr	r3, [sp, #12]
 8007370:	1d1a      	adds	r2, r3, #4
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	9203      	str	r2, [sp, #12]
 8007376:	2b00      	cmp	r3, #0
 8007378:	bfb8      	it	lt
 800737a:	f04f 33ff 	movlt.w	r3, #4294967295
 800737e:	3402      	adds	r4, #2
 8007380:	9305      	str	r3, [sp, #20]
 8007382:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007468 <_vfiprintf_r+0x25c>
 8007386:	7821      	ldrb	r1, [r4, #0]
 8007388:	2203      	movs	r2, #3
 800738a:	4650      	mov	r0, sl
 800738c:	f7f8 ff20 	bl	80001d0 <memchr>
 8007390:	b140      	cbz	r0, 80073a4 <_vfiprintf_r+0x198>
 8007392:	2340      	movs	r3, #64	; 0x40
 8007394:	eba0 000a 	sub.w	r0, r0, sl
 8007398:	fa03 f000 	lsl.w	r0, r3, r0
 800739c:	9b04      	ldr	r3, [sp, #16]
 800739e:	4303      	orrs	r3, r0
 80073a0:	3401      	adds	r4, #1
 80073a2:	9304      	str	r3, [sp, #16]
 80073a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073a8:	482c      	ldr	r0, [pc, #176]	; (800745c <_vfiprintf_r+0x250>)
 80073aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073ae:	2206      	movs	r2, #6
 80073b0:	f7f8 ff0e 	bl	80001d0 <memchr>
 80073b4:	2800      	cmp	r0, #0
 80073b6:	d03f      	beq.n	8007438 <_vfiprintf_r+0x22c>
 80073b8:	4b29      	ldr	r3, [pc, #164]	; (8007460 <_vfiprintf_r+0x254>)
 80073ba:	bb1b      	cbnz	r3, 8007404 <_vfiprintf_r+0x1f8>
 80073bc:	9b03      	ldr	r3, [sp, #12]
 80073be:	3307      	adds	r3, #7
 80073c0:	f023 0307 	bic.w	r3, r3, #7
 80073c4:	3308      	adds	r3, #8
 80073c6:	9303      	str	r3, [sp, #12]
 80073c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ca:	443b      	add	r3, r7
 80073cc:	9309      	str	r3, [sp, #36]	; 0x24
 80073ce:	e767      	b.n	80072a0 <_vfiprintf_r+0x94>
 80073d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80073d4:	460c      	mov	r4, r1
 80073d6:	2001      	movs	r0, #1
 80073d8:	e7a5      	b.n	8007326 <_vfiprintf_r+0x11a>
 80073da:	2300      	movs	r3, #0
 80073dc:	3401      	adds	r4, #1
 80073de:	9305      	str	r3, [sp, #20]
 80073e0:	4619      	mov	r1, r3
 80073e2:	f04f 0c0a 	mov.w	ip, #10
 80073e6:	4620      	mov	r0, r4
 80073e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073ec:	3a30      	subs	r2, #48	; 0x30
 80073ee:	2a09      	cmp	r2, #9
 80073f0:	d903      	bls.n	80073fa <_vfiprintf_r+0x1ee>
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d0c5      	beq.n	8007382 <_vfiprintf_r+0x176>
 80073f6:	9105      	str	r1, [sp, #20]
 80073f8:	e7c3      	b.n	8007382 <_vfiprintf_r+0x176>
 80073fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80073fe:	4604      	mov	r4, r0
 8007400:	2301      	movs	r3, #1
 8007402:	e7f0      	b.n	80073e6 <_vfiprintf_r+0x1da>
 8007404:	ab03      	add	r3, sp, #12
 8007406:	9300      	str	r3, [sp, #0]
 8007408:	462a      	mov	r2, r5
 800740a:	4b16      	ldr	r3, [pc, #88]	; (8007464 <_vfiprintf_r+0x258>)
 800740c:	a904      	add	r1, sp, #16
 800740e:	4630      	mov	r0, r6
 8007410:	f3af 8000 	nop.w
 8007414:	4607      	mov	r7, r0
 8007416:	1c78      	adds	r0, r7, #1
 8007418:	d1d6      	bne.n	80073c8 <_vfiprintf_r+0x1bc>
 800741a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800741c:	07d9      	lsls	r1, r3, #31
 800741e:	d405      	bmi.n	800742c <_vfiprintf_r+0x220>
 8007420:	89ab      	ldrh	r3, [r5, #12]
 8007422:	059a      	lsls	r2, r3, #22
 8007424:	d402      	bmi.n	800742c <_vfiprintf_r+0x220>
 8007426:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007428:	f000 fcd9 	bl	8007dde <__retarget_lock_release_recursive>
 800742c:	89ab      	ldrh	r3, [r5, #12]
 800742e:	065b      	lsls	r3, r3, #25
 8007430:	f53f af12 	bmi.w	8007258 <_vfiprintf_r+0x4c>
 8007434:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007436:	e711      	b.n	800725c <_vfiprintf_r+0x50>
 8007438:	ab03      	add	r3, sp, #12
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	462a      	mov	r2, r5
 800743e:	4b09      	ldr	r3, [pc, #36]	; (8007464 <_vfiprintf_r+0x258>)
 8007440:	a904      	add	r1, sp, #16
 8007442:	4630      	mov	r0, r6
 8007444:	f000 f880 	bl	8007548 <_printf_i>
 8007448:	e7e4      	b.n	8007414 <_vfiprintf_r+0x208>
 800744a:	bf00      	nop
 800744c:	08008830 	.word	0x08008830
 8007450:	08008850 	.word	0x08008850
 8007454:	08008810 	.word	0x08008810
 8007458:	080087dc 	.word	0x080087dc
 800745c:	080087e6 	.word	0x080087e6
 8007460:	00000000 	.word	0x00000000
 8007464:	080071e7 	.word	0x080071e7
 8007468:	080087e2 	.word	0x080087e2

0800746c <_printf_common>:
 800746c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007470:	4616      	mov	r6, r2
 8007472:	4699      	mov	r9, r3
 8007474:	688a      	ldr	r2, [r1, #8]
 8007476:	690b      	ldr	r3, [r1, #16]
 8007478:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800747c:	4293      	cmp	r3, r2
 800747e:	bfb8      	it	lt
 8007480:	4613      	movlt	r3, r2
 8007482:	6033      	str	r3, [r6, #0]
 8007484:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007488:	4607      	mov	r7, r0
 800748a:	460c      	mov	r4, r1
 800748c:	b10a      	cbz	r2, 8007492 <_printf_common+0x26>
 800748e:	3301      	adds	r3, #1
 8007490:	6033      	str	r3, [r6, #0]
 8007492:	6823      	ldr	r3, [r4, #0]
 8007494:	0699      	lsls	r1, r3, #26
 8007496:	bf42      	ittt	mi
 8007498:	6833      	ldrmi	r3, [r6, #0]
 800749a:	3302      	addmi	r3, #2
 800749c:	6033      	strmi	r3, [r6, #0]
 800749e:	6825      	ldr	r5, [r4, #0]
 80074a0:	f015 0506 	ands.w	r5, r5, #6
 80074a4:	d106      	bne.n	80074b4 <_printf_common+0x48>
 80074a6:	f104 0a19 	add.w	sl, r4, #25
 80074aa:	68e3      	ldr	r3, [r4, #12]
 80074ac:	6832      	ldr	r2, [r6, #0]
 80074ae:	1a9b      	subs	r3, r3, r2
 80074b0:	42ab      	cmp	r3, r5
 80074b2:	dc26      	bgt.n	8007502 <_printf_common+0x96>
 80074b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074b8:	1e13      	subs	r3, r2, #0
 80074ba:	6822      	ldr	r2, [r4, #0]
 80074bc:	bf18      	it	ne
 80074be:	2301      	movne	r3, #1
 80074c0:	0692      	lsls	r2, r2, #26
 80074c2:	d42b      	bmi.n	800751c <_printf_common+0xb0>
 80074c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074c8:	4649      	mov	r1, r9
 80074ca:	4638      	mov	r0, r7
 80074cc:	47c0      	blx	r8
 80074ce:	3001      	adds	r0, #1
 80074d0:	d01e      	beq.n	8007510 <_printf_common+0xa4>
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	68e5      	ldr	r5, [r4, #12]
 80074d6:	6832      	ldr	r2, [r6, #0]
 80074d8:	f003 0306 	and.w	r3, r3, #6
 80074dc:	2b04      	cmp	r3, #4
 80074de:	bf08      	it	eq
 80074e0:	1aad      	subeq	r5, r5, r2
 80074e2:	68a3      	ldr	r3, [r4, #8]
 80074e4:	6922      	ldr	r2, [r4, #16]
 80074e6:	bf0c      	ite	eq
 80074e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074ec:	2500      	movne	r5, #0
 80074ee:	4293      	cmp	r3, r2
 80074f0:	bfc4      	itt	gt
 80074f2:	1a9b      	subgt	r3, r3, r2
 80074f4:	18ed      	addgt	r5, r5, r3
 80074f6:	2600      	movs	r6, #0
 80074f8:	341a      	adds	r4, #26
 80074fa:	42b5      	cmp	r5, r6
 80074fc:	d11a      	bne.n	8007534 <_printf_common+0xc8>
 80074fe:	2000      	movs	r0, #0
 8007500:	e008      	b.n	8007514 <_printf_common+0xa8>
 8007502:	2301      	movs	r3, #1
 8007504:	4652      	mov	r2, sl
 8007506:	4649      	mov	r1, r9
 8007508:	4638      	mov	r0, r7
 800750a:	47c0      	blx	r8
 800750c:	3001      	adds	r0, #1
 800750e:	d103      	bne.n	8007518 <_printf_common+0xac>
 8007510:	f04f 30ff 	mov.w	r0, #4294967295
 8007514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007518:	3501      	adds	r5, #1
 800751a:	e7c6      	b.n	80074aa <_printf_common+0x3e>
 800751c:	18e1      	adds	r1, r4, r3
 800751e:	1c5a      	adds	r2, r3, #1
 8007520:	2030      	movs	r0, #48	; 0x30
 8007522:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007526:	4422      	add	r2, r4
 8007528:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800752c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007530:	3302      	adds	r3, #2
 8007532:	e7c7      	b.n	80074c4 <_printf_common+0x58>
 8007534:	2301      	movs	r3, #1
 8007536:	4622      	mov	r2, r4
 8007538:	4649      	mov	r1, r9
 800753a:	4638      	mov	r0, r7
 800753c:	47c0      	blx	r8
 800753e:	3001      	adds	r0, #1
 8007540:	d0e6      	beq.n	8007510 <_printf_common+0xa4>
 8007542:	3601      	adds	r6, #1
 8007544:	e7d9      	b.n	80074fa <_printf_common+0x8e>
	...

08007548 <_printf_i>:
 8007548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800754c:	7e0f      	ldrb	r7, [r1, #24]
 800754e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007550:	2f78      	cmp	r7, #120	; 0x78
 8007552:	4691      	mov	r9, r2
 8007554:	4680      	mov	r8, r0
 8007556:	460c      	mov	r4, r1
 8007558:	469a      	mov	sl, r3
 800755a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800755e:	d807      	bhi.n	8007570 <_printf_i+0x28>
 8007560:	2f62      	cmp	r7, #98	; 0x62
 8007562:	d80a      	bhi.n	800757a <_printf_i+0x32>
 8007564:	2f00      	cmp	r7, #0
 8007566:	f000 80d8 	beq.w	800771a <_printf_i+0x1d2>
 800756a:	2f58      	cmp	r7, #88	; 0x58
 800756c:	f000 80a3 	beq.w	80076b6 <_printf_i+0x16e>
 8007570:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007574:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007578:	e03a      	b.n	80075f0 <_printf_i+0xa8>
 800757a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800757e:	2b15      	cmp	r3, #21
 8007580:	d8f6      	bhi.n	8007570 <_printf_i+0x28>
 8007582:	a101      	add	r1, pc, #4	; (adr r1, 8007588 <_printf_i+0x40>)
 8007584:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007588:	080075e1 	.word	0x080075e1
 800758c:	080075f5 	.word	0x080075f5
 8007590:	08007571 	.word	0x08007571
 8007594:	08007571 	.word	0x08007571
 8007598:	08007571 	.word	0x08007571
 800759c:	08007571 	.word	0x08007571
 80075a0:	080075f5 	.word	0x080075f5
 80075a4:	08007571 	.word	0x08007571
 80075a8:	08007571 	.word	0x08007571
 80075ac:	08007571 	.word	0x08007571
 80075b0:	08007571 	.word	0x08007571
 80075b4:	08007701 	.word	0x08007701
 80075b8:	08007625 	.word	0x08007625
 80075bc:	080076e3 	.word	0x080076e3
 80075c0:	08007571 	.word	0x08007571
 80075c4:	08007571 	.word	0x08007571
 80075c8:	08007723 	.word	0x08007723
 80075cc:	08007571 	.word	0x08007571
 80075d0:	08007625 	.word	0x08007625
 80075d4:	08007571 	.word	0x08007571
 80075d8:	08007571 	.word	0x08007571
 80075dc:	080076eb 	.word	0x080076eb
 80075e0:	682b      	ldr	r3, [r5, #0]
 80075e2:	1d1a      	adds	r2, r3, #4
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	602a      	str	r2, [r5, #0]
 80075e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075f0:	2301      	movs	r3, #1
 80075f2:	e0a3      	b.n	800773c <_printf_i+0x1f4>
 80075f4:	6820      	ldr	r0, [r4, #0]
 80075f6:	6829      	ldr	r1, [r5, #0]
 80075f8:	0606      	lsls	r6, r0, #24
 80075fa:	f101 0304 	add.w	r3, r1, #4
 80075fe:	d50a      	bpl.n	8007616 <_printf_i+0xce>
 8007600:	680e      	ldr	r6, [r1, #0]
 8007602:	602b      	str	r3, [r5, #0]
 8007604:	2e00      	cmp	r6, #0
 8007606:	da03      	bge.n	8007610 <_printf_i+0xc8>
 8007608:	232d      	movs	r3, #45	; 0x2d
 800760a:	4276      	negs	r6, r6
 800760c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007610:	485e      	ldr	r0, [pc, #376]	; (800778c <_printf_i+0x244>)
 8007612:	230a      	movs	r3, #10
 8007614:	e019      	b.n	800764a <_printf_i+0x102>
 8007616:	680e      	ldr	r6, [r1, #0]
 8007618:	602b      	str	r3, [r5, #0]
 800761a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800761e:	bf18      	it	ne
 8007620:	b236      	sxthne	r6, r6
 8007622:	e7ef      	b.n	8007604 <_printf_i+0xbc>
 8007624:	682b      	ldr	r3, [r5, #0]
 8007626:	6820      	ldr	r0, [r4, #0]
 8007628:	1d19      	adds	r1, r3, #4
 800762a:	6029      	str	r1, [r5, #0]
 800762c:	0601      	lsls	r1, r0, #24
 800762e:	d501      	bpl.n	8007634 <_printf_i+0xec>
 8007630:	681e      	ldr	r6, [r3, #0]
 8007632:	e002      	b.n	800763a <_printf_i+0xf2>
 8007634:	0646      	lsls	r6, r0, #25
 8007636:	d5fb      	bpl.n	8007630 <_printf_i+0xe8>
 8007638:	881e      	ldrh	r6, [r3, #0]
 800763a:	4854      	ldr	r0, [pc, #336]	; (800778c <_printf_i+0x244>)
 800763c:	2f6f      	cmp	r7, #111	; 0x6f
 800763e:	bf0c      	ite	eq
 8007640:	2308      	moveq	r3, #8
 8007642:	230a      	movne	r3, #10
 8007644:	2100      	movs	r1, #0
 8007646:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800764a:	6865      	ldr	r5, [r4, #4]
 800764c:	60a5      	str	r5, [r4, #8]
 800764e:	2d00      	cmp	r5, #0
 8007650:	bfa2      	ittt	ge
 8007652:	6821      	ldrge	r1, [r4, #0]
 8007654:	f021 0104 	bicge.w	r1, r1, #4
 8007658:	6021      	strge	r1, [r4, #0]
 800765a:	b90e      	cbnz	r6, 8007660 <_printf_i+0x118>
 800765c:	2d00      	cmp	r5, #0
 800765e:	d04d      	beq.n	80076fc <_printf_i+0x1b4>
 8007660:	4615      	mov	r5, r2
 8007662:	fbb6 f1f3 	udiv	r1, r6, r3
 8007666:	fb03 6711 	mls	r7, r3, r1, r6
 800766a:	5dc7      	ldrb	r7, [r0, r7]
 800766c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007670:	4637      	mov	r7, r6
 8007672:	42bb      	cmp	r3, r7
 8007674:	460e      	mov	r6, r1
 8007676:	d9f4      	bls.n	8007662 <_printf_i+0x11a>
 8007678:	2b08      	cmp	r3, #8
 800767a:	d10b      	bne.n	8007694 <_printf_i+0x14c>
 800767c:	6823      	ldr	r3, [r4, #0]
 800767e:	07de      	lsls	r6, r3, #31
 8007680:	d508      	bpl.n	8007694 <_printf_i+0x14c>
 8007682:	6923      	ldr	r3, [r4, #16]
 8007684:	6861      	ldr	r1, [r4, #4]
 8007686:	4299      	cmp	r1, r3
 8007688:	bfde      	ittt	le
 800768a:	2330      	movle	r3, #48	; 0x30
 800768c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007690:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007694:	1b52      	subs	r2, r2, r5
 8007696:	6122      	str	r2, [r4, #16]
 8007698:	f8cd a000 	str.w	sl, [sp]
 800769c:	464b      	mov	r3, r9
 800769e:	aa03      	add	r2, sp, #12
 80076a0:	4621      	mov	r1, r4
 80076a2:	4640      	mov	r0, r8
 80076a4:	f7ff fee2 	bl	800746c <_printf_common>
 80076a8:	3001      	adds	r0, #1
 80076aa:	d14c      	bne.n	8007746 <_printf_i+0x1fe>
 80076ac:	f04f 30ff 	mov.w	r0, #4294967295
 80076b0:	b004      	add	sp, #16
 80076b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076b6:	4835      	ldr	r0, [pc, #212]	; (800778c <_printf_i+0x244>)
 80076b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80076bc:	6829      	ldr	r1, [r5, #0]
 80076be:	6823      	ldr	r3, [r4, #0]
 80076c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80076c4:	6029      	str	r1, [r5, #0]
 80076c6:	061d      	lsls	r5, r3, #24
 80076c8:	d514      	bpl.n	80076f4 <_printf_i+0x1ac>
 80076ca:	07df      	lsls	r7, r3, #31
 80076cc:	bf44      	itt	mi
 80076ce:	f043 0320 	orrmi.w	r3, r3, #32
 80076d2:	6023      	strmi	r3, [r4, #0]
 80076d4:	b91e      	cbnz	r6, 80076de <_printf_i+0x196>
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	f023 0320 	bic.w	r3, r3, #32
 80076dc:	6023      	str	r3, [r4, #0]
 80076de:	2310      	movs	r3, #16
 80076e0:	e7b0      	b.n	8007644 <_printf_i+0xfc>
 80076e2:	6823      	ldr	r3, [r4, #0]
 80076e4:	f043 0320 	orr.w	r3, r3, #32
 80076e8:	6023      	str	r3, [r4, #0]
 80076ea:	2378      	movs	r3, #120	; 0x78
 80076ec:	4828      	ldr	r0, [pc, #160]	; (8007790 <_printf_i+0x248>)
 80076ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80076f2:	e7e3      	b.n	80076bc <_printf_i+0x174>
 80076f4:	0659      	lsls	r1, r3, #25
 80076f6:	bf48      	it	mi
 80076f8:	b2b6      	uxthmi	r6, r6
 80076fa:	e7e6      	b.n	80076ca <_printf_i+0x182>
 80076fc:	4615      	mov	r5, r2
 80076fe:	e7bb      	b.n	8007678 <_printf_i+0x130>
 8007700:	682b      	ldr	r3, [r5, #0]
 8007702:	6826      	ldr	r6, [r4, #0]
 8007704:	6961      	ldr	r1, [r4, #20]
 8007706:	1d18      	adds	r0, r3, #4
 8007708:	6028      	str	r0, [r5, #0]
 800770a:	0635      	lsls	r5, r6, #24
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	d501      	bpl.n	8007714 <_printf_i+0x1cc>
 8007710:	6019      	str	r1, [r3, #0]
 8007712:	e002      	b.n	800771a <_printf_i+0x1d2>
 8007714:	0670      	lsls	r0, r6, #25
 8007716:	d5fb      	bpl.n	8007710 <_printf_i+0x1c8>
 8007718:	8019      	strh	r1, [r3, #0]
 800771a:	2300      	movs	r3, #0
 800771c:	6123      	str	r3, [r4, #16]
 800771e:	4615      	mov	r5, r2
 8007720:	e7ba      	b.n	8007698 <_printf_i+0x150>
 8007722:	682b      	ldr	r3, [r5, #0]
 8007724:	1d1a      	adds	r2, r3, #4
 8007726:	602a      	str	r2, [r5, #0]
 8007728:	681d      	ldr	r5, [r3, #0]
 800772a:	6862      	ldr	r2, [r4, #4]
 800772c:	2100      	movs	r1, #0
 800772e:	4628      	mov	r0, r5
 8007730:	f7f8 fd4e 	bl	80001d0 <memchr>
 8007734:	b108      	cbz	r0, 800773a <_printf_i+0x1f2>
 8007736:	1b40      	subs	r0, r0, r5
 8007738:	6060      	str	r0, [r4, #4]
 800773a:	6863      	ldr	r3, [r4, #4]
 800773c:	6123      	str	r3, [r4, #16]
 800773e:	2300      	movs	r3, #0
 8007740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007744:	e7a8      	b.n	8007698 <_printf_i+0x150>
 8007746:	6923      	ldr	r3, [r4, #16]
 8007748:	462a      	mov	r2, r5
 800774a:	4649      	mov	r1, r9
 800774c:	4640      	mov	r0, r8
 800774e:	47d0      	blx	sl
 8007750:	3001      	adds	r0, #1
 8007752:	d0ab      	beq.n	80076ac <_printf_i+0x164>
 8007754:	6823      	ldr	r3, [r4, #0]
 8007756:	079b      	lsls	r3, r3, #30
 8007758:	d413      	bmi.n	8007782 <_printf_i+0x23a>
 800775a:	68e0      	ldr	r0, [r4, #12]
 800775c:	9b03      	ldr	r3, [sp, #12]
 800775e:	4298      	cmp	r0, r3
 8007760:	bfb8      	it	lt
 8007762:	4618      	movlt	r0, r3
 8007764:	e7a4      	b.n	80076b0 <_printf_i+0x168>
 8007766:	2301      	movs	r3, #1
 8007768:	4632      	mov	r2, r6
 800776a:	4649      	mov	r1, r9
 800776c:	4640      	mov	r0, r8
 800776e:	47d0      	blx	sl
 8007770:	3001      	adds	r0, #1
 8007772:	d09b      	beq.n	80076ac <_printf_i+0x164>
 8007774:	3501      	adds	r5, #1
 8007776:	68e3      	ldr	r3, [r4, #12]
 8007778:	9903      	ldr	r1, [sp, #12]
 800777a:	1a5b      	subs	r3, r3, r1
 800777c:	42ab      	cmp	r3, r5
 800777e:	dcf2      	bgt.n	8007766 <_printf_i+0x21e>
 8007780:	e7eb      	b.n	800775a <_printf_i+0x212>
 8007782:	2500      	movs	r5, #0
 8007784:	f104 0619 	add.w	r6, r4, #25
 8007788:	e7f5      	b.n	8007776 <_printf_i+0x22e>
 800778a:	bf00      	nop
 800778c:	080087ed 	.word	0x080087ed
 8007790:	080087fe 	.word	0x080087fe

08007794 <iprintf>:
 8007794:	b40f      	push	{r0, r1, r2, r3}
 8007796:	4b0a      	ldr	r3, [pc, #40]	; (80077c0 <iprintf+0x2c>)
 8007798:	b513      	push	{r0, r1, r4, lr}
 800779a:	681c      	ldr	r4, [r3, #0]
 800779c:	b124      	cbz	r4, 80077a8 <iprintf+0x14>
 800779e:	69a3      	ldr	r3, [r4, #24]
 80077a0:	b913      	cbnz	r3, 80077a8 <iprintf+0x14>
 80077a2:	4620      	mov	r0, r4
 80077a4:	f000 fa7c 	bl	8007ca0 <__sinit>
 80077a8:	ab05      	add	r3, sp, #20
 80077aa:	9a04      	ldr	r2, [sp, #16]
 80077ac:	68a1      	ldr	r1, [r4, #8]
 80077ae:	9301      	str	r3, [sp, #4]
 80077b0:	4620      	mov	r0, r4
 80077b2:	f7ff fd2b 	bl	800720c <_vfiprintf_r>
 80077b6:	b002      	add	sp, #8
 80077b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077bc:	b004      	add	sp, #16
 80077be:	4770      	bx	lr
 80077c0:	200001c4 	.word	0x200001c4

080077c4 <putchar>:
 80077c4:	4b09      	ldr	r3, [pc, #36]	; (80077ec <putchar+0x28>)
 80077c6:	b513      	push	{r0, r1, r4, lr}
 80077c8:	681c      	ldr	r4, [r3, #0]
 80077ca:	4601      	mov	r1, r0
 80077cc:	b134      	cbz	r4, 80077dc <putchar+0x18>
 80077ce:	69a3      	ldr	r3, [r4, #24]
 80077d0:	b923      	cbnz	r3, 80077dc <putchar+0x18>
 80077d2:	9001      	str	r0, [sp, #4]
 80077d4:	4620      	mov	r0, r4
 80077d6:	f000 fa63 	bl	8007ca0 <__sinit>
 80077da:	9901      	ldr	r1, [sp, #4]
 80077dc:	68a2      	ldr	r2, [r4, #8]
 80077de:	4620      	mov	r0, r4
 80077e0:	b002      	add	sp, #8
 80077e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077e6:	f000 bc41 	b.w	800806c <_putc_r>
 80077ea:	bf00      	nop
 80077ec:	200001c4 	.word	0x200001c4

080077f0 <_puts_r>:
 80077f0:	b570      	push	{r4, r5, r6, lr}
 80077f2:	460e      	mov	r6, r1
 80077f4:	4605      	mov	r5, r0
 80077f6:	b118      	cbz	r0, 8007800 <_puts_r+0x10>
 80077f8:	6983      	ldr	r3, [r0, #24]
 80077fa:	b90b      	cbnz	r3, 8007800 <_puts_r+0x10>
 80077fc:	f000 fa50 	bl	8007ca0 <__sinit>
 8007800:	69ab      	ldr	r3, [r5, #24]
 8007802:	68ac      	ldr	r4, [r5, #8]
 8007804:	b913      	cbnz	r3, 800780c <_puts_r+0x1c>
 8007806:	4628      	mov	r0, r5
 8007808:	f000 fa4a 	bl	8007ca0 <__sinit>
 800780c:	4b2c      	ldr	r3, [pc, #176]	; (80078c0 <_puts_r+0xd0>)
 800780e:	429c      	cmp	r4, r3
 8007810:	d120      	bne.n	8007854 <_puts_r+0x64>
 8007812:	686c      	ldr	r4, [r5, #4]
 8007814:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007816:	07db      	lsls	r3, r3, #31
 8007818:	d405      	bmi.n	8007826 <_puts_r+0x36>
 800781a:	89a3      	ldrh	r3, [r4, #12]
 800781c:	0598      	lsls	r0, r3, #22
 800781e:	d402      	bmi.n	8007826 <_puts_r+0x36>
 8007820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007822:	f000 fadb 	bl	8007ddc <__retarget_lock_acquire_recursive>
 8007826:	89a3      	ldrh	r3, [r4, #12]
 8007828:	0719      	lsls	r1, r3, #28
 800782a:	d51d      	bpl.n	8007868 <_puts_r+0x78>
 800782c:	6923      	ldr	r3, [r4, #16]
 800782e:	b1db      	cbz	r3, 8007868 <_puts_r+0x78>
 8007830:	3e01      	subs	r6, #1
 8007832:	68a3      	ldr	r3, [r4, #8]
 8007834:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007838:	3b01      	subs	r3, #1
 800783a:	60a3      	str	r3, [r4, #8]
 800783c:	bb39      	cbnz	r1, 800788e <_puts_r+0x9e>
 800783e:	2b00      	cmp	r3, #0
 8007840:	da38      	bge.n	80078b4 <_puts_r+0xc4>
 8007842:	4622      	mov	r2, r4
 8007844:	210a      	movs	r1, #10
 8007846:	4628      	mov	r0, r5
 8007848:	f000 f848 	bl	80078dc <__swbuf_r>
 800784c:	3001      	adds	r0, #1
 800784e:	d011      	beq.n	8007874 <_puts_r+0x84>
 8007850:	250a      	movs	r5, #10
 8007852:	e011      	b.n	8007878 <_puts_r+0x88>
 8007854:	4b1b      	ldr	r3, [pc, #108]	; (80078c4 <_puts_r+0xd4>)
 8007856:	429c      	cmp	r4, r3
 8007858:	d101      	bne.n	800785e <_puts_r+0x6e>
 800785a:	68ac      	ldr	r4, [r5, #8]
 800785c:	e7da      	b.n	8007814 <_puts_r+0x24>
 800785e:	4b1a      	ldr	r3, [pc, #104]	; (80078c8 <_puts_r+0xd8>)
 8007860:	429c      	cmp	r4, r3
 8007862:	bf08      	it	eq
 8007864:	68ec      	ldreq	r4, [r5, #12]
 8007866:	e7d5      	b.n	8007814 <_puts_r+0x24>
 8007868:	4621      	mov	r1, r4
 800786a:	4628      	mov	r0, r5
 800786c:	f000 f888 	bl	8007980 <__swsetup_r>
 8007870:	2800      	cmp	r0, #0
 8007872:	d0dd      	beq.n	8007830 <_puts_r+0x40>
 8007874:	f04f 35ff 	mov.w	r5, #4294967295
 8007878:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800787a:	07da      	lsls	r2, r3, #31
 800787c:	d405      	bmi.n	800788a <_puts_r+0x9a>
 800787e:	89a3      	ldrh	r3, [r4, #12]
 8007880:	059b      	lsls	r3, r3, #22
 8007882:	d402      	bmi.n	800788a <_puts_r+0x9a>
 8007884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007886:	f000 faaa 	bl	8007dde <__retarget_lock_release_recursive>
 800788a:	4628      	mov	r0, r5
 800788c:	bd70      	pop	{r4, r5, r6, pc}
 800788e:	2b00      	cmp	r3, #0
 8007890:	da04      	bge.n	800789c <_puts_r+0xac>
 8007892:	69a2      	ldr	r2, [r4, #24]
 8007894:	429a      	cmp	r2, r3
 8007896:	dc06      	bgt.n	80078a6 <_puts_r+0xb6>
 8007898:	290a      	cmp	r1, #10
 800789a:	d004      	beq.n	80078a6 <_puts_r+0xb6>
 800789c:	6823      	ldr	r3, [r4, #0]
 800789e:	1c5a      	adds	r2, r3, #1
 80078a0:	6022      	str	r2, [r4, #0]
 80078a2:	7019      	strb	r1, [r3, #0]
 80078a4:	e7c5      	b.n	8007832 <_puts_r+0x42>
 80078a6:	4622      	mov	r2, r4
 80078a8:	4628      	mov	r0, r5
 80078aa:	f000 f817 	bl	80078dc <__swbuf_r>
 80078ae:	3001      	adds	r0, #1
 80078b0:	d1bf      	bne.n	8007832 <_puts_r+0x42>
 80078b2:	e7df      	b.n	8007874 <_puts_r+0x84>
 80078b4:	6823      	ldr	r3, [r4, #0]
 80078b6:	250a      	movs	r5, #10
 80078b8:	1c5a      	adds	r2, r3, #1
 80078ba:	6022      	str	r2, [r4, #0]
 80078bc:	701d      	strb	r5, [r3, #0]
 80078be:	e7db      	b.n	8007878 <_puts_r+0x88>
 80078c0:	08008830 	.word	0x08008830
 80078c4:	08008850 	.word	0x08008850
 80078c8:	08008810 	.word	0x08008810

080078cc <puts>:
 80078cc:	4b02      	ldr	r3, [pc, #8]	; (80078d8 <puts+0xc>)
 80078ce:	4601      	mov	r1, r0
 80078d0:	6818      	ldr	r0, [r3, #0]
 80078d2:	f7ff bf8d 	b.w	80077f0 <_puts_r>
 80078d6:	bf00      	nop
 80078d8:	200001c4 	.word	0x200001c4

080078dc <__swbuf_r>:
 80078dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078de:	460e      	mov	r6, r1
 80078e0:	4614      	mov	r4, r2
 80078e2:	4605      	mov	r5, r0
 80078e4:	b118      	cbz	r0, 80078ee <__swbuf_r+0x12>
 80078e6:	6983      	ldr	r3, [r0, #24]
 80078e8:	b90b      	cbnz	r3, 80078ee <__swbuf_r+0x12>
 80078ea:	f000 f9d9 	bl	8007ca0 <__sinit>
 80078ee:	4b21      	ldr	r3, [pc, #132]	; (8007974 <__swbuf_r+0x98>)
 80078f0:	429c      	cmp	r4, r3
 80078f2:	d12b      	bne.n	800794c <__swbuf_r+0x70>
 80078f4:	686c      	ldr	r4, [r5, #4]
 80078f6:	69a3      	ldr	r3, [r4, #24]
 80078f8:	60a3      	str	r3, [r4, #8]
 80078fa:	89a3      	ldrh	r3, [r4, #12]
 80078fc:	071a      	lsls	r2, r3, #28
 80078fe:	d52f      	bpl.n	8007960 <__swbuf_r+0x84>
 8007900:	6923      	ldr	r3, [r4, #16]
 8007902:	b36b      	cbz	r3, 8007960 <__swbuf_r+0x84>
 8007904:	6923      	ldr	r3, [r4, #16]
 8007906:	6820      	ldr	r0, [r4, #0]
 8007908:	1ac0      	subs	r0, r0, r3
 800790a:	6963      	ldr	r3, [r4, #20]
 800790c:	b2f6      	uxtb	r6, r6
 800790e:	4283      	cmp	r3, r0
 8007910:	4637      	mov	r7, r6
 8007912:	dc04      	bgt.n	800791e <__swbuf_r+0x42>
 8007914:	4621      	mov	r1, r4
 8007916:	4628      	mov	r0, r5
 8007918:	f000 f92e 	bl	8007b78 <_fflush_r>
 800791c:	bb30      	cbnz	r0, 800796c <__swbuf_r+0x90>
 800791e:	68a3      	ldr	r3, [r4, #8]
 8007920:	3b01      	subs	r3, #1
 8007922:	60a3      	str	r3, [r4, #8]
 8007924:	6823      	ldr	r3, [r4, #0]
 8007926:	1c5a      	adds	r2, r3, #1
 8007928:	6022      	str	r2, [r4, #0]
 800792a:	701e      	strb	r6, [r3, #0]
 800792c:	6963      	ldr	r3, [r4, #20]
 800792e:	3001      	adds	r0, #1
 8007930:	4283      	cmp	r3, r0
 8007932:	d004      	beq.n	800793e <__swbuf_r+0x62>
 8007934:	89a3      	ldrh	r3, [r4, #12]
 8007936:	07db      	lsls	r3, r3, #31
 8007938:	d506      	bpl.n	8007948 <__swbuf_r+0x6c>
 800793a:	2e0a      	cmp	r6, #10
 800793c:	d104      	bne.n	8007948 <__swbuf_r+0x6c>
 800793e:	4621      	mov	r1, r4
 8007940:	4628      	mov	r0, r5
 8007942:	f000 f919 	bl	8007b78 <_fflush_r>
 8007946:	b988      	cbnz	r0, 800796c <__swbuf_r+0x90>
 8007948:	4638      	mov	r0, r7
 800794a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800794c:	4b0a      	ldr	r3, [pc, #40]	; (8007978 <__swbuf_r+0x9c>)
 800794e:	429c      	cmp	r4, r3
 8007950:	d101      	bne.n	8007956 <__swbuf_r+0x7a>
 8007952:	68ac      	ldr	r4, [r5, #8]
 8007954:	e7cf      	b.n	80078f6 <__swbuf_r+0x1a>
 8007956:	4b09      	ldr	r3, [pc, #36]	; (800797c <__swbuf_r+0xa0>)
 8007958:	429c      	cmp	r4, r3
 800795a:	bf08      	it	eq
 800795c:	68ec      	ldreq	r4, [r5, #12]
 800795e:	e7ca      	b.n	80078f6 <__swbuf_r+0x1a>
 8007960:	4621      	mov	r1, r4
 8007962:	4628      	mov	r0, r5
 8007964:	f000 f80c 	bl	8007980 <__swsetup_r>
 8007968:	2800      	cmp	r0, #0
 800796a:	d0cb      	beq.n	8007904 <__swbuf_r+0x28>
 800796c:	f04f 37ff 	mov.w	r7, #4294967295
 8007970:	e7ea      	b.n	8007948 <__swbuf_r+0x6c>
 8007972:	bf00      	nop
 8007974:	08008830 	.word	0x08008830
 8007978:	08008850 	.word	0x08008850
 800797c:	08008810 	.word	0x08008810

08007980 <__swsetup_r>:
 8007980:	4b32      	ldr	r3, [pc, #200]	; (8007a4c <__swsetup_r+0xcc>)
 8007982:	b570      	push	{r4, r5, r6, lr}
 8007984:	681d      	ldr	r5, [r3, #0]
 8007986:	4606      	mov	r6, r0
 8007988:	460c      	mov	r4, r1
 800798a:	b125      	cbz	r5, 8007996 <__swsetup_r+0x16>
 800798c:	69ab      	ldr	r3, [r5, #24]
 800798e:	b913      	cbnz	r3, 8007996 <__swsetup_r+0x16>
 8007990:	4628      	mov	r0, r5
 8007992:	f000 f985 	bl	8007ca0 <__sinit>
 8007996:	4b2e      	ldr	r3, [pc, #184]	; (8007a50 <__swsetup_r+0xd0>)
 8007998:	429c      	cmp	r4, r3
 800799a:	d10f      	bne.n	80079bc <__swsetup_r+0x3c>
 800799c:	686c      	ldr	r4, [r5, #4]
 800799e:	89a3      	ldrh	r3, [r4, #12]
 80079a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079a4:	0719      	lsls	r1, r3, #28
 80079a6:	d42c      	bmi.n	8007a02 <__swsetup_r+0x82>
 80079a8:	06dd      	lsls	r5, r3, #27
 80079aa:	d411      	bmi.n	80079d0 <__swsetup_r+0x50>
 80079ac:	2309      	movs	r3, #9
 80079ae:	6033      	str	r3, [r6, #0]
 80079b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80079b4:	81a3      	strh	r3, [r4, #12]
 80079b6:	f04f 30ff 	mov.w	r0, #4294967295
 80079ba:	e03e      	b.n	8007a3a <__swsetup_r+0xba>
 80079bc:	4b25      	ldr	r3, [pc, #148]	; (8007a54 <__swsetup_r+0xd4>)
 80079be:	429c      	cmp	r4, r3
 80079c0:	d101      	bne.n	80079c6 <__swsetup_r+0x46>
 80079c2:	68ac      	ldr	r4, [r5, #8]
 80079c4:	e7eb      	b.n	800799e <__swsetup_r+0x1e>
 80079c6:	4b24      	ldr	r3, [pc, #144]	; (8007a58 <__swsetup_r+0xd8>)
 80079c8:	429c      	cmp	r4, r3
 80079ca:	bf08      	it	eq
 80079cc:	68ec      	ldreq	r4, [r5, #12]
 80079ce:	e7e6      	b.n	800799e <__swsetup_r+0x1e>
 80079d0:	0758      	lsls	r0, r3, #29
 80079d2:	d512      	bpl.n	80079fa <__swsetup_r+0x7a>
 80079d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079d6:	b141      	cbz	r1, 80079ea <__swsetup_r+0x6a>
 80079d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079dc:	4299      	cmp	r1, r3
 80079de:	d002      	beq.n	80079e6 <__swsetup_r+0x66>
 80079e0:	4630      	mov	r0, r6
 80079e2:	f000 fa63 	bl	8007eac <_free_r>
 80079e6:	2300      	movs	r3, #0
 80079e8:	6363      	str	r3, [r4, #52]	; 0x34
 80079ea:	89a3      	ldrh	r3, [r4, #12]
 80079ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079f0:	81a3      	strh	r3, [r4, #12]
 80079f2:	2300      	movs	r3, #0
 80079f4:	6063      	str	r3, [r4, #4]
 80079f6:	6923      	ldr	r3, [r4, #16]
 80079f8:	6023      	str	r3, [r4, #0]
 80079fa:	89a3      	ldrh	r3, [r4, #12]
 80079fc:	f043 0308 	orr.w	r3, r3, #8
 8007a00:	81a3      	strh	r3, [r4, #12]
 8007a02:	6923      	ldr	r3, [r4, #16]
 8007a04:	b94b      	cbnz	r3, 8007a1a <__swsetup_r+0x9a>
 8007a06:	89a3      	ldrh	r3, [r4, #12]
 8007a08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a10:	d003      	beq.n	8007a1a <__swsetup_r+0x9a>
 8007a12:	4621      	mov	r1, r4
 8007a14:	4630      	mov	r0, r6
 8007a16:	f000 fa09 	bl	8007e2c <__smakebuf_r>
 8007a1a:	89a0      	ldrh	r0, [r4, #12]
 8007a1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a20:	f010 0301 	ands.w	r3, r0, #1
 8007a24:	d00a      	beq.n	8007a3c <__swsetup_r+0xbc>
 8007a26:	2300      	movs	r3, #0
 8007a28:	60a3      	str	r3, [r4, #8]
 8007a2a:	6963      	ldr	r3, [r4, #20]
 8007a2c:	425b      	negs	r3, r3
 8007a2e:	61a3      	str	r3, [r4, #24]
 8007a30:	6923      	ldr	r3, [r4, #16]
 8007a32:	b943      	cbnz	r3, 8007a46 <__swsetup_r+0xc6>
 8007a34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a38:	d1ba      	bne.n	80079b0 <__swsetup_r+0x30>
 8007a3a:	bd70      	pop	{r4, r5, r6, pc}
 8007a3c:	0781      	lsls	r1, r0, #30
 8007a3e:	bf58      	it	pl
 8007a40:	6963      	ldrpl	r3, [r4, #20]
 8007a42:	60a3      	str	r3, [r4, #8]
 8007a44:	e7f4      	b.n	8007a30 <__swsetup_r+0xb0>
 8007a46:	2000      	movs	r0, #0
 8007a48:	e7f7      	b.n	8007a3a <__swsetup_r+0xba>
 8007a4a:	bf00      	nop
 8007a4c:	200001c4 	.word	0x200001c4
 8007a50:	08008830 	.word	0x08008830
 8007a54:	08008850 	.word	0x08008850
 8007a58:	08008810 	.word	0x08008810

08007a5c <abort>:
 8007a5c:	b508      	push	{r3, lr}
 8007a5e:	2006      	movs	r0, #6
 8007a60:	f000 fb84 	bl	800816c <raise>
 8007a64:	2001      	movs	r0, #1
 8007a66:	f7fa fd65 	bl	8002534 <_exit>
	...

08007a6c <__sflush_r>:
 8007a6c:	898a      	ldrh	r2, [r1, #12]
 8007a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a72:	4605      	mov	r5, r0
 8007a74:	0710      	lsls	r0, r2, #28
 8007a76:	460c      	mov	r4, r1
 8007a78:	d458      	bmi.n	8007b2c <__sflush_r+0xc0>
 8007a7a:	684b      	ldr	r3, [r1, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	dc05      	bgt.n	8007a8c <__sflush_r+0x20>
 8007a80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	dc02      	bgt.n	8007a8c <__sflush_r+0x20>
 8007a86:	2000      	movs	r0, #0
 8007a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a8e:	2e00      	cmp	r6, #0
 8007a90:	d0f9      	beq.n	8007a86 <__sflush_r+0x1a>
 8007a92:	2300      	movs	r3, #0
 8007a94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a98:	682f      	ldr	r7, [r5, #0]
 8007a9a:	602b      	str	r3, [r5, #0]
 8007a9c:	d032      	beq.n	8007b04 <__sflush_r+0x98>
 8007a9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007aa0:	89a3      	ldrh	r3, [r4, #12]
 8007aa2:	075a      	lsls	r2, r3, #29
 8007aa4:	d505      	bpl.n	8007ab2 <__sflush_r+0x46>
 8007aa6:	6863      	ldr	r3, [r4, #4]
 8007aa8:	1ac0      	subs	r0, r0, r3
 8007aaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007aac:	b10b      	cbz	r3, 8007ab2 <__sflush_r+0x46>
 8007aae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ab0:	1ac0      	subs	r0, r0, r3
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ab8:	6a21      	ldr	r1, [r4, #32]
 8007aba:	4628      	mov	r0, r5
 8007abc:	47b0      	blx	r6
 8007abe:	1c43      	adds	r3, r0, #1
 8007ac0:	89a3      	ldrh	r3, [r4, #12]
 8007ac2:	d106      	bne.n	8007ad2 <__sflush_r+0x66>
 8007ac4:	6829      	ldr	r1, [r5, #0]
 8007ac6:	291d      	cmp	r1, #29
 8007ac8:	d82c      	bhi.n	8007b24 <__sflush_r+0xb8>
 8007aca:	4a2a      	ldr	r2, [pc, #168]	; (8007b74 <__sflush_r+0x108>)
 8007acc:	40ca      	lsrs	r2, r1
 8007ace:	07d6      	lsls	r6, r2, #31
 8007ad0:	d528      	bpl.n	8007b24 <__sflush_r+0xb8>
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	6062      	str	r2, [r4, #4]
 8007ad6:	04d9      	lsls	r1, r3, #19
 8007ad8:	6922      	ldr	r2, [r4, #16]
 8007ada:	6022      	str	r2, [r4, #0]
 8007adc:	d504      	bpl.n	8007ae8 <__sflush_r+0x7c>
 8007ade:	1c42      	adds	r2, r0, #1
 8007ae0:	d101      	bne.n	8007ae6 <__sflush_r+0x7a>
 8007ae2:	682b      	ldr	r3, [r5, #0]
 8007ae4:	b903      	cbnz	r3, 8007ae8 <__sflush_r+0x7c>
 8007ae6:	6560      	str	r0, [r4, #84]	; 0x54
 8007ae8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007aea:	602f      	str	r7, [r5, #0]
 8007aec:	2900      	cmp	r1, #0
 8007aee:	d0ca      	beq.n	8007a86 <__sflush_r+0x1a>
 8007af0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007af4:	4299      	cmp	r1, r3
 8007af6:	d002      	beq.n	8007afe <__sflush_r+0x92>
 8007af8:	4628      	mov	r0, r5
 8007afa:	f000 f9d7 	bl	8007eac <_free_r>
 8007afe:	2000      	movs	r0, #0
 8007b00:	6360      	str	r0, [r4, #52]	; 0x34
 8007b02:	e7c1      	b.n	8007a88 <__sflush_r+0x1c>
 8007b04:	6a21      	ldr	r1, [r4, #32]
 8007b06:	2301      	movs	r3, #1
 8007b08:	4628      	mov	r0, r5
 8007b0a:	47b0      	blx	r6
 8007b0c:	1c41      	adds	r1, r0, #1
 8007b0e:	d1c7      	bne.n	8007aa0 <__sflush_r+0x34>
 8007b10:	682b      	ldr	r3, [r5, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d0c4      	beq.n	8007aa0 <__sflush_r+0x34>
 8007b16:	2b1d      	cmp	r3, #29
 8007b18:	d001      	beq.n	8007b1e <__sflush_r+0xb2>
 8007b1a:	2b16      	cmp	r3, #22
 8007b1c:	d101      	bne.n	8007b22 <__sflush_r+0xb6>
 8007b1e:	602f      	str	r7, [r5, #0]
 8007b20:	e7b1      	b.n	8007a86 <__sflush_r+0x1a>
 8007b22:	89a3      	ldrh	r3, [r4, #12]
 8007b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b28:	81a3      	strh	r3, [r4, #12]
 8007b2a:	e7ad      	b.n	8007a88 <__sflush_r+0x1c>
 8007b2c:	690f      	ldr	r7, [r1, #16]
 8007b2e:	2f00      	cmp	r7, #0
 8007b30:	d0a9      	beq.n	8007a86 <__sflush_r+0x1a>
 8007b32:	0793      	lsls	r3, r2, #30
 8007b34:	680e      	ldr	r6, [r1, #0]
 8007b36:	bf08      	it	eq
 8007b38:	694b      	ldreq	r3, [r1, #20]
 8007b3a:	600f      	str	r7, [r1, #0]
 8007b3c:	bf18      	it	ne
 8007b3e:	2300      	movne	r3, #0
 8007b40:	eba6 0807 	sub.w	r8, r6, r7
 8007b44:	608b      	str	r3, [r1, #8]
 8007b46:	f1b8 0f00 	cmp.w	r8, #0
 8007b4a:	dd9c      	ble.n	8007a86 <__sflush_r+0x1a>
 8007b4c:	6a21      	ldr	r1, [r4, #32]
 8007b4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b50:	4643      	mov	r3, r8
 8007b52:	463a      	mov	r2, r7
 8007b54:	4628      	mov	r0, r5
 8007b56:	47b0      	blx	r6
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	dc06      	bgt.n	8007b6a <__sflush_r+0xfe>
 8007b5c:	89a3      	ldrh	r3, [r4, #12]
 8007b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b62:	81a3      	strh	r3, [r4, #12]
 8007b64:	f04f 30ff 	mov.w	r0, #4294967295
 8007b68:	e78e      	b.n	8007a88 <__sflush_r+0x1c>
 8007b6a:	4407      	add	r7, r0
 8007b6c:	eba8 0800 	sub.w	r8, r8, r0
 8007b70:	e7e9      	b.n	8007b46 <__sflush_r+0xda>
 8007b72:	bf00      	nop
 8007b74:	20400001 	.word	0x20400001

08007b78 <_fflush_r>:
 8007b78:	b538      	push	{r3, r4, r5, lr}
 8007b7a:	690b      	ldr	r3, [r1, #16]
 8007b7c:	4605      	mov	r5, r0
 8007b7e:	460c      	mov	r4, r1
 8007b80:	b913      	cbnz	r3, 8007b88 <_fflush_r+0x10>
 8007b82:	2500      	movs	r5, #0
 8007b84:	4628      	mov	r0, r5
 8007b86:	bd38      	pop	{r3, r4, r5, pc}
 8007b88:	b118      	cbz	r0, 8007b92 <_fflush_r+0x1a>
 8007b8a:	6983      	ldr	r3, [r0, #24]
 8007b8c:	b90b      	cbnz	r3, 8007b92 <_fflush_r+0x1a>
 8007b8e:	f000 f887 	bl	8007ca0 <__sinit>
 8007b92:	4b14      	ldr	r3, [pc, #80]	; (8007be4 <_fflush_r+0x6c>)
 8007b94:	429c      	cmp	r4, r3
 8007b96:	d11b      	bne.n	8007bd0 <_fflush_r+0x58>
 8007b98:	686c      	ldr	r4, [r5, #4]
 8007b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d0ef      	beq.n	8007b82 <_fflush_r+0xa>
 8007ba2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ba4:	07d0      	lsls	r0, r2, #31
 8007ba6:	d404      	bmi.n	8007bb2 <_fflush_r+0x3a>
 8007ba8:	0599      	lsls	r1, r3, #22
 8007baa:	d402      	bmi.n	8007bb2 <_fflush_r+0x3a>
 8007bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bae:	f000 f915 	bl	8007ddc <__retarget_lock_acquire_recursive>
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	f7ff ff59 	bl	8007a6c <__sflush_r>
 8007bba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bbc:	07da      	lsls	r2, r3, #31
 8007bbe:	4605      	mov	r5, r0
 8007bc0:	d4e0      	bmi.n	8007b84 <_fflush_r+0xc>
 8007bc2:	89a3      	ldrh	r3, [r4, #12]
 8007bc4:	059b      	lsls	r3, r3, #22
 8007bc6:	d4dd      	bmi.n	8007b84 <_fflush_r+0xc>
 8007bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bca:	f000 f908 	bl	8007dde <__retarget_lock_release_recursive>
 8007bce:	e7d9      	b.n	8007b84 <_fflush_r+0xc>
 8007bd0:	4b05      	ldr	r3, [pc, #20]	; (8007be8 <_fflush_r+0x70>)
 8007bd2:	429c      	cmp	r4, r3
 8007bd4:	d101      	bne.n	8007bda <_fflush_r+0x62>
 8007bd6:	68ac      	ldr	r4, [r5, #8]
 8007bd8:	e7df      	b.n	8007b9a <_fflush_r+0x22>
 8007bda:	4b04      	ldr	r3, [pc, #16]	; (8007bec <_fflush_r+0x74>)
 8007bdc:	429c      	cmp	r4, r3
 8007bde:	bf08      	it	eq
 8007be0:	68ec      	ldreq	r4, [r5, #12]
 8007be2:	e7da      	b.n	8007b9a <_fflush_r+0x22>
 8007be4:	08008830 	.word	0x08008830
 8007be8:	08008850 	.word	0x08008850
 8007bec:	08008810 	.word	0x08008810

08007bf0 <std>:
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	b510      	push	{r4, lr}
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	e9c0 3300 	strd	r3, r3, [r0]
 8007bfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bfe:	6083      	str	r3, [r0, #8]
 8007c00:	8181      	strh	r1, [r0, #12]
 8007c02:	6643      	str	r3, [r0, #100]	; 0x64
 8007c04:	81c2      	strh	r2, [r0, #14]
 8007c06:	6183      	str	r3, [r0, #24]
 8007c08:	4619      	mov	r1, r3
 8007c0a:	2208      	movs	r2, #8
 8007c0c:	305c      	adds	r0, #92	; 0x5c
 8007c0e:	f7ff facb 	bl	80071a8 <memset>
 8007c12:	4b05      	ldr	r3, [pc, #20]	; (8007c28 <std+0x38>)
 8007c14:	6263      	str	r3, [r4, #36]	; 0x24
 8007c16:	4b05      	ldr	r3, [pc, #20]	; (8007c2c <std+0x3c>)
 8007c18:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c1a:	4b05      	ldr	r3, [pc, #20]	; (8007c30 <std+0x40>)
 8007c1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c1e:	4b05      	ldr	r3, [pc, #20]	; (8007c34 <std+0x44>)
 8007c20:	6224      	str	r4, [r4, #32]
 8007c22:	6323      	str	r3, [r4, #48]	; 0x30
 8007c24:	bd10      	pop	{r4, pc}
 8007c26:	bf00      	nop
 8007c28:	080081a5 	.word	0x080081a5
 8007c2c:	080081c7 	.word	0x080081c7
 8007c30:	080081ff 	.word	0x080081ff
 8007c34:	08008223 	.word	0x08008223

08007c38 <_cleanup_r>:
 8007c38:	4901      	ldr	r1, [pc, #4]	; (8007c40 <_cleanup_r+0x8>)
 8007c3a:	f000 b8af 	b.w	8007d9c <_fwalk_reent>
 8007c3e:	bf00      	nop
 8007c40:	08007b79 	.word	0x08007b79

08007c44 <__sfmoreglue>:
 8007c44:	b570      	push	{r4, r5, r6, lr}
 8007c46:	2268      	movs	r2, #104	; 0x68
 8007c48:	1e4d      	subs	r5, r1, #1
 8007c4a:	4355      	muls	r5, r2
 8007c4c:	460e      	mov	r6, r1
 8007c4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c52:	f000 f997 	bl	8007f84 <_malloc_r>
 8007c56:	4604      	mov	r4, r0
 8007c58:	b140      	cbz	r0, 8007c6c <__sfmoreglue+0x28>
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	e9c0 1600 	strd	r1, r6, [r0]
 8007c60:	300c      	adds	r0, #12
 8007c62:	60a0      	str	r0, [r4, #8]
 8007c64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c68:	f7ff fa9e 	bl	80071a8 <memset>
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	bd70      	pop	{r4, r5, r6, pc}

08007c70 <__sfp_lock_acquire>:
 8007c70:	4801      	ldr	r0, [pc, #4]	; (8007c78 <__sfp_lock_acquire+0x8>)
 8007c72:	f000 b8b3 	b.w	8007ddc <__retarget_lock_acquire_recursive>
 8007c76:	bf00      	nop
 8007c78:	200003e5 	.word	0x200003e5

08007c7c <__sfp_lock_release>:
 8007c7c:	4801      	ldr	r0, [pc, #4]	; (8007c84 <__sfp_lock_release+0x8>)
 8007c7e:	f000 b8ae 	b.w	8007dde <__retarget_lock_release_recursive>
 8007c82:	bf00      	nop
 8007c84:	200003e5 	.word	0x200003e5

08007c88 <__sinit_lock_acquire>:
 8007c88:	4801      	ldr	r0, [pc, #4]	; (8007c90 <__sinit_lock_acquire+0x8>)
 8007c8a:	f000 b8a7 	b.w	8007ddc <__retarget_lock_acquire_recursive>
 8007c8e:	bf00      	nop
 8007c90:	200003e6 	.word	0x200003e6

08007c94 <__sinit_lock_release>:
 8007c94:	4801      	ldr	r0, [pc, #4]	; (8007c9c <__sinit_lock_release+0x8>)
 8007c96:	f000 b8a2 	b.w	8007dde <__retarget_lock_release_recursive>
 8007c9a:	bf00      	nop
 8007c9c:	200003e6 	.word	0x200003e6

08007ca0 <__sinit>:
 8007ca0:	b510      	push	{r4, lr}
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	f7ff fff0 	bl	8007c88 <__sinit_lock_acquire>
 8007ca8:	69a3      	ldr	r3, [r4, #24]
 8007caa:	b11b      	cbz	r3, 8007cb4 <__sinit+0x14>
 8007cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cb0:	f7ff bff0 	b.w	8007c94 <__sinit_lock_release>
 8007cb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007cb8:	6523      	str	r3, [r4, #80]	; 0x50
 8007cba:	4b13      	ldr	r3, [pc, #76]	; (8007d08 <__sinit+0x68>)
 8007cbc:	4a13      	ldr	r2, [pc, #76]	; (8007d0c <__sinit+0x6c>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8007cc2:	42a3      	cmp	r3, r4
 8007cc4:	bf04      	itt	eq
 8007cc6:	2301      	moveq	r3, #1
 8007cc8:	61a3      	streq	r3, [r4, #24]
 8007cca:	4620      	mov	r0, r4
 8007ccc:	f000 f820 	bl	8007d10 <__sfp>
 8007cd0:	6060      	str	r0, [r4, #4]
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f000 f81c 	bl	8007d10 <__sfp>
 8007cd8:	60a0      	str	r0, [r4, #8]
 8007cda:	4620      	mov	r0, r4
 8007cdc:	f000 f818 	bl	8007d10 <__sfp>
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	60e0      	str	r0, [r4, #12]
 8007ce4:	2104      	movs	r1, #4
 8007ce6:	6860      	ldr	r0, [r4, #4]
 8007ce8:	f7ff ff82 	bl	8007bf0 <std>
 8007cec:	68a0      	ldr	r0, [r4, #8]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	2109      	movs	r1, #9
 8007cf2:	f7ff ff7d 	bl	8007bf0 <std>
 8007cf6:	68e0      	ldr	r0, [r4, #12]
 8007cf8:	2202      	movs	r2, #2
 8007cfa:	2112      	movs	r1, #18
 8007cfc:	f7ff ff78 	bl	8007bf0 <std>
 8007d00:	2301      	movs	r3, #1
 8007d02:	61a3      	str	r3, [r4, #24]
 8007d04:	e7d2      	b.n	8007cac <__sinit+0xc>
 8007d06:	bf00      	nop
 8007d08:	080087d8 	.word	0x080087d8
 8007d0c:	08007c39 	.word	0x08007c39

08007d10 <__sfp>:
 8007d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d12:	4607      	mov	r7, r0
 8007d14:	f7ff ffac 	bl	8007c70 <__sfp_lock_acquire>
 8007d18:	4b1e      	ldr	r3, [pc, #120]	; (8007d94 <__sfp+0x84>)
 8007d1a:	681e      	ldr	r6, [r3, #0]
 8007d1c:	69b3      	ldr	r3, [r6, #24]
 8007d1e:	b913      	cbnz	r3, 8007d26 <__sfp+0x16>
 8007d20:	4630      	mov	r0, r6
 8007d22:	f7ff ffbd 	bl	8007ca0 <__sinit>
 8007d26:	3648      	adds	r6, #72	; 0x48
 8007d28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	d503      	bpl.n	8007d38 <__sfp+0x28>
 8007d30:	6833      	ldr	r3, [r6, #0]
 8007d32:	b30b      	cbz	r3, 8007d78 <__sfp+0x68>
 8007d34:	6836      	ldr	r6, [r6, #0]
 8007d36:	e7f7      	b.n	8007d28 <__sfp+0x18>
 8007d38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d3c:	b9d5      	cbnz	r5, 8007d74 <__sfp+0x64>
 8007d3e:	4b16      	ldr	r3, [pc, #88]	; (8007d98 <__sfp+0x88>)
 8007d40:	60e3      	str	r3, [r4, #12]
 8007d42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d46:	6665      	str	r5, [r4, #100]	; 0x64
 8007d48:	f000 f847 	bl	8007dda <__retarget_lock_init_recursive>
 8007d4c:	f7ff ff96 	bl	8007c7c <__sfp_lock_release>
 8007d50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d58:	6025      	str	r5, [r4, #0]
 8007d5a:	61a5      	str	r5, [r4, #24]
 8007d5c:	2208      	movs	r2, #8
 8007d5e:	4629      	mov	r1, r5
 8007d60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d64:	f7ff fa20 	bl	80071a8 <memset>
 8007d68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d70:	4620      	mov	r0, r4
 8007d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d74:	3468      	adds	r4, #104	; 0x68
 8007d76:	e7d9      	b.n	8007d2c <__sfp+0x1c>
 8007d78:	2104      	movs	r1, #4
 8007d7a:	4638      	mov	r0, r7
 8007d7c:	f7ff ff62 	bl	8007c44 <__sfmoreglue>
 8007d80:	4604      	mov	r4, r0
 8007d82:	6030      	str	r0, [r6, #0]
 8007d84:	2800      	cmp	r0, #0
 8007d86:	d1d5      	bne.n	8007d34 <__sfp+0x24>
 8007d88:	f7ff ff78 	bl	8007c7c <__sfp_lock_release>
 8007d8c:	230c      	movs	r3, #12
 8007d8e:	603b      	str	r3, [r7, #0]
 8007d90:	e7ee      	b.n	8007d70 <__sfp+0x60>
 8007d92:	bf00      	nop
 8007d94:	080087d8 	.word	0x080087d8
 8007d98:	ffff0001 	.word	0xffff0001

08007d9c <_fwalk_reent>:
 8007d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007da0:	4606      	mov	r6, r0
 8007da2:	4688      	mov	r8, r1
 8007da4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007da8:	2700      	movs	r7, #0
 8007daa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007dae:	f1b9 0901 	subs.w	r9, r9, #1
 8007db2:	d505      	bpl.n	8007dc0 <_fwalk_reent+0x24>
 8007db4:	6824      	ldr	r4, [r4, #0]
 8007db6:	2c00      	cmp	r4, #0
 8007db8:	d1f7      	bne.n	8007daa <_fwalk_reent+0xe>
 8007dba:	4638      	mov	r0, r7
 8007dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dc0:	89ab      	ldrh	r3, [r5, #12]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d907      	bls.n	8007dd6 <_fwalk_reent+0x3a>
 8007dc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	d003      	beq.n	8007dd6 <_fwalk_reent+0x3a>
 8007dce:	4629      	mov	r1, r5
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	47c0      	blx	r8
 8007dd4:	4307      	orrs	r7, r0
 8007dd6:	3568      	adds	r5, #104	; 0x68
 8007dd8:	e7e9      	b.n	8007dae <_fwalk_reent+0x12>

08007dda <__retarget_lock_init_recursive>:
 8007dda:	4770      	bx	lr

08007ddc <__retarget_lock_acquire_recursive>:
 8007ddc:	4770      	bx	lr

08007dde <__retarget_lock_release_recursive>:
 8007dde:	4770      	bx	lr

08007de0 <__swhatbuf_r>:
 8007de0:	b570      	push	{r4, r5, r6, lr}
 8007de2:	460e      	mov	r6, r1
 8007de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de8:	2900      	cmp	r1, #0
 8007dea:	b096      	sub	sp, #88	; 0x58
 8007dec:	4614      	mov	r4, r2
 8007dee:	461d      	mov	r5, r3
 8007df0:	da08      	bge.n	8007e04 <__swhatbuf_r+0x24>
 8007df2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	602a      	str	r2, [r5, #0]
 8007dfa:	061a      	lsls	r2, r3, #24
 8007dfc:	d410      	bmi.n	8007e20 <__swhatbuf_r+0x40>
 8007dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e02:	e00e      	b.n	8007e22 <__swhatbuf_r+0x42>
 8007e04:	466a      	mov	r2, sp
 8007e06:	f000 fa33 	bl	8008270 <_fstat_r>
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	dbf1      	blt.n	8007df2 <__swhatbuf_r+0x12>
 8007e0e:	9a01      	ldr	r2, [sp, #4]
 8007e10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e18:	425a      	negs	r2, r3
 8007e1a:	415a      	adcs	r2, r3
 8007e1c:	602a      	str	r2, [r5, #0]
 8007e1e:	e7ee      	b.n	8007dfe <__swhatbuf_r+0x1e>
 8007e20:	2340      	movs	r3, #64	; 0x40
 8007e22:	2000      	movs	r0, #0
 8007e24:	6023      	str	r3, [r4, #0]
 8007e26:	b016      	add	sp, #88	; 0x58
 8007e28:	bd70      	pop	{r4, r5, r6, pc}
	...

08007e2c <__smakebuf_r>:
 8007e2c:	898b      	ldrh	r3, [r1, #12]
 8007e2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e30:	079d      	lsls	r5, r3, #30
 8007e32:	4606      	mov	r6, r0
 8007e34:	460c      	mov	r4, r1
 8007e36:	d507      	bpl.n	8007e48 <__smakebuf_r+0x1c>
 8007e38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e3c:	6023      	str	r3, [r4, #0]
 8007e3e:	6123      	str	r3, [r4, #16]
 8007e40:	2301      	movs	r3, #1
 8007e42:	6163      	str	r3, [r4, #20]
 8007e44:	b002      	add	sp, #8
 8007e46:	bd70      	pop	{r4, r5, r6, pc}
 8007e48:	ab01      	add	r3, sp, #4
 8007e4a:	466a      	mov	r2, sp
 8007e4c:	f7ff ffc8 	bl	8007de0 <__swhatbuf_r>
 8007e50:	9900      	ldr	r1, [sp, #0]
 8007e52:	4605      	mov	r5, r0
 8007e54:	4630      	mov	r0, r6
 8007e56:	f000 f895 	bl	8007f84 <_malloc_r>
 8007e5a:	b948      	cbnz	r0, 8007e70 <__smakebuf_r+0x44>
 8007e5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e60:	059a      	lsls	r2, r3, #22
 8007e62:	d4ef      	bmi.n	8007e44 <__smakebuf_r+0x18>
 8007e64:	f023 0303 	bic.w	r3, r3, #3
 8007e68:	f043 0302 	orr.w	r3, r3, #2
 8007e6c:	81a3      	strh	r3, [r4, #12]
 8007e6e:	e7e3      	b.n	8007e38 <__smakebuf_r+0xc>
 8007e70:	4b0d      	ldr	r3, [pc, #52]	; (8007ea8 <__smakebuf_r+0x7c>)
 8007e72:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e74:	89a3      	ldrh	r3, [r4, #12]
 8007e76:	6020      	str	r0, [r4, #0]
 8007e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e7c:	81a3      	strh	r3, [r4, #12]
 8007e7e:	9b00      	ldr	r3, [sp, #0]
 8007e80:	6163      	str	r3, [r4, #20]
 8007e82:	9b01      	ldr	r3, [sp, #4]
 8007e84:	6120      	str	r0, [r4, #16]
 8007e86:	b15b      	cbz	r3, 8007ea0 <__smakebuf_r+0x74>
 8007e88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	f000 fa01 	bl	8008294 <_isatty_r>
 8007e92:	b128      	cbz	r0, 8007ea0 <__smakebuf_r+0x74>
 8007e94:	89a3      	ldrh	r3, [r4, #12]
 8007e96:	f023 0303 	bic.w	r3, r3, #3
 8007e9a:	f043 0301 	orr.w	r3, r3, #1
 8007e9e:	81a3      	strh	r3, [r4, #12]
 8007ea0:	89a0      	ldrh	r0, [r4, #12]
 8007ea2:	4305      	orrs	r5, r0
 8007ea4:	81a5      	strh	r5, [r4, #12]
 8007ea6:	e7cd      	b.n	8007e44 <__smakebuf_r+0x18>
 8007ea8:	08007c39 	.word	0x08007c39

08007eac <_free_r>:
 8007eac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007eae:	2900      	cmp	r1, #0
 8007eb0:	d044      	beq.n	8007f3c <_free_r+0x90>
 8007eb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007eb6:	9001      	str	r0, [sp, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f1a1 0404 	sub.w	r4, r1, #4
 8007ebe:	bfb8      	it	lt
 8007ec0:	18e4      	addlt	r4, r4, r3
 8007ec2:	f000 fa09 	bl	80082d8 <__malloc_lock>
 8007ec6:	4a1e      	ldr	r2, [pc, #120]	; (8007f40 <_free_r+0x94>)
 8007ec8:	9801      	ldr	r0, [sp, #4]
 8007eca:	6813      	ldr	r3, [r2, #0]
 8007ecc:	b933      	cbnz	r3, 8007edc <_free_r+0x30>
 8007ece:	6063      	str	r3, [r4, #4]
 8007ed0:	6014      	str	r4, [r2, #0]
 8007ed2:	b003      	add	sp, #12
 8007ed4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ed8:	f000 ba04 	b.w	80082e4 <__malloc_unlock>
 8007edc:	42a3      	cmp	r3, r4
 8007ede:	d908      	bls.n	8007ef2 <_free_r+0x46>
 8007ee0:	6825      	ldr	r5, [r4, #0]
 8007ee2:	1961      	adds	r1, r4, r5
 8007ee4:	428b      	cmp	r3, r1
 8007ee6:	bf01      	itttt	eq
 8007ee8:	6819      	ldreq	r1, [r3, #0]
 8007eea:	685b      	ldreq	r3, [r3, #4]
 8007eec:	1949      	addeq	r1, r1, r5
 8007eee:	6021      	streq	r1, [r4, #0]
 8007ef0:	e7ed      	b.n	8007ece <_free_r+0x22>
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	b10b      	cbz	r3, 8007efc <_free_r+0x50>
 8007ef8:	42a3      	cmp	r3, r4
 8007efa:	d9fa      	bls.n	8007ef2 <_free_r+0x46>
 8007efc:	6811      	ldr	r1, [r2, #0]
 8007efe:	1855      	adds	r5, r2, r1
 8007f00:	42a5      	cmp	r5, r4
 8007f02:	d10b      	bne.n	8007f1c <_free_r+0x70>
 8007f04:	6824      	ldr	r4, [r4, #0]
 8007f06:	4421      	add	r1, r4
 8007f08:	1854      	adds	r4, r2, r1
 8007f0a:	42a3      	cmp	r3, r4
 8007f0c:	6011      	str	r1, [r2, #0]
 8007f0e:	d1e0      	bne.n	8007ed2 <_free_r+0x26>
 8007f10:	681c      	ldr	r4, [r3, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	6053      	str	r3, [r2, #4]
 8007f16:	4421      	add	r1, r4
 8007f18:	6011      	str	r1, [r2, #0]
 8007f1a:	e7da      	b.n	8007ed2 <_free_r+0x26>
 8007f1c:	d902      	bls.n	8007f24 <_free_r+0x78>
 8007f1e:	230c      	movs	r3, #12
 8007f20:	6003      	str	r3, [r0, #0]
 8007f22:	e7d6      	b.n	8007ed2 <_free_r+0x26>
 8007f24:	6825      	ldr	r5, [r4, #0]
 8007f26:	1961      	adds	r1, r4, r5
 8007f28:	428b      	cmp	r3, r1
 8007f2a:	bf04      	itt	eq
 8007f2c:	6819      	ldreq	r1, [r3, #0]
 8007f2e:	685b      	ldreq	r3, [r3, #4]
 8007f30:	6063      	str	r3, [r4, #4]
 8007f32:	bf04      	itt	eq
 8007f34:	1949      	addeq	r1, r1, r5
 8007f36:	6021      	streq	r1, [r4, #0]
 8007f38:	6054      	str	r4, [r2, #4]
 8007f3a:	e7ca      	b.n	8007ed2 <_free_r+0x26>
 8007f3c:	b003      	add	sp, #12
 8007f3e:	bd30      	pop	{r4, r5, pc}
 8007f40:	200003e8 	.word	0x200003e8

08007f44 <sbrk_aligned>:
 8007f44:	b570      	push	{r4, r5, r6, lr}
 8007f46:	4e0e      	ldr	r6, [pc, #56]	; (8007f80 <sbrk_aligned+0x3c>)
 8007f48:	460c      	mov	r4, r1
 8007f4a:	6831      	ldr	r1, [r6, #0]
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	b911      	cbnz	r1, 8007f56 <sbrk_aligned+0x12>
 8007f50:	f000 f8d4 	bl	80080fc <_sbrk_r>
 8007f54:	6030      	str	r0, [r6, #0]
 8007f56:	4621      	mov	r1, r4
 8007f58:	4628      	mov	r0, r5
 8007f5a:	f000 f8cf 	bl	80080fc <_sbrk_r>
 8007f5e:	1c43      	adds	r3, r0, #1
 8007f60:	d00a      	beq.n	8007f78 <sbrk_aligned+0x34>
 8007f62:	1cc4      	adds	r4, r0, #3
 8007f64:	f024 0403 	bic.w	r4, r4, #3
 8007f68:	42a0      	cmp	r0, r4
 8007f6a:	d007      	beq.n	8007f7c <sbrk_aligned+0x38>
 8007f6c:	1a21      	subs	r1, r4, r0
 8007f6e:	4628      	mov	r0, r5
 8007f70:	f000 f8c4 	bl	80080fc <_sbrk_r>
 8007f74:	3001      	adds	r0, #1
 8007f76:	d101      	bne.n	8007f7c <sbrk_aligned+0x38>
 8007f78:	f04f 34ff 	mov.w	r4, #4294967295
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	bd70      	pop	{r4, r5, r6, pc}
 8007f80:	200003ec 	.word	0x200003ec

08007f84 <_malloc_r>:
 8007f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f88:	1ccd      	adds	r5, r1, #3
 8007f8a:	f025 0503 	bic.w	r5, r5, #3
 8007f8e:	3508      	adds	r5, #8
 8007f90:	2d0c      	cmp	r5, #12
 8007f92:	bf38      	it	cc
 8007f94:	250c      	movcc	r5, #12
 8007f96:	2d00      	cmp	r5, #0
 8007f98:	4607      	mov	r7, r0
 8007f9a:	db01      	blt.n	8007fa0 <_malloc_r+0x1c>
 8007f9c:	42a9      	cmp	r1, r5
 8007f9e:	d905      	bls.n	8007fac <_malloc_r+0x28>
 8007fa0:	230c      	movs	r3, #12
 8007fa2:	603b      	str	r3, [r7, #0]
 8007fa4:	2600      	movs	r6, #0
 8007fa6:	4630      	mov	r0, r6
 8007fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fac:	4e2e      	ldr	r6, [pc, #184]	; (8008068 <_malloc_r+0xe4>)
 8007fae:	f000 f993 	bl	80082d8 <__malloc_lock>
 8007fb2:	6833      	ldr	r3, [r6, #0]
 8007fb4:	461c      	mov	r4, r3
 8007fb6:	bb34      	cbnz	r4, 8008006 <_malloc_r+0x82>
 8007fb8:	4629      	mov	r1, r5
 8007fba:	4638      	mov	r0, r7
 8007fbc:	f7ff ffc2 	bl	8007f44 <sbrk_aligned>
 8007fc0:	1c43      	adds	r3, r0, #1
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	d14d      	bne.n	8008062 <_malloc_r+0xde>
 8007fc6:	6834      	ldr	r4, [r6, #0]
 8007fc8:	4626      	mov	r6, r4
 8007fca:	2e00      	cmp	r6, #0
 8007fcc:	d140      	bne.n	8008050 <_malloc_r+0xcc>
 8007fce:	6823      	ldr	r3, [r4, #0]
 8007fd0:	4631      	mov	r1, r6
 8007fd2:	4638      	mov	r0, r7
 8007fd4:	eb04 0803 	add.w	r8, r4, r3
 8007fd8:	f000 f890 	bl	80080fc <_sbrk_r>
 8007fdc:	4580      	cmp	r8, r0
 8007fde:	d13a      	bne.n	8008056 <_malloc_r+0xd2>
 8007fe0:	6821      	ldr	r1, [r4, #0]
 8007fe2:	3503      	adds	r5, #3
 8007fe4:	1a6d      	subs	r5, r5, r1
 8007fe6:	f025 0503 	bic.w	r5, r5, #3
 8007fea:	3508      	adds	r5, #8
 8007fec:	2d0c      	cmp	r5, #12
 8007fee:	bf38      	it	cc
 8007ff0:	250c      	movcc	r5, #12
 8007ff2:	4629      	mov	r1, r5
 8007ff4:	4638      	mov	r0, r7
 8007ff6:	f7ff ffa5 	bl	8007f44 <sbrk_aligned>
 8007ffa:	3001      	adds	r0, #1
 8007ffc:	d02b      	beq.n	8008056 <_malloc_r+0xd2>
 8007ffe:	6823      	ldr	r3, [r4, #0]
 8008000:	442b      	add	r3, r5
 8008002:	6023      	str	r3, [r4, #0]
 8008004:	e00e      	b.n	8008024 <_malloc_r+0xa0>
 8008006:	6822      	ldr	r2, [r4, #0]
 8008008:	1b52      	subs	r2, r2, r5
 800800a:	d41e      	bmi.n	800804a <_malloc_r+0xc6>
 800800c:	2a0b      	cmp	r2, #11
 800800e:	d916      	bls.n	800803e <_malloc_r+0xba>
 8008010:	1961      	adds	r1, r4, r5
 8008012:	42a3      	cmp	r3, r4
 8008014:	6025      	str	r5, [r4, #0]
 8008016:	bf18      	it	ne
 8008018:	6059      	strne	r1, [r3, #4]
 800801a:	6863      	ldr	r3, [r4, #4]
 800801c:	bf08      	it	eq
 800801e:	6031      	streq	r1, [r6, #0]
 8008020:	5162      	str	r2, [r4, r5]
 8008022:	604b      	str	r3, [r1, #4]
 8008024:	4638      	mov	r0, r7
 8008026:	f104 060b 	add.w	r6, r4, #11
 800802a:	f000 f95b 	bl	80082e4 <__malloc_unlock>
 800802e:	f026 0607 	bic.w	r6, r6, #7
 8008032:	1d23      	adds	r3, r4, #4
 8008034:	1af2      	subs	r2, r6, r3
 8008036:	d0b6      	beq.n	8007fa6 <_malloc_r+0x22>
 8008038:	1b9b      	subs	r3, r3, r6
 800803a:	50a3      	str	r3, [r4, r2]
 800803c:	e7b3      	b.n	8007fa6 <_malloc_r+0x22>
 800803e:	6862      	ldr	r2, [r4, #4]
 8008040:	42a3      	cmp	r3, r4
 8008042:	bf0c      	ite	eq
 8008044:	6032      	streq	r2, [r6, #0]
 8008046:	605a      	strne	r2, [r3, #4]
 8008048:	e7ec      	b.n	8008024 <_malloc_r+0xa0>
 800804a:	4623      	mov	r3, r4
 800804c:	6864      	ldr	r4, [r4, #4]
 800804e:	e7b2      	b.n	8007fb6 <_malloc_r+0x32>
 8008050:	4634      	mov	r4, r6
 8008052:	6876      	ldr	r6, [r6, #4]
 8008054:	e7b9      	b.n	8007fca <_malloc_r+0x46>
 8008056:	230c      	movs	r3, #12
 8008058:	603b      	str	r3, [r7, #0]
 800805a:	4638      	mov	r0, r7
 800805c:	f000 f942 	bl	80082e4 <__malloc_unlock>
 8008060:	e7a1      	b.n	8007fa6 <_malloc_r+0x22>
 8008062:	6025      	str	r5, [r4, #0]
 8008064:	e7de      	b.n	8008024 <_malloc_r+0xa0>
 8008066:	bf00      	nop
 8008068:	200003e8 	.word	0x200003e8

0800806c <_putc_r>:
 800806c:	b570      	push	{r4, r5, r6, lr}
 800806e:	460d      	mov	r5, r1
 8008070:	4614      	mov	r4, r2
 8008072:	4606      	mov	r6, r0
 8008074:	b118      	cbz	r0, 800807e <_putc_r+0x12>
 8008076:	6983      	ldr	r3, [r0, #24]
 8008078:	b90b      	cbnz	r3, 800807e <_putc_r+0x12>
 800807a:	f7ff fe11 	bl	8007ca0 <__sinit>
 800807e:	4b1c      	ldr	r3, [pc, #112]	; (80080f0 <_putc_r+0x84>)
 8008080:	429c      	cmp	r4, r3
 8008082:	d124      	bne.n	80080ce <_putc_r+0x62>
 8008084:	6874      	ldr	r4, [r6, #4]
 8008086:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008088:	07d8      	lsls	r0, r3, #31
 800808a:	d405      	bmi.n	8008098 <_putc_r+0x2c>
 800808c:	89a3      	ldrh	r3, [r4, #12]
 800808e:	0599      	lsls	r1, r3, #22
 8008090:	d402      	bmi.n	8008098 <_putc_r+0x2c>
 8008092:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008094:	f7ff fea2 	bl	8007ddc <__retarget_lock_acquire_recursive>
 8008098:	68a3      	ldr	r3, [r4, #8]
 800809a:	3b01      	subs	r3, #1
 800809c:	2b00      	cmp	r3, #0
 800809e:	60a3      	str	r3, [r4, #8]
 80080a0:	da05      	bge.n	80080ae <_putc_r+0x42>
 80080a2:	69a2      	ldr	r2, [r4, #24]
 80080a4:	4293      	cmp	r3, r2
 80080a6:	db1c      	blt.n	80080e2 <_putc_r+0x76>
 80080a8:	b2eb      	uxtb	r3, r5
 80080aa:	2b0a      	cmp	r3, #10
 80080ac:	d019      	beq.n	80080e2 <_putc_r+0x76>
 80080ae:	6823      	ldr	r3, [r4, #0]
 80080b0:	1c5a      	adds	r2, r3, #1
 80080b2:	6022      	str	r2, [r4, #0]
 80080b4:	701d      	strb	r5, [r3, #0]
 80080b6:	b2ed      	uxtb	r5, r5
 80080b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080ba:	07da      	lsls	r2, r3, #31
 80080bc:	d405      	bmi.n	80080ca <_putc_r+0x5e>
 80080be:	89a3      	ldrh	r3, [r4, #12]
 80080c0:	059b      	lsls	r3, r3, #22
 80080c2:	d402      	bmi.n	80080ca <_putc_r+0x5e>
 80080c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080c6:	f7ff fe8a 	bl	8007dde <__retarget_lock_release_recursive>
 80080ca:	4628      	mov	r0, r5
 80080cc:	bd70      	pop	{r4, r5, r6, pc}
 80080ce:	4b09      	ldr	r3, [pc, #36]	; (80080f4 <_putc_r+0x88>)
 80080d0:	429c      	cmp	r4, r3
 80080d2:	d101      	bne.n	80080d8 <_putc_r+0x6c>
 80080d4:	68b4      	ldr	r4, [r6, #8]
 80080d6:	e7d6      	b.n	8008086 <_putc_r+0x1a>
 80080d8:	4b07      	ldr	r3, [pc, #28]	; (80080f8 <_putc_r+0x8c>)
 80080da:	429c      	cmp	r4, r3
 80080dc:	bf08      	it	eq
 80080de:	68f4      	ldreq	r4, [r6, #12]
 80080e0:	e7d1      	b.n	8008086 <_putc_r+0x1a>
 80080e2:	4629      	mov	r1, r5
 80080e4:	4622      	mov	r2, r4
 80080e6:	4630      	mov	r0, r6
 80080e8:	f7ff fbf8 	bl	80078dc <__swbuf_r>
 80080ec:	4605      	mov	r5, r0
 80080ee:	e7e3      	b.n	80080b8 <_putc_r+0x4c>
 80080f0:	08008830 	.word	0x08008830
 80080f4:	08008850 	.word	0x08008850
 80080f8:	08008810 	.word	0x08008810

080080fc <_sbrk_r>:
 80080fc:	b538      	push	{r3, r4, r5, lr}
 80080fe:	4d06      	ldr	r5, [pc, #24]	; (8008118 <_sbrk_r+0x1c>)
 8008100:	2300      	movs	r3, #0
 8008102:	4604      	mov	r4, r0
 8008104:	4608      	mov	r0, r1
 8008106:	602b      	str	r3, [r5, #0]
 8008108:	f7fa fa70 	bl	80025ec <_sbrk>
 800810c:	1c43      	adds	r3, r0, #1
 800810e:	d102      	bne.n	8008116 <_sbrk_r+0x1a>
 8008110:	682b      	ldr	r3, [r5, #0]
 8008112:	b103      	cbz	r3, 8008116 <_sbrk_r+0x1a>
 8008114:	6023      	str	r3, [r4, #0]
 8008116:	bd38      	pop	{r3, r4, r5, pc}
 8008118:	200003f0 	.word	0x200003f0

0800811c <_raise_r>:
 800811c:	291f      	cmp	r1, #31
 800811e:	b538      	push	{r3, r4, r5, lr}
 8008120:	4604      	mov	r4, r0
 8008122:	460d      	mov	r5, r1
 8008124:	d904      	bls.n	8008130 <_raise_r+0x14>
 8008126:	2316      	movs	r3, #22
 8008128:	6003      	str	r3, [r0, #0]
 800812a:	f04f 30ff 	mov.w	r0, #4294967295
 800812e:	bd38      	pop	{r3, r4, r5, pc}
 8008130:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008132:	b112      	cbz	r2, 800813a <_raise_r+0x1e>
 8008134:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008138:	b94b      	cbnz	r3, 800814e <_raise_r+0x32>
 800813a:	4620      	mov	r0, r4
 800813c:	f000 f830 	bl	80081a0 <_getpid_r>
 8008140:	462a      	mov	r2, r5
 8008142:	4601      	mov	r1, r0
 8008144:	4620      	mov	r0, r4
 8008146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800814a:	f000 b817 	b.w	800817c <_kill_r>
 800814e:	2b01      	cmp	r3, #1
 8008150:	d00a      	beq.n	8008168 <_raise_r+0x4c>
 8008152:	1c59      	adds	r1, r3, #1
 8008154:	d103      	bne.n	800815e <_raise_r+0x42>
 8008156:	2316      	movs	r3, #22
 8008158:	6003      	str	r3, [r0, #0]
 800815a:	2001      	movs	r0, #1
 800815c:	e7e7      	b.n	800812e <_raise_r+0x12>
 800815e:	2400      	movs	r4, #0
 8008160:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008164:	4628      	mov	r0, r5
 8008166:	4798      	blx	r3
 8008168:	2000      	movs	r0, #0
 800816a:	e7e0      	b.n	800812e <_raise_r+0x12>

0800816c <raise>:
 800816c:	4b02      	ldr	r3, [pc, #8]	; (8008178 <raise+0xc>)
 800816e:	4601      	mov	r1, r0
 8008170:	6818      	ldr	r0, [r3, #0]
 8008172:	f7ff bfd3 	b.w	800811c <_raise_r>
 8008176:	bf00      	nop
 8008178:	200001c4 	.word	0x200001c4

0800817c <_kill_r>:
 800817c:	b538      	push	{r3, r4, r5, lr}
 800817e:	4d07      	ldr	r5, [pc, #28]	; (800819c <_kill_r+0x20>)
 8008180:	2300      	movs	r3, #0
 8008182:	4604      	mov	r4, r0
 8008184:	4608      	mov	r0, r1
 8008186:	4611      	mov	r1, r2
 8008188:	602b      	str	r3, [r5, #0]
 800818a:	f7fa f9c3 	bl	8002514 <_kill>
 800818e:	1c43      	adds	r3, r0, #1
 8008190:	d102      	bne.n	8008198 <_kill_r+0x1c>
 8008192:	682b      	ldr	r3, [r5, #0]
 8008194:	b103      	cbz	r3, 8008198 <_kill_r+0x1c>
 8008196:	6023      	str	r3, [r4, #0]
 8008198:	bd38      	pop	{r3, r4, r5, pc}
 800819a:	bf00      	nop
 800819c:	200003f0 	.word	0x200003f0

080081a0 <_getpid_r>:
 80081a0:	f7fa b9b0 	b.w	8002504 <_getpid>

080081a4 <__sread>:
 80081a4:	b510      	push	{r4, lr}
 80081a6:	460c      	mov	r4, r1
 80081a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ac:	f000 f8a0 	bl	80082f0 <_read_r>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	bfab      	itete	ge
 80081b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80081b6:	89a3      	ldrhlt	r3, [r4, #12]
 80081b8:	181b      	addge	r3, r3, r0
 80081ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80081be:	bfac      	ite	ge
 80081c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80081c2:	81a3      	strhlt	r3, [r4, #12]
 80081c4:	bd10      	pop	{r4, pc}

080081c6 <__swrite>:
 80081c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081ca:	461f      	mov	r7, r3
 80081cc:	898b      	ldrh	r3, [r1, #12]
 80081ce:	05db      	lsls	r3, r3, #23
 80081d0:	4605      	mov	r5, r0
 80081d2:	460c      	mov	r4, r1
 80081d4:	4616      	mov	r6, r2
 80081d6:	d505      	bpl.n	80081e4 <__swrite+0x1e>
 80081d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081dc:	2302      	movs	r3, #2
 80081de:	2200      	movs	r2, #0
 80081e0:	f000 f868 	bl	80082b4 <_lseek_r>
 80081e4:	89a3      	ldrh	r3, [r4, #12]
 80081e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081ee:	81a3      	strh	r3, [r4, #12]
 80081f0:	4632      	mov	r2, r6
 80081f2:	463b      	mov	r3, r7
 80081f4:	4628      	mov	r0, r5
 80081f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081fa:	f000 b817 	b.w	800822c <_write_r>

080081fe <__sseek>:
 80081fe:	b510      	push	{r4, lr}
 8008200:	460c      	mov	r4, r1
 8008202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008206:	f000 f855 	bl	80082b4 <_lseek_r>
 800820a:	1c43      	adds	r3, r0, #1
 800820c:	89a3      	ldrh	r3, [r4, #12]
 800820e:	bf15      	itete	ne
 8008210:	6560      	strne	r0, [r4, #84]	; 0x54
 8008212:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008216:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800821a:	81a3      	strheq	r3, [r4, #12]
 800821c:	bf18      	it	ne
 800821e:	81a3      	strhne	r3, [r4, #12]
 8008220:	bd10      	pop	{r4, pc}

08008222 <__sclose>:
 8008222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008226:	f000 b813 	b.w	8008250 <_close_r>
	...

0800822c <_write_r>:
 800822c:	b538      	push	{r3, r4, r5, lr}
 800822e:	4d07      	ldr	r5, [pc, #28]	; (800824c <_write_r+0x20>)
 8008230:	4604      	mov	r4, r0
 8008232:	4608      	mov	r0, r1
 8008234:	4611      	mov	r1, r2
 8008236:	2200      	movs	r2, #0
 8008238:	602a      	str	r2, [r5, #0]
 800823a:	461a      	mov	r2, r3
 800823c:	f7f8 ff41 	bl	80010c2 <_write>
 8008240:	1c43      	adds	r3, r0, #1
 8008242:	d102      	bne.n	800824a <_write_r+0x1e>
 8008244:	682b      	ldr	r3, [r5, #0]
 8008246:	b103      	cbz	r3, 800824a <_write_r+0x1e>
 8008248:	6023      	str	r3, [r4, #0]
 800824a:	bd38      	pop	{r3, r4, r5, pc}
 800824c:	200003f0 	.word	0x200003f0

08008250 <_close_r>:
 8008250:	b538      	push	{r3, r4, r5, lr}
 8008252:	4d06      	ldr	r5, [pc, #24]	; (800826c <_close_r+0x1c>)
 8008254:	2300      	movs	r3, #0
 8008256:	4604      	mov	r4, r0
 8008258:	4608      	mov	r0, r1
 800825a:	602b      	str	r3, [r5, #0]
 800825c:	f7fa f991 	bl	8002582 <_close>
 8008260:	1c43      	adds	r3, r0, #1
 8008262:	d102      	bne.n	800826a <_close_r+0x1a>
 8008264:	682b      	ldr	r3, [r5, #0]
 8008266:	b103      	cbz	r3, 800826a <_close_r+0x1a>
 8008268:	6023      	str	r3, [r4, #0]
 800826a:	bd38      	pop	{r3, r4, r5, pc}
 800826c:	200003f0 	.word	0x200003f0

08008270 <_fstat_r>:
 8008270:	b538      	push	{r3, r4, r5, lr}
 8008272:	4d07      	ldr	r5, [pc, #28]	; (8008290 <_fstat_r+0x20>)
 8008274:	2300      	movs	r3, #0
 8008276:	4604      	mov	r4, r0
 8008278:	4608      	mov	r0, r1
 800827a:	4611      	mov	r1, r2
 800827c:	602b      	str	r3, [r5, #0]
 800827e:	f7fa f98c 	bl	800259a <_fstat>
 8008282:	1c43      	adds	r3, r0, #1
 8008284:	d102      	bne.n	800828c <_fstat_r+0x1c>
 8008286:	682b      	ldr	r3, [r5, #0]
 8008288:	b103      	cbz	r3, 800828c <_fstat_r+0x1c>
 800828a:	6023      	str	r3, [r4, #0]
 800828c:	bd38      	pop	{r3, r4, r5, pc}
 800828e:	bf00      	nop
 8008290:	200003f0 	.word	0x200003f0

08008294 <_isatty_r>:
 8008294:	b538      	push	{r3, r4, r5, lr}
 8008296:	4d06      	ldr	r5, [pc, #24]	; (80082b0 <_isatty_r+0x1c>)
 8008298:	2300      	movs	r3, #0
 800829a:	4604      	mov	r4, r0
 800829c:	4608      	mov	r0, r1
 800829e:	602b      	str	r3, [r5, #0]
 80082a0:	f7fa f98b 	bl	80025ba <_isatty>
 80082a4:	1c43      	adds	r3, r0, #1
 80082a6:	d102      	bne.n	80082ae <_isatty_r+0x1a>
 80082a8:	682b      	ldr	r3, [r5, #0]
 80082aa:	b103      	cbz	r3, 80082ae <_isatty_r+0x1a>
 80082ac:	6023      	str	r3, [r4, #0]
 80082ae:	bd38      	pop	{r3, r4, r5, pc}
 80082b0:	200003f0 	.word	0x200003f0

080082b4 <_lseek_r>:
 80082b4:	b538      	push	{r3, r4, r5, lr}
 80082b6:	4d07      	ldr	r5, [pc, #28]	; (80082d4 <_lseek_r+0x20>)
 80082b8:	4604      	mov	r4, r0
 80082ba:	4608      	mov	r0, r1
 80082bc:	4611      	mov	r1, r2
 80082be:	2200      	movs	r2, #0
 80082c0:	602a      	str	r2, [r5, #0]
 80082c2:	461a      	mov	r2, r3
 80082c4:	f7fa f984 	bl	80025d0 <_lseek>
 80082c8:	1c43      	adds	r3, r0, #1
 80082ca:	d102      	bne.n	80082d2 <_lseek_r+0x1e>
 80082cc:	682b      	ldr	r3, [r5, #0]
 80082ce:	b103      	cbz	r3, 80082d2 <_lseek_r+0x1e>
 80082d0:	6023      	str	r3, [r4, #0]
 80082d2:	bd38      	pop	{r3, r4, r5, pc}
 80082d4:	200003f0 	.word	0x200003f0

080082d8 <__malloc_lock>:
 80082d8:	4801      	ldr	r0, [pc, #4]	; (80082e0 <__malloc_lock+0x8>)
 80082da:	f7ff bd7f 	b.w	8007ddc <__retarget_lock_acquire_recursive>
 80082de:	bf00      	nop
 80082e0:	200003e4 	.word	0x200003e4

080082e4 <__malloc_unlock>:
 80082e4:	4801      	ldr	r0, [pc, #4]	; (80082ec <__malloc_unlock+0x8>)
 80082e6:	f7ff bd7a 	b.w	8007dde <__retarget_lock_release_recursive>
 80082ea:	bf00      	nop
 80082ec:	200003e4 	.word	0x200003e4

080082f0 <_read_r>:
 80082f0:	b538      	push	{r3, r4, r5, lr}
 80082f2:	4d07      	ldr	r5, [pc, #28]	; (8008310 <_read_r+0x20>)
 80082f4:	4604      	mov	r4, r0
 80082f6:	4608      	mov	r0, r1
 80082f8:	4611      	mov	r1, r2
 80082fa:	2200      	movs	r2, #0
 80082fc:	602a      	str	r2, [r5, #0]
 80082fe:	461a      	mov	r2, r3
 8008300:	f7fa f922 	bl	8002548 <_read>
 8008304:	1c43      	adds	r3, r0, #1
 8008306:	d102      	bne.n	800830e <_read_r+0x1e>
 8008308:	682b      	ldr	r3, [r5, #0]
 800830a:	b103      	cbz	r3, 800830e <_read_r+0x1e>
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	bd38      	pop	{r3, r4, r5, pc}
 8008310:	200003f0 	.word	0x200003f0

08008314 <_init>:
 8008314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008316:	bf00      	nop
 8008318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800831a:	bc08      	pop	{r3}
 800831c:	469e      	mov	lr, r3
 800831e:	4770      	bx	lr

08008320 <_fini>:
 8008320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008322:	bf00      	nop
 8008324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008326:	bc08      	pop	{r3}
 8008328:	469e      	mov	lr, r3
 800832a:	4770      	bx	lr
