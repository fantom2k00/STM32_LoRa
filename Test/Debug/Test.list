
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  0800523c  0800523c  0001523c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053e8  080053e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080053e8  080053e8  000153e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053f0  080053f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053f0  080053f0  000153f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053f4  080053f4  000153f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080053f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000070  08005468  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08005468  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c306  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a35  00000000  00000000  0002c3a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002dde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002e818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c0d6  00000000  00000000  0002f1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0d7  00000000  00000000  0004b27e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0441  00000000  00000000  00057355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7796  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031e4  00000000  00000000  000f77e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005224 	.word	0x08005224

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005224 	.word	0x08005224

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	460b      	mov	r3, r1
 800057e:	70fb      	strb	r3, [r7, #3]
	uint8_t value = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	73fb      	strb	r3, [r7, #15]

	// 7bit controls read/write mode
	CLEAR_BIT(address, BIT_7);
 8000584:	78fb      	ldrb	r3, [r7, #3]
 8000586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800058a:	b2db      	uxtb	r3, r3
 800058c:	70fb      	strb	r3, [r7, #3]

	// Start SPI transaction
	HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6858      	ldr	r0, [r3, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	8adb      	ldrh	r3, [r3, #22]
 8000596:	2200      	movs	r2, #0
 8000598:	4619      	mov	r1, r3
 800059a:	f001 f935 	bl	8001808 <HAL_GPIO_WritePin>
	// Transmit reg address, then receive it value
	uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6818      	ldr	r0, [r3, #0]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	689b      	ldr	r3, [r3, #8]
 80005a6:	1cf9      	adds	r1, r7, #3
 80005a8:	2201      	movs	r2, #1
 80005aa:	f002 fc64 	bl	8002e76 <HAL_SPI_Transmit>
 80005ae:	4603      	mov	r3, r0
 80005b0:	617b      	str	r3, [r7, #20]
	uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6818      	ldr	r0, [r3, #0]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	f107 010f 	add.w	r1, r7, #15
 80005be:	2201      	movs	r2, #1
 80005c0:	f002 fdc7 	bl	8003152 <HAL_SPI_Receive>
 80005c4:	4603      	mov	r3, r0
 80005c6:	613b      	str	r3, [r7, #16]
	// End SPI transaction
	HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6858      	ldr	r0, [r3, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	8adb      	ldrh	r3, [r3, #22]
 80005d0:	2201      	movs	r2, #1
 80005d2:	4619      	mov	r1, r3
 80005d4:	f001 f918 	bl	8001808 <HAL_GPIO_WritePin>

	if (res1 != HAL_OK || res2 != HAL_OK) {
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d102      	bne.n	80005e4 <read_register+0x70>
 80005de:	693b      	ldr	r3, [r7, #16]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d003      	beq.n	80005ec <read_register+0x78>
		printf("SPI transmit/receive failed\n");
 80005e4:	4806      	ldr	r0, [pc, #24]	; (8000600 <read_register+0x8c>)
 80005e6:	f003 fe9f 	bl	8004328 <puts>
 80005ea:	e004      	b.n	80005f6 <read_register+0x82>
	}
	else {
		printf("SPI successful, register data: %d\n", value);
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	4619      	mov	r1, r3
 80005f0:	4804      	ldr	r0, [pc, #16]	; (8000604 <read_register+0x90>)
 80005f2:	f003 fe13 	bl	800421c <iprintf>
	}
	return value;
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3718      	adds	r7, #24
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	0800523c 	.word	0x0800523c
 8000604:	08005258 	.word	0x08005258

08000608 <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	70fb      	strb	r3, [r7, #3]
 8000614:	4613      	mov	r3, r2
 8000616:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 8000618:	78fb      	ldrb	r3, [r7, #3]
 800061a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800061e:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8000620:	78bb      	ldrb	r3, [r7, #2]
 8000622:	021b      	lsls	r3, r3, #8
 8000624:	b21a      	sxth	r2, r3
 8000626:	78fb      	ldrb	r3, [r7, #3]
 8000628:	b21b      	sxth	r3, r3
 800062a:	4313      	orrs	r3, r2
 800062c:	b21b      	sxth	r3, r3
 800062e:	b29b      	uxth	r3, r3
 8000630:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6858      	ldr	r0, [r3, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	8adb      	ldrh	r3, [r3, #22]
 800063a:	2200      	movs	r2, #0
 800063c:	4619      	mov	r1, r3
 800063e:	f001 f8e3 	bl	8001808 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6818      	ldr	r0, [r3, #0]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	689b      	ldr	r3, [r3, #8]
 800064a:	f107 010a 	add.w	r1, r7, #10
 800064e:	2202      	movs	r2, #2
 8000650:	f002 fc11 	bl	8002e76 <HAL_SPI_Transmit>
 8000654:	4603      	mov	r3, r0
 8000656:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6858      	ldr	r0, [r3, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	8adb      	ldrh	r3, [r3, #22]
 8000660:	2201      	movs	r2, #1
 8000662:	4619      	mov	r1, r3
 8000664:	f001 f8d0 	bl	8001808 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 8000668:	bf00      	nop
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	460b      	mov	r3, r1
 800067a:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 800067c:	78fb      	ldrb	r3, [r7, #3]
 800067e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000682:	b2db      	uxtb	r3, r3
 8000684:	461a      	mov	r2, r3
 8000686:	2101      	movs	r1, #1
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f7ff ffbd 	bl	8000608 <write_register>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	2b2c      	cmp	r3, #44	; 0x2c
 80006a8:	d801      	bhi.n	80006ae <set_OCP+0x16>
    imax = 45;
 80006aa:	232d      	movs	r3, #45	; 0x2d
 80006ac:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 80006ae:	78fb      	ldrb	r3, [r7, #3]
 80006b0:	2bf0      	cmp	r3, #240	; 0xf0
 80006b2:	d901      	bls.n	80006b8 <set_OCP+0x20>
    imax = 240;
 80006b4:	23f0      	movs	r3, #240	; 0xf0
 80006b6:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 80006b8:	78fb      	ldrb	r3, [r7, #3]
 80006ba:	2b81      	cmp	r3, #129	; 0x81
 80006bc:	d809      	bhi.n	80006d2 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 80006be:	78fb      	ldrb	r3, [r7, #3]
 80006c0:	3b2d      	subs	r3, #45	; 0x2d
 80006c2:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <set_OCP+0x68>)
 80006c4:	fb82 1203 	smull	r1, r2, r2, r3
 80006c8:	1052      	asrs	r2, r2, #1
 80006ca:	17db      	asrs	r3, r3, #31
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	73fb      	strb	r3, [r7, #15]
 80006d0:	e008      	b.n	80006e4 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 80006d2:	78fb      	ldrb	r3, [r7, #3]
 80006d4:	331e      	adds	r3, #30
 80006d6:	4a0a      	ldr	r2, [pc, #40]	; (8000700 <set_OCP+0x68>)
 80006d8:	fb82 1203 	smull	r1, r2, r2, r3
 80006dc:	1092      	asrs	r2, r2, #2
 80006de:	17db      	asrs	r3, r3, #31
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	f043 0320 	orr.w	r3, r3, #32
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	461a      	mov	r2, r3
 80006ee:	210b      	movs	r1, #11
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f7ff ff89 	bl	8000608 <write_register>
}
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	66666667 	.word	0x66666667

08000704 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8000704:	b5b0      	push	{r4, r5, r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 800070c:	211d      	movs	r1, #29
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f7ff ff30 	bl	8000574 <read_register>
 8000714:	4603      	mov	r3, r0
 8000716:	091b      	lsrs	r3, r3, #4
 8000718:	b2db      	uxtb	r3, r3
 800071a:	b2db      	uxtb	r3, r3
 800071c:	2200      	movs	r2, #0
 800071e:	461c      	mov	r4, r3
 8000720:	4615      	mov	r5, r2
 8000722:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8000726:	211e      	movs	r1, #30
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f7ff ff23 	bl	8000574 <read_register>
 800072e:	4603      	mov	r3, r0
 8000730:	091b      	lsrs	r3, r3, #4
 8000732:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8000734:	2304      	movs	r3, #4
 8000736:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	2b0a      	cmp	r3, #10
 800073c:	d908      	bls.n	8000750 <set_low_data_rate_optimization+0x4c>
 800073e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000742:	1fd1      	subs	r1, r2, #7
 8000744:	430b      	orrs	r3, r1
 8000746:	d103      	bne.n	8000750 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8000748:	7ffb      	ldrb	r3, [r7, #31]
 800074a:	f043 0308 	orr.w	r3, r3, #8
 800074e:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8000750:	7ffb      	ldrb	r3, [r7, #31]
 8000752:	461a      	mov	r2, r3
 8000754:	2126      	movs	r1, #38	; 0x26
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f7ff ff56 	bl	8000608 <write_register>
}
 800075c:	bf00      	nop
 800075e:	3720      	adds	r7, #32
 8000760:	46bd      	mov	sp, r7
 8000762:	bdb0      	pop	{r4, r5, r7, pc}

08000764 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 800076c:	2100      	movs	r1, #0
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ff7e 	bl	8000670 <set_mode>
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8000784:	2101      	movs	r1, #1
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f7ff ff72 	bl	8000670 <set_mode>
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 800079c:	211d      	movs	r1, #29
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff fee8 	bl	8000574 <read_register>
 80007a4:	4603      	mov	r3, r0
 80007a6:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	f023 0301 	bic.w	r3, r3, #1
 80007ae:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	461a      	mov	r2, r3
 80007b4:	211d      	movs	r1, #29
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f7ff ff26 	bl	8000608 <write_register>
}
 80007bc:	bf00      	nop
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	691b      	ldr	r3, [r3, #16]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d10e      	bne.n	80007f6 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 80007d8:	78fb      	ldrb	r3, [r7, #3]
 80007da:	2b0f      	cmp	r3, #15
 80007dc:	d901      	bls.n	80007e2 <lora_set_tx_power+0x1e>
      level = 15;
 80007de:	230f      	movs	r3, #15
 80007e0:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 80007e2:	78fb      	ldrb	r3, [r7, #3]
 80007e4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	461a      	mov	r2, r3
 80007ec:	2109      	movs	r1, #9
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff ff0a 	bl	8000608 <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 80007f4:	e02e      	b.n	8000854 <lora_set_tx_power+0x90>
    if (level > 20) {
 80007f6:	78fb      	ldrb	r3, [r7, #3]
 80007f8:	2b14      	cmp	r3, #20
 80007fa:	d901      	bls.n	8000800 <lora_set_tx_power+0x3c>
      level = 20;
 80007fc:	2314      	movs	r3, #20
 80007fe:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8000800:	78fb      	ldrb	r3, [r7, #3]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d801      	bhi.n	800080a <lora_set_tx_power+0x46>
      level = 2;
 8000806:	2302      	movs	r3, #2
 8000808:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 800080a:	78fb      	ldrb	r3, [r7, #3]
 800080c:	2b11      	cmp	r3, #17
 800080e:	d90c      	bls.n	800082a <lora_set_tx_power+0x66>
      level -= 3;
 8000810:	78fb      	ldrb	r3, [r7, #3]
 8000812:	3b03      	subs	r3, #3
 8000814:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8000816:	2287      	movs	r2, #135	; 0x87
 8000818:	214d      	movs	r1, #77	; 0x4d
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff fef4 	bl	8000608 <write_register>
      set_OCP(lora, 140);
 8000820:	218c      	movs	r1, #140	; 0x8c
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f7ff ff38 	bl	8000698 <set_OCP>
 8000828:	e008      	b.n	800083c <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 800082a:	2284      	movs	r2, #132	; 0x84
 800082c:	214d      	movs	r1, #77	; 0x4d
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f7ff feea 	bl	8000608 <write_register>
      set_OCP(lora, 97);
 8000834:	2161      	movs	r1, #97	; 0x61
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f7ff ff2e 	bl	8000698 <set_OCP>
    level -= 2;
 800083c:	78fb      	ldrb	r3, [r7, #3]
 800083e:	3b02      	subs	r3, #2
 8000840:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8000842:	78fb      	ldrb	r3, [r7, #3]
 8000844:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000848:	b2db      	uxtb	r3, r3
 800084a:	461a      	mov	r2, r3
 800084c:	2109      	movs	r1, #9
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff feda 	bl	8000608 <write_register>
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8000868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	f04f 0100 	mov.w	r1, #0
 8000874:	04d9      	lsls	r1, r3, #19
 8000876:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800087a:	04d0      	lsls	r0, r2, #19
 800087c:	4a19      	ldr	r2, [pc, #100]	; (80008e4 <lora_set_frequency+0x88>)
 800087e:	f04f 0300 	mov.w	r3, #0
 8000882:	f7ff fcf5 	bl	8000270 <__aeabi_uldivmod>
 8000886:	4602      	mov	r2, r0
 8000888:	460b      	mov	r3, r1
 800088a:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 800088e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000892:	f04f 0200 	mov.w	r2, #0
 8000896:	f04f 0300 	mov.w	r3, #0
 800089a:	0c02      	lsrs	r2, r0, #16
 800089c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008a0:	0c0b      	lsrs	r3, r1, #16
 80008a2:	b2d3      	uxtb	r3, r2
 80008a4:	461a      	mov	r2, r3
 80008a6:	2106      	movs	r1, #6
 80008a8:	68f8      	ldr	r0, [r7, #12]
 80008aa:	f7ff fead 	bl	8000608 <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 80008ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80008b2:	f04f 0200 	mov.w	r2, #0
 80008b6:	f04f 0300 	mov.w	r3, #0
 80008ba:	0a02      	lsrs	r2, r0, #8
 80008bc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80008c0:	0a0b      	lsrs	r3, r1, #8
 80008c2:	b2d3      	uxtb	r3, r2
 80008c4:	461a      	mov	r2, r3
 80008c6:	2107      	movs	r1, #7
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	f7ff fe9d 	bl	8000608 <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 80008ce:	7c3b      	ldrb	r3, [r7, #16]
 80008d0:	461a      	mov	r2, r3
 80008d2:	2108      	movs	r1, #8
 80008d4:	68f8      	ldr	r0, [r7, #12]
 80008d6:	f7ff fe97 	bl	8000608 <write_register>
}
 80008da:	bf00      	nop
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	01e84800 	.word	0x01e84800

080008e8 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	460b      	mov	r3, r1
 80008f2:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 80008f4:	78fb      	ldrb	r3, [r7, #3]
 80008f6:	2b05      	cmp	r3, #5
 80008f8:	d802      	bhi.n	8000900 <lora_set_spreading_factor+0x18>
    sf = 6;
 80008fa:	2306      	movs	r3, #6
 80008fc:	70fb      	strb	r3, [r7, #3]
 80008fe:	e004      	b.n	800090a <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8000900:	78fb      	ldrb	r3, [r7, #3]
 8000902:	2b0c      	cmp	r3, #12
 8000904:	d901      	bls.n	800090a <lora_set_spreading_factor+0x22>
    sf = 12;
 8000906:	230c      	movs	r3, #12
 8000908:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 800090a:	78fb      	ldrb	r3, [r7, #3]
 800090c:	2b06      	cmp	r3, #6
 800090e:	d10a      	bne.n	8000926 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8000910:	22c5      	movs	r2, #197	; 0xc5
 8000912:	2131      	movs	r1, #49	; 0x31
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff fe77 	bl	8000608 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 800091a:	220c      	movs	r2, #12
 800091c:	2137      	movs	r1, #55	; 0x37
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff fe72 	bl	8000608 <write_register>
 8000924:	e009      	b.n	800093a <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8000926:	22c3      	movs	r2, #195	; 0xc3
 8000928:	2131      	movs	r1, #49	; 0x31
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff fe6c 	bl	8000608 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8000930:	220a      	movs	r2, #10
 8000932:	2137      	movs	r1, #55	; 0x37
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff fe67 	bl	8000608 <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 800093a:	211e      	movs	r1, #30
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff fe19 	bl	8000574 <read_register>
 8000942:	4603      	mov	r3, r0
 8000944:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 8000946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800094a:	f003 030f 	and.w	r3, r3, #15
 800094e:	b25a      	sxtb	r2, r3
 8000950:	78fb      	ldrb	r3, [r7, #3]
 8000952:	011b      	lsls	r3, r3, #4
 8000954:	b25b      	sxtb	r3, r3
 8000956:	4313      	orrs	r3, r2
 8000958:	b25b      	sxtb	r3, r3
 800095a:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	461a      	mov	r2, r3
 8000960:	211e      	movs	r1, #30
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff fe50 	bl	8000608 <write_register>

  set_low_data_rate_optimization(lora);
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f7ff fecb 	bl	8000704 <set_low_data_rate_optimization>
}
 800096e:	bf00      	nop
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
 800097e:	460b      	mov	r3, r1
 8000980:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8000982:	887b      	ldrh	r3, [r7, #2]
 8000984:	0a1b      	lsrs	r3, r3, #8
 8000986:	b29b      	uxth	r3, r3
 8000988:	b2db      	uxtb	r3, r3
 800098a:	461a      	mov	r2, r3
 800098c:	2120      	movs	r1, #32
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f7ff fe3a 	bl	8000608 <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8000994:	887b      	ldrh	r3, [r7, #2]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	f003 030f 	and.w	r3, r3, #15
 800099c:	b2db      	uxtb	r3, r3
 800099e:	461a      	mov	r2, r3
 80009a0:	2121      	movs	r1, #33	; 0x21
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff fe30 	bl	8000608 <write_register>
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 80009b8:	2142      	movs	r1, #66	; 0x42
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff fdda 	bl	8000574 <read_register>
 80009c0:	4603      	mov	r3, r0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b084      	sub	sp, #16
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 80009d2:	2101      	movs	r1, #1
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff fdcd 	bl	8000574 <read_register>
 80009da:	4603      	mov	r3, r0
 80009dc:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 80009de:	7bfb      	ldrb	r3, [r7, #15]
 80009e0:	f003 0303 	and.w	r3, r3, #3
 80009e4:	2b03      	cmp	r3, #3
 80009e6:	d101      	bne.n	80009ec <lora_is_transmitting+0x22>
 80009e8:	2305      	movs	r3, #5
 80009ea:	e000      	b.n	80009ee <lora_is_transmitting+0x24>
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	4611      	mov	r1, r2
 8000a04:	461a      	mov	r2, r3
 8000a06:	460b      	mov	r3, r1
 8000a08:	71fb      	strb	r3, [r7, #7]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	71bb      	strb	r3, [r7, #6]
	printf("Sending packet...\n");
 8000a0e:	4809      	ldr	r0, [pc, #36]	; (8000a34 <lora_send_packet_base+0x3c>)
 8000a10:	f003 fc8a 	bl	8004328 <puts>
	assert_param(lora && data && data_len > 0);

	if (lora_is_transmitting(lora)) {
 8000a14:	68f8      	ldr	r0, [r7, #12]
 8000a16:	f7ff ffd8 	bl	80009ca <lora_is_transmitting>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d004      	beq.n	8000a2a <lora_send_packet_base+0x32>
		printf("Sending packet failed, LoRa is busy\n");
 8000a20:	4805      	ldr	r0, [pc, #20]	; (8000a38 <lora_send_packet_base+0x40>)
 8000a22:	f003 fc81 	bl	8004328 <puts>
		return LORA_BUSY;
 8000a26:	2305      	movs	r3, #5
 8000a28:	e000      	b.n	8000a2c <lora_send_packet_base+0x34>
    return LORA_OK;
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);*/
  return LORA_OK;
 8000a2a:	2300      	movs	r3, #0
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	0800527c 	.word	0x0800527c
 8000a38:	08005290 	.word	0x08005290

08000a3c <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	4613      	mov	r3, r2
 8000a48:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 8000a4a:	79fa      	ldrb	r2, [r7, #7]
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	68b9      	ldr	r1, [r7, #8]
 8000a50:	68f8      	ldr	r0, [r7, #12]
 8000a52:	f7ff ffd1 	bl	80009f8 <lora_send_packet_base>
 8000a56:	4603      	mov	r3, r0
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
 8000a6c:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	68ba      	ldr	r2, [r7, #8]
 8000a72:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	887a      	ldrh	r2, [r7, #2]
 8000a7e:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8000a80:	6a3a      	ldr	r2, [r7, #32]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	2201      	movs	r2, #1
 8000a8a:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	2200      	movs	r2, #0
 8000a96:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a9e:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 8000aa0:	68f8      	ldr	r0, [r7, #12]
 8000aa2:	f7ff ff85 	bl	80009b0 <lora_version>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 8000aaa:	7dfb      	ldrb	r3, [r7, #23]
 8000aac:	2b0f      	cmp	r3, #15
 8000aae:	d006      	beq.n	8000abe <lora_init+0x5e>
    printf("LORA ERR: Got wrong radio version 0x%x, expected 0x12\n", ver);
 8000ab0:	7dfb      	ldrb	r3, [r7, #23]
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	481d      	ldr	r0, [pc, #116]	; (8000b2c <lora_init+0xcc>)
 8000ab6:	f003 fbb1 	bl	800421c <iprintf>
    return LORA_ERROR;
 8000aba:	2304      	movs	r3, #4
 8000abc:	e031      	b.n	8000b22 <lora_init+0xc2>
  }
  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f7ff fe50 	bl	8000764 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 8000ac4:	68f8      	ldr	r0, [r7, #12]
 8000ac6:	f7ff fe4d 	bl	8000764 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8000aca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ace:	68f8      	ldr	r0, [r7, #12]
 8000ad0:	f7ff fec4 	bl	800085c <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8000ad4:	2107      	movs	r1, #7
 8000ad6:	68f8      	ldr	r0, [r7, #12]
 8000ad8:	f7ff ff06 	bl	80008e8 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8000adc:	210a      	movs	r1, #10
 8000ade:	68f8      	ldr	r0, [r7, #12]
 8000ae0:	f7ff ff49 	bl	8000976 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8000ae4:	68f8      	ldr	r0, [r7, #12]
 8000ae6:	f7ff fe55 	bl	8000794 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8000aea:	210c      	movs	r1, #12
 8000aec:	68f8      	ldr	r0, [r7, #12]
 8000aee:	f7ff fd41 	bl	8000574 <read_register>
 8000af2:	4603      	mov	r3, r0
 8000af4:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8000af6:	7dbb      	ldrb	r3, [r7, #22]
 8000af8:	f043 0303 	orr.w	r3, r3, #3
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	461a      	mov	r2, r3
 8000b00:	210c      	movs	r1, #12
 8000b02:	68f8      	ldr	r0, [r7, #12]
 8000b04:	f7ff fd80 	bl	8000608 <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8000b08:	2204      	movs	r2, #4
 8000b0a:	2126      	movs	r1, #38	; 0x26
 8000b0c:	68f8      	ldr	r0, [r7, #12]
 8000b0e:	f7ff fd7b 	bl	8000608 <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8000b12:	2111      	movs	r1, #17
 8000b14:	68f8      	ldr	r0, [r7, #12]
 8000b16:	f7ff fe55 	bl	80007c4 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8000b1a:	68f8      	ldr	r0, [r7, #12]
 8000b1c:	f7ff fe2e 	bl	800077c <lora_mode_standby>

  return LORA_OK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	080052b4 	.word	0x080052b4

08000b30 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b38:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b3c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d013      	beq.n	8000b70 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b48:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b4c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000b50:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d00b      	beq.n	8000b70 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b58:	e000      	b.n	8000b5c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b5a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b5c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d0f9      	beq.n	8000b5a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b66:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	b2d2      	uxtb	r2, r2
 8000b6e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000b70:	687b      	ldr	r3, [r7, #4]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b086      	sub	sp, #24
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	60f8      	str	r0, [r7, #12]
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	e009      	b.n	8000ba4 <_write+0x26>
	{
	  ITM_SendChar(*ptr++);
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	1c5a      	adds	r2, r3, #1
 8000b94:	60ba      	str	r2, [r7, #8]
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ffc9 	bl	8000b30 <ITM_SendChar>
	for (int i = 0; i < len; i++)
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	697a      	ldr	r2, [r7, #20]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	dbf1      	blt.n	8000b90 <_write+0x12>
	}
	return len;
 8000bac:	687b      	ldr	r3, [r7, #4]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bbe:	f000 fb41 	bl	8001244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc2:	f000 f81f 	bl	8000c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc6:	f000 f901 	bl	8000dcc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bca:	f000 f8cf 	bl	8000d6c <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000bce:	f000 f85f 	bl	8000c90 <MX_SPI3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int counter = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bdc:	4808      	ldr	r0, [pc, #32]	; (8000c00 <main+0x48>)
 8000bde:	f000 fe13 	bl	8001808 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000be2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000be6:	f000 fb93 	bl	8001310 <HAL_Delay>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf0:	4803      	ldr	r0, [pc, #12]	; (8000c00 <main+0x48>)
 8000bf2:	f000 fe09 	bl	8001808 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000bf6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bfa:	f000 fb89 	bl	8001310 <HAL_Delay>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000bfe:	e7ea      	b.n	8000bd6 <main+0x1e>
 8000c00:	48000400 	.word	0x48000400

08000c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b090      	sub	sp, #64	; 0x40
 8000c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0a:	f107 0318 	add.w	r3, r7, #24
 8000c0e:	2228      	movs	r2, #40	; 0x28
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f003 fafa 	bl	800420c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c26:	2301      	movs	r3, #1
 8000c28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c34:	2301      	movs	r3, #1
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c42:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c48:	f107 0318 	add.w	r3, r7, #24
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 fdf3 	bl	8001838 <HAL_RCC_OscConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c58:	f000 f938 	bl	8000ecc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5c:	230f      	movs	r3, #15
 8000c5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c60:	2302      	movs	r3, #2
 8000c62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2102      	movs	r1, #2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 fe1c 	bl	80028b4 <HAL_RCC_ClockConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c82:	f000 f923 	bl	8000ecc <Error_Handler>
  }
}
 8000c86:	bf00      	nop
 8000c88:	3740      	adds	r7, #64	; 0x40
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c96:	4b30      	ldr	r3, [pc, #192]	; (8000d58 <MX_SPI3_Init+0xc8>)
 8000c98:	4a30      	ldr	r2, [pc, #192]	; (8000d5c <MX_SPI3_Init+0xcc>)
 8000c9a:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c9c:	4b2e      	ldr	r3, [pc, #184]	; (8000d58 <MX_SPI3_Init+0xc8>)
 8000c9e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ca2:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ca4:	4b2c      	ldr	r3, [pc, #176]	; (8000d58 <MX_SPI3_Init+0xc8>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000caa:	4b2b      	ldr	r3, [pc, #172]	; (8000d58 <MX_SPI3_Init+0xc8>)
 8000cac:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cb0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cb2:	4b29      	ldr	r3, [pc, #164]	; (8000d58 <MX_SPI3_Init+0xc8>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cb8:	4b27      	ldr	r3, [pc, #156]	; (8000d58 <MX_SPI3_Init+0xc8>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000cbe:	4b26      	ldr	r3, [pc, #152]	; (8000d58 <MX_SPI3_Init+0xc8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cc4:	4b24      	ldr	r3, [pc, #144]	; (8000d58 <MX_SPI3_Init+0xc8>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cca:	4b23      	ldr	r3, [pc, #140]	; (8000d58 <MX_SPI3_Init+0xc8>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cd0:	4b21      	ldr	r3, [pc, #132]	; (8000d58 <MX_SPI3_Init+0xc8>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd6:	4b20      	ldr	r3, [pc, #128]	; (8000d58 <MX_SPI3_Init+0xc8>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <MX_SPI3_Init+0xc8>)
 8000cde:	2207      	movs	r2, #7
 8000ce0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <MX_SPI3_Init+0xc8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <MX_SPI3_Init+0xc8>)
 8000cea:	2208      	movs	r2, #8
 8000cec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000cee:	481a      	ldr	r0, [pc, #104]	; (8000d58 <MX_SPI3_Init+0xc8>)
 8000cf0:	f002 f816 	bl	8002d20 <HAL_SPI_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000cfa:	f000 f8e7 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */
  lora_sx1276 lora;

  uint8_t res = lora_init(&lora, &hspi3, LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, LORA_BASE_FREQUENCY_US);
 8000cfe:	1d38      	adds	r0, r7, #4
 8000d00:	a313      	add	r3, pc, #76	; (adr r3, 8000d50 <MX_SPI3_Init+0xc0>)
 8000d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d06:	e9cd 2300 	strd	r2, r3, [sp]
 8000d0a:	2310      	movs	r3, #16
 8000d0c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d10:	4911      	ldr	r1, [pc, #68]	; (8000d58 <MX_SPI3_Init+0xc8>)
 8000d12:	f7ff fea5 	bl	8000a60 <lora_init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	77fb      	strb	r3, [r7, #31]
  if (res == LORA_OK) {
 8000d1a:	7ffb      	ldrb	r3, [r7, #31]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d102      	bne.n	8000d26 <MX_SPI3_Init+0x96>
	  printf("LoRa set up\n");
 8000d20:	480f      	ldr	r0, [pc, #60]	; (8000d60 <MX_SPI3_Init+0xd0>)
 8000d22:	f003 fb01 	bl	8004328 <puts>
  }
  res = lora_send_packet(&lora, (uint8_t *)"test", 4);
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	2204      	movs	r2, #4
 8000d2a:	490e      	ldr	r1, [pc, #56]	; (8000d64 <MX_SPI3_Init+0xd4>)
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fe85 	bl	8000a3c <lora_send_packet>
 8000d32:	4603      	mov	r3, r0
 8000d34:	77fb      	strb	r3, [r7, #31]
   if (res != LORA_OK) {
 8000d36:	7ffb      	ldrb	r3, [r7, #31]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d002      	beq.n	8000d42 <MX_SPI3_Init+0xb2>
	   printf("Sending packet failed\n");
 8000d3c:	480a      	ldr	r0, [pc, #40]	; (8000d68 <MX_SPI3_Init+0xd8>)
 8000d3e:	f003 faf3 	bl	8004328 <puts>
   }

  /* USER CODE END SPI3_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	3720      	adds	r7, #32
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	f3af 8000 	nop.w
 8000d50:	19cf0e40 	.word	0x19cf0e40
 8000d54:	00000000 	.word	0x00000000
 8000d58:	2000008c 	.word	0x2000008c
 8000d5c:	40003c00 	.word	0x40003c00
 8000d60:	080052ec 	.word	0x080052ec
 8000d64:	080052f8 	.word	0x080052f8
 8000d68:	08005300 	.word	0x08005300

08000d6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d70:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000d72:	4a15      	ldr	r2, [pc, #84]	; (8000dc8 <MX_USART2_UART_Init+0x5c>)
 8000d74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000d76:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000d78:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000d7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000d92:	220c      	movs	r2, #12
 8000d94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000db0:	f002 fece 	bl	8003b50 <HAL_UART_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000dba:	f000 f887 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200000f0 	.word	0x200000f0
 8000dc8:	40004400 	.word	0x40004400

08000dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de2:	4b37      	ldr	r3, [pc, #220]	; (8000ec0 <MX_GPIO_Init+0xf4>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	4a36      	ldr	r2, [pc, #216]	; (8000ec0 <MX_GPIO_Init+0xf4>)
 8000de8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dec:	6153      	str	r3, [r2, #20]
 8000dee:	4b34      	ldr	r3, [pc, #208]	; (8000ec0 <MX_GPIO_Init+0xf4>)
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dfa:	4b31      	ldr	r3, [pc, #196]	; (8000ec0 <MX_GPIO_Init+0xf4>)
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	4a30      	ldr	r2, [pc, #192]	; (8000ec0 <MX_GPIO_Init+0xf4>)
 8000e00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e04:	6153      	str	r3, [r2, #20]
 8000e06:	4b2e      	ldr	r3, [pc, #184]	; (8000ec0 <MX_GPIO_Init+0xf4>)
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	4b2b      	ldr	r3, [pc, #172]	; (8000ec0 <MX_GPIO_Init+0xf4>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	4a2a      	ldr	r2, [pc, #168]	; (8000ec0 <MX_GPIO_Init+0xf4>)
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1c:	6153      	str	r3, [r2, #20]
 8000e1e:	4b28      	ldr	r3, [pc, #160]	; (8000ec0 <MX_GPIO_Init+0xf4>)
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	4b25      	ldr	r3, [pc, #148]	; (8000ec0 <MX_GPIO_Init+0xf4>)
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	4a24      	ldr	r2, [pc, #144]	; (8000ec0 <MX_GPIO_Init+0xf4>)
 8000e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e34:	6153      	str	r3, [r2, #20]
 8000e36:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <MX_GPIO_Init+0xf4>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e48:	481e      	ldr	r0, [pc, #120]	; (8000ec4 <MX_GPIO_Init+0xf8>)
 8000e4a:	f000 fcdd 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000e4e:	2201      	movs	r2, #1
 8000e50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e58:	f000 fcd6 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e62:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	4815      	ldr	r0, [pc, #84]	; (8000ec8 <MX_GPIO_Init+0xfc>)
 8000e74:	f000 fb56 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4619      	mov	r1, r3
 8000e90:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <MX_GPIO_Init+0xf8>)
 8000e92:	f000 fb47 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb2:	f000 fb37 	bl	8001524 <HAL_GPIO_Init>

}
 8000eb6:	bf00      	nop
 8000eb8:	3728      	adds	r7, #40	; 0x28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	48000400 	.word	0x48000400
 8000ec8:	48000800 	.word	0x48000800

08000ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed0:	b672      	cpsid	i
}
 8000ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <Error_Handler+0x8>
	...

08000ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <HAL_MspInit+0x44>)
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <HAL_MspInit+0x44>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6193      	str	r3, [r2, #24]
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <HAL_MspInit+0x44>)
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_MspInit+0x44>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	4a08      	ldr	r2, [pc, #32]	; (8000f1c <HAL_MspInit+0x44>)
 8000efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f00:	61d3      	str	r3, [r2, #28]
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_MspInit+0x44>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f0e:	2007      	movs	r0, #7
 8000f10:	f000 fad4 	bl	80014bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40021000 	.word	0x40021000

08000f20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a26      	ldr	r2, [pc, #152]	; (8000fd8 <HAL_SPI_MspInit+0xb8>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d145      	bne.n	8000fce <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f42:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <HAL_SPI_MspInit+0xbc>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	4a25      	ldr	r2, [pc, #148]	; (8000fdc <HAL_SPI_MspInit+0xbc>)
 8000f48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f4c:	61d3      	str	r3, [r2, #28]
 8000f4e:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <HAL_SPI_MspInit+0xbc>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <HAL_SPI_MspInit+0xbc>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	4a1f      	ldr	r2, [pc, #124]	; (8000fdc <HAL_SPI_MspInit+0xbc>)
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f64:	6153      	str	r3, [r2, #20]
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <HAL_SPI_MspInit+0xbc>)
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f72:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <HAL_SPI_MspInit+0xbc>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	4a19      	ldr	r2, [pc, #100]	; (8000fdc <HAL_SPI_MspInit+0xbc>)
 8000f78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f7c:	6153      	str	r3, [r2, #20]
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <HAL_SPI_MspInit+0xbc>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = LoRa_NSS_Pin;
 8000f8a:	2310      	movs	r3, #16
 8000f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f96:	2303      	movs	r3, #3
 8000f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f9a:	2306      	movs	r3, #6
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LoRa_NSS_GPIO_Port, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa8:	f000 fabc 	bl	8001524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000fac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fbe:	2306      	movs	r3, #6
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <HAL_SPI_MspInit+0xc0>)
 8000fca:	f000 faab 	bl	8001524 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fce:	bf00      	nop
 8000fd0:	3728      	adds	r7, #40	; 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40003c00 	.word	0x40003c00
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	48000800 	.word	0x48000800

08000fe4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a17      	ldr	r2, [pc, #92]	; (8001060 <HAL_UART_MspInit+0x7c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d128      	bne.n	8001058 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <HAL_UART_MspInit+0x80>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	4a16      	ldr	r2, [pc, #88]	; (8001064 <HAL_UART_MspInit+0x80>)
 800100c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001010:	61d3      	str	r3, [r2, #28]
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <HAL_UART_MspInit+0x80>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <HAL_UART_MspInit+0x80>)
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	4a10      	ldr	r2, [pc, #64]	; (8001064 <HAL_UART_MspInit+0x80>)
 8001024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001028:	6153      	str	r3, [r2, #20]
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_UART_MspInit+0x80>)
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001036:	230c      	movs	r3, #12
 8001038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001046:	2307      	movs	r3, #7
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001054:	f000 fa66 	bl	8001524 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001058:	bf00      	nop
 800105a:	3728      	adds	r7, #40	; 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40004400 	.word	0x40004400
 8001064:	40021000 	.word	0x40021000

08001068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800106c:	e7fe      	b.n	800106c <NMI_Handler+0x4>

0800106e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <HardFault_Handler+0x4>

08001074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <MemManage_Handler+0x4>

0800107a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <BusFault_Handler+0x4>

08001080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <UsageFault_Handler+0x4>

08001086 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b4:	f000 f90c 	bl	80012d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}

080010bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	e00a      	b.n	80010e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010ce:	f3af 8000 	nop.w
 80010d2:	4601      	mov	r1, r0
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	60ba      	str	r2, [r7, #8]
 80010da:	b2ca      	uxtb	r2, r1
 80010dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	3301      	adds	r3, #1
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	dbf0      	blt.n	80010ce <_read+0x12>
  }

  return len;
 80010ec:	687b      	ldr	r3, [r7, #4]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800111e:	605a      	str	r2, [r3, #4]
  return 0;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <_isatty>:

int _isatty(int file)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001168:	4a14      	ldr	r2, [pc, #80]	; (80011bc <_sbrk+0x5c>)
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <_sbrk+0x60>)
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001174:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <_sbrk+0x64>)
 800117e:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <_sbrk+0x68>)
 8001180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <_sbrk+0x64>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	429a      	cmp	r2, r3
 800118e:	d207      	bcs.n	80011a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001190:	f003 f812 	bl	80041b8 <__errno>
 8001194:	4603      	mov	r3, r0
 8001196:	220c      	movs	r2, #12
 8001198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	e009      	b.n	80011b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <_sbrk+0x64>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <_sbrk+0x64>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <_sbrk+0x64>)
 80011b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011b2:	68fb      	ldr	r3, [r7, #12]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20004000 	.word	0x20004000
 80011c0:	00000400 	.word	0x00000400
 80011c4:	20000174 	.word	0x20000174
 80011c8:	20000190 	.word	0x20000190

080011cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <SystemInit+0x20>)
 80011d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011d6:	4a05      	ldr	r2, [pc, #20]	; (80011ec <SystemInit+0x20>)
 80011d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001228 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f4:	480d      	ldr	r0, [pc, #52]	; (800122c <LoopForever+0x6>)
  ldr r1, =_edata
 80011f6:	490e      	ldr	r1, [pc, #56]	; (8001230 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011f8:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <LoopForever+0xe>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011fc:	e002      	b.n	8001204 <LoopCopyDataInit>

080011fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001202:	3304      	adds	r3, #4

08001204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001208:	d3f9      	bcc.n	80011fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120a:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <LoopForever+0x12>)
  ldr r4, =_ebss
 800120c:	4c0b      	ldr	r4, [pc, #44]	; (800123c <LoopForever+0x16>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001210:	e001      	b.n	8001216 <LoopFillZerobss>

08001212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001214:	3204      	adds	r2, #4

08001216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001218:	d3fb      	bcc.n	8001212 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800121a:	f7ff ffd7 	bl	80011cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800121e:	f002 ffd1 	bl	80041c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001222:	f7ff fcc9 	bl	8000bb8 <main>

08001226 <LoopForever>:

LoopForever:
    b LoopForever
 8001226:	e7fe      	b.n	8001226 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001228:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800122c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001230:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001234:	080053f8 	.word	0x080053f8
  ldr r2, =_sbss
 8001238:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800123c:	2000018c 	.word	0x2000018c

08001240 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001240:	e7fe      	b.n	8001240 <ADC1_IRQHandler>
	...

08001244 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <HAL_Init+0x28>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a07      	ldr	r2, [pc, #28]	; (800126c <HAL_Init+0x28>)
 800124e:	f043 0310 	orr.w	r3, r3, #16
 8001252:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001254:	2003      	movs	r0, #3
 8001256:	f000 f931 	bl	80014bc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800125a:	2000      	movs	r0, #0
 800125c:	f000 f808 	bl	8001270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001260:	f7ff fe3a 	bl	8000ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40022000 	.word	0x40022000

08001270 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_InitTick+0x54>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_InitTick+0x58>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4619      	mov	r1, r3
 8001282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001286:	fbb3 f3f1 	udiv	r3, r3, r1
 800128a:	fbb2 f3f3 	udiv	r3, r2, r3
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f93b 	bl	800150a <HAL_SYSTICK_Config>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e00e      	b.n	80012bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b0f      	cmp	r3, #15
 80012a2:	d80a      	bhi.n	80012ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a4:	2200      	movs	r2, #0
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ac:	f000 f911 	bl	80014d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b0:	4a06      	ldr	r2, [pc, #24]	; (80012cc <HAL_InitTick+0x5c>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e000      	b.n	80012bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000000 	.word	0x20000000
 80012c8:	20000008 	.word	0x20000008
 80012cc:	20000004 	.word	0x20000004

080012d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_IncTick+0x20>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_IncTick+0x24>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4413      	add	r3, r2
 80012e0:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <HAL_IncTick+0x24>)
 80012e2:	6013      	str	r3, [r2, #0]
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000008 	.word	0x20000008
 80012f4:	20000178 	.word	0x20000178

080012f8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return uwTick;  
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <HAL_GetTick+0x14>)
 80012fe:	681b      	ldr	r3, [r3, #0]
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000178 	.word	0x20000178

08001310 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001318:	f7ff ffee 	bl	80012f8 <HAL_GetTick>
 800131c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001328:	d005      	beq.n	8001336 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800132a:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <HAL_Delay+0x44>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	461a      	mov	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4413      	add	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001336:	bf00      	nop
 8001338:	f7ff ffde 	bl	80012f8 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	429a      	cmp	r2, r3
 8001346:	d8f7      	bhi.n	8001338 <HAL_Delay+0x28>
  {
  }
}
 8001348:	bf00      	nop
 800134a:	bf00      	nop
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000008 	.word	0x20000008

08001358 <__NVIC_SetPriorityGrouping>:
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <__NVIC_SetPriorityGrouping+0x44>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001374:	4013      	ands	r3, r2
 8001376:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001380:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800138a:	4a04      	ldr	r2, [pc, #16]	; (800139c <__NVIC_SetPriorityGrouping+0x44>)
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	60d3      	str	r3, [r2, #12]
}
 8001390:	bf00      	nop
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <__NVIC_GetPriorityGrouping>:
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a4:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <__NVIC_GetPriorityGrouping+0x18>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	0a1b      	lsrs	r3, r3, #8
 80013aa:	f003 0307 	and.w	r3, r3, #7
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <__NVIC_SetPriority>:
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db0a      	blt.n	80013e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	490c      	ldr	r1, [pc, #48]	; (8001408 <__NVIC_SetPriority+0x4c>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440b      	add	r3, r1
 80013e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013e4:	e00a      	b.n	80013fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4908      	ldr	r1, [pc, #32]	; (800140c <__NVIC_SetPriority+0x50>)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	3b04      	subs	r3, #4
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	761a      	strb	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <NVIC_EncodePriority>:
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	; 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f1c3 0307 	rsb	r3, r3, #7
 800142a:	2b04      	cmp	r3, #4
 800142c:	bf28      	it	cs
 800142e:	2304      	movcs	r3, #4
 8001430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3304      	adds	r3, #4
 8001436:	2b06      	cmp	r3, #6
 8001438:	d902      	bls.n	8001440 <NVIC_EncodePriority+0x30>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3b03      	subs	r3, #3
 800143e:	e000      	b.n	8001442 <NVIC_EncodePriority+0x32>
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	f04f 32ff 	mov.w	r2, #4294967295
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43d9      	mvns	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	4313      	orrs	r3, r2
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	; 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <SysTick_Config>:
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001488:	d301      	bcc.n	800148e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800148a:	2301      	movs	r3, #1
 800148c:	e00f      	b.n	80014ae <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <SysTick_Config+0x40>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001496:	210f      	movs	r1, #15
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f7ff ff8e 	bl	80013bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <SysTick_Config+0x40>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a6:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <SysTick_Config+0x40>)
 80014a8:	2207      	movs	r2, #7
 80014aa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	e000e010 	.word	0xe000e010

080014bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff47 	bl	8001358 <__NVIC_SetPriorityGrouping>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e4:	f7ff ff5c 	bl	80013a0 <__NVIC_GetPriorityGrouping>
 80014e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	6978      	ldr	r0, [r7, #20]
 80014f0:	f7ff ff8e 	bl	8001410 <NVIC_EncodePriority>
 80014f4:	4602      	mov	r2, r0
 80014f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff5d 	bl	80013bc <__NVIC_SetPriority>
}
 8001502:	bf00      	nop
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff ffb0 	bl	8001478 <SysTick_Config>
 8001518:	4603      	mov	r3, r0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001524:	b480      	push	{r7}
 8001526:	b087      	sub	sp, #28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001532:	e14e      	b.n	80017d2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	2101      	movs	r1, #1
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	fa01 f303 	lsl.w	r3, r1, r3
 8001540:	4013      	ands	r3, r2
 8001542:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 8140 	beq.w	80017cc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	2b01      	cmp	r3, #1
 8001556:	d005      	beq.n	8001564 <HAL_GPIO_Init+0x40>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d130      	bne.n	80015c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	2203      	movs	r2, #3
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	68da      	ldr	r2, [r3, #12]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800159a:	2201      	movs	r2, #1
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	4013      	ands	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	091b      	lsrs	r3, r3, #4
 80015b0:	f003 0201 	and.w	r2, r3, #1
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d017      	beq.n	8001602 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	2203      	movs	r2, #3
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4013      	ands	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d123      	bne.n	8001656 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	08da      	lsrs	r2, r3, #3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3208      	adds	r2, #8
 8001616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	220f      	movs	r2, #15
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	691a      	ldr	r2, [r3, #16]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	08da      	lsrs	r2, r3, #3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3208      	adds	r2, #8
 8001650:	6939      	ldr	r1, [r7, #16]
 8001652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	2203      	movs	r2, #3
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 0203 	and.w	r2, r3, #3
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 809a 	beq.w	80017cc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001698:	4b55      	ldr	r3, [pc, #340]	; (80017f0 <HAL_GPIO_Init+0x2cc>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	4a54      	ldr	r2, [pc, #336]	; (80017f0 <HAL_GPIO_Init+0x2cc>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6193      	str	r3, [r2, #24]
 80016a4:	4b52      	ldr	r3, [pc, #328]	; (80017f0 <HAL_GPIO_Init+0x2cc>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016b0:	4a50      	ldr	r2, [pc, #320]	; (80017f4 <HAL_GPIO_Init+0x2d0>)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	089b      	lsrs	r3, r3, #2
 80016b6:	3302      	adds	r3, #2
 80016b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	f003 0303 	and.w	r3, r3, #3
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	220f      	movs	r2, #15
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016da:	d013      	beq.n	8001704 <HAL_GPIO_Init+0x1e0>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a46      	ldr	r2, [pc, #280]	; (80017f8 <HAL_GPIO_Init+0x2d4>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d00d      	beq.n	8001700 <HAL_GPIO_Init+0x1dc>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a45      	ldr	r2, [pc, #276]	; (80017fc <HAL_GPIO_Init+0x2d8>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d007      	beq.n	80016fc <HAL_GPIO_Init+0x1d8>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a44      	ldr	r2, [pc, #272]	; (8001800 <HAL_GPIO_Init+0x2dc>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d101      	bne.n	80016f8 <HAL_GPIO_Init+0x1d4>
 80016f4:	2303      	movs	r3, #3
 80016f6:	e006      	b.n	8001706 <HAL_GPIO_Init+0x1e2>
 80016f8:	2305      	movs	r3, #5
 80016fa:	e004      	b.n	8001706 <HAL_GPIO_Init+0x1e2>
 80016fc:	2302      	movs	r3, #2
 80016fe:	e002      	b.n	8001706 <HAL_GPIO_Init+0x1e2>
 8001700:	2301      	movs	r3, #1
 8001702:	e000      	b.n	8001706 <HAL_GPIO_Init+0x1e2>
 8001704:	2300      	movs	r3, #0
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	f002 0203 	and.w	r2, r2, #3
 800170c:	0092      	lsls	r2, r2, #2
 800170e:	4093      	lsls	r3, r2
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001716:	4937      	ldr	r1, [pc, #220]	; (80017f4 <HAL_GPIO_Init+0x2d0>)
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	089b      	lsrs	r3, r3, #2
 800171c:	3302      	adds	r3, #2
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001724:	4b37      	ldr	r3, [pc, #220]	; (8001804 <HAL_GPIO_Init+0x2e0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	43db      	mvns	r3, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4313      	orrs	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001748:	4a2e      	ldr	r2, [pc, #184]	; (8001804 <HAL_GPIO_Init+0x2e0>)
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800174e:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <HAL_GPIO_Init+0x2e0>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	43db      	mvns	r3, r3
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4313      	orrs	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001772:	4a24      	ldr	r2, [pc, #144]	; (8001804 <HAL_GPIO_Init+0x2e0>)
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001778:	4b22      	ldr	r3, [pc, #136]	; (8001804 <HAL_GPIO_Init+0x2e0>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	43db      	mvns	r3, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	4313      	orrs	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800179c:	4a19      	ldr	r2, [pc, #100]	; (8001804 <HAL_GPIO_Init+0x2e0>)
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_GPIO_Init+0x2e0>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	43db      	mvns	r3, r3
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	4013      	ands	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017c6:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <HAL_GPIO_Init+0x2e0>)
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	3301      	adds	r3, #1
 80017d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	fa22 f303 	lsr.w	r3, r2, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f47f aea9 	bne.w	8001534 <HAL_GPIO_Init+0x10>
  }
}
 80017e2:	bf00      	nop
 80017e4:	bf00      	nop
 80017e6:	371c      	adds	r7, #28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40010000 	.word	0x40010000
 80017f8:	48000400 	.word	0x48000400
 80017fc:	48000800 	.word	0x48000800
 8001800:	48000c00 	.word	0x48000c00
 8001804:	40010400 	.word	0x40010400

08001808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	807b      	strh	r3, [r7, #2]
 8001814:	4613      	mov	r3, r2
 8001816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001818:	787b      	ldrb	r3, [r7, #1]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001824:	e002      	b.n	800182c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001826:	887a      	ldrh	r2, [r7, #2]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800183e:	af00      	add	r7, sp, #0
 8001840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001844:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001848:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800184a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d102      	bne.n	800185e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	f001 b823 	b.w	80028a4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800185e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001862:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 817d 	beq.w	8001b6e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001874:	4bbc      	ldr	r3, [pc, #752]	; (8001b68 <HAL_RCC_OscConfig+0x330>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 030c 	and.w	r3, r3, #12
 800187c:	2b04      	cmp	r3, #4
 800187e:	d00c      	beq.n	800189a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001880:	4bb9      	ldr	r3, [pc, #740]	; (8001b68 <HAL_RCC_OscConfig+0x330>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 030c 	and.w	r3, r3, #12
 8001888:	2b08      	cmp	r3, #8
 800188a:	d15c      	bne.n	8001946 <HAL_RCC_OscConfig+0x10e>
 800188c:	4bb6      	ldr	r3, [pc, #728]	; (8001b68 <HAL_RCC_OscConfig+0x330>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001898:	d155      	bne.n	8001946 <HAL_RCC_OscConfig+0x10e>
 800189a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800189e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80018a6:	fa93 f3a3 	rbit	r3, r3
 80018aa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018ae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b2:	fab3 f383 	clz	r3, r3
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	095b      	lsrs	r3, r3, #5
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d102      	bne.n	80018cc <HAL_RCC_OscConfig+0x94>
 80018c6:	4ba8      	ldr	r3, [pc, #672]	; (8001b68 <HAL_RCC_OscConfig+0x330>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	e015      	b.n	80018f8 <HAL_RCC_OscConfig+0xc0>
 80018cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018d0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80018d8:	fa93 f3a3 	rbit	r3, r3
 80018dc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80018e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018e4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80018e8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80018ec:	fa93 f3a3 	rbit	r3, r3
 80018f0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80018f4:	4b9c      	ldr	r3, [pc, #624]	; (8001b68 <HAL_RCC_OscConfig+0x330>)
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018fc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001900:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001904:	fa92 f2a2 	rbit	r2, r2
 8001908:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800190c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001910:	fab2 f282 	clz	r2, r2
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	f042 0220 	orr.w	r2, r2, #32
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	f002 021f 	and.w	r2, r2, #31
 8001920:	2101      	movs	r1, #1
 8001922:	fa01 f202 	lsl.w	r2, r1, r2
 8001926:	4013      	ands	r3, r2
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 811f 	beq.w	8001b6c <HAL_RCC_OscConfig+0x334>
 800192e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001932:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	f040 8116 	bne.w	8001b6c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	f000 bfaf 	b.w	80028a4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001956:	d106      	bne.n	8001966 <HAL_RCC_OscConfig+0x12e>
 8001958:	4b83      	ldr	r3, [pc, #524]	; (8001b68 <HAL_RCC_OscConfig+0x330>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a82      	ldr	r2, [pc, #520]	; (8001b68 <HAL_RCC_OscConfig+0x330>)
 800195e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	e036      	b.n	80019d4 <HAL_RCC_OscConfig+0x19c>
 8001966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10c      	bne.n	8001990 <HAL_RCC_OscConfig+0x158>
 8001976:	4b7c      	ldr	r3, [pc, #496]	; (8001b68 <HAL_RCC_OscConfig+0x330>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a7b      	ldr	r2, [pc, #492]	; (8001b68 <HAL_RCC_OscConfig+0x330>)
 800197c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	4b79      	ldr	r3, [pc, #484]	; (8001b68 <HAL_RCC_OscConfig+0x330>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a78      	ldr	r2, [pc, #480]	; (8001b68 <HAL_RCC_OscConfig+0x330>)
 8001988:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	e021      	b.n	80019d4 <HAL_RCC_OscConfig+0x19c>
 8001990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001994:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019a0:	d10c      	bne.n	80019bc <HAL_RCC_OscConfig+0x184>
 80019a2:	4b71      	ldr	r3, [pc, #452]	; (8001b68 <HAL_RCC_OscConfig+0x330>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a70      	ldr	r2, [pc, #448]	; (8001b68 <HAL_RCC_OscConfig+0x330>)
 80019a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	4b6e      	ldr	r3, [pc, #440]	; (8001b68 <HAL_RCC_OscConfig+0x330>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a6d      	ldr	r2, [pc, #436]	; (8001b68 <HAL_RCC_OscConfig+0x330>)
 80019b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	e00b      	b.n	80019d4 <HAL_RCC_OscConfig+0x19c>
 80019bc:	4b6a      	ldr	r3, [pc, #424]	; (8001b68 <HAL_RCC_OscConfig+0x330>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a69      	ldr	r2, [pc, #420]	; (8001b68 <HAL_RCC_OscConfig+0x330>)
 80019c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	4b67      	ldr	r3, [pc, #412]	; (8001b68 <HAL_RCC_OscConfig+0x330>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a66      	ldr	r2, [pc, #408]	; (8001b68 <HAL_RCC_OscConfig+0x330>)
 80019ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019d4:	4b64      	ldr	r3, [pc, #400]	; (8001b68 <HAL_RCC_OscConfig+0x330>)
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	f023 020f 	bic.w	r2, r3, #15
 80019dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	495f      	ldr	r1, [pc, #380]	; (8001b68 <HAL_RCC_OscConfig+0x330>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d059      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fe:	f7ff fc7b 	bl	80012f8 <HAL_GetTick>
 8001a02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a06:	e00a      	b.n	8001a1e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a08:	f7ff fc76 	bl	80012f8 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b64      	cmp	r3, #100	; 0x64
 8001a16:	d902      	bls.n	8001a1e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	f000 bf43 	b.w	80028a4 <HAL_RCC_OscConfig+0x106c>
 8001a1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a22:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a26:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001a2a:	fa93 f3a3 	rbit	r3, r3
 8001a2e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001a32:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a36:	fab3 f383 	clz	r3, r3
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	095b      	lsrs	r3, r3, #5
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d102      	bne.n	8001a50 <HAL_RCC_OscConfig+0x218>
 8001a4a:	4b47      	ldr	r3, [pc, #284]	; (8001b68 <HAL_RCC_OscConfig+0x330>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	e015      	b.n	8001a7c <HAL_RCC_OscConfig+0x244>
 8001a50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a54:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a58:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001a5c:	fa93 f3a3 	rbit	r3, r3
 8001a60:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001a64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a68:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001a6c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001a70:	fa93 f3a3 	rbit	r3, r3
 8001a74:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001a78:	4b3b      	ldr	r3, [pc, #236]	; (8001b68 <HAL_RCC_OscConfig+0x330>)
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a80:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001a84:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001a88:	fa92 f2a2 	rbit	r2, r2
 8001a8c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001a90:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001a94:	fab2 f282 	clz	r2, r2
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	f042 0220 	orr.w	r2, r2, #32
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	f002 021f 	and.w	r2, r2, #31
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0ab      	beq.n	8001a08 <HAL_RCC_OscConfig+0x1d0>
 8001ab0:	e05d      	b.n	8001b6e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab2:	f7ff fc21 	bl	80012f8 <HAL_GetTick>
 8001ab6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aba:	e00a      	b.n	8001ad2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001abc:	f7ff fc1c 	bl	80012f8 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b64      	cmp	r3, #100	; 0x64
 8001aca:	d902      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	f000 bee9 	b.w	80028a4 <HAL_RCC_OscConfig+0x106c>
 8001ad2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ad6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ada:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001ade:	fa93 f3a3 	rbit	r3, r3
 8001ae2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001ae6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aea:	fab3 f383 	clz	r3, r3
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	095b      	lsrs	r3, r3, #5
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d102      	bne.n	8001b04 <HAL_RCC_OscConfig+0x2cc>
 8001afe:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <HAL_RCC_OscConfig+0x330>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	e015      	b.n	8001b30 <HAL_RCC_OscConfig+0x2f8>
 8001b04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b08:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001b10:	fa93 f3a3 	rbit	r3, r3
 8001b14:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001b18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b1c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001b20:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001b24:	fa93 f3a3 	rbit	r3, r3
 8001b28:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <HAL_RCC_OscConfig+0x330>)
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b34:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001b38:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001b3c:	fa92 f2a2 	rbit	r2, r2
 8001b40:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001b44:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001b48:	fab2 f282 	clz	r2, r2
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	f042 0220 	orr.w	r2, r2, #32
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	f002 021f 	and.w	r2, r2, #31
 8001b58:	2101      	movs	r1, #1
 8001b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1ab      	bne.n	8001abc <HAL_RCC_OscConfig+0x284>
 8001b64:	e003      	b.n	8001b6e <HAL_RCC_OscConfig+0x336>
 8001b66:	bf00      	nop
 8001b68:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 817d 	beq.w	8001e7e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b84:	4ba6      	ldr	r3, [pc, #664]	; (8001e20 <HAL_RCC_OscConfig+0x5e8>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00b      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b90:	4ba3      	ldr	r3, [pc, #652]	; (8001e20 <HAL_RCC_OscConfig+0x5e8>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 030c 	and.w	r3, r3, #12
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d172      	bne.n	8001c82 <HAL_RCC_OscConfig+0x44a>
 8001b9c:	4ba0      	ldr	r3, [pc, #640]	; (8001e20 <HAL_RCC_OscConfig+0x5e8>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d16c      	bne.n	8001c82 <HAL_RCC_OscConfig+0x44a>
 8001ba8:	2302      	movs	r3, #2
 8001baa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bae:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001bb2:	fa93 f3a3 	rbit	r3, r3
 8001bb6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001bba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bbe:	fab3 f383 	clz	r3, r3
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	095b      	lsrs	r3, r3, #5
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d102      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x3a0>
 8001bd2:	4b93      	ldr	r3, [pc, #588]	; (8001e20 <HAL_RCC_OscConfig+0x5e8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	e013      	b.n	8001c00 <HAL_RCC_OscConfig+0x3c8>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bde:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001be2:	fa93 f3a3 	rbit	r3, r3
 8001be6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001bea:	2302      	movs	r3, #2
 8001bec:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001bf0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001bf4:	fa93 f3a3 	rbit	r3, r3
 8001bf8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001bfc:	4b88      	ldr	r3, [pc, #544]	; (8001e20 <HAL_RCC_OscConfig+0x5e8>)
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	2202      	movs	r2, #2
 8001c02:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001c06:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c0a:	fa92 f2a2 	rbit	r2, r2
 8001c0e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001c12:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001c16:	fab2 f282 	clz	r2, r2
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	f042 0220 	orr.w	r2, r2, #32
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	f002 021f 	and.w	r2, r2, #31
 8001c26:	2101      	movs	r1, #1
 8001c28:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00a      	beq.n	8001c48 <HAL_RCC_OscConfig+0x410>
 8001c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d002      	beq.n	8001c48 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	f000 be2e 	b.w	80028a4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c48:	4b75      	ldr	r3, [pc, #468]	; (8001e20 <HAL_RCC_OscConfig+0x5e8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	21f8      	movs	r1, #248	; 0xf8
 8001c5e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001c66:	fa91 f1a1 	rbit	r1, r1
 8001c6a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001c6e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001c72:	fab1 f181 	clz	r1, r1
 8001c76:	b2c9      	uxtb	r1, r1
 8001c78:	408b      	lsls	r3, r1
 8001c7a:	4969      	ldr	r1, [pc, #420]	; (8001e20 <HAL_RCC_OscConfig+0x5e8>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c80:	e0fd      	b.n	8001e7e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 8088 	beq.w	8001da4 <HAL_RCC_OscConfig+0x56c>
 8001c94:	2301      	movs	r3, #1
 8001c96:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001c9e:	fa93 f3a3 	rbit	r3, r3
 8001ca2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001ca6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001caa:	fab3 f383 	clz	r3, r3
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	461a      	mov	r2, r3
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fb1a 	bl	80012f8 <HAL_GetTick>
 8001cc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc8:	e00a      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cca:	f7ff fb15 	bl	80012f8 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d902      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	f000 bde2 	b.w	80028a4 <HAL_RCC_OscConfig+0x106c>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001cea:	fa93 f3a3 	rbit	r3, r3
 8001cee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001cf2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf6:	fab3 f383 	clz	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	095b      	lsrs	r3, r3, #5
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d102      	bne.n	8001d10 <HAL_RCC_OscConfig+0x4d8>
 8001d0a:	4b45      	ldr	r3, [pc, #276]	; (8001e20 <HAL_RCC_OscConfig+0x5e8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	e013      	b.n	8001d38 <HAL_RCC_OscConfig+0x500>
 8001d10:	2302      	movs	r3, #2
 8001d12:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001d22:	2302      	movs	r3, #2
 8001d24:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001d28:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001d2c:	fa93 f3a3 	rbit	r3, r3
 8001d30:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001d34:	4b3a      	ldr	r3, [pc, #232]	; (8001e20 <HAL_RCC_OscConfig+0x5e8>)
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	2202      	movs	r2, #2
 8001d3a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001d3e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001d42:	fa92 f2a2 	rbit	r2, r2
 8001d46:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001d4a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001d4e:	fab2 f282 	clz	r2, r2
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	f042 0220 	orr.w	r2, r2, #32
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	f002 021f 	and.w	r2, r2, #31
 8001d5e:	2101      	movs	r1, #1
 8001d60:	fa01 f202 	lsl.w	r2, r1, r2
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0af      	beq.n	8001cca <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6a:	4b2d      	ldr	r3, [pc, #180]	; (8001e20 <HAL_RCC_OscConfig+0x5e8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	21f8      	movs	r1, #248	; 0xf8
 8001d80:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001d88:	fa91 f1a1 	rbit	r1, r1
 8001d8c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001d90:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001d94:	fab1 f181 	clz	r1, r1
 8001d98:	b2c9      	uxtb	r1, r1
 8001d9a:	408b      	lsls	r3, r1
 8001d9c:	4920      	ldr	r1, [pc, #128]	; (8001e20 <HAL_RCC_OscConfig+0x5e8>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	600b      	str	r3, [r1, #0]
 8001da2:	e06c      	b.n	8001e7e <HAL_RCC_OscConfig+0x646>
 8001da4:	2301      	movs	r3, #1
 8001da6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001dae:	fa93 f3a3 	rbit	r3, r3
 8001db2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001db6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dba:	fab3 f383 	clz	r3, r3
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	461a      	mov	r2, r3
 8001dcc:	2300      	movs	r3, #0
 8001dce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd0:	f7ff fa92 	bl	80012f8 <HAL_GetTick>
 8001dd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd8:	e00a      	b.n	8001df0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dda:	f7ff fa8d 	bl	80012f8 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d902      	bls.n	8001df0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	f000 bd5a 	b.w	80028a4 <HAL_RCC_OscConfig+0x106c>
 8001df0:	2302      	movs	r3, #2
 8001df2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001dfa:	fa93 f3a3 	rbit	r3, r3
 8001dfe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001e02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e06:	fab3 f383 	clz	r3, r3
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	095b      	lsrs	r3, r3, #5
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d104      	bne.n	8001e24 <HAL_RCC_OscConfig+0x5ec>
 8001e1a:	4b01      	ldr	r3, [pc, #4]	; (8001e20 <HAL_RCC_OscConfig+0x5e8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	e015      	b.n	8001e4c <HAL_RCC_OscConfig+0x614>
 8001e20:	40021000 	.word	0x40021000
 8001e24:	2302      	movs	r3, #2
 8001e26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e2e:	fa93 f3a3 	rbit	r3, r3
 8001e32:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001e36:	2302      	movs	r3, #2
 8001e38:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e40:	fa93 f3a3 	rbit	r3, r3
 8001e44:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001e48:	4bc8      	ldr	r3, [pc, #800]	; (800216c <HAL_RCC_OscConfig+0x934>)
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001e52:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001e56:	fa92 f2a2 	rbit	r2, r2
 8001e5a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001e5e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001e62:	fab2 f282 	clz	r2, r2
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	f042 0220 	orr.w	r2, r2, #32
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	f002 021f 	and.w	r2, r2, #31
 8001e72:	2101      	movs	r1, #1
 8001e74:	fa01 f202 	lsl.w	r2, r1, r2
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1ad      	bne.n	8001dda <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 8110 	beq.w	80020b4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d079      	beq.n	8001f98 <HAL_RCC_OscConfig+0x760>
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001eae:	fa93 f3a3 	rbit	r3, r3
 8001eb2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eba:	fab3 f383 	clz	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4bab      	ldr	r3, [pc, #684]	; (8002170 <HAL_RCC_OscConfig+0x938>)
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	461a      	mov	r2, r3
 8001eca:	2301      	movs	r3, #1
 8001ecc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ece:	f7ff fa13 	bl	80012f8 <HAL_GetTick>
 8001ed2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed6:	e00a      	b.n	8001eee <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ed8:	f7ff fa0e 	bl	80012f8 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d902      	bls.n	8001eee <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	f000 bcdb 	b.w	80028a4 <HAL_RCC_OscConfig+0x106c>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ef8:	fa93 f3a3 	rbit	r3, r3
 8001efc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f04:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f08:	2202      	movs	r2, #2
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f10:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	fa93 f2a3 	rbit	r2, r3
 8001f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	fa93 f2a3 	rbit	r2, r3
 8001f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f46:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f48:	4b88      	ldr	r3, [pc, #544]	; (800216c <HAL_RCC_OscConfig+0x934>)
 8001f4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f50:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f54:	2102      	movs	r1, #2
 8001f56:	6019      	str	r1, [r3, #0]
 8001f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	fa93 f1a3 	rbit	r1, r3
 8001f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f6e:	6019      	str	r1, [r3, #0]
  return result;
 8001f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f74:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	fab3 f383 	clz	r3, r3
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	f003 031f 	and.w	r3, r3, #31
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0a0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x6a0>
 8001f96:	e08d      	b.n	80020b4 <HAL_RCC_OscConfig+0x87c>
 8001f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	fa93 f2a3 	rbit	r2, r3
 8001fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001fba:	601a      	str	r2, [r3, #0]
  return result;
 8001fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001fc4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fc6:	fab3 f383 	clz	r3, r3
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b68      	ldr	r3, [pc, #416]	; (8002170 <HAL_RCC_OscConfig+0x938>)
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fda:	f7ff f98d 	bl	80012f8 <HAL_GetTick>
 8001fde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fe4:	f7ff f988 	bl	80012f8 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d902      	bls.n	8001ffa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	f000 bc55 	b.w	80028a4 <HAL_RCC_OscConfig+0x106c>
 8001ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002002:	2202      	movs	r2, #2
 8002004:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	fa93 f2a3 	rbit	r2, r3
 8002014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002018:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002022:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002026:	2202      	movs	r2, #2
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	fa93 f2a3 	rbit	r2, r3
 8002038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002046:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800204a:	2202      	movs	r2, #2
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002052:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	fa93 f2a3 	rbit	r2, r3
 800205c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002060:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002064:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002066:	4b41      	ldr	r3, [pc, #260]	; (800216c <HAL_RCC_OscConfig+0x934>)
 8002068:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800206a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002072:	2102      	movs	r1, #2
 8002074:	6019      	str	r1, [r3, #0]
 8002076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	fa93 f1a3 	rbit	r1, r3
 8002084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002088:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800208c:	6019      	str	r1, [r3, #0]
  return result;
 800208e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002092:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	fab3 f383 	clz	r3, r3
 800209c:	b2db      	uxtb	r3, r3
 800209e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	2101      	movs	r1, #1
 80020aa:	fa01 f303 	lsl.w	r3, r1, r3
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d197      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 81a1 	beq.w	800240c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ca:	2300      	movs	r3, #0
 80020cc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020d0:	4b26      	ldr	r3, [pc, #152]	; (800216c <HAL_RCC_OscConfig+0x934>)
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d116      	bne.n	800210a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020dc:	4b23      	ldr	r3, [pc, #140]	; (800216c <HAL_RCC_OscConfig+0x934>)
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	4a22      	ldr	r2, [pc, #136]	; (800216c <HAL_RCC_OscConfig+0x934>)
 80020e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e6:	61d3      	str	r3, [r2, #28]
 80020e8:	4b20      	ldr	r3, [pc, #128]	; (800216c <HAL_RCC_OscConfig+0x934>)
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80020f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fe:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002102:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002104:	2301      	movs	r3, #1
 8002106:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210a:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <HAL_RCC_OscConfig+0x93c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002112:	2b00      	cmp	r3, #0
 8002114:	d11a      	bne.n	800214c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002116:	4b17      	ldr	r3, [pc, #92]	; (8002174 <HAL_RCC_OscConfig+0x93c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a16      	ldr	r2, [pc, #88]	; (8002174 <HAL_RCC_OscConfig+0x93c>)
 800211c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002120:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002122:	f7ff f8e9 	bl	80012f8 <HAL_GetTick>
 8002126:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212a:	e009      	b.n	8002140 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212c:	f7ff f8e4 	bl	80012f8 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b64      	cmp	r3, #100	; 0x64
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e3b1      	b.n	80028a4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <HAL_RCC_OscConfig+0x93c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0ef      	beq.n	800212c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002150:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d10d      	bne.n	8002178 <HAL_RCC_OscConfig+0x940>
 800215c:	4b03      	ldr	r3, [pc, #12]	; (800216c <HAL_RCC_OscConfig+0x934>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	4a02      	ldr	r2, [pc, #8]	; (800216c <HAL_RCC_OscConfig+0x934>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6213      	str	r3, [r2, #32]
 8002168:	e03c      	b.n	80021e4 <HAL_RCC_OscConfig+0x9ac>
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000
 8002170:	10908120 	.word	0x10908120
 8002174:	40007000 	.word	0x40007000
 8002178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10c      	bne.n	80021a2 <HAL_RCC_OscConfig+0x96a>
 8002188:	4bc1      	ldr	r3, [pc, #772]	; (8002490 <HAL_RCC_OscConfig+0xc58>)
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	4ac0      	ldr	r2, [pc, #768]	; (8002490 <HAL_RCC_OscConfig+0xc58>)
 800218e:	f023 0301 	bic.w	r3, r3, #1
 8002192:	6213      	str	r3, [r2, #32]
 8002194:	4bbe      	ldr	r3, [pc, #760]	; (8002490 <HAL_RCC_OscConfig+0xc58>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	4abd      	ldr	r2, [pc, #756]	; (8002490 <HAL_RCC_OscConfig+0xc58>)
 800219a:	f023 0304 	bic.w	r3, r3, #4
 800219e:	6213      	str	r3, [r2, #32]
 80021a0:	e020      	b.n	80021e4 <HAL_RCC_OscConfig+0x9ac>
 80021a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	2b05      	cmp	r3, #5
 80021b0:	d10c      	bne.n	80021cc <HAL_RCC_OscConfig+0x994>
 80021b2:	4bb7      	ldr	r3, [pc, #732]	; (8002490 <HAL_RCC_OscConfig+0xc58>)
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	4ab6      	ldr	r2, [pc, #728]	; (8002490 <HAL_RCC_OscConfig+0xc58>)
 80021b8:	f043 0304 	orr.w	r3, r3, #4
 80021bc:	6213      	str	r3, [r2, #32]
 80021be:	4bb4      	ldr	r3, [pc, #720]	; (8002490 <HAL_RCC_OscConfig+0xc58>)
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	4ab3      	ldr	r2, [pc, #716]	; (8002490 <HAL_RCC_OscConfig+0xc58>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6213      	str	r3, [r2, #32]
 80021ca:	e00b      	b.n	80021e4 <HAL_RCC_OscConfig+0x9ac>
 80021cc:	4bb0      	ldr	r3, [pc, #704]	; (8002490 <HAL_RCC_OscConfig+0xc58>)
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	4aaf      	ldr	r2, [pc, #700]	; (8002490 <HAL_RCC_OscConfig+0xc58>)
 80021d2:	f023 0301 	bic.w	r3, r3, #1
 80021d6:	6213      	str	r3, [r2, #32]
 80021d8:	4bad      	ldr	r3, [pc, #692]	; (8002490 <HAL_RCC_OscConfig+0xc58>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	4aac      	ldr	r2, [pc, #688]	; (8002490 <HAL_RCC_OscConfig+0xc58>)
 80021de:	f023 0304 	bic.w	r3, r3, #4
 80021e2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 8081 	beq.w	80022f8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f6:	f7ff f87f 	bl	80012f8 <HAL_GetTick>
 80021fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021fe:	e00b      	b.n	8002218 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002200:	f7ff f87a 	bl	80012f8 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002210:	4293      	cmp	r3, r2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e345      	b.n	80028a4 <HAL_RCC_OscConfig+0x106c>
 8002218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002220:	2202      	movs	r2, #2
 8002222:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002228:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	fa93 f2a3 	rbit	r2, r3
 8002232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002236:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002240:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002244:	2202      	movs	r2, #2
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	fa93 f2a3 	rbit	r2, r3
 8002256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800225e:	601a      	str	r2, [r3, #0]
  return result;
 8002260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002264:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002268:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800226a:	fab3 f383 	clz	r3, r3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	095b      	lsrs	r3, r3, #5
 8002272:	b2db      	uxtb	r3, r3
 8002274:	f043 0302 	orr.w	r3, r3, #2
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d102      	bne.n	8002284 <HAL_RCC_OscConfig+0xa4c>
 800227e:	4b84      	ldr	r3, [pc, #528]	; (8002490 <HAL_RCC_OscConfig+0xc58>)
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	e013      	b.n	80022ac <HAL_RCC_OscConfig+0xa74>
 8002284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002288:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800228c:	2202      	movs	r2, #2
 800228e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002294:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	fa93 f2a3 	rbit	r2, r3
 800229e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	4b79      	ldr	r3, [pc, #484]	; (8002490 <HAL_RCC_OscConfig+0xc58>)
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022b0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80022b4:	2102      	movs	r1, #2
 80022b6:	6011      	str	r1, [r2, #0]
 80022b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80022c0:	6812      	ldr	r2, [r2, #0]
 80022c2:	fa92 f1a2 	rbit	r1, r2
 80022c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022ca:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80022ce:	6011      	str	r1, [r2, #0]
  return result;
 80022d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022d4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	fab2 f282 	clz	r2, r2
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	f002 021f 	and.w	r2, r2, #31
 80022ea:	2101      	movs	r1, #1
 80022ec:	fa01 f202 	lsl.w	r2, r1, r2
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d084      	beq.n	8002200 <HAL_RCC_OscConfig+0x9c8>
 80022f6:	e07f      	b.n	80023f8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f8:	f7fe fffe 	bl	80012f8 <HAL_GetTick>
 80022fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002300:	e00b      	b.n	800231a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002302:	f7fe fff9 	bl	80012f8 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002312:	4293      	cmp	r3, r2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e2c4      	b.n	80028a4 <HAL_RCC_OscConfig+0x106c>
 800231a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002322:	2202      	movs	r2, #2
 8002324:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	fa93 f2a3 	rbit	r2, r3
 8002334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002338:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002342:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002346:	2202      	movs	r2, #2
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	fa93 f2a3 	rbit	r2, r3
 8002358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002360:	601a      	str	r2, [r3, #0]
  return result;
 8002362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002366:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800236a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800236c:	fab3 f383 	clz	r3, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	095b      	lsrs	r3, r3, #5
 8002374:	b2db      	uxtb	r3, r3
 8002376:	f043 0302 	orr.w	r3, r3, #2
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d102      	bne.n	8002386 <HAL_RCC_OscConfig+0xb4e>
 8002380:	4b43      	ldr	r3, [pc, #268]	; (8002490 <HAL_RCC_OscConfig+0xc58>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	e013      	b.n	80023ae <HAL_RCC_OscConfig+0xb76>
 8002386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800238e:	2202      	movs	r2, #2
 8002390:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002396:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	fa93 f2a3 	rbit	r2, r3
 80023a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	4b39      	ldr	r3, [pc, #228]	; (8002490 <HAL_RCC_OscConfig+0xc58>)
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023b2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80023b6:	2102      	movs	r1, #2
 80023b8:	6011      	str	r1, [r2, #0]
 80023ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023be:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80023c2:	6812      	ldr	r2, [r2, #0]
 80023c4:	fa92 f1a2 	rbit	r1, r2
 80023c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023cc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80023d0:	6011      	str	r1, [r2, #0]
  return result;
 80023d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023d6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80023da:	6812      	ldr	r2, [r2, #0]
 80023dc:	fab2 f282 	clz	r2, r2
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	f002 021f 	and.w	r2, r2, #31
 80023ec:	2101      	movs	r1, #1
 80023ee:	fa01 f202 	lsl.w	r2, r1, r2
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d184      	bne.n	8002302 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d105      	bne.n	800240c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002400:	4b23      	ldr	r3, [pc, #140]	; (8002490 <HAL_RCC_OscConfig+0xc58>)
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	4a22      	ldr	r2, [pc, #136]	; (8002490 <HAL_RCC_OscConfig+0xc58>)
 8002406:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800240a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800240c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002410:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 8242 	beq.w	80028a2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800241e:	4b1c      	ldr	r3, [pc, #112]	; (8002490 <HAL_RCC_OscConfig+0xc58>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 030c 	and.w	r3, r3, #12
 8002426:	2b08      	cmp	r3, #8
 8002428:	f000 8213 	beq.w	8002852 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800242c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002430:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	2b02      	cmp	r3, #2
 800243a:	f040 8162 	bne.w	8002702 <HAL_RCC_OscConfig+0xeca>
 800243e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002442:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002446:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800244a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002450:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	fa93 f2a3 	rbit	r2, r3
 800245a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002462:	601a      	str	r2, [r3, #0]
  return result;
 8002464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002468:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800246c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246e:	fab3 f383 	clz	r3, r3
 8002472:	b2db      	uxtb	r3, r3
 8002474:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002478:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	461a      	mov	r2, r3
 8002480:	2300      	movs	r3, #0
 8002482:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002484:	f7fe ff38 	bl	80012f8 <HAL_GetTick>
 8002488:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800248c:	e00c      	b.n	80024a8 <HAL_RCC_OscConfig+0xc70>
 800248e:	bf00      	nop
 8002490:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002494:	f7fe ff30 	bl	80012f8 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e1fd      	b.n	80028a4 <HAL_RCC_OscConfig+0x106c>
 80024a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80024b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ba:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	fa93 f2a3 	rbit	r2, r3
 80024c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80024cc:	601a      	str	r2, [r3, #0]
  return result;
 80024ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80024d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d8:	fab3 f383 	clz	r3, r3
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	095b      	lsrs	r3, r3, #5
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d102      	bne.n	80024f2 <HAL_RCC_OscConfig+0xcba>
 80024ec:	4bb0      	ldr	r3, [pc, #704]	; (80027b0 <HAL_RCC_OscConfig+0xf78>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	e027      	b.n	8002542 <HAL_RCC_OscConfig+0xd0a>
 80024f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80024fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002504:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	fa93 f2a3 	rbit	r2, r3
 800250e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002512:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002520:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	fa93 f2a3 	rbit	r2, r3
 8002534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002538:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	4b9c      	ldr	r3, [pc, #624]	; (80027b0 <HAL_RCC_OscConfig+0xf78>)
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002546:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800254a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800254e:	6011      	str	r1, [r2, #0]
 8002550:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002554:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	fa92 f1a2 	rbit	r1, r2
 800255e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002562:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002566:	6011      	str	r1, [r2, #0]
  return result;
 8002568:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800256c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	fab2 f282 	clz	r2, r2
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	f042 0220 	orr.w	r2, r2, #32
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	f002 021f 	and.w	r2, r2, #31
 8002582:	2101      	movs	r1, #1
 8002584:	fa01 f202 	lsl.w	r2, r1, r2
 8002588:	4013      	ands	r3, r2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d182      	bne.n	8002494 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800258e:	4b88      	ldr	r3, [pc, #544]	; (80027b0 <HAL_RCC_OscConfig+0xf78>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80025a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	430b      	orrs	r3, r1
 80025b0:	497f      	ldr	r1, [pc, #508]	; (80027b0 <HAL_RCC_OscConfig+0xf78>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	604b      	str	r3, [r1, #4]
 80025b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ba:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80025be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	fa93 f2a3 	rbit	r2, r3
 80025d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80025da:	601a      	str	r2, [r3, #0]
  return result;
 80025dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80025e4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e6:	fab3 f383 	clz	r3, r3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	461a      	mov	r2, r3
 80025f8:	2301      	movs	r3, #1
 80025fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fc:	f7fe fe7c 	bl	80012f8 <HAL_GetTick>
 8002600:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002604:	e009      	b.n	800261a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002606:	f7fe fe77 	bl	80012f8 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e144      	b.n	80028a4 <HAL_RCC_OscConfig+0x106c>
 800261a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002622:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002626:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	fa93 f2a3 	rbit	r2, r3
 8002636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800263e:	601a      	str	r2, [r3, #0]
  return result;
 8002640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002644:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002648:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	095b      	lsrs	r3, r3, #5
 8002652:	b2db      	uxtb	r3, r3
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b01      	cmp	r3, #1
 800265c:	d102      	bne.n	8002664 <HAL_RCC_OscConfig+0xe2c>
 800265e:	4b54      	ldr	r3, [pc, #336]	; (80027b0 <HAL_RCC_OscConfig+0xf78>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	e027      	b.n	80026b4 <HAL_RCC_OscConfig+0xe7c>
 8002664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002668:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800266c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002670:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002676:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	fa93 f2a3 	rbit	r2, r3
 8002680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002684:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002692:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	fa93 f2a3 	rbit	r2, r3
 80026a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026aa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	4b3f      	ldr	r3, [pc, #252]	; (80027b0 <HAL_RCC_OscConfig+0xf78>)
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026b8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80026bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026c0:	6011      	str	r1, [r2, #0]
 80026c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026c6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	fa92 f1a2 	rbit	r1, r2
 80026d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026d4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80026d8:	6011      	str	r1, [r2, #0]
  return result;
 80026da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026de:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	fab2 f282 	clz	r2, r2
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	f042 0220 	orr.w	r2, r2, #32
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	f002 021f 	and.w	r2, r2, #31
 80026f4:	2101      	movs	r1, #1
 80026f6:	fa01 f202 	lsl.w	r2, r1, r2
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d082      	beq.n	8002606 <HAL_RCC_OscConfig+0xdce>
 8002700:	e0cf      	b.n	80028a2 <HAL_RCC_OscConfig+0x106a>
 8002702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002706:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800270a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800270e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002714:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	fa93 f2a3 	rbit	r2, r3
 800271e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002722:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002726:	601a      	str	r2, [r3, #0]
  return result;
 8002728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002730:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800273c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	461a      	mov	r2, r3
 8002744:	2300      	movs	r3, #0
 8002746:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002748:	f7fe fdd6 	bl	80012f8 <HAL_GetTick>
 800274c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002750:	e009      	b.n	8002766 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002752:	f7fe fdd1 	bl	80012f8 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e09e      	b.n	80028a4 <HAL_RCC_OscConfig+0x106c>
 8002766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800276e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002772:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002778:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	fa93 f2a3 	rbit	r2, r3
 8002782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002786:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800278a:	601a      	str	r2, [r3, #0]
  return result;
 800278c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002790:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002794:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002796:	fab3 f383 	clz	r3, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	095b      	lsrs	r3, r3, #5
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d104      	bne.n	80027b4 <HAL_RCC_OscConfig+0xf7c>
 80027aa:	4b01      	ldr	r3, [pc, #4]	; (80027b0 <HAL_RCC_OscConfig+0xf78>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	e029      	b.n	8002804 <HAL_RCC_OscConfig+0xfcc>
 80027b0:	40021000 	.word	0x40021000
 80027b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80027bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	fa93 f2a3 	rbit	r2, r3
 80027d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027de:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80027e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ec:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	fa93 f2a3 	rbit	r2, r3
 80027f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	4b2b      	ldr	r3, [pc, #172]	; (80028b0 <HAL_RCC_OscConfig+0x1078>)
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002808:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800280c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002810:	6011      	str	r1, [r2, #0]
 8002812:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002816:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	fa92 f1a2 	rbit	r1, r2
 8002820:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002824:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002828:	6011      	str	r1, [r2, #0]
  return result;
 800282a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800282e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	fab2 f282 	clz	r2, r2
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	f042 0220 	orr.w	r2, r2, #32
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	f002 021f 	and.w	r2, r2, #31
 8002844:	2101      	movs	r1, #1
 8002846:	fa01 f202 	lsl.w	r2, r1, r2
 800284a:	4013      	ands	r3, r2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d180      	bne.n	8002752 <HAL_RCC_OscConfig+0xf1a>
 8002850:	e027      	b.n	80028a2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002856:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e01e      	b.n	80028a4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002866:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <HAL_RCC_OscConfig+0x1078>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800286e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002872:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	429a      	cmp	r2, r3
 8002884:	d10b      	bne.n	800289e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002886:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800288a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800288e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002892:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800289a:	429a      	cmp	r2, r3
 800289c:	d001      	beq.n	80028a2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000

080028b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b09e      	sub	sp, #120	; 0x78
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028be:	2300      	movs	r3, #0
 80028c0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e162      	b.n	8002b92 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028cc:	4b90      	ldr	r3, [pc, #576]	; (8002b10 <HAL_RCC_ClockConfig+0x25c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d910      	bls.n	80028fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028da:	4b8d      	ldr	r3, [pc, #564]	; (8002b10 <HAL_RCC_ClockConfig+0x25c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 0207 	bic.w	r2, r3, #7
 80028e2:	498b      	ldr	r1, [pc, #556]	; (8002b10 <HAL_RCC_ClockConfig+0x25c>)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ea:	4b89      	ldr	r3, [pc, #548]	; (8002b10 <HAL_RCC_ClockConfig+0x25c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d001      	beq.n	80028fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e14a      	b.n	8002b92 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d008      	beq.n	800291a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002908:	4b82      	ldr	r3, [pc, #520]	; (8002b14 <HAL_RCC_ClockConfig+0x260>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	497f      	ldr	r1, [pc, #508]	; (8002b14 <HAL_RCC_ClockConfig+0x260>)
 8002916:	4313      	orrs	r3, r2
 8002918:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 80dc 	beq.w	8002ae0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d13c      	bne.n	80029aa <HAL_RCC_ClockConfig+0xf6>
 8002930:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002934:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002936:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002938:	fa93 f3a3 	rbit	r3, r3
 800293c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800293e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002940:	fab3 f383 	clz	r3, r3
 8002944:	b2db      	uxtb	r3, r3
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	b2db      	uxtb	r3, r3
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b01      	cmp	r3, #1
 8002952:	d102      	bne.n	800295a <HAL_RCC_ClockConfig+0xa6>
 8002954:	4b6f      	ldr	r3, [pc, #444]	; (8002b14 <HAL_RCC_ClockConfig+0x260>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	e00f      	b.n	800297a <HAL_RCC_ClockConfig+0xc6>
 800295a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800295e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002962:	fa93 f3a3 	rbit	r3, r3
 8002966:	667b      	str	r3, [r7, #100]	; 0x64
 8002968:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800296c:	663b      	str	r3, [r7, #96]	; 0x60
 800296e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002970:	fa93 f3a3 	rbit	r3, r3
 8002974:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002976:	4b67      	ldr	r3, [pc, #412]	; (8002b14 <HAL_RCC_ClockConfig+0x260>)
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800297e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002980:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002982:	fa92 f2a2 	rbit	r2, r2
 8002986:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002988:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800298a:	fab2 f282 	clz	r2, r2
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	f042 0220 	orr.w	r2, r2, #32
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	f002 021f 	and.w	r2, r2, #31
 800299a:	2101      	movs	r1, #1
 800299c:	fa01 f202 	lsl.w	r2, r1, r2
 80029a0:	4013      	ands	r3, r2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d17b      	bne.n	8002a9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e0f3      	b.n	8002b92 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d13c      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x178>
 80029b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ba:	fa93 f3a3 	rbit	r3, r3
 80029be:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	095b      	lsrs	r3, r3, #5
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d102      	bne.n	80029dc <HAL_RCC_ClockConfig+0x128>
 80029d6:	4b4f      	ldr	r3, [pc, #316]	; (8002b14 <HAL_RCC_ClockConfig+0x260>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	e00f      	b.n	80029fc <HAL_RCC_ClockConfig+0x148>
 80029dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029e4:	fa93 f3a3 	rbit	r3, r3
 80029e8:	647b      	str	r3, [r7, #68]	; 0x44
 80029ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ee:	643b      	str	r3, [r7, #64]	; 0x40
 80029f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029f2:	fa93 f3a3 	rbit	r3, r3
 80029f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029f8:	4b46      	ldr	r3, [pc, #280]	; (8002b14 <HAL_RCC_ClockConfig+0x260>)
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a00:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a04:	fa92 f2a2 	rbit	r2, r2
 8002a08:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002a0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a0c:	fab2 f282 	clz	r2, r2
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	f042 0220 	orr.w	r2, r2, #32
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	f002 021f 	and.w	r2, r2, #31
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d13a      	bne.n	8002a9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0b2      	b.n	8002b92 <HAL_RCC_ClockConfig+0x2de>
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a32:	fa93 f3a3 	rbit	r3, r3
 8002a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	095b      	lsrs	r3, r3, #5
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d102      	bne.n	8002a54 <HAL_RCC_ClockConfig+0x1a0>
 8002a4e:	4b31      	ldr	r3, [pc, #196]	; (8002b14 <HAL_RCC_ClockConfig+0x260>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	e00d      	b.n	8002a70 <HAL_RCC_ClockConfig+0x1bc>
 8002a54:	2302      	movs	r3, #2
 8002a56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a60:	2302      	movs	r3, #2
 8002a62:	623b      	str	r3, [r7, #32]
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	61fb      	str	r3, [r7, #28]
 8002a6c:	4b29      	ldr	r3, [pc, #164]	; (8002b14 <HAL_RCC_ClockConfig+0x260>)
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	2202      	movs	r2, #2
 8002a72:	61ba      	str	r2, [r7, #24]
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	fa92 f2a2 	rbit	r2, r2
 8002a7a:	617a      	str	r2, [r7, #20]
  return result;
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	fab2 f282 	clz	r2, r2
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	f042 0220 	orr.w	r2, r2, #32
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	f002 021f 	and.w	r2, r2, #31
 8002a8e:	2101      	movs	r1, #1
 8002a90:	fa01 f202 	lsl.w	r2, r1, r2
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e079      	b.n	8002b92 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a9e:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <HAL_RCC_ClockConfig+0x260>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f023 0203 	bic.w	r2, r3, #3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	491a      	ldr	r1, [pc, #104]	; (8002b14 <HAL_RCC_ClockConfig+0x260>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab0:	f7fe fc22 	bl	80012f8 <HAL_GetTick>
 8002ab4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab6:	e00a      	b.n	8002ace <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab8:	f7fe fc1e 	bl	80012f8 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e061      	b.n	8002b92 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ace:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <HAL_RCC_ClockConfig+0x260>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 020c 	and.w	r2, r3, #12
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d1eb      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <HAL_RCC_ClockConfig+0x25c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d214      	bcs.n	8002b18 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <HAL_RCC_ClockConfig+0x25c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f023 0207 	bic.w	r2, r3, #7
 8002af6:	4906      	ldr	r1, [pc, #24]	; (8002b10 <HAL_RCC_ClockConfig+0x25c>)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afe:	4b04      	ldr	r3, [pc, #16]	; (8002b10 <HAL_RCC_ClockConfig+0x25c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d005      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e040      	b.n	8002b92 <HAL_RCC_ClockConfig+0x2de>
 8002b10:	40022000 	.word	0x40022000
 8002b14:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b24:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <HAL_RCC_ClockConfig+0x2e8>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	491a      	ldr	r1, [pc, #104]	; (8002b9c <HAL_RCC_ClockConfig+0x2e8>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b42:	4b16      	ldr	r3, [pc, #88]	; (8002b9c <HAL_RCC_ClockConfig+0x2e8>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	4912      	ldr	r1, [pc, #72]	; (8002b9c <HAL_RCC_ClockConfig+0x2e8>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b56:	f000 f829 	bl	8002bac <HAL_RCC_GetSysClockFreq>
 8002b5a:	4601      	mov	r1, r0
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <HAL_RCC_ClockConfig+0x2e8>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b64:	22f0      	movs	r2, #240	; 0xf0
 8002b66:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	fa92 f2a2 	rbit	r2, r2
 8002b6e:	60fa      	str	r2, [r7, #12]
  return result;
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	fab2 f282 	clz	r2, r2
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	40d3      	lsrs	r3, r2
 8002b7a:	4a09      	ldr	r2, [pc, #36]	; (8002ba0 <HAL_RCC_ClockConfig+0x2ec>)
 8002b7c:	5cd3      	ldrb	r3, [r2, r3]
 8002b7e:	fa21 f303 	lsr.w	r3, r1, r3
 8002b82:	4a08      	ldr	r2, [pc, #32]	; (8002ba4 <HAL_RCC_ClockConfig+0x2f0>)
 8002b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b86:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <HAL_RCC_ClockConfig+0x2f4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe fb70 	bl	8001270 <HAL_InitTick>
  
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3778      	adds	r7, #120	; 0x78
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	08005318 	.word	0x08005318
 8002ba4:	20000000 	.word	0x20000000
 8002ba8:	20000004 	.word	0x20000004

08002bac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b08b      	sub	sp, #44	; 0x2c
 8002bb0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61bb      	str	r3, [r7, #24]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002bc6:	4b29      	ldr	r3, [pc, #164]	; (8002c6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d002      	beq.n	8002bdc <HAL_RCC_GetSysClockFreq+0x30>
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d003      	beq.n	8002be2 <HAL_RCC_GetSysClockFreq+0x36>
 8002bda:	e03c      	b.n	8002c56 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bdc:	4b24      	ldr	r3, [pc, #144]	; (8002c70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bde:	623b      	str	r3, [r7, #32]
      break;
 8002be0:	e03c      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002be8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002bec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	fa92 f2a2 	rbit	r2, r2
 8002bf4:	607a      	str	r2, [r7, #4]
  return result;
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	fab2 f282 	clz	r2, r2
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	40d3      	lsrs	r3, r2
 8002c00:	4a1c      	ldr	r2, [pc, #112]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c02:	5cd3      	ldrb	r3, [r2, r3]
 8002c04:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c06:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	220f      	movs	r2, #15
 8002c10:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	fa92 f2a2 	rbit	r2, r2
 8002c18:	60fa      	str	r2, [r7, #12]
  return result;
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	fab2 f282 	clz	r2, r2
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	40d3      	lsrs	r3, r2
 8002c24:	4a14      	ldr	r2, [pc, #80]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c26:	5cd3      	ldrb	r3, [r2, r3]
 8002c28:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c34:	4a0e      	ldr	r2, [pc, #56]	; (8002c70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	fb02 f303 	mul.w	r3, r2, r3
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
 8002c44:	e004      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	4a0c      	ldr	r2, [pc, #48]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c4a:	fb02 f303 	mul.w	r3, r2, r3
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	623b      	str	r3, [r7, #32]
      break;
 8002c54:	e002      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c56:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c58:	623b      	str	r3, [r7, #32]
      break;
 8002c5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	372c      	adds	r7, #44	; 0x2c
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	007a1200 	.word	0x007a1200
 8002c74:	08005330 	.word	0x08005330
 8002c78:	08005340 	.word	0x08005340
 8002c7c:	003d0900 	.word	0x003d0900

08002c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c84:	4b03      	ldr	r3, [pc, #12]	; (8002c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c86:	681b      	ldr	r3, [r3, #0]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	20000000 	.word	0x20000000

08002c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002c9e:	f7ff ffef 	bl	8002c80 <HAL_RCC_GetHCLKFreq>
 8002ca2:	4601      	mov	r1, r0
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002cac:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002cb0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	fa92 f2a2 	rbit	r2, r2
 8002cb8:	603a      	str	r2, [r7, #0]
  return result;
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	fab2 f282 	clz	r2, r2
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	40d3      	lsrs	r3, r2
 8002cc4:	4a04      	ldr	r2, [pc, #16]	; (8002cd8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002cc6:	5cd3      	ldrb	r3, [r2, r3]
 8002cc8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	08005328 	.word	0x08005328

08002cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002ce2:	f7ff ffcd 	bl	8002c80 <HAL_RCC_GetHCLKFreq>
 8002ce6:	4601      	mov	r1, r0
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002cf0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002cf4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	fa92 f2a2 	rbit	r2, r2
 8002cfc:	603a      	str	r2, [r7, #0]
  return result;
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	fab2 f282 	clz	r2, r2
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	40d3      	lsrs	r3, r2
 8002d08:	4a04      	ldr	r2, [pc, #16]	; (8002d1c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002d0a:	5cd3      	ldrb	r3, [r2, r3]
 8002d0c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002d10:	4618      	mov	r0, r3
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	08005328 	.word	0x08005328

08002d20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e09d      	b.n	8002e6e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d108      	bne.n	8002d4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d42:	d009      	beq.n	8002d58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	61da      	str	r2, [r3, #28]
 8002d4a:	e005      	b.n	8002d58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d106      	bne.n	8002d78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7fe f8d4 	bl	8000f20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d98:	d902      	bls.n	8002da0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	e002      	b.n	8002da6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002da4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002dae:	d007      	beq.n	8002dc0 <HAL_SPI_Init+0xa0>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002db8:	d002      	beq.n	8002dc0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e02:	ea42 0103 	orr.w	r1, r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	0c1b      	lsrs	r3, r3, #16
 8002e1c:	f003 0204 	and.w	r2, r3, #4
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002e3c:	ea42 0103 	orr.w	r1, r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	69da      	ldr	r2, [r3, #28]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b088      	sub	sp, #32
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	60f8      	str	r0, [r7, #12]
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	603b      	str	r3, [r7, #0]
 8002e82:	4613      	mov	r3, r2
 8002e84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <HAL_SPI_Transmit+0x22>
 8002e94:	2302      	movs	r3, #2
 8002e96:	e158      	b.n	800314a <HAL_SPI_Transmit+0x2d4>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ea0:	f7fe fa2a 	bl	80012f8 <HAL_GetTick>
 8002ea4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ea6:	88fb      	ldrh	r3, [r7, #6]
 8002ea8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d002      	beq.n	8002ebc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002eba:	e13d      	b.n	8003138 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <HAL_SPI_Transmit+0x52>
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d102      	bne.n	8002ece <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ecc:	e134      	b.n	8003138 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	88fa      	ldrh	r2, [r7, #6]
 8002ee6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	88fa      	ldrh	r2, [r7, #6]
 8002eec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f18:	d10f      	bne.n	8002f3a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f44:	2b40      	cmp	r3, #64	; 0x40
 8002f46:	d007      	beq.n	8002f58 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f60:	d94b      	bls.n	8002ffa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <HAL_SPI_Transmit+0xfa>
 8002f6a:	8afb      	ldrh	r3, [r7, #22]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d13e      	bne.n	8002fee <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f74:	881a      	ldrh	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f80:	1c9a      	adds	r2, r3, #2
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f94:	e02b      	b.n	8002fee <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d112      	bne.n	8002fca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa8:	881a      	ldrh	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb4:	1c9a      	adds	r2, r3, #2
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fc8:	e011      	b.n	8002fee <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fca:	f7fe f995 	bl	80012f8 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d803      	bhi.n	8002fe2 <HAL_SPI_Transmit+0x16c>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe0:	d102      	bne.n	8002fe8 <HAL_SPI_Transmit+0x172>
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d102      	bne.n	8002fee <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002fec:	e0a4      	b.n	8003138 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1ce      	bne.n	8002f96 <HAL_SPI_Transmit+0x120>
 8002ff8:	e07c      	b.n	80030f4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <HAL_SPI_Transmit+0x192>
 8003002:	8afb      	ldrh	r3, [r7, #22]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d170      	bne.n	80030ea <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b01      	cmp	r3, #1
 8003010:	d912      	bls.n	8003038 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003016:	881a      	ldrh	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003022:	1c9a      	adds	r2, r3, #2
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800302c:	b29b      	uxth	r3, r3
 800302e:	3b02      	subs	r3, #2
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003036:	e058      	b.n	80030ea <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	330c      	adds	r3, #12
 8003042:	7812      	ldrb	r2, [r2, #0]
 8003044:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003054:	b29b      	uxth	r3, r3
 8003056:	3b01      	subs	r3, #1
 8003058:	b29a      	uxth	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800305e:	e044      	b.n	80030ea <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b02      	cmp	r3, #2
 800306c:	d12b      	bne.n	80030c6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003072:	b29b      	uxth	r3, r3
 8003074:	2b01      	cmp	r3, #1
 8003076:	d912      	bls.n	800309e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307c:	881a      	ldrh	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003088:	1c9a      	adds	r2, r3, #2
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003092:	b29b      	uxth	r3, r3
 8003094:	3b02      	subs	r3, #2
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800309c:	e025      	b.n	80030ea <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	330c      	adds	r3, #12
 80030a8:	7812      	ldrb	r2, [r2, #0]
 80030aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	3b01      	subs	r3, #1
 80030be:	b29a      	uxth	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030c4:	e011      	b.n	80030ea <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030c6:	f7fe f917 	bl	80012f8 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d803      	bhi.n	80030de <HAL_SPI_Transmit+0x268>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030dc:	d102      	bne.n	80030e4 <HAL_SPI_Transmit+0x26e>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d102      	bne.n	80030ea <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80030e8:	e026      	b.n	8003138 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1b5      	bne.n	8003060 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	6839      	ldr	r1, [r7, #0]
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 fce3 	bl	8003ac4 <SPI_EndRxTxTransaction>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2220      	movs	r2, #32
 8003108:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10a      	bne.n	8003128 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003112:	2300      	movs	r3, #0
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	613b      	str	r3, [r7, #16]
 8003126:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	77fb      	strb	r3, [r7, #31]
 8003134:	e000      	b.n	8003138 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003136:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003148:	7ffb      	ldrb	r3, [r7, #31]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3720      	adds	r7, #32
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b088      	sub	sp, #32
 8003156:	af02      	add	r7, sp, #8
 8003158:	60f8      	str	r0, [r7, #12]
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	603b      	str	r3, [r7, #0]
 800315e:	4613      	mov	r3, r2
 8003160:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800316e:	d112      	bne.n	8003196 <HAL_SPI_Receive+0x44>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10e      	bne.n	8003196 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2204      	movs	r2, #4
 800317c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003180:	88fa      	ldrh	r2, [r7, #6]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	4613      	mov	r3, r2
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	68b9      	ldr	r1, [r7, #8]
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 f910 	bl	80033b2 <HAL_SPI_TransmitReceive>
 8003192:	4603      	mov	r3, r0
 8003194:	e109      	b.n	80033aa <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800319c:	2b01      	cmp	r3, #1
 800319e:	d101      	bne.n	80031a4 <HAL_SPI_Receive+0x52>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e102      	b.n	80033aa <HAL_SPI_Receive+0x258>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031ac:	f7fe f8a4 	bl	80012f8 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d002      	beq.n	80031c4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80031be:	2302      	movs	r3, #2
 80031c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031c2:	e0e9      	b.n	8003398 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <HAL_SPI_Receive+0x7e>
 80031ca:	88fb      	ldrh	r3, [r7, #6]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d102      	bne.n	80031d6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031d4:	e0e0      	b.n	8003398 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2204      	movs	r2, #4
 80031da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	88fa      	ldrh	r2, [r7, #6]
 80031ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	88fa      	ldrh	r2, [r7, #6]
 80031f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003220:	d908      	bls.n	8003234 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	e007      	b.n	8003244 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003242:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800324c:	d10f      	bne.n	800326e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800325c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800326c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003278:	2b40      	cmp	r3, #64	; 0x40
 800327a:	d007      	beq.n	800328c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800328a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003294:	d867      	bhi.n	8003366 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003296:	e030      	b.n	80032fa <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d117      	bne.n	80032d6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f103 020c 	add.w	r2, r3, #12
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	7812      	ldrb	r2, [r2, #0]
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80032d4:	e011      	b.n	80032fa <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032d6:	f7fe f80f 	bl	80012f8 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d803      	bhi.n	80032ee <HAL_SPI_Receive+0x19c>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ec:	d102      	bne.n	80032f4 <HAL_SPI_Receive+0x1a2>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d102      	bne.n	80032fa <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80032f8:	e04e      	b.n	8003398 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003300:	b29b      	uxth	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1c8      	bne.n	8003298 <HAL_SPI_Receive+0x146>
 8003306:	e034      	b.n	8003372 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b01      	cmp	r3, #1
 8003314:	d115      	bne.n	8003342 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	b292      	uxth	r2, r2
 8003322:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	1c9a      	adds	r2, r3, #2
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003334:	b29b      	uxth	r3, r3
 8003336:	3b01      	subs	r3, #1
 8003338:	b29a      	uxth	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003340:	e011      	b.n	8003366 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003342:	f7fd ffd9 	bl	80012f8 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d803      	bhi.n	800335a <HAL_SPI_Receive+0x208>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003358:	d102      	bne.n	8003360 <HAL_SPI_Receive+0x20e>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d102      	bne.n	8003366 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003364:	e018      	b.n	8003398 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1ca      	bne.n	8003308 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	6839      	ldr	r1, [r7, #0]
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 fb4c 	bl	8003a14 <SPI_EndRxTransaction>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2220      	movs	r2, #32
 8003386:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	75fb      	strb	r3, [r7, #23]
 8003394:	e000      	b.n	8003398 <HAL_SPI_Receive+0x246>
  }

error :
 8003396:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80033a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b08a      	sub	sp, #40	; 0x28
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80033c0:	2301      	movs	r3, #1
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_SPI_TransmitReceive+0x26>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e1fb      	b.n	80037d0 <HAL_SPI_TransmitReceive+0x41e>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033e0:	f7fd ff8a 	bl	80012f8 <HAL_GetTick>
 80033e4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033ec:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80033f4:	887b      	ldrh	r3, [r7, #2]
 80033f6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80033f8:	887b      	ldrh	r3, [r7, #2]
 80033fa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80033fc:	7efb      	ldrb	r3, [r7, #27]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d00e      	beq.n	8003420 <HAL_SPI_TransmitReceive+0x6e>
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003408:	d106      	bne.n	8003418 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d102      	bne.n	8003418 <HAL_SPI_TransmitReceive+0x66>
 8003412:	7efb      	ldrb	r3, [r7, #27]
 8003414:	2b04      	cmp	r3, #4
 8003416:	d003      	beq.n	8003420 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003418:	2302      	movs	r3, #2
 800341a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800341e:	e1cd      	b.n	80037bc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d005      	beq.n	8003432 <HAL_SPI_TransmitReceive+0x80>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <HAL_SPI_TransmitReceive+0x80>
 800342c:	887b      	ldrh	r3, [r7, #2]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d103      	bne.n	800343a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003438:	e1c0      	b.n	80037bc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b04      	cmp	r3, #4
 8003444:	d003      	beq.n	800344e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2205      	movs	r2, #5
 800344a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	887a      	ldrh	r2, [r7, #2]
 800345e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	887a      	ldrh	r2, [r7, #2]
 8003466:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	887a      	ldrh	r2, [r7, #2]
 8003474:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	887a      	ldrh	r2, [r7, #2]
 800347a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003490:	d802      	bhi.n	8003498 <HAL_SPI_TransmitReceive+0xe6>
 8003492:	8a3b      	ldrh	r3, [r7, #16]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d908      	bls.n	80034aa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034a6:	605a      	str	r2, [r3, #4]
 80034a8:	e007      	b.n	80034ba <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034b8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c4:	2b40      	cmp	r3, #64	; 0x40
 80034c6:	d007      	beq.n	80034d8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034e0:	d97c      	bls.n	80035dc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <HAL_SPI_TransmitReceive+0x13e>
 80034ea:	8a7b      	ldrh	r3, [r7, #18]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d169      	bne.n	80035c4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f4:	881a      	ldrh	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003500:	1c9a      	adds	r2, r3, #2
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800350a:	b29b      	uxth	r3, r3
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003514:	e056      	b.n	80035c4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b02      	cmp	r3, #2
 8003522:	d11b      	bne.n	800355c <HAL_SPI_TransmitReceive+0x1aa>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003528:	b29b      	uxth	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d016      	beq.n	800355c <HAL_SPI_TransmitReceive+0x1aa>
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	2b01      	cmp	r3, #1
 8003532:	d113      	bne.n	800355c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003538:	881a      	ldrh	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003544:	1c9a      	adds	r2, r3, #2
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b01      	cmp	r3, #1
 8003568:	d11c      	bne.n	80035a4 <HAL_SPI_TransmitReceive+0x1f2>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003570:	b29b      	uxth	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d016      	beq.n	80035a4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68da      	ldr	r2, [r3, #12]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	b292      	uxth	r2, r2
 8003582:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	1c9a      	adds	r2, r3, #2
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003594:	b29b      	uxth	r3, r3
 8003596:	3b01      	subs	r3, #1
 8003598:	b29a      	uxth	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035a0:	2301      	movs	r3, #1
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80035a4:	f7fd fea8 	bl	80012f8 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d807      	bhi.n	80035c4 <HAL_SPI_TransmitReceive+0x212>
 80035b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ba:	d003      	beq.n	80035c4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80035c2:	e0fb      	b.n	80037bc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1a3      	bne.n	8003516 <HAL_SPI_TransmitReceive+0x164>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d19d      	bne.n	8003516 <HAL_SPI_TransmitReceive+0x164>
 80035da:	e0df      	b.n	800379c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_SPI_TransmitReceive+0x23a>
 80035e4:	8a7b      	ldrh	r3, [r7, #18]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	f040 80cb 	bne.w	8003782 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d912      	bls.n	800361c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fa:	881a      	ldrh	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003606:	1c9a      	adds	r2, r3, #2
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003610:	b29b      	uxth	r3, r3
 8003612:	3b02      	subs	r3, #2
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	87da      	strh	r2, [r3, #62]	; 0x3e
 800361a:	e0b2      	b.n	8003782 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	330c      	adds	r3, #12
 8003626:	7812      	ldrb	r2, [r2, #0]
 8003628:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003638:	b29b      	uxth	r3, r3
 800363a:	3b01      	subs	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003642:	e09e      	b.n	8003782 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b02      	cmp	r3, #2
 8003650:	d134      	bne.n	80036bc <HAL_SPI_TransmitReceive+0x30a>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	d02f      	beq.n	80036bc <HAL_SPI_TransmitReceive+0x30a>
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	2b01      	cmp	r3, #1
 8003660:	d12c      	bne.n	80036bc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003666:	b29b      	uxth	r3, r3
 8003668:	2b01      	cmp	r3, #1
 800366a:	d912      	bls.n	8003692 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003670:	881a      	ldrh	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367c:	1c9a      	adds	r2, r3, #2
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003686:	b29b      	uxth	r3, r3
 8003688:	3b02      	subs	r3, #2
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003690:	e012      	b.n	80036b8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	330c      	adds	r3, #12
 800369c:	7812      	ldrb	r2, [r2, #0]
 800369e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d148      	bne.n	800375c <HAL_SPI_TransmitReceive+0x3aa>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d042      	beq.n	800375c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d923      	bls.n	800372a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	b292      	uxth	r2, r2
 80036ee:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	1c9a      	adds	r2, r3, #2
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b02      	subs	r3, #2
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b01      	cmp	r3, #1
 8003716:	d81f      	bhi.n	8003758 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003726:	605a      	str	r2, [r3, #4]
 8003728:	e016      	b.n	8003758 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f103 020c 	add.w	r2, r3, #12
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	7812      	ldrb	r2, [r2, #0]
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800374c:	b29b      	uxth	r3, r3
 800374e:	3b01      	subs	r3, #1
 8003750:	b29a      	uxth	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003758:	2301      	movs	r3, #1
 800375a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800375c:	f7fd fdcc 	bl	80012f8 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003768:	429a      	cmp	r2, r3
 800376a:	d803      	bhi.n	8003774 <HAL_SPI_TransmitReceive+0x3c2>
 800376c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003772:	d102      	bne.n	800377a <HAL_SPI_TransmitReceive+0x3c8>
 8003774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003776:	2b00      	cmp	r3, #0
 8003778:	d103      	bne.n	8003782 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003780:	e01c      	b.n	80037bc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	f47f af5b 	bne.w	8003644 <HAL_SPI_TransmitReceive+0x292>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003794:	b29b      	uxth	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	f47f af54 	bne.w	8003644 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800379c:	69fa      	ldr	r2, [r7, #28]
 800379e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 f98f 	bl	8003ac4 <SPI_EndRxTxTransaction>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d006      	beq.n	80037ba <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2220      	movs	r2, #32
 80037b6:	661a      	str	r2, [r3, #96]	; 0x60
 80037b8:	e000      	b.n	80037bc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80037ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80037cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3728      	adds	r7, #40	; 0x28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b088      	sub	sp, #32
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	4613      	mov	r3, r2
 80037e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037e8:	f7fd fd86 	bl	80012f8 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f0:	1a9b      	subs	r3, r3, r2
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	4413      	add	r3, r2
 80037f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037f8:	f7fd fd7e 	bl	80012f8 <HAL_GetTick>
 80037fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037fe:	4b39      	ldr	r3, [pc, #228]	; (80038e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	015b      	lsls	r3, r3, #5
 8003804:	0d1b      	lsrs	r3, r3, #20
 8003806:	69fa      	ldr	r2, [r7, #28]
 8003808:	fb02 f303 	mul.w	r3, r2, r3
 800380c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800380e:	e054      	b.n	80038ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003816:	d050      	beq.n	80038ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003818:	f7fd fd6e 	bl	80012f8 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	69fa      	ldr	r2, [r7, #28]
 8003824:	429a      	cmp	r2, r3
 8003826:	d902      	bls.n	800382e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d13d      	bne.n	80038aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800383c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003846:	d111      	bne.n	800386c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003850:	d004      	beq.n	800385c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800385a:	d107      	bne.n	800386c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800386a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003874:	d10f      	bne.n	8003896 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003894:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e017      	b.n	80038da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4013      	ands	r3, r2
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	bf0c      	ite	eq
 80038ca:	2301      	moveq	r3, #1
 80038cc:	2300      	movne	r3, #0
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	461a      	mov	r2, r3
 80038d2:	79fb      	ldrb	r3, [r7, #7]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d19b      	bne.n	8003810 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3720      	adds	r7, #32
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20000000 	.word	0x20000000

080038e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08a      	sub	sp, #40	; 0x28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80038f6:	2300      	movs	r3, #0
 80038f8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80038fa:	f7fd fcfd 	bl	80012f8 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003902:	1a9b      	subs	r3, r3, r2
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	4413      	add	r3, r2
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800390a:	f7fd fcf5 	bl	80012f8 <HAL_GetTick>
 800390e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	330c      	adds	r3, #12
 8003916:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003918:	4b3d      	ldr	r3, [pc, #244]	; (8003a10 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	00da      	lsls	r2, r3, #3
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	0d1b      	lsrs	r3, r3, #20
 8003928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800392a:	fb02 f303 	mul.w	r3, r2, r3
 800392e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003930:	e060      	b.n	80039f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003938:	d107      	bne.n	800394a <SPI_WaitFifoStateUntilTimeout+0x62>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d104      	bne.n	800394a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003948:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003950:	d050      	beq.n	80039f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003952:	f7fd fcd1 	bl	80012f8 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395e:	429a      	cmp	r2, r3
 8003960:	d902      	bls.n	8003968 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	2b00      	cmp	r3, #0
 8003966:	d13d      	bne.n	80039e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003976:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003980:	d111      	bne.n	80039a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800398a:	d004      	beq.n	8003996 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003994:	d107      	bne.n	80039a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ae:	d10f      	bne.n	80039d0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e010      	b.n	8003a06 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	3b01      	subs	r3, #1
 80039f2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	4013      	ands	r3, r2
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d196      	bne.n	8003932 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3728      	adds	r7, #40	; 0x28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	20000000 	.word	0x20000000

08003a14 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a28:	d111      	bne.n	8003a4e <SPI_EndRxTransaction+0x3a>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a32:	d004      	beq.n	8003a3e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a3c:	d107      	bne.n	8003a4e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a4c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2200      	movs	r2, #0
 8003a56:	2180      	movs	r1, #128	; 0x80
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f7ff febd 	bl	80037d8 <SPI_WaitFlagStateUntilTimeout>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d007      	beq.n	8003a74 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a68:	f043 0220 	orr.w	r2, r3, #32
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e023      	b.n	8003abc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a7c:	d11d      	bne.n	8003aba <SPI_EndRxTransaction+0xa6>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a86:	d004      	beq.n	8003a92 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a90:	d113      	bne.n	8003aba <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f7ff ff22 	bl	80038e8 <SPI_WaitFifoStateUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d007      	beq.n	8003aba <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aae:	f043 0220 	orr.w	r2, r3, #32
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e000      	b.n	8003abc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af02      	add	r7, sp, #8
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f7ff ff03 	bl	80038e8 <SPI_WaitFifoStateUntilTimeout>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d007      	beq.n	8003af8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aec:	f043 0220 	orr.w	r2, r3, #32
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e027      	b.n	8003b48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2200      	movs	r2, #0
 8003b00:	2180      	movs	r1, #128	; 0x80
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f7ff fe68 	bl	80037d8 <SPI_WaitFlagStateUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d007      	beq.n	8003b1e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b12:	f043 0220 	orr.w	r2, r3, #32
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e014      	b.n	8003b48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f7ff fedc 	bl	80038e8 <SPI_WaitFifoStateUntilTimeout>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d007      	beq.n	8003b46 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b3a:	f043 0220 	orr.w	r2, r3, #32
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e000      	b.n	8003b48 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e040      	b.n	8003be4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fd fa36 	bl	8000fe4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2224      	movs	r2, #36	; 0x24
 8003b7c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0201 	bic.w	r2, r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f82c 	bl	8003bec <UART_SetConfig>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d101      	bne.n	8003b9e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e022      	b.n	8003be4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d002      	beq.n	8003bac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f956 	bl	8003e58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f9dd 	bl	8003f9c <UART_CheckIdleState>
 8003be2:	4603      	mov	r3, r0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b088      	sub	sp, #32
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	4b8a      	ldr	r3, [pc, #552]	; (8003e40 <UART_SetConfig+0x254>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6812      	ldr	r2, [r2, #0]
 8003c1e:	6979      	ldr	r1, [r7, #20]
 8003c20:	430b      	orrs	r3, r1
 8003c22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a78      	ldr	r2, [pc, #480]	; (8003e44 <UART_SetConfig+0x258>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d120      	bne.n	8003caa <UART_SetConfig+0xbe>
 8003c68:	4b77      	ldr	r3, [pc, #476]	; (8003e48 <UART_SetConfig+0x25c>)
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6c:	f003 0303 	and.w	r3, r3, #3
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	d817      	bhi.n	8003ca4 <UART_SetConfig+0xb8>
 8003c74:	a201      	add	r2, pc, #4	; (adr r2, 8003c7c <UART_SetConfig+0x90>)
 8003c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7a:	bf00      	nop
 8003c7c:	08003c8d 	.word	0x08003c8d
 8003c80:	08003c99 	.word	0x08003c99
 8003c84:	08003c9f 	.word	0x08003c9f
 8003c88:	08003c93 	.word	0x08003c93
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	77fb      	strb	r3, [r7, #31]
 8003c90:	e01d      	b.n	8003cce <UART_SetConfig+0xe2>
 8003c92:	2302      	movs	r3, #2
 8003c94:	77fb      	strb	r3, [r7, #31]
 8003c96:	e01a      	b.n	8003cce <UART_SetConfig+0xe2>
 8003c98:	2304      	movs	r3, #4
 8003c9a:	77fb      	strb	r3, [r7, #31]
 8003c9c:	e017      	b.n	8003cce <UART_SetConfig+0xe2>
 8003c9e:	2308      	movs	r3, #8
 8003ca0:	77fb      	strb	r3, [r7, #31]
 8003ca2:	e014      	b.n	8003cce <UART_SetConfig+0xe2>
 8003ca4:	2310      	movs	r3, #16
 8003ca6:	77fb      	strb	r3, [r7, #31]
 8003ca8:	e011      	b.n	8003cce <UART_SetConfig+0xe2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a67      	ldr	r2, [pc, #412]	; (8003e4c <UART_SetConfig+0x260>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d102      	bne.n	8003cba <UART_SetConfig+0xce>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	77fb      	strb	r3, [r7, #31]
 8003cb8:	e009      	b.n	8003cce <UART_SetConfig+0xe2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a64      	ldr	r2, [pc, #400]	; (8003e50 <UART_SetConfig+0x264>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d102      	bne.n	8003cca <UART_SetConfig+0xde>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	77fb      	strb	r3, [r7, #31]
 8003cc8:	e001      	b.n	8003cce <UART_SetConfig+0xe2>
 8003cca:	2310      	movs	r3, #16
 8003ccc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cd6:	d15b      	bne.n	8003d90 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8003cd8:	7ffb      	ldrb	r3, [r7, #31]
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	d827      	bhi.n	8003d2e <UART_SetConfig+0x142>
 8003cde:	a201      	add	r2, pc, #4	; (adr r2, 8003ce4 <UART_SetConfig+0xf8>)
 8003ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce4:	08003d09 	.word	0x08003d09
 8003ce8:	08003d11 	.word	0x08003d11
 8003cec:	08003d19 	.word	0x08003d19
 8003cf0:	08003d2f 	.word	0x08003d2f
 8003cf4:	08003d1f 	.word	0x08003d1f
 8003cf8:	08003d2f 	.word	0x08003d2f
 8003cfc:	08003d2f 	.word	0x08003d2f
 8003d00:	08003d2f 	.word	0x08003d2f
 8003d04:	08003d27 	.word	0x08003d27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d08:	f7fe ffc6 	bl	8002c98 <HAL_RCC_GetPCLK1Freq>
 8003d0c:	61b8      	str	r0, [r7, #24]
        break;
 8003d0e:	e013      	b.n	8003d38 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d10:	f7fe ffe4 	bl	8002cdc <HAL_RCC_GetPCLK2Freq>
 8003d14:	61b8      	str	r0, [r7, #24]
        break;
 8003d16:	e00f      	b.n	8003d38 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d18:	4b4e      	ldr	r3, [pc, #312]	; (8003e54 <UART_SetConfig+0x268>)
 8003d1a:	61bb      	str	r3, [r7, #24]
        break;
 8003d1c:	e00c      	b.n	8003d38 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d1e:	f7fe ff45 	bl	8002bac <HAL_RCC_GetSysClockFreq>
 8003d22:	61b8      	str	r0, [r7, #24]
        break;
 8003d24:	e008      	b.n	8003d38 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d2a:	61bb      	str	r3, [r7, #24]
        break;
 8003d2c:	e004      	b.n	8003d38 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	77bb      	strb	r3, [r7, #30]
        break;
 8003d36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d074      	beq.n	8003e28 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	005a      	lsls	r2, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	085b      	lsrs	r3, r3, #1
 8003d48:	441a      	add	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	2b0f      	cmp	r3, #15
 8003d5a:	d916      	bls.n	8003d8a <UART_SetConfig+0x19e>
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d62:	d212      	bcs.n	8003d8a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	f023 030f 	bic.w	r3, r3, #15
 8003d6c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	085b      	lsrs	r3, r3, #1
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	89fb      	ldrh	r3, [r7, #14]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	89fa      	ldrh	r2, [r7, #14]
 8003d86:	60da      	str	r2, [r3, #12]
 8003d88:	e04e      	b.n	8003e28 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	77bb      	strb	r3, [r7, #30]
 8003d8e:	e04b      	b.n	8003e28 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d90:	7ffb      	ldrb	r3, [r7, #31]
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d827      	bhi.n	8003de6 <UART_SetConfig+0x1fa>
 8003d96:	a201      	add	r2, pc, #4	; (adr r2, 8003d9c <UART_SetConfig+0x1b0>)
 8003d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9c:	08003dc1 	.word	0x08003dc1
 8003da0:	08003dc9 	.word	0x08003dc9
 8003da4:	08003dd1 	.word	0x08003dd1
 8003da8:	08003de7 	.word	0x08003de7
 8003dac:	08003dd7 	.word	0x08003dd7
 8003db0:	08003de7 	.word	0x08003de7
 8003db4:	08003de7 	.word	0x08003de7
 8003db8:	08003de7 	.word	0x08003de7
 8003dbc:	08003ddf 	.word	0x08003ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dc0:	f7fe ff6a 	bl	8002c98 <HAL_RCC_GetPCLK1Freq>
 8003dc4:	61b8      	str	r0, [r7, #24]
        break;
 8003dc6:	e013      	b.n	8003df0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dc8:	f7fe ff88 	bl	8002cdc <HAL_RCC_GetPCLK2Freq>
 8003dcc:	61b8      	str	r0, [r7, #24]
        break;
 8003dce:	e00f      	b.n	8003df0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dd0:	4b20      	ldr	r3, [pc, #128]	; (8003e54 <UART_SetConfig+0x268>)
 8003dd2:	61bb      	str	r3, [r7, #24]
        break;
 8003dd4:	e00c      	b.n	8003df0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dd6:	f7fe fee9 	bl	8002bac <HAL_RCC_GetSysClockFreq>
 8003dda:	61b8      	str	r0, [r7, #24]
        break;
 8003ddc:	e008      	b.n	8003df0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003de2:	61bb      	str	r3, [r7, #24]
        break;
 8003de4:	e004      	b.n	8003df0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	77bb      	strb	r3, [r7, #30]
        break;
 8003dee:	bf00      	nop
    }

    if (pclk != 0U)
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d018      	beq.n	8003e28 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	085a      	lsrs	r2, r3, #1
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	441a      	add	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	2b0f      	cmp	r3, #15
 8003e10:	d908      	bls.n	8003e24 <UART_SetConfig+0x238>
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e18:	d204      	bcs.n	8003e24 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	60da      	str	r2, [r3, #12]
 8003e22:	e001      	b.n	8003e28 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e34:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3720      	adds	r7, #32
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	efff69f3 	.word	0xefff69f3
 8003e44:	40013800 	.word	0x40013800
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	40004400 	.word	0x40004400
 8003e50:	40004800 	.word	0x40004800
 8003e54:	007a1200 	.word	0x007a1200

08003e58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	f003 0310 	and.w	r3, r3, #16
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	f003 0320 	and.w	r3, r3, #32
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d01a      	beq.n	8003f6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f56:	d10a      	bne.n	8003f6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	605a      	str	r2, [r3, #4]
  }
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fac:	f7fd f9a4 	bl	80012f8 <HAL_GetTick>
 8003fb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d10e      	bne.n	8003fde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f82d 	bl	800402e <UART_WaitOnFlagUntilTimeout>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e023      	b.n	8004026 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b04      	cmp	r3, #4
 8003fea:	d10e      	bne.n	800400a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f817 	bl	800402e <UART_WaitOnFlagUntilTimeout>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e00d      	b.n	8004026 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2220      	movs	r2, #32
 800400e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2220      	movs	r2, #32
 8004014:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b09c      	sub	sp, #112	; 0x70
 8004032:	af00      	add	r7, sp, #0
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	603b      	str	r3, [r7, #0]
 800403a:	4613      	mov	r3, r2
 800403c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800403e:	e0a5      	b.n	800418c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004040:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004046:	f000 80a1 	beq.w	800418c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800404a:	f7fd f955 	bl	80012f8 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004056:	429a      	cmp	r2, r3
 8004058:	d302      	bcc.n	8004060 <UART_WaitOnFlagUntilTimeout+0x32>
 800405a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800405c:	2b00      	cmp	r3, #0
 800405e:	d13e      	bne.n	80040de <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004068:	e853 3f00 	ldrex	r3, [r3]
 800406c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800406e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004070:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004074:	667b      	str	r3, [r7, #100]	; 0x64
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800407e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004080:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004082:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004084:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004086:	e841 2300 	strex	r3, r2, [r1]
 800408a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800408c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1e6      	bne.n	8004060 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3308      	adds	r3, #8
 8004098:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800409c:	e853 3f00 	ldrex	r3, [r3]
 80040a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a4:	f023 0301 	bic.w	r3, r3, #1
 80040a8:	663b      	str	r3, [r7, #96]	; 0x60
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	3308      	adds	r3, #8
 80040b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80040b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040ba:	e841 2300 	strex	r3, r2, [r1]
 80040be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80040c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1e5      	bne.n	8004092 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2220      	movs	r2, #32
 80040ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2220      	movs	r2, #32
 80040d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e067      	b.n	80041ae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d04f      	beq.n	800418c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040fa:	d147      	bne.n	800418c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004104:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410e:	e853 3f00 	ldrex	r3, [r3]
 8004112:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800411a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	461a      	mov	r2, r3
 8004122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004124:	637b      	str	r3, [r7, #52]	; 0x34
 8004126:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004128:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800412a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800412c:	e841 2300 	strex	r3, r2, [r1]
 8004130:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1e6      	bne.n	8004106 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3308      	adds	r3, #8
 800413e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	e853 3f00 	ldrex	r3, [r3]
 8004146:	613b      	str	r3, [r7, #16]
   return(result);
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f023 0301 	bic.w	r3, r3, #1
 800414e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3308      	adds	r3, #8
 8004156:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004158:	623a      	str	r2, [r7, #32]
 800415a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415c:	69f9      	ldr	r1, [r7, #28]
 800415e:	6a3a      	ldr	r2, [r7, #32]
 8004160:	e841 2300 	strex	r3, r2, [r1]
 8004164:	61bb      	str	r3, [r7, #24]
   return(result);
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e5      	bne.n	8004138 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2220      	movs	r2, #32
 8004170:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2220      	movs	r2, #32
 8004176:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2220      	movs	r2, #32
 800417c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e010      	b.n	80041ae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	69da      	ldr	r2, [r3, #28]
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	4013      	ands	r3, r2
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	429a      	cmp	r2, r3
 800419a:	bf0c      	ite	eq
 800419c:	2301      	moveq	r3, #1
 800419e:	2300      	movne	r3, #0
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	461a      	mov	r2, r3
 80041a4:	79fb      	ldrb	r3, [r7, #7]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	f43f af4a 	beq.w	8004040 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3770      	adds	r7, #112	; 0x70
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
	...

080041b8 <__errno>:
 80041b8:	4b01      	ldr	r3, [pc, #4]	; (80041c0 <__errno+0x8>)
 80041ba:	6818      	ldr	r0, [r3, #0]
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	2000000c 	.word	0x2000000c

080041c4 <__libc_init_array>:
 80041c4:	b570      	push	{r4, r5, r6, lr}
 80041c6:	4d0d      	ldr	r5, [pc, #52]	; (80041fc <__libc_init_array+0x38>)
 80041c8:	4c0d      	ldr	r4, [pc, #52]	; (8004200 <__libc_init_array+0x3c>)
 80041ca:	1b64      	subs	r4, r4, r5
 80041cc:	10a4      	asrs	r4, r4, #2
 80041ce:	2600      	movs	r6, #0
 80041d0:	42a6      	cmp	r6, r4
 80041d2:	d109      	bne.n	80041e8 <__libc_init_array+0x24>
 80041d4:	4d0b      	ldr	r5, [pc, #44]	; (8004204 <__libc_init_array+0x40>)
 80041d6:	4c0c      	ldr	r4, [pc, #48]	; (8004208 <__libc_init_array+0x44>)
 80041d8:	f001 f824 	bl	8005224 <_init>
 80041dc:	1b64      	subs	r4, r4, r5
 80041de:	10a4      	asrs	r4, r4, #2
 80041e0:	2600      	movs	r6, #0
 80041e2:	42a6      	cmp	r6, r4
 80041e4:	d105      	bne.n	80041f2 <__libc_init_array+0x2e>
 80041e6:	bd70      	pop	{r4, r5, r6, pc}
 80041e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ec:	4798      	blx	r3
 80041ee:	3601      	adds	r6, #1
 80041f0:	e7ee      	b.n	80041d0 <__libc_init_array+0xc>
 80041f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80041f6:	4798      	blx	r3
 80041f8:	3601      	adds	r6, #1
 80041fa:	e7f2      	b.n	80041e2 <__libc_init_array+0x1e>
 80041fc:	080053f0 	.word	0x080053f0
 8004200:	080053f0 	.word	0x080053f0
 8004204:	080053f0 	.word	0x080053f0
 8004208:	080053f4 	.word	0x080053f4

0800420c <memset>:
 800420c:	4402      	add	r2, r0
 800420e:	4603      	mov	r3, r0
 8004210:	4293      	cmp	r3, r2
 8004212:	d100      	bne.n	8004216 <memset+0xa>
 8004214:	4770      	bx	lr
 8004216:	f803 1b01 	strb.w	r1, [r3], #1
 800421a:	e7f9      	b.n	8004210 <memset+0x4>

0800421c <iprintf>:
 800421c:	b40f      	push	{r0, r1, r2, r3}
 800421e:	4b0a      	ldr	r3, [pc, #40]	; (8004248 <iprintf+0x2c>)
 8004220:	b513      	push	{r0, r1, r4, lr}
 8004222:	681c      	ldr	r4, [r3, #0]
 8004224:	b124      	cbz	r4, 8004230 <iprintf+0x14>
 8004226:	69a3      	ldr	r3, [r4, #24]
 8004228:	b913      	cbnz	r3, 8004230 <iprintf+0x14>
 800422a:	4620      	mov	r0, r4
 800422c:	f000 fa5e 	bl	80046ec <__sinit>
 8004230:	ab05      	add	r3, sp, #20
 8004232:	9a04      	ldr	r2, [sp, #16]
 8004234:	68a1      	ldr	r1, [r4, #8]
 8004236:	9301      	str	r3, [sp, #4]
 8004238:	4620      	mov	r0, r4
 800423a:	f000 fc67 	bl	8004b0c <_vfiprintf_r>
 800423e:	b002      	add	sp, #8
 8004240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004244:	b004      	add	sp, #16
 8004246:	4770      	bx	lr
 8004248:	2000000c 	.word	0x2000000c

0800424c <_puts_r>:
 800424c:	b570      	push	{r4, r5, r6, lr}
 800424e:	460e      	mov	r6, r1
 8004250:	4605      	mov	r5, r0
 8004252:	b118      	cbz	r0, 800425c <_puts_r+0x10>
 8004254:	6983      	ldr	r3, [r0, #24]
 8004256:	b90b      	cbnz	r3, 800425c <_puts_r+0x10>
 8004258:	f000 fa48 	bl	80046ec <__sinit>
 800425c:	69ab      	ldr	r3, [r5, #24]
 800425e:	68ac      	ldr	r4, [r5, #8]
 8004260:	b913      	cbnz	r3, 8004268 <_puts_r+0x1c>
 8004262:	4628      	mov	r0, r5
 8004264:	f000 fa42 	bl	80046ec <__sinit>
 8004268:	4b2c      	ldr	r3, [pc, #176]	; (800431c <_puts_r+0xd0>)
 800426a:	429c      	cmp	r4, r3
 800426c:	d120      	bne.n	80042b0 <_puts_r+0x64>
 800426e:	686c      	ldr	r4, [r5, #4]
 8004270:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004272:	07db      	lsls	r3, r3, #31
 8004274:	d405      	bmi.n	8004282 <_puts_r+0x36>
 8004276:	89a3      	ldrh	r3, [r4, #12]
 8004278:	0598      	lsls	r0, r3, #22
 800427a:	d402      	bmi.n	8004282 <_puts_r+0x36>
 800427c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800427e:	f000 fad3 	bl	8004828 <__retarget_lock_acquire_recursive>
 8004282:	89a3      	ldrh	r3, [r4, #12]
 8004284:	0719      	lsls	r1, r3, #28
 8004286:	d51d      	bpl.n	80042c4 <_puts_r+0x78>
 8004288:	6923      	ldr	r3, [r4, #16]
 800428a:	b1db      	cbz	r3, 80042c4 <_puts_r+0x78>
 800428c:	3e01      	subs	r6, #1
 800428e:	68a3      	ldr	r3, [r4, #8]
 8004290:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004294:	3b01      	subs	r3, #1
 8004296:	60a3      	str	r3, [r4, #8]
 8004298:	bb39      	cbnz	r1, 80042ea <_puts_r+0x9e>
 800429a:	2b00      	cmp	r3, #0
 800429c:	da38      	bge.n	8004310 <_puts_r+0xc4>
 800429e:	4622      	mov	r2, r4
 80042a0:	210a      	movs	r1, #10
 80042a2:	4628      	mov	r0, r5
 80042a4:	f000 f848 	bl	8004338 <__swbuf_r>
 80042a8:	3001      	adds	r0, #1
 80042aa:	d011      	beq.n	80042d0 <_puts_r+0x84>
 80042ac:	250a      	movs	r5, #10
 80042ae:	e011      	b.n	80042d4 <_puts_r+0x88>
 80042b0:	4b1b      	ldr	r3, [pc, #108]	; (8004320 <_puts_r+0xd4>)
 80042b2:	429c      	cmp	r4, r3
 80042b4:	d101      	bne.n	80042ba <_puts_r+0x6e>
 80042b6:	68ac      	ldr	r4, [r5, #8]
 80042b8:	e7da      	b.n	8004270 <_puts_r+0x24>
 80042ba:	4b1a      	ldr	r3, [pc, #104]	; (8004324 <_puts_r+0xd8>)
 80042bc:	429c      	cmp	r4, r3
 80042be:	bf08      	it	eq
 80042c0:	68ec      	ldreq	r4, [r5, #12]
 80042c2:	e7d5      	b.n	8004270 <_puts_r+0x24>
 80042c4:	4621      	mov	r1, r4
 80042c6:	4628      	mov	r0, r5
 80042c8:	f000 f888 	bl	80043dc <__swsetup_r>
 80042cc:	2800      	cmp	r0, #0
 80042ce:	d0dd      	beq.n	800428c <_puts_r+0x40>
 80042d0:	f04f 35ff 	mov.w	r5, #4294967295
 80042d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042d6:	07da      	lsls	r2, r3, #31
 80042d8:	d405      	bmi.n	80042e6 <_puts_r+0x9a>
 80042da:	89a3      	ldrh	r3, [r4, #12]
 80042dc:	059b      	lsls	r3, r3, #22
 80042de:	d402      	bmi.n	80042e6 <_puts_r+0x9a>
 80042e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042e2:	f000 faa2 	bl	800482a <__retarget_lock_release_recursive>
 80042e6:	4628      	mov	r0, r5
 80042e8:	bd70      	pop	{r4, r5, r6, pc}
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	da04      	bge.n	80042f8 <_puts_r+0xac>
 80042ee:	69a2      	ldr	r2, [r4, #24]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	dc06      	bgt.n	8004302 <_puts_r+0xb6>
 80042f4:	290a      	cmp	r1, #10
 80042f6:	d004      	beq.n	8004302 <_puts_r+0xb6>
 80042f8:	6823      	ldr	r3, [r4, #0]
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	6022      	str	r2, [r4, #0]
 80042fe:	7019      	strb	r1, [r3, #0]
 8004300:	e7c5      	b.n	800428e <_puts_r+0x42>
 8004302:	4622      	mov	r2, r4
 8004304:	4628      	mov	r0, r5
 8004306:	f000 f817 	bl	8004338 <__swbuf_r>
 800430a:	3001      	adds	r0, #1
 800430c:	d1bf      	bne.n	800428e <_puts_r+0x42>
 800430e:	e7df      	b.n	80042d0 <_puts_r+0x84>
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	250a      	movs	r5, #10
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	6022      	str	r2, [r4, #0]
 8004318:	701d      	strb	r5, [r3, #0]
 800431a:	e7db      	b.n	80042d4 <_puts_r+0x88>
 800431c:	08005374 	.word	0x08005374
 8004320:	08005394 	.word	0x08005394
 8004324:	08005354 	.word	0x08005354

08004328 <puts>:
 8004328:	4b02      	ldr	r3, [pc, #8]	; (8004334 <puts+0xc>)
 800432a:	4601      	mov	r1, r0
 800432c:	6818      	ldr	r0, [r3, #0]
 800432e:	f7ff bf8d 	b.w	800424c <_puts_r>
 8004332:	bf00      	nop
 8004334:	2000000c 	.word	0x2000000c

08004338 <__swbuf_r>:
 8004338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433a:	460e      	mov	r6, r1
 800433c:	4614      	mov	r4, r2
 800433e:	4605      	mov	r5, r0
 8004340:	b118      	cbz	r0, 800434a <__swbuf_r+0x12>
 8004342:	6983      	ldr	r3, [r0, #24]
 8004344:	b90b      	cbnz	r3, 800434a <__swbuf_r+0x12>
 8004346:	f000 f9d1 	bl	80046ec <__sinit>
 800434a:	4b21      	ldr	r3, [pc, #132]	; (80043d0 <__swbuf_r+0x98>)
 800434c:	429c      	cmp	r4, r3
 800434e:	d12b      	bne.n	80043a8 <__swbuf_r+0x70>
 8004350:	686c      	ldr	r4, [r5, #4]
 8004352:	69a3      	ldr	r3, [r4, #24]
 8004354:	60a3      	str	r3, [r4, #8]
 8004356:	89a3      	ldrh	r3, [r4, #12]
 8004358:	071a      	lsls	r2, r3, #28
 800435a:	d52f      	bpl.n	80043bc <__swbuf_r+0x84>
 800435c:	6923      	ldr	r3, [r4, #16]
 800435e:	b36b      	cbz	r3, 80043bc <__swbuf_r+0x84>
 8004360:	6923      	ldr	r3, [r4, #16]
 8004362:	6820      	ldr	r0, [r4, #0]
 8004364:	1ac0      	subs	r0, r0, r3
 8004366:	6963      	ldr	r3, [r4, #20]
 8004368:	b2f6      	uxtb	r6, r6
 800436a:	4283      	cmp	r3, r0
 800436c:	4637      	mov	r7, r6
 800436e:	dc04      	bgt.n	800437a <__swbuf_r+0x42>
 8004370:	4621      	mov	r1, r4
 8004372:	4628      	mov	r0, r5
 8004374:	f000 f926 	bl	80045c4 <_fflush_r>
 8004378:	bb30      	cbnz	r0, 80043c8 <__swbuf_r+0x90>
 800437a:	68a3      	ldr	r3, [r4, #8]
 800437c:	3b01      	subs	r3, #1
 800437e:	60a3      	str	r3, [r4, #8]
 8004380:	6823      	ldr	r3, [r4, #0]
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	6022      	str	r2, [r4, #0]
 8004386:	701e      	strb	r6, [r3, #0]
 8004388:	6963      	ldr	r3, [r4, #20]
 800438a:	3001      	adds	r0, #1
 800438c:	4283      	cmp	r3, r0
 800438e:	d004      	beq.n	800439a <__swbuf_r+0x62>
 8004390:	89a3      	ldrh	r3, [r4, #12]
 8004392:	07db      	lsls	r3, r3, #31
 8004394:	d506      	bpl.n	80043a4 <__swbuf_r+0x6c>
 8004396:	2e0a      	cmp	r6, #10
 8004398:	d104      	bne.n	80043a4 <__swbuf_r+0x6c>
 800439a:	4621      	mov	r1, r4
 800439c:	4628      	mov	r0, r5
 800439e:	f000 f911 	bl	80045c4 <_fflush_r>
 80043a2:	b988      	cbnz	r0, 80043c8 <__swbuf_r+0x90>
 80043a4:	4638      	mov	r0, r7
 80043a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043a8:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <__swbuf_r+0x9c>)
 80043aa:	429c      	cmp	r4, r3
 80043ac:	d101      	bne.n	80043b2 <__swbuf_r+0x7a>
 80043ae:	68ac      	ldr	r4, [r5, #8]
 80043b0:	e7cf      	b.n	8004352 <__swbuf_r+0x1a>
 80043b2:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <__swbuf_r+0xa0>)
 80043b4:	429c      	cmp	r4, r3
 80043b6:	bf08      	it	eq
 80043b8:	68ec      	ldreq	r4, [r5, #12]
 80043ba:	e7ca      	b.n	8004352 <__swbuf_r+0x1a>
 80043bc:	4621      	mov	r1, r4
 80043be:	4628      	mov	r0, r5
 80043c0:	f000 f80c 	bl	80043dc <__swsetup_r>
 80043c4:	2800      	cmp	r0, #0
 80043c6:	d0cb      	beq.n	8004360 <__swbuf_r+0x28>
 80043c8:	f04f 37ff 	mov.w	r7, #4294967295
 80043cc:	e7ea      	b.n	80043a4 <__swbuf_r+0x6c>
 80043ce:	bf00      	nop
 80043d0:	08005374 	.word	0x08005374
 80043d4:	08005394 	.word	0x08005394
 80043d8:	08005354 	.word	0x08005354

080043dc <__swsetup_r>:
 80043dc:	4b32      	ldr	r3, [pc, #200]	; (80044a8 <__swsetup_r+0xcc>)
 80043de:	b570      	push	{r4, r5, r6, lr}
 80043e0:	681d      	ldr	r5, [r3, #0]
 80043e2:	4606      	mov	r6, r0
 80043e4:	460c      	mov	r4, r1
 80043e6:	b125      	cbz	r5, 80043f2 <__swsetup_r+0x16>
 80043e8:	69ab      	ldr	r3, [r5, #24]
 80043ea:	b913      	cbnz	r3, 80043f2 <__swsetup_r+0x16>
 80043ec:	4628      	mov	r0, r5
 80043ee:	f000 f97d 	bl	80046ec <__sinit>
 80043f2:	4b2e      	ldr	r3, [pc, #184]	; (80044ac <__swsetup_r+0xd0>)
 80043f4:	429c      	cmp	r4, r3
 80043f6:	d10f      	bne.n	8004418 <__swsetup_r+0x3c>
 80043f8:	686c      	ldr	r4, [r5, #4]
 80043fa:	89a3      	ldrh	r3, [r4, #12]
 80043fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004400:	0719      	lsls	r1, r3, #28
 8004402:	d42c      	bmi.n	800445e <__swsetup_r+0x82>
 8004404:	06dd      	lsls	r5, r3, #27
 8004406:	d411      	bmi.n	800442c <__swsetup_r+0x50>
 8004408:	2309      	movs	r3, #9
 800440a:	6033      	str	r3, [r6, #0]
 800440c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004410:	81a3      	strh	r3, [r4, #12]
 8004412:	f04f 30ff 	mov.w	r0, #4294967295
 8004416:	e03e      	b.n	8004496 <__swsetup_r+0xba>
 8004418:	4b25      	ldr	r3, [pc, #148]	; (80044b0 <__swsetup_r+0xd4>)
 800441a:	429c      	cmp	r4, r3
 800441c:	d101      	bne.n	8004422 <__swsetup_r+0x46>
 800441e:	68ac      	ldr	r4, [r5, #8]
 8004420:	e7eb      	b.n	80043fa <__swsetup_r+0x1e>
 8004422:	4b24      	ldr	r3, [pc, #144]	; (80044b4 <__swsetup_r+0xd8>)
 8004424:	429c      	cmp	r4, r3
 8004426:	bf08      	it	eq
 8004428:	68ec      	ldreq	r4, [r5, #12]
 800442a:	e7e6      	b.n	80043fa <__swsetup_r+0x1e>
 800442c:	0758      	lsls	r0, r3, #29
 800442e:	d512      	bpl.n	8004456 <__swsetup_r+0x7a>
 8004430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004432:	b141      	cbz	r1, 8004446 <__swsetup_r+0x6a>
 8004434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004438:	4299      	cmp	r1, r3
 800443a:	d002      	beq.n	8004442 <__swsetup_r+0x66>
 800443c:	4630      	mov	r0, r6
 800443e:	f000 fa5b 	bl	80048f8 <_free_r>
 8004442:	2300      	movs	r3, #0
 8004444:	6363      	str	r3, [r4, #52]	; 0x34
 8004446:	89a3      	ldrh	r3, [r4, #12]
 8004448:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800444c:	81a3      	strh	r3, [r4, #12]
 800444e:	2300      	movs	r3, #0
 8004450:	6063      	str	r3, [r4, #4]
 8004452:	6923      	ldr	r3, [r4, #16]
 8004454:	6023      	str	r3, [r4, #0]
 8004456:	89a3      	ldrh	r3, [r4, #12]
 8004458:	f043 0308 	orr.w	r3, r3, #8
 800445c:	81a3      	strh	r3, [r4, #12]
 800445e:	6923      	ldr	r3, [r4, #16]
 8004460:	b94b      	cbnz	r3, 8004476 <__swsetup_r+0x9a>
 8004462:	89a3      	ldrh	r3, [r4, #12]
 8004464:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800446c:	d003      	beq.n	8004476 <__swsetup_r+0x9a>
 800446e:	4621      	mov	r1, r4
 8004470:	4630      	mov	r0, r6
 8004472:	f000 fa01 	bl	8004878 <__smakebuf_r>
 8004476:	89a0      	ldrh	r0, [r4, #12]
 8004478:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800447c:	f010 0301 	ands.w	r3, r0, #1
 8004480:	d00a      	beq.n	8004498 <__swsetup_r+0xbc>
 8004482:	2300      	movs	r3, #0
 8004484:	60a3      	str	r3, [r4, #8]
 8004486:	6963      	ldr	r3, [r4, #20]
 8004488:	425b      	negs	r3, r3
 800448a:	61a3      	str	r3, [r4, #24]
 800448c:	6923      	ldr	r3, [r4, #16]
 800448e:	b943      	cbnz	r3, 80044a2 <__swsetup_r+0xc6>
 8004490:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004494:	d1ba      	bne.n	800440c <__swsetup_r+0x30>
 8004496:	bd70      	pop	{r4, r5, r6, pc}
 8004498:	0781      	lsls	r1, r0, #30
 800449a:	bf58      	it	pl
 800449c:	6963      	ldrpl	r3, [r4, #20]
 800449e:	60a3      	str	r3, [r4, #8]
 80044a0:	e7f4      	b.n	800448c <__swsetup_r+0xb0>
 80044a2:	2000      	movs	r0, #0
 80044a4:	e7f7      	b.n	8004496 <__swsetup_r+0xba>
 80044a6:	bf00      	nop
 80044a8:	2000000c 	.word	0x2000000c
 80044ac:	08005374 	.word	0x08005374
 80044b0:	08005394 	.word	0x08005394
 80044b4:	08005354 	.word	0x08005354

080044b8 <__sflush_r>:
 80044b8:	898a      	ldrh	r2, [r1, #12]
 80044ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044be:	4605      	mov	r5, r0
 80044c0:	0710      	lsls	r0, r2, #28
 80044c2:	460c      	mov	r4, r1
 80044c4:	d458      	bmi.n	8004578 <__sflush_r+0xc0>
 80044c6:	684b      	ldr	r3, [r1, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	dc05      	bgt.n	80044d8 <__sflush_r+0x20>
 80044cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	dc02      	bgt.n	80044d8 <__sflush_r+0x20>
 80044d2:	2000      	movs	r0, #0
 80044d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044da:	2e00      	cmp	r6, #0
 80044dc:	d0f9      	beq.n	80044d2 <__sflush_r+0x1a>
 80044de:	2300      	movs	r3, #0
 80044e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80044e4:	682f      	ldr	r7, [r5, #0]
 80044e6:	602b      	str	r3, [r5, #0]
 80044e8:	d032      	beq.n	8004550 <__sflush_r+0x98>
 80044ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80044ec:	89a3      	ldrh	r3, [r4, #12]
 80044ee:	075a      	lsls	r2, r3, #29
 80044f0:	d505      	bpl.n	80044fe <__sflush_r+0x46>
 80044f2:	6863      	ldr	r3, [r4, #4]
 80044f4:	1ac0      	subs	r0, r0, r3
 80044f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044f8:	b10b      	cbz	r3, 80044fe <__sflush_r+0x46>
 80044fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044fc:	1ac0      	subs	r0, r0, r3
 80044fe:	2300      	movs	r3, #0
 8004500:	4602      	mov	r2, r0
 8004502:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004504:	6a21      	ldr	r1, [r4, #32]
 8004506:	4628      	mov	r0, r5
 8004508:	47b0      	blx	r6
 800450a:	1c43      	adds	r3, r0, #1
 800450c:	89a3      	ldrh	r3, [r4, #12]
 800450e:	d106      	bne.n	800451e <__sflush_r+0x66>
 8004510:	6829      	ldr	r1, [r5, #0]
 8004512:	291d      	cmp	r1, #29
 8004514:	d82c      	bhi.n	8004570 <__sflush_r+0xb8>
 8004516:	4a2a      	ldr	r2, [pc, #168]	; (80045c0 <__sflush_r+0x108>)
 8004518:	40ca      	lsrs	r2, r1
 800451a:	07d6      	lsls	r6, r2, #31
 800451c:	d528      	bpl.n	8004570 <__sflush_r+0xb8>
 800451e:	2200      	movs	r2, #0
 8004520:	6062      	str	r2, [r4, #4]
 8004522:	04d9      	lsls	r1, r3, #19
 8004524:	6922      	ldr	r2, [r4, #16]
 8004526:	6022      	str	r2, [r4, #0]
 8004528:	d504      	bpl.n	8004534 <__sflush_r+0x7c>
 800452a:	1c42      	adds	r2, r0, #1
 800452c:	d101      	bne.n	8004532 <__sflush_r+0x7a>
 800452e:	682b      	ldr	r3, [r5, #0]
 8004530:	b903      	cbnz	r3, 8004534 <__sflush_r+0x7c>
 8004532:	6560      	str	r0, [r4, #84]	; 0x54
 8004534:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004536:	602f      	str	r7, [r5, #0]
 8004538:	2900      	cmp	r1, #0
 800453a:	d0ca      	beq.n	80044d2 <__sflush_r+0x1a>
 800453c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004540:	4299      	cmp	r1, r3
 8004542:	d002      	beq.n	800454a <__sflush_r+0x92>
 8004544:	4628      	mov	r0, r5
 8004546:	f000 f9d7 	bl	80048f8 <_free_r>
 800454a:	2000      	movs	r0, #0
 800454c:	6360      	str	r0, [r4, #52]	; 0x34
 800454e:	e7c1      	b.n	80044d4 <__sflush_r+0x1c>
 8004550:	6a21      	ldr	r1, [r4, #32]
 8004552:	2301      	movs	r3, #1
 8004554:	4628      	mov	r0, r5
 8004556:	47b0      	blx	r6
 8004558:	1c41      	adds	r1, r0, #1
 800455a:	d1c7      	bne.n	80044ec <__sflush_r+0x34>
 800455c:	682b      	ldr	r3, [r5, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0c4      	beq.n	80044ec <__sflush_r+0x34>
 8004562:	2b1d      	cmp	r3, #29
 8004564:	d001      	beq.n	800456a <__sflush_r+0xb2>
 8004566:	2b16      	cmp	r3, #22
 8004568:	d101      	bne.n	800456e <__sflush_r+0xb6>
 800456a:	602f      	str	r7, [r5, #0]
 800456c:	e7b1      	b.n	80044d2 <__sflush_r+0x1a>
 800456e:	89a3      	ldrh	r3, [r4, #12]
 8004570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004574:	81a3      	strh	r3, [r4, #12]
 8004576:	e7ad      	b.n	80044d4 <__sflush_r+0x1c>
 8004578:	690f      	ldr	r7, [r1, #16]
 800457a:	2f00      	cmp	r7, #0
 800457c:	d0a9      	beq.n	80044d2 <__sflush_r+0x1a>
 800457e:	0793      	lsls	r3, r2, #30
 8004580:	680e      	ldr	r6, [r1, #0]
 8004582:	bf08      	it	eq
 8004584:	694b      	ldreq	r3, [r1, #20]
 8004586:	600f      	str	r7, [r1, #0]
 8004588:	bf18      	it	ne
 800458a:	2300      	movne	r3, #0
 800458c:	eba6 0807 	sub.w	r8, r6, r7
 8004590:	608b      	str	r3, [r1, #8]
 8004592:	f1b8 0f00 	cmp.w	r8, #0
 8004596:	dd9c      	ble.n	80044d2 <__sflush_r+0x1a>
 8004598:	6a21      	ldr	r1, [r4, #32]
 800459a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800459c:	4643      	mov	r3, r8
 800459e:	463a      	mov	r2, r7
 80045a0:	4628      	mov	r0, r5
 80045a2:	47b0      	blx	r6
 80045a4:	2800      	cmp	r0, #0
 80045a6:	dc06      	bgt.n	80045b6 <__sflush_r+0xfe>
 80045a8:	89a3      	ldrh	r3, [r4, #12]
 80045aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045ae:	81a3      	strh	r3, [r4, #12]
 80045b0:	f04f 30ff 	mov.w	r0, #4294967295
 80045b4:	e78e      	b.n	80044d4 <__sflush_r+0x1c>
 80045b6:	4407      	add	r7, r0
 80045b8:	eba8 0800 	sub.w	r8, r8, r0
 80045bc:	e7e9      	b.n	8004592 <__sflush_r+0xda>
 80045be:	bf00      	nop
 80045c0:	20400001 	.word	0x20400001

080045c4 <_fflush_r>:
 80045c4:	b538      	push	{r3, r4, r5, lr}
 80045c6:	690b      	ldr	r3, [r1, #16]
 80045c8:	4605      	mov	r5, r0
 80045ca:	460c      	mov	r4, r1
 80045cc:	b913      	cbnz	r3, 80045d4 <_fflush_r+0x10>
 80045ce:	2500      	movs	r5, #0
 80045d0:	4628      	mov	r0, r5
 80045d2:	bd38      	pop	{r3, r4, r5, pc}
 80045d4:	b118      	cbz	r0, 80045de <_fflush_r+0x1a>
 80045d6:	6983      	ldr	r3, [r0, #24]
 80045d8:	b90b      	cbnz	r3, 80045de <_fflush_r+0x1a>
 80045da:	f000 f887 	bl	80046ec <__sinit>
 80045de:	4b14      	ldr	r3, [pc, #80]	; (8004630 <_fflush_r+0x6c>)
 80045e0:	429c      	cmp	r4, r3
 80045e2:	d11b      	bne.n	800461c <_fflush_r+0x58>
 80045e4:	686c      	ldr	r4, [r5, #4]
 80045e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0ef      	beq.n	80045ce <_fflush_r+0xa>
 80045ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80045f0:	07d0      	lsls	r0, r2, #31
 80045f2:	d404      	bmi.n	80045fe <_fflush_r+0x3a>
 80045f4:	0599      	lsls	r1, r3, #22
 80045f6:	d402      	bmi.n	80045fe <_fflush_r+0x3a>
 80045f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045fa:	f000 f915 	bl	8004828 <__retarget_lock_acquire_recursive>
 80045fe:	4628      	mov	r0, r5
 8004600:	4621      	mov	r1, r4
 8004602:	f7ff ff59 	bl	80044b8 <__sflush_r>
 8004606:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004608:	07da      	lsls	r2, r3, #31
 800460a:	4605      	mov	r5, r0
 800460c:	d4e0      	bmi.n	80045d0 <_fflush_r+0xc>
 800460e:	89a3      	ldrh	r3, [r4, #12]
 8004610:	059b      	lsls	r3, r3, #22
 8004612:	d4dd      	bmi.n	80045d0 <_fflush_r+0xc>
 8004614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004616:	f000 f908 	bl	800482a <__retarget_lock_release_recursive>
 800461a:	e7d9      	b.n	80045d0 <_fflush_r+0xc>
 800461c:	4b05      	ldr	r3, [pc, #20]	; (8004634 <_fflush_r+0x70>)
 800461e:	429c      	cmp	r4, r3
 8004620:	d101      	bne.n	8004626 <_fflush_r+0x62>
 8004622:	68ac      	ldr	r4, [r5, #8]
 8004624:	e7df      	b.n	80045e6 <_fflush_r+0x22>
 8004626:	4b04      	ldr	r3, [pc, #16]	; (8004638 <_fflush_r+0x74>)
 8004628:	429c      	cmp	r4, r3
 800462a:	bf08      	it	eq
 800462c:	68ec      	ldreq	r4, [r5, #12]
 800462e:	e7da      	b.n	80045e6 <_fflush_r+0x22>
 8004630:	08005374 	.word	0x08005374
 8004634:	08005394 	.word	0x08005394
 8004638:	08005354 	.word	0x08005354

0800463c <std>:
 800463c:	2300      	movs	r3, #0
 800463e:	b510      	push	{r4, lr}
 8004640:	4604      	mov	r4, r0
 8004642:	e9c0 3300 	strd	r3, r3, [r0]
 8004646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800464a:	6083      	str	r3, [r0, #8]
 800464c:	8181      	strh	r1, [r0, #12]
 800464e:	6643      	str	r3, [r0, #100]	; 0x64
 8004650:	81c2      	strh	r2, [r0, #14]
 8004652:	6183      	str	r3, [r0, #24]
 8004654:	4619      	mov	r1, r3
 8004656:	2208      	movs	r2, #8
 8004658:	305c      	adds	r0, #92	; 0x5c
 800465a:	f7ff fdd7 	bl	800420c <memset>
 800465e:	4b05      	ldr	r3, [pc, #20]	; (8004674 <std+0x38>)
 8004660:	6263      	str	r3, [r4, #36]	; 0x24
 8004662:	4b05      	ldr	r3, [pc, #20]	; (8004678 <std+0x3c>)
 8004664:	62a3      	str	r3, [r4, #40]	; 0x28
 8004666:	4b05      	ldr	r3, [pc, #20]	; (800467c <std+0x40>)
 8004668:	62e3      	str	r3, [r4, #44]	; 0x2c
 800466a:	4b05      	ldr	r3, [pc, #20]	; (8004680 <std+0x44>)
 800466c:	6224      	str	r4, [r4, #32]
 800466e:	6323      	str	r3, [r4, #48]	; 0x30
 8004670:	bd10      	pop	{r4, pc}
 8004672:	bf00      	nop
 8004674:	080050b5 	.word	0x080050b5
 8004678:	080050d7 	.word	0x080050d7
 800467c:	0800510f 	.word	0x0800510f
 8004680:	08005133 	.word	0x08005133

08004684 <_cleanup_r>:
 8004684:	4901      	ldr	r1, [pc, #4]	; (800468c <_cleanup_r+0x8>)
 8004686:	f000 b8af 	b.w	80047e8 <_fwalk_reent>
 800468a:	bf00      	nop
 800468c:	080045c5 	.word	0x080045c5

08004690 <__sfmoreglue>:
 8004690:	b570      	push	{r4, r5, r6, lr}
 8004692:	2268      	movs	r2, #104	; 0x68
 8004694:	1e4d      	subs	r5, r1, #1
 8004696:	4355      	muls	r5, r2
 8004698:	460e      	mov	r6, r1
 800469a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800469e:	f000 f997 	bl	80049d0 <_malloc_r>
 80046a2:	4604      	mov	r4, r0
 80046a4:	b140      	cbz	r0, 80046b8 <__sfmoreglue+0x28>
 80046a6:	2100      	movs	r1, #0
 80046a8:	e9c0 1600 	strd	r1, r6, [r0]
 80046ac:	300c      	adds	r0, #12
 80046ae:	60a0      	str	r0, [r4, #8]
 80046b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80046b4:	f7ff fdaa 	bl	800420c <memset>
 80046b8:	4620      	mov	r0, r4
 80046ba:	bd70      	pop	{r4, r5, r6, pc}

080046bc <__sfp_lock_acquire>:
 80046bc:	4801      	ldr	r0, [pc, #4]	; (80046c4 <__sfp_lock_acquire+0x8>)
 80046be:	f000 b8b3 	b.w	8004828 <__retarget_lock_acquire_recursive>
 80046c2:	bf00      	nop
 80046c4:	2000017d 	.word	0x2000017d

080046c8 <__sfp_lock_release>:
 80046c8:	4801      	ldr	r0, [pc, #4]	; (80046d0 <__sfp_lock_release+0x8>)
 80046ca:	f000 b8ae 	b.w	800482a <__retarget_lock_release_recursive>
 80046ce:	bf00      	nop
 80046d0:	2000017d 	.word	0x2000017d

080046d4 <__sinit_lock_acquire>:
 80046d4:	4801      	ldr	r0, [pc, #4]	; (80046dc <__sinit_lock_acquire+0x8>)
 80046d6:	f000 b8a7 	b.w	8004828 <__retarget_lock_acquire_recursive>
 80046da:	bf00      	nop
 80046dc:	2000017e 	.word	0x2000017e

080046e0 <__sinit_lock_release>:
 80046e0:	4801      	ldr	r0, [pc, #4]	; (80046e8 <__sinit_lock_release+0x8>)
 80046e2:	f000 b8a2 	b.w	800482a <__retarget_lock_release_recursive>
 80046e6:	bf00      	nop
 80046e8:	2000017e 	.word	0x2000017e

080046ec <__sinit>:
 80046ec:	b510      	push	{r4, lr}
 80046ee:	4604      	mov	r4, r0
 80046f0:	f7ff fff0 	bl	80046d4 <__sinit_lock_acquire>
 80046f4:	69a3      	ldr	r3, [r4, #24]
 80046f6:	b11b      	cbz	r3, 8004700 <__sinit+0x14>
 80046f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046fc:	f7ff bff0 	b.w	80046e0 <__sinit_lock_release>
 8004700:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004704:	6523      	str	r3, [r4, #80]	; 0x50
 8004706:	4b13      	ldr	r3, [pc, #76]	; (8004754 <__sinit+0x68>)
 8004708:	4a13      	ldr	r2, [pc, #76]	; (8004758 <__sinit+0x6c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	62a2      	str	r2, [r4, #40]	; 0x28
 800470e:	42a3      	cmp	r3, r4
 8004710:	bf04      	itt	eq
 8004712:	2301      	moveq	r3, #1
 8004714:	61a3      	streq	r3, [r4, #24]
 8004716:	4620      	mov	r0, r4
 8004718:	f000 f820 	bl	800475c <__sfp>
 800471c:	6060      	str	r0, [r4, #4]
 800471e:	4620      	mov	r0, r4
 8004720:	f000 f81c 	bl	800475c <__sfp>
 8004724:	60a0      	str	r0, [r4, #8]
 8004726:	4620      	mov	r0, r4
 8004728:	f000 f818 	bl	800475c <__sfp>
 800472c:	2200      	movs	r2, #0
 800472e:	60e0      	str	r0, [r4, #12]
 8004730:	2104      	movs	r1, #4
 8004732:	6860      	ldr	r0, [r4, #4]
 8004734:	f7ff ff82 	bl	800463c <std>
 8004738:	68a0      	ldr	r0, [r4, #8]
 800473a:	2201      	movs	r2, #1
 800473c:	2109      	movs	r1, #9
 800473e:	f7ff ff7d 	bl	800463c <std>
 8004742:	68e0      	ldr	r0, [r4, #12]
 8004744:	2202      	movs	r2, #2
 8004746:	2112      	movs	r1, #18
 8004748:	f7ff ff78 	bl	800463c <std>
 800474c:	2301      	movs	r3, #1
 800474e:	61a3      	str	r3, [r4, #24]
 8004750:	e7d2      	b.n	80046f8 <__sinit+0xc>
 8004752:	bf00      	nop
 8004754:	08005350 	.word	0x08005350
 8004758:	08004685 	.word	0x08004685

0800475c <__sfp>:
 800475c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475e:	4607      	mov	r7, r0
 8004760:	f7ff ffac 	bl	80046bc <__sfp_lock_acquire>
 8004764:	4b1e      	ldr	r3, [pc, #120]	; (80047e0 <__sfp+0x84>)
 8004766:	681e      	ldr	r6, [r3, #0]
 8004768:	69b3      	ldr	r3, [r6, #24]
 800476a:	b913      	cbnz	r3, 8004772 <__sfp+0x16>
 800476c:	4630      	mov	r0, r6
 800476e:	f7ff ffbd 	bl	80046ec <__sinit>
 8004772:	3648      	adds	r6, #72	; 0x48
 8004774:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004778:	3b01      	subs	r3, #1
 800477a:	d503      	bpl.n	8004784 <__sfp+0x28>
 800477c:	6833      	ldr	r3, [r6, #0]
 800477e:	b30b      	cbz	r3, 80047c4 <__sfp+0x68>
 8004780:	6836      	ldr	r6, [r6, #0]
 8004782:	e7f7      	b.n	8004774 <__sfp+0x18>
 8004784:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004788:	b9d5      	cbnz	r5, 80047c0 <__sfp+0x64>
 800478a:	4b16      	ldr	r3, [pc, #88]	; (80047e4 <__sfp+0x88>)
 800478c:	60e3      	str	r3, [r4, #12]
 800478e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004792:	6665      	str	r5, [r4, #100]	; 0x64
 8004794:	f000 f847 	bl	8004826 <__retarget_lock_init_recursive>
 8004798:	f7ff ff96 	bl	80046c8 <__sfp_lock_release>
 800479c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80047a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80047a4:	6025      	str	r5, [r4, #0]
 80047a6:	61a5      	str	r5, [r4, #24]
 80047a8:	2208      	movs	r2, #8
 80047aa:	4629      	mov	r1, r5
 80047ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80047b0:	f7ff fd2c 	bl	800420c <memset>
 80047b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80047b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80047bc:	4620      	mov	r0, r4
 80047be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047c0:	3468      	adds	r4, #104	; 0x68
 80047c2:	e7d9      	b.n	8004778 <__sfp+0x1c>
 80047c4:	2104      	movs	r1, #4
 80047c6:	4638      	mov	r0, r7
 80047c8:	f7ff ff62 	bl	8004690 <__sfmoreglue>
 80047cc:	4604      	mov	r4, r0
 80047ce:	6030      	str	r0, [r6, #0]
 80047d0:	2800      	cmp	r0, #0
 80047d2:	d1d5      	bne.n	8004780 <__sfp+0x24>
 80047d4:	f7ff ff78 	bl	80046c8 <__sfp_lock_release>
 80047d8:	230c      	movs	r3, #12
 80047da:	603b      	str	r3, [r7, #0]
 80047dc:	e7ee      	b.n	80047bc <__sfp+0x60>
 80047de:	bf00      	nop
 80047e0:	08005350 	.word	0x08005350
 80047e4:	ffff0001 	.word	0xffff0001

080047e8 <_fwalk_reent>:
 80047e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047ec:	4606      	mov	r6, r0
 80047ee:	4688      	mov	r8, r1
 80047f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80047f4:	2700      	movs	r7, #0
 80047f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047fa:	f1b9 0901 	subs.w	r9, r9, #1
 80047fe:	d505      	bpl.n	800480c <_fwalk_reent+0x24>
 8004800:	6824      	ldr	r4, [r4, #0]
 8004802:	2c00      	cmp	r4, #0
 8004804:	d1f7      	bne.n	80047f6 <_fwalk_reent+0xe>
 8004806:	4638      	mov	r0, r7
 8004808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800480c:	89ab      	ldrh	r3, [r5, #12]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d907      	bls.n	8004822 <_fwalk_reent+0x3a>
 8004812:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004816:	3301      	adds	r3, #1
 8004818:	d003      	beq.n	8004822 <_fwalk_reent+0x3a>
 800481a:	4629      	mov	r1, r5
 800481c:	4630      	mov	r0, r6
 800481e:	47c0      	blx	r8
 8004820:	4307      	orrs	r7, r0
 8004822:	3568      	adds	r5, #104	; 0x68
 8004824:	e7e9      	b.n	80047fa <_fwalk_reent+0x12>

08004826 <__retarget_lock_init_recursive>:
 8004826:	4770      	bx	lr

08004828 <__retarget_lock_acquire_recursive>:
 8004828:	4770      	bx	lr

0800482a <__retarget_lock_release_recursive>:
 800482a:	4770      	bx	lr

0800482c <__swhatbuf_r>:
 800482c:	b570      	push	{r4, r5, r6, lr}
 800482e:	460e      	mov	r6, r1
 8004830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004834:	2900      	cmp	r1, #0
 8004836:	b096      	sub	sp, #88	; 0x58
 8004838:	4614      	mov	r4, r2
 800483a:	461d      	mov	r5, r3
 800483c:	da08      	bge.n	8004850 <__swhatbuf_r+0x24>
 800483e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	602a      	str	r2, [r5, #0]
 8004846:	061a      	lsls	r2, r3, #24
 8004848:	d410      	bmi.n	800486c <__swhatbuf_r+0x40>
 800484a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800484e:	e00e      	b.n	800486e <__swhatbuf_r+0x42>
 8004850:	466a      	mov	r2, sp
 8004852:	f000 fc95 	bl	8005180 <_fstat_r>
 8004856:	2800      	cmp	r0, #0
 8004858:	dbf1      	blt.n	800483e <__swhatbuf_r+0x12>
 800485a:	9a01      	ldr	r2, [sp, #4]
 800485c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004860:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004864:	425a      	negs	r2, r3
 8004866:	415a      	adcs	r2, r3
 8004868:	602a      	str	r2, [r5, #0]
 800486a:	e7ee      	b.n	800484a <__swhatbuf_r+0x1e>
 800486c:	2340      	movs	r3, #64	; 0x40
 800486e:	2000      	movs	r0, #0
 8004870:	6023      	str	r3, [r4, #0]
 8004872:	b016      	add	sp, #88	; 0x58
 8004874:	bd70      	pop	{r4, r5, r6, pc}
	...

08004878 <__smakebuf_r>:
 8004878:	898b      	ldrh	r3, [r1, #12]
 800487a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800487c:	079d      	lsls	r5, r3, #30
 800487e:	4606      	mov	r6, r0
 8004880:	460c      	mov	r4, r1
 8004882:	d507      	bpl.n	8004894 <__smakebuf_r+0x1c>
 8004884:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004888:	6023      	str	r3, [r4, #0]
 800488a:	6123      	str	r3, [r4, #16]
 800488c:	2301      	movs	r3, #1
 800488e:	6163      	str	r3, [r4, #20]
 8004890:	b002      	add	sp, #8
 8004892:	bd70      	pop	{r4, r5, r6, pc}
 8004894:	ab01      	add	r3, sp, #4
 8004896:	466a      	mov	r2, sp
 8004898:	f7ff ffc8 	bl	800482c <__swhatbuf_r>
 800489c:	9900      	ldr	r1, [sp, #0]
 800489e:	4605      	mov	r5, r0
 80048a0:	4630      	mov	r0, r6
 80048a2:	f000 f895 	bl	80049d0 <_malloc_r>
 80048a6:	b948      	cbnz	r0, 80048bc <__smakebuf_r+0x44>
 80048a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048ac:	059a      	lsls	r2, r3, #22
 80048ae:	d4ef      	bmi.n	8004890 <__smakebuf_r+0x18>
 80048b0:	f023 0303 	bic.w	r3, r3, #3
 80048b4:	f043 0302 	orr.w	r3, r3, #2
 80048b8:	81a3      	strh	r3, [r4, #12]
 80048ba:	e7e3      	b.n	8004884 <__smakebuf_r+0xc>
 80048bc:	4b0d      	ldr	r3, [pc, #52]	; (80048f4 <__smakebuf_r+0x7c>)
 80048be:	62b3      	str	r3, [r6, #40]	; 0x28
 80048c0:	89a3      	ldrh	r3, [r4, #12]
 80048c2:	6020      	str	r0, [r4, #0]
 80048c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048c8:	81a3      	strh	r3, [r4, #12]
 80048ca:	9b00      	ldr	r3, [sp, #0]
 80048cc:	6163      	str	r3, [r4, #20]
 80048ce:	9b01      	ldr	r3, [sp, #4]
 80048d0:	6120      	str	r0, [r4, #16]
 80048d2:	b15b      	cbz	r3, 80048ec <__smakebuf_r+0x74>
 80048d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048d8:	4630      	mov	r0, r6
 80048da:	f000 fc63 	bl	80051a4 <_isatty_r>
 80048de:	b128      	cbz	r0, 80048ec <__smakebuf_r+0x74>
 80048e0:	89a3      	ldrh	r3, [r4, #12]
 80048e2:	f023 0303 	bic.w	r3, r3, #3
 80048e6:	f043 0301 	orr.w	r3, r3, #1
 80048ea:	81a3      	strh	r3, [r4, #12]
 80048ec:	89a0      	ldrh	r0, [r4, #12]
 80048ee:	4305      	orrs	r5, r0
 80048f0:	81a5      	strh	r5, [r4, #12]
 80048f2:	e7cd      	b.n	8004890 <__smakebuf_r+0x18>
 80048f4:	08004685 	.word	0x08004685

080048f8 <_free_r>:
 80048f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048fa:	2900      	cmp	r1, #0
 80048fc:	d044      	beq.n	8004988 <_free_r+0x90>
 80048fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004902:	9001      	str	r0, [sp, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	f1a1 0404 	sub.w	r4, r1, #4
 800490a:	bfb8      	it	lt
 800490c:	18e4      	addlt	r4, r4, r3
 800490e:	f000 fc6b 	bl	80051e8 <__malloc_lock>
 8004912:	4a1e      	ldr	r2, [pc, #120]	; (800498c <_free_r+0x94>)
 8004914:	9801      	ldr	r0, [sp, #4]
 8004916:	6813      	ldr	r3, [r2, #0]
 8004918:	b933      	cbnz	r3, 8004928 <_free_r+0x30>
 800491a:	6063      	str	r3, [r4, #4]
 800491c:	6014      	str	r4, [r2, #0]
 800491e:	b003      	add	sp, #12
 8004920:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004924:	f000 bc66 	b.w	80051f4 <__malloc_unlock>
 8004928:	42a3      	cmp	r3, r4
 800492a:	d908      	bls.n	800493e <_free_r+0x46>
 800492c:	6825      	ldr	r5, [r4, #0]
 800492e:	1961      	adds	r1, r4, r5
 8004930:	428b      	cmp	r3, r1
 8004932:	bf01      	itttt	eq
 8004934:	6819      	ldreq	r1, [r3, #0]
 8004936:	685b      	ldreq	r3, [r3, #4]
 8004938:	1949      	addeq	r1, r1, r5
 800493a:	6021      	streq	r1, [r4, #0]
 800493c:	e7ed      	b.n	800491a <_free_r+0x22>
 800493e:	461a      	mov	r2, r3
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	b10b      	cbz	r3, 8004948 <_free_r+0x50>
 8004944:	42a3      	cmp	r3, r4
 8004946:	d9fa      	bls.n	800493e <_free_r+0x46>
 8004948:	6811      	ldr	r1, [r2, #0]
 800494a:	1855      	adds	r5, r2, r1
 800494c:	42a5      	cmp	r5, r4
 800494e:	d10b      	bne.n	8004968 <_free_r+0x70>
 8004950:	6824      	ldr	r4, [r4, #0]
 8004952:	4421      	add	r1, r4
 8004954:	1854      	adds	r4, r2, r1
 8004956:	42a3      	cmp	r3, r4
 8004958:	6011      	str	r1, [r2, #0]
 800495a:	d1e0      	bne.n	800491e <_free_r+0x26>
 800495c:	681c      	ldr	r4, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	6053      	str	r3, [r2, #4]
 8004962:	4421      	add	r1, r4
 8004964:	6011      	str	r1, [r2, #0]
 8004966:	e7da      	b.n	800491e <_free_r+0x26>
 8004968:	d902      	bls.n	8004970 <_free_r+0x78>
 800496a:	230c      	movs	r3, #12
 800496c:	6003      	str	r3, [r0, #0]
 800496e:	e7d6      	b.n	800491e <_free_r+0x26>
 8004970:	6825      	ldr	r5, [r4, #0]
 8004972:	1961      	adds	r1, r4, r5
 8004974:	428b      	cmp	r3, r1
 8004976:	bf04      	itt	eq
 8004978:	6819      	ldreq	r1, [r3, #0]
 800497a:	685b      	ldreq	r3, [r3, #4]
 800497c:	6063      	str	r3, [r4, #4]
 800497e:	bf04      	itt	eq
 8004980:	1949      	addeq	r1, r1, r5
 8004982:	6021      	streq	r1, [r4, #0]
 8004984:	6054      	str	r4, [r2, #4]
 8004986:	e7ca      	b.n	800491e <_free_r+0x26>
 8004988:	b003      	add	sp, #12
 800498a:	bd30      	pop	{r4, r5, pc}
 800498c:	20000180 	.word	0x20000180

08004990 <sbrk_aligned>:
 8004990:	b570      	push	{r4, r5, r6, lr}
 8004992:	4e0e      	ldr	r6, [pc, #56]	; (80049cc <sbrk_aligned+0x3c>)
 8004994:	460c      	mov	r4, r1
 8004996:	6831      	ldr	r1, [r6, #0]
 8004998:	4605      	mov	r5, r0
 800499a:	b911      	cbnz	r1, 80049a2 <sbrk_aligned+0x12>
 800499c:	f000 fb7a 	bl	8005094 <_sbrk_r>
 80049a0:	6030      	str	r0, [r6, #0]
 80049a2:	4621      	mov	r1, r4
 80049a4:	4628      	mov	r0, r5
 80049a6:	f000 fb75 	bl	8005094 <_sbrk_r>
 80049aa:	1c43      	adds	r3, r0, #1
 80049ac:	d00a      	beq.n	80049c4 <sbrk_aligned+0x34>
 80049ae:	1cc4      	adds	r4, r0, #3
 80049b0:	f024 0403 	bic.w	r4, r4, #3
 80049b4:	42a0      	cmp	r0, r4
 80049b6:	d007      	beq.n	80049c8 <sbrk_aligned+0x38>
 80049b8:	1a21      	subs	r1, r4, r0
 80049ba:	4628      	mov	r0, r5
 80049bc:	f000 fb6a 	bl	8005094 <_sbrk_r>
 80049c0:	3001      	adds	r0, #1
 80049c2:	d101      	bne.n	80049c8 <sbrk_aligned+0x38>
 80049c4:	f04f 34ff 	mov.w	r4, #4294967295
 80049c8:	4620      	mov	r0, r4
 80049ca:	bd70      	pop	{r4, r5, r6, pc}
 80049cc:	20000184 	.word	0x20000184

080049d0 <_malloc_r>:
 80049d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049d4:	1ccd      	adds	r5, r1, #3
 80049d6:	f025 0503 	bic.w	r5, r5, #3
 80049da:	3508      	adds	r5, #8
 80049dc:	2d0c      	cmp	r5, #12
 80049de:	bf38      	it	cc
 80049e0:	250c      	movcc	r5, #12
 80049e2:	2d00      	cmp	r5, #0
 80049e4:	4607      	mov	r7, r0
 80049e6:	db01      	blt.n	80049ec <_malloc_r+0x1c>
 80049e8:	42a9      	cmp	r1, r5
 80049ea:	d905      	bls.n	80049f8 <_malloc_r+0x28>
 80049ec:	230c      	movs	r3, #12
 80049ee:	603b      	str	r3, [r7, #0]
 80049f0:	2600      	movs	r6, #0
 80049f2:	4630      	mov	r0, r6
 80049f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049f8:	4e2e      	ldr	r6, [pc, #184]	; (8004ab4 <_malloc_r+0xe4>)
 80049fa:	f000 fbf5 	bl	80051e8 <__malloc_lock>
 80049fe:	6833      	ldr	r3, [r6, #0]
 8004a00:	461c      	mov	r4, r3
 8004a02:	bb34      	cbnz	r4, 8004a52 <_malloc_r+0x82>
 8004a04:	4629      	mov	r1, r5
 8004a06:	4638      	mov	r0, r7
 8004a08:	f7ff ffc2 	bl	8004990 <sbrk_aligned>
 8004a0c:	1c43      	adds	r3, r0, #1
 8004a0e:	4604      	mov	r4, r0
 8004a10:	d14d      	bne.n	8004aae <_malloc_r+0xde>
 8004a12:	6834      	ldr	r4, [r6, #0]
 8004a14:	4626      	mov	r6, r4
 8004a16:	2e00      	cmp	r6, #0
 8004a18:	d140      	bne.n	8004a9c <_malloc_r+0xcc>
 8004a1a:	6823      	ldr	r3, [r4, #0]
 8004a1c:	4631      	mov	r1, r6
 8004a1e:	4638      	mov	r0, r7
 8004a20:	eb04 0803 	add.w	r8, r4, r3
 8004a24:	f000 fb36 	bl	8005094 <_sbrk_r>
 8004a28:	4580      	cmp	r8, r0
 8004a2a:	d13a      	bne.n	8004aa2 <_malloc_r+0xd2>
 8004a2c:	6821      	ldr	r1, [r4, #0]
 8004a2e:	3503      	adds	r5, #3
 8004a30:	1a6d      	subs	r5, r5, r1
 8004a32:	f025 0503 	bic.w	r5, r5, #3
 8004a36:	3508      	adds	r5, #8
 8004a38:	2d0c      	cmp	r5, #12
 8004a3a:	bf38      	it	cc
 8004a3c:	250c      	movcc	r5, #12
 8004a3e:	4629      	mov	r1, r5
 8004a40:	4638      	mov	r0, r7
 8004a42:	f7ff ffa5 	bl	8004990 <sbrk_aligned>
 8004a46:	3001      	adds	r0, #1
 8004a48:	d02b      	beq.n	8004aa2 <_malloc_r+0xd2>
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	442b      	add	r3, r5
 8004a4e:	6023      	str	r3, [r4, #0]
 8004a50:	e00e      	b.n	8004a70 <_malloc_r+0xa0>
 8004a52:	6822      	ldr	r2, [r4, #0]
 8004a54:	1b52      	subs	r2, r2, r5
 8004a56:	d41e      	bmi.n	8004a96 <_malloc_r+0xc6>
 8004a58:	2a0b      	cmp	r2, #11
 8004a5a:	d916      	bls.n	8004a8a <_malloc_r+0xba>
 8004a5c:	1961      	adds	r1, r4, r5
 8004a5e:	42a3      	cmp	r3, r4
 8004a60:	6025      	str	r5, [r4, #0]
 8004a62:	bf18      	it	ne
 8004a64:	6059      	strne	r1, [r3, #4]
 8004a66:	6863      	ldr	r3, [r4, #4]
 8004a68:	bf08      	it	eq
 8004a6a:	6031      	streq	r1, [r6, #0]
 8004a6c:	5162      	str	r2, [r4, r5]
 8004a6e:	604b      	str	r3, [r1, #4]
 8004a70:	4638      	mov	r0, r7
 8004a72:	f104 060b 	add.w	r6, r4, #11
 8004a76:	f000 fbbd 	bl	80051f4 <__malloc_unlock>
 8004a7a:	f026 0607 	bic.w	r6, r6, #7
 8004a7e:	1d23      	adds	r3, r4, #4
 8004a80:	1af2      	subs	r2, r6, r3
 8004a82:	d0b6      	beq.n	80049f2 <_malloc_r+0x22>
 8004a84:	1b9b      	subs	r3, r3, r6
 8004a86:	50a3      	str	r3, [r4, r2]
 8004a88:	e7b3      	b.n	80049f2 <_malloc_r+0x22>
 8004a8a:	6862      	ldr	r2, [r4, #4]
 8004a8c:	42a3      	cmp	r3, r4
 8004a8e:	bf0c      	ite	eq
 8004a90:	6032      	streq	r2, [r6, #0]
 8004a92:	605a      	strne	r2, [r3, #4]
 8004a94:	e7ec      	b.n	8004a70 <_malloc_r+0xa0>
 8004a96:	4623      	mov	r3, r4
 8004a98:	6864      	ldr	r4, [r4, #4]
 8004a9a:	e7b2      	b.n	8004a02 <_malloc_r+0x32>
 8004a9c:	4634      	mov	r4, r6
 8004a9e:	6876      	ldr	r6, [r6, #4]
 8004aa0:	e7b9      	b.n	8004a16 <_malloc_r+0x46>
 8004aa2:	230c      	movs	r3, #12
 8004aa4:	603b      	str	r3, [r7, #0]
 8004aa6:	4638      	mov	r0, r7
 8004aa8:	f000 fba4 	bl	80051f4 <__malloc_unlock>
 8004aac:	e7a1      	b.n	80049f2 <_malloc_r+0x22>
 8004aae:	6025      	str	r5, [r4, #0]
 8004ab0:	e7de      	b.n	8004a70 <_malloc_r+0xa0>
 8004ab2:	bf00      	nop
 8004ab4:	20000180 	.word	0x20000180

08004ab8 <__sfputc_r>:
 8004ab8:	6893      	ldr	r3, [r2, #8]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	b410      	push	{r4}
 8004ac0:	6093      	str	r3, [r2, #8]
 8004ac2:	da08      	bge.n	8004ad6 <__sfputc_r+0x1e>
 8004ac4:	6994      	ldr	r4, [r2, #24]
 8004ac6:	42a3      	cmp	r3, r4
 8004ac8:	db01      	blt.n	8004ace <__sfputc_r+0x16>
 8004aca:	290a      	cmp	r1, #10
 8004acc:	d103      	bne.n	8004ad6 <__sfputc_r+0x1e>
 8004ace:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ad2:	f7ff bc31 	b.w	8004338 <__swbuf_r>
 8004ad6:	6813      	ldr	r3, [r2, #0]
 8004ad8:	1c58      	adds	r0, r3, #1
 8004ada:	6010      	str	r0, [r2, #0]
 8004adc:	7019      	strb	r1, [r3, #0]
 8004ade:	4608      	mov	r0, r1
 8004ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <__sfputs_r>:
 8004ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae8:	4606      	mov	r6, r0
 8004aea:	460f      	mov	r7, r1
 8004aec:	4614      	mov	r4, r2
 8004aee:	18d5      	adds	r5, r2, r3
 8004af0:	42ac      	cmp	r4, r5
 8004af2:	d101      	bne.n	8004af8 <__sfputs_r+0x12>
 8004af4:	2000      	movs	r0, #0
 8004af6:	e007      	b.n	8004b08 <__sfputs_r+0x22>
 8004af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004afc:	463a      	mov	r2, r7
 8004afe:	4630      	mov	r0, r6
 8004b00:	f7ff ffda 	bl	8004ab8 <__sfputc_r>
 8004b04:	1c43      	adds	r3, r0, #1
 8004b06:	d1f3      	bne.n	8004af0 <__sfputs_r+0xa>
 8004b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b0c <_vfiprintf_r>:
 8004b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b10:	460d      	mov	r5, r1
 8004b12:	b09d      	sub	sp, #116	; 0x74
 8004b14:	4614      	mov	r4, r2
 8004b16:	4698      	mov	r8, r3
 8004b18:	4606      	mov	r6, r0
 8004b1a:	b118      	cbz	r0, 8004b24 <_vfiprintf_r+0x18>
 8004b1c:	6983      	ldr	r3, [r0, #24]
 8004b1e:	b90b      	cbnz	r3, 8004b24 <_vfiprintf_r+0x18>
 8004b20:	f7ff fde4 	bl	80046ec <__sinit>
 8004b24:	4b89      	ldr	r3, [pc, #548]	; (8004d4c <_vfiprintf_r+0x240>)
 8004b26:	429d      	cmp	r5, r3
 8004b28:	d11b      	bne.n	8004b62 <_vfiprintf_r+0x56>
 8004b2a:	6875      	ldr	r5, [r6, #4]
 8004b2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b2e:	07d9      	lsls	r1, r3, #31
 8004b30:	d405      	bmi.n	8004b3e <_vfiprintf_r+0x32>
 8004b32:	89ab      	ldrh	r3, [r5, #12]
 8004b34:	059a      	lsls	r2, r3, #22
 8004b36:	d402      	bmi.n	8004b3e <_vfiprintf_r+0x32>
 8004b38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b3a:	f7ff fe75 	bl	8004828 <__retarget_lock_acquire_recursive>
 8004b3e:	89ab      	ldrh	r3, [r5, #12]
 8004b40:	071b      	lsls	r3, r3, #28
 8004b42:	d501      	bpl.n	8004b48 <_vfiprintf_r+0x3c>
 8004b44:	692b      	ldr	r3, [r5, #16]
 8004b46:	b9eb      	cbnz	r3, 8004b84 <_vfiprintf_r+0x78>
 8004b48:	4629      	mov	r1, r5
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	f7ff fc46 	bl	80043dc <__swsetup_r>
 8004b50:	b1c0      	cbz	r0, 8004b84 <_vfiprintf_r+0x78>
 8004b52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b54:	07dc      	lsls	r4, r3, #31
 8004b56:	d50e      	bpl.n	8004b76 <_vfiprintf_r+0x6a>
 8004b58:	f04f 30ff 	mov.w	r0, #4294967295
 8004b5c:	b01d      	add	sp, #116	; 0x74
 8004b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b62:	4b7b      	ldr	r3, [pc, #492]	; (8004d50 <_vfiprintf_r+0x244>)
 8004b64:	429d      	cmp	r5, r3
 8004b66:	d101      	bne.n	8004b6c <_vfiprintf_r+0x60>
 8004b68:	68b5      	ldr	r5, [r6, #8]
 8004b6a:	e7df      	b.n	8004b2c <_vfiprintf_r+0x20>
 8004b6c:	4b79      	ldr	r3, [pc, #484]	; (8004d54 <_vfiprintf_r+0x248>)
 8004b6e:	429d      	cmp	r5, r3
 8004b70:	bf08      	it	eq
 8004b72:	68f5      	ldreq	r5, [r6, #12]
 8004b74:	e7da      	b.n	8004b2c <_vfiprintf_r+0x20>
 8004b76:	89ab      	ldrh	r3, [r5, #12]
 8004b78:	0598      	lsls	r0, r3, #22
 8004b7a:	d4ed      	bmi.n	8004b58 <_vfiprintf_r+0x4c>
 8004b7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b7e:	f7ff fe54 	bl	800482a <__retarget_lock_release_recursive>
 8004b82:	e7e9      	b.n	8004b58 <_vfiprintf_r+0x4c>
 8004b84:	2300      	movs	r3, #0
 8004b86:	9309      	str	r3, [sp, #36]	; 0x24
 8004b88:	2320      	movs	r3, #32
 8004b8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b92:	2330      	movs	r3, #48	; 0x30
 8004b94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004d58 <_vfiprintf_r+0x24c>
 8004b98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b9c:	f04f 0901 	mov.w	r9, #1
 8004ba0:	4623      	mov	r3, r4
 8004ba2:	469a      	mov	sl, r3
 8004ba4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ba8:	b10a      	cbz	r2, 8004bae <_vfiprintf_r+0xa2>
 8004baa:	2a25      	cmp	r2, #37	; 0x25
 8004bac:	d1f9      	bne.n	8004ba2 <_vfiprintf_r+0x96>
 8004bae:	ebba 0b04 	subs.w	fp, sl, r4
 8004bb2:	d00b      	beq.n	8004bcc <_vfiprintf_r+0xc0>
 8004bb4:	465b      	mov	r3, fp
 8004bb6:	4622      	mov	r2, r4
 8004bb8:	4629      	mov	r1, r5
 8004bba:	4630      	mov	r0, r6
 8004bbc:	f7ff ff93 	bl	8004ae6 <__sfputs_r>
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	f000 80aa 	beq.w	8004d1a <_vfiprintf_r+0x20e>
 8004bc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bc8:	445a      	add	r2, fp
 8004bca:	9209      	str	r2, [sp, #36]	; 0x24
 8004bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 80a2 	beq.w	8004d1a <_vfiprintf_r+0x20e>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004be0:	f10a 0a01 	add.w	sl, sl, #1
 8004be4:	9304      	str	r3, [sp, #16]
 8004be6:	9307      	str	r3, [sp, #28]
 8004be8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bec:	931a      	str	r3, [sp, #104]	; 0x68
 8004bee:	4654      	mov	r4, sl
 8004bf0:	2205      	movs	r2, #5
 8004bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bf6:	4858      	ldr	r0, [pc, #352]	; (8004d58 <_vfiprintf_r+0x24c>)
 8004bf8:	f7fb faea 	bl	80001d0 <memchr>
 8004bfc:	9a04      	ldr	r2, [sp, #16]
 8004bfe:	b9d8      	cbnz	r0, 8004c38 <_vfiprintf_r+0x12c>
 8004c00:	06d1      	lsls	r1, r2, #27
 8004c02:	bf44      	itt	mi
 8004c04:	2320      	movmi	r3, #32
 8004c06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c0a:	0713      	lsls	r3, r2, #28
 8004c0c:	bf44      	itt	mi
 8004c0e:	232b      	movmi	r3, #43	; 0x2b
 8004c10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c14:	f89a 3000 	ldrb.w	r3, [sl]
 8004c18:	2b2a      	cmp	r3, #42	; 0x2a
 8004c1a:	d015      	beq.n	8004c48 <_vfiprintf_r+0x13c>
 8004c1c:	9a07      	ldr	r2, [sp, #28]
 8004c1e:	4654      	mov	r4, sl
 8004c20:	2000      	movs	r0, #0
 8004c22:	f04f 0c0a 	mov.w	ip, #10
 8004c26:	4621      	mov	r1, r4
 8004c28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c2c:	3b30      	subs	r3, #48	; 0x30
 8004c2e:	2b09      	cmp	r3, #9
 8004c30:	d94e      	bls.n	8004cd0 <_vfiprintf_r+0x1c4>
 8004c32:	b1b0      	cbz	r0, 8004c62 <_vfiprintf_r+0x156>
 8004c34:	9207      	str	r2, [sp, #28]
 8004c36:	e014      	b.n	8004c62 <_vfiprintf_r+0x156>
 8004c38:	eba0 0308 	sub.w	r3, r0, r8
 8004c3c:	fa09 f303 	lsl.w	r3, r9, r3
 8004c40:	4313      	orrs	r3, r2
 8004c42:	9304      	str	r3, [sp, #16]
 8004c44:	46a2      	mov	sl, r4
 8004c46:	e7d2      	b.n	8004bee <_vfiprintf_r+0xe2>
 8004c48:	9b03      	ldr	r3, [sp, #12]
 8004c4a:	1d19      	adds	r1, r3, #4
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	9103      	str	r1, [sp, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	bfbb      	ittet	lt
 8004c54:	425b      	neglt	r3, r3
 8004c56:	f042 0202 	orrlt.w	r2, r2, #2
 8004c5a:	9307      	strge	r3, [sp, #28]
 8004c5c:	9307      	strlt	r3, [sp, #28]
 8004c5e:	bfb8      	it	lt
 8004c60:	9204      	strlt	r2, [sp, #16]
 8004c62:	7823      	ldrb	r3, [r4, #0]
 8004c64:	2b2e      	cmp	r3, #46	; 0x2e
 8004c66:	d10c      	bne.n	8004c82 <_vfiprintf_r+0x176>
 8004c68:	7863      	ldrb	r3, [r4, #1]
 8004c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8004c6c:	d135      	bne.n	8004cda <_vfiprintf_r+0x1ce>
 8004c6e:	9b03      	ldr	r3, [sp, #12]
 8004c70:	1d1a      	adds	r2, r3, #4
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	9203      	str	r2, [sp, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	bfb8      	it	lt
 8004c7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c7e:	3402      	adds	r4, #2
 8004c80:	9305      	str	r3, [sp, #20]
 8004c82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004d68 <_vfiprintf_r+0x25c>
 8004c86:	7821      	ldrb	r1, [r4, #0]
 8004c88:	2203      	movs	r2, #3
 8004c8a:	4650      	mov	r0, sl
 8004c8c:	f7fb faa0 	bl	80001d0 <memchr>
 8004c90:	b140      	cbz	r0, 8004ca4 <_vfiprintf_r+0x198>
 8004c92:	2340      	movs	r3, #64	; 0x40
 8004c94:	eba0 000a 	sub.w	r0, r0, sl
 8004c98:	fa03 f000 	lsl.w	r0, r3, r0
 8004c9c:	9b04      	ldr	r3, [sp, #16]
 8004c9e:	4303      	orrs	r3, r0
 8004ca0:	3401      	adds	r4, #1
 8004ca2:	9304      	str	r3, [sp, #16]
 8004ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ca8:	482c      	ldr	r0, [pc, #176]	; (8004d5c <_vfiprintf_r+0x250>)
 8004caa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cae:	2206      	movs	r2, #6
 8004cb0:	f7fb fa8e 	bl	80001d0 <memchr>
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	d03f      	beq.n	8004d38 <_vfiprintf_r+0x22c>
 8004cb8:	4b29      	ldr	r3, [pc, #164]	; (8004d60 <_vfiprintf_r+0x254>)
 8004cba:	bb1b      	cbnz	r3, 8004d04 <_vfiprintf_r+0x1f8>
 8004cbc:	9b03      	ldr	r3, [sp, #12]
 8004cbe:	3307      	adds	r3, #7
 8004cc0:	f023 0307 	bic.w	r3, r3, #7
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	9303      	str	r3, [sp, #12]
 8004cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cca:	443b      	add	r3, r7
 8004ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8004cce:	e767      	b.n	8004ba0 <_vfiprintf_r+0x94>
 8004cd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cd4:	460c      	mov	r4, r1
 8004cd6:	2001      	movs	r0, #1
 8004cd8:	e7a5      	b.n	8004c26 <_vfiprintf_r+0x11a>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	3401      	adds	r4, #1
 8004cde:	9305      	str	r3, [sp, #20]
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	f04f 0c0a 	mov.w	ip, #10
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cec:	3a30      	subs	r2, #48	; 0x30
 8004cee:	2a09      	cmp	r2, #9
 8004cf0:	d903      	bls.n	8004cfa <_vfiprintf_r+0x1ee>
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0c5      	beq.n	8004c82 <_vfiprintf_r+0x176>
 8004cf6:	9105      	str	r1, [sp, #20]
 8004cf8:	e7c3      	b.n	8004c82 <_vfiprintf_r+0x176>
 8004cfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cfe:	4604      	mov	r4, r0
 8004d00:	2301      	movs	r3, #1
 8004d02:	e7f0      	b.n	8004ce6 <_vfiprintf_r+0x1da>
 8004d04:	ab03      	add	r3, sp, #12
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	462a      	mov	r2, r5
 8004d0a:	4b16      	ldr	r3, [pc, #88]	; (8004d64 <_vfiprintf_r+0x258>)
 8004d0c:	a904      	add	r1, sp, #16
 8004d0e:	4630      	mov	r0, r6
 8004d10:	f3af 8000 	nop.w
 8004d14:	4607      	mov	r7, r0
 8004d16:	1c78      	adds	r0, r7, #1
 8004d18:	d1d6      	bne.n	8004cc8 <_vfiprintf_r+0x1bc>
 8004d1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d1c:	07d9      	lsls	r1, r3, #31
 8004d1e:	d405      	bmi.n	8004d2c <_vfiprintf_r+0x220>
 8004d20:	89ab      	ldrh	r3, [r5, #12]
 8004d22:	059a      	lsls	r2, r3, #22
 8004d24:	d402      	bmi.n	8004d2c <_vfiprintf_r+0x220>
 8004d26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d28:	f7ff fd7f 	bl	800482a <__retarget_lock_release_recursive>
 8004d2c:	89ab      	ldrh	r3, [r5, #12]
 8004d2e:	065b      	lsls	r3, r3, #25
 8004d30:	f53f af12 	bmi.w	8004b58 <_vfiprintf_r+0x4c>
 8004d34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d36:	e711      	b.n	8004b5c <_vfiprintf_r+0x50>
 8004d38:	ab03      	add	r3, sp, #12
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	462a      	mov	r2, r5
 8004d3e:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <_vfiprintf_r+0x258>)
 8004d40:	a904      	add	r1, sp, #16
 8004d42:	4630      	mov	r0, r6
 8004d44:	f000 f880 	bl	8004e48 <_printf_i>
 8004d48:	e7e4      	b.n	8004d14 <_vfiprintf_r+0x208>
 8004d4a:	bf00      	nop
 8004d4c:	08005374 	.word	0x08005374
 8004d50:	08005394 	.word	0x08005394
 8004d54:	08005354 	.word	0x08005354
 8004d58:	080053b4 	.word	0x080053b4
 8004d5c:	080053be 	.word	0x080053be
 8004d60:	00000000 	.word	0x00000000
 8004d64:	08004ae7 	.word	0x08004ae7
 8004d68:	080053ba 	.word	0x080053ba

08004d6c <_printf_common>:
 8004d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d70:	4616      	mov	r6, r2
 8004d72:	4699      	mov	r9, r3
 8004d74:	688a      	ldr	r2, [r1, #8]
 8004d76:	690b      	ldr	r3, [r1, #16]
 8004d78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	bfb8      	it	lt
 8004d80:	4613      	movlt	r3, r2
 8004d82:	6033      	str	r3, [r6, #0]
 8004d84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d88:	4607      	mov	r7, r0
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	b10a      	cbz	r2, 8004d92 <_printf_common+0x26>
 8004d8e:	3301      	adds	r3, #1
 8004d90:	6033      	str	r3, [r6, #0]
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	0699      	lsls	r1, r3, #26
 8004d96:	bf42      	ittt	mi
 8004d98:	6833      	ldrmi	r3, [r6, #0]
 8004d9a:	3302      	addmi	r3, #2
 8004d9c:	6033      	strmi	r3, [r6, #0]
 8004d9e:	6825      	ldr	r5, [r4, #0]
 8004da0:	f015 0506 	ands.w	r5, r5, #6
 8004da4:	d106      	bne.n	8004db4 <_printf_common+0x48>
 8004da6:	f104 0a19 	add.w	sl, r4, #25
 8004daa:	68e3      	ldr	r3, [r4, #12]
 8004dac:	6832      	ldr	r2, [r6, #0]
 8004dae:	1a9b      	subs	r3, r3, r2
 8004db0:	42ab      	cmp	r3, r5
 8004db2:	dc26      	bgt.n	8004e02 <_printf_common+0x96>
 8004db4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004db8:	1e13      	subs	r3, r2, #0
 8004dba:	6822      	ldr	r2, [r4, #0]
 8004dbc:	bf18      	it	ne
 8004dbe:	2301      	movne	r3, #1
 8004dc0:	0692      	lsls	r2, r2, #26
 8004dc2:	d42b      	bmi.n	8004e1c <_printf_common+0xb0>
 8004dc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dc8:	4649      	mov	r1, r9
 8004dca:	4638      	mov	r0, r7
 8004dcc:	47c0      	blx	r8
 8004dce:	3001      	adds	r0, #1
 8004dd0:	d01e      	beq.n	8004e10 <_printf_common+0xa4>
 8004dd2:	6823      	ldr	r3, [r4, #0]
 8004dd4:	68e5      	ldr	r5, [r4, #12]
 8004dd6:	6832      	ldr	r2, [r6, #0]
 8004dd8:	f003 0306 	and.w	r3, r3, #6
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	bf08      	it	eq
 8004de0:	1aad      	subeq	r5, r5, r2
 8004de2:	68a3      	ldr	r3, [r4, #8]
 8004de4:	6922      	ldr	r2, [r4, #16]
 8004de6:	bf0c      	ite	eq
 8004de8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dec:	2500      	movne	r5, #0
 8004dee:	4293      	cmp	r3, r2
 8004df0:	bfc4      	itt	gt
 8004df2:	1a9b      	subgt	r3, r3, r2
 8004df4:	18ed      	addgt	r5, r5, r3
 8004df6:	2600      	movs	r6, #0
 8004df8:	341a      	adds	r4, #26
 8004dfa:	42b5      	cmp	r5, r6
 8004dfc:	d11a      	bne.n	8004e34 <_printf_common+0xc8>
 8004dfe:	2000      	movs	r0, #0
 8004e00:	e008      	b.n	8004e14 <_printf_common+0xa8>
 8004e02:	2301      	movs	r3, #1
 8004e04:	4652      	mov	r2, sl
 8004e06:	4649      	mov	r1, r9
 8004e08:	4638      	mov	r0, r7
 8004e0a:	47c0      	blx	r8
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	d103      	bne.n	8004e18 <_printf_common+0xac>
 8004e10:	f04f 30ff 	mov.w	r0, #4294967295
 8004e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e18:	3501      	adds	r5, #1
 8004e1a:	e7c6      	b.n	8004daa <_printf_common+0x3e>
 8004e1c:	18e1      	adds	r1, r4, r3
 8004e1e:	1c5a      	adds	r2, r3, #1
 8004e20:	2030      	movs	r0, #48	; 0x30
 8004e22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e26:	4422      	add	r2, r4
 8004e28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e30:	3302      	adds	r3, #2
 8004e32:	e7c7      	b.n	8004dc4 <_printf_common+0x58>
 8004e34:	2301      	movs	r3, #1
 8004e36:	4622      	mov	r2, r4
 8004e38:	4649      	mov	r1, r9
 8004e3a:	4638      	mov	r0, r7
 8004e3c:	47c0      	blx	r8
 8004e3e:	3001      	adds	r0, #1
 8004e40:	d0e6      	beq.n	8004e10 <_printf_common+0xa4>
 8004e42:	3601      	adds	r6, #1
 8004e44:	e7d9      	b.n	8004dfa <_printf_common+0x8e>
	...

08004e48 <_printf_i>:
 8004e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e4c:	7e0f      	ldrb	r7, [r1, #24]
 8004e4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e50:	2f78      	cmp	r7, #120	; 0x78
 8004e52:	4691      	mov	r9, r2
 8004e54:	4680      	mov	r8, r0
 8004e56:	460c      	mov	r4, r1
 8004e58:	469a      	mov	sl, r3
 8004e5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e5e:	d807      	bhi.n	8004e70 <_printf_i+0x28>
 8004e60:	2f62      	cmp	r7, #98	; 0x62
 8004e62:	d80a      	bhi.n	8004e7a <_printf_i+0x32>
 8004e64:	2f00      	cmp	r7, #0
 8004e66:	f000 80d8 	beq.w	800501a <_printf_i+0x1d2>
 8004e6a:	2f58      	cmp	r7, #88	; 0x58
 8004e6c:	f000 80a3 	beq.w	8004fb6 <_printf_i+0x16e>
 8004e70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e78:	e03a      	b.n	8004ef0 <_printf_i+0xa8>
 8004e7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e7e:	2b15      	cmp	r3, #21
 8004e80:	d8f6      	bhi.n	8004e70 <_printf_i+0x28>
 8004e82:	a101      	add	r1, pc, #4	; (adr r1, 8004e88 <_printf_i+0x40>)
 8004e84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e88:	08004ee1 	.word	0x08004ee1
 8004e8c:	08004ef5 	.word	0x08004ef5
 8004e90:	08004e71 	.word	0x08004e71
 8004e94:	08004e71 	.word	0x08004e71
 8004e98:	08004e71 	.word	0x08004e71
 8004e9c:	08004e71 	.word	0x08004e71
 8004ea0:	08004ef5 	.word	0x08004ef5
 8004ea4:	08004e71 	.word	0x08004e71
 8004ea8:	08004e71 	.word	0x08004e71
 8004eac:	08004e71 	.word	0x08004e71
 8004eb0:	08004e71 	.word	0x08004e71
 8004eb4:	08005001 	.word	0x08005001
 8004eb8:	08004f25 	.word	0x08004f25
 8004ebc:	08004fe3 	.word	0x08004fe3
 8004ec0:	08004e71 	.word	0x08004e71
 8004ec4:	08004e71 	.word	0x08004e71
 8004ec8:	08005023 	.word	0x08005023
 8004ecc:	08004e71 	.word	0x08004e71
 8004ed0:	08004f25 	.word	0x08004f25
 8004ed4:	08004e71 	.word	0x08004e71
 8004ed8:	08004e71 	.word	0x08004e71
 8004edc:	08004feb 	.word	0x08004feb
 8004ee0:	682b      	ldr	r3, [r5, #0]
 8004ee2:	1d1a      	adds	r2, r3, #4
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	602a      	str	r2, [r5, #0]
 8004ee8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004eec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e0a3      	b.n	800503c <_printf_i+0x1f4>
 8004ef4:	6820      	ldr	r0, [r4, #0]
 8004ef6:	6829      	ldr	r1, [r5, #0]
 8004ef8:	0606      	lsls	r6, r0, #24
 8004efa:	f101 0304 	add.w	r3, r1, #4
 8004efe:	d50a      	bpl.n	8004f16 <_printf_i+0xce>
 8004f00:	680e      	ldr	r6, [r1, #0]
 8004f02:	602b      	str	r3, [r5, #0]
 8004f04:	2e00      	cmp	r6, #0
 8004f06:	da03      	bge.n	8004f10 <_printf_i+0xc8>
 8004f08:	232d      	movs	r3, #45	; 0x2d
 8004f0a:	4276      	negs	r6, r6
 8004f0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f10:	485e      	ldr	r0, [pc, #376]	; (800508c <_printf_i+0x244>)
 8004f12:	230a      	movs	r3, #10
 8004f14:	e019      	b.n	8004f4a <_printf_i+0x102>
 8004f16:	680e      	ldr	r6, [r1, #0]
 8004f18:	602b      	str	r3, [r5, #0]
 8004f1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f1e:	bf18      	it	ne
 8004f20:	b236      	sxthne	r6, r6
 8004f22:	e7ef      	b.n	8004f04 <_printf_i+0xbc>
 8004f24:	682b      	ldr	r3, [r5, #0]
 8004f26:	6820      	ldr	r0, [r4, #0]
 8004f28:	1d19      	adds	r1, r3, #4
 8004f2a:	6029      	str	r1, [r5, #0]
 8004f2c:	0601      	lsls	r1, r0, #24
 8004f2e:	d501      	bpl.n	8004f34 <_printf_i+0xec>
 8004f30:	681e      	ldr	r6, [r3, #0]
 8004f32:	e002      	b.n	8004f3a <_printf_i+0xf2>
 8004f34:	0646      	lsls	r6, r0, #25
 8004f36:	d5fb      	bpl.n	8004f30 <_printf_i+0xe8>
 8004f38:	881e      	ldrh	r6, [r3, #0]
 8004f3a:	4854      	ldr	r0, [pc, #336]	; (800508c <_printf_i+0x244>)
 8004f3c:	2f6f      	cmp	r7, #111	; 0x6f
 8004f3e:	bf0c      	ite	eq
 8004f40:	2308      	moveq	r3, #8
 8004f42:	230a      	movne	r3, #10
 8004f44:	2100      	movs	r1, #0
 8004f46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f4a:	6865      	ldr	r5, [r4, #4]
 8004f4c:	60a5      	str	r5, [r4, #8]
 8004f4e:	2d00      	cmp	r5, #0
 8004f50:	bfa2      	ittt	ge
 8004f52:	6821      	ldrge	r1, [r4, #0]
 8004f54:	f021 0104 	bicge.w	r1, r1, #4
 8004f58:	6021      	strge	r1, [r4, #0]
 8004f5a:	b90e      	cbnz	r6, 8004f60 <_printf_i+0x118>
 8004f5c:	2d00      	cmp	r5, #0
 8004f5e:	d04d      	beq.n	8004ffc <_printf_i+0x1b4>
 8004f60:	4615      	mov	r5, r2
 8004f62:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f66:	fb03 6711 	mls	r7, r3, r1, r6
 8004f6a:	5dc7      	ldrb	r7, [r0, r7]
 8004f6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f70:	4637      	mov	r7, r6
 8004f72:	42bb      	cmp	r3, r7
 8004f74:	460e      	mov	r6, r1
 8004f76:	d9f4      	bls.n	8004f62 <_printf_i+0x11a>
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d10b      	bne.n	8004f94 <_printf_i+0x14c>
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	07de      	lsls	r6, r3, #31
 8004f80:	d508      	bpl.n	8004f94 <_printf_i+0x14c>
 8004f82:	6923      	ldr	r3, [r4, #16]
 8004f84:	6861      	ldr	r1, [r4, #4]
 8004f86:	4299      	cmp	r1, r3
 8004f88:	bfde      	ittt	le
 8004f8a:	2330      	movle	r3, #48	; 0x30
 8004f8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f94:	1b52      	subs	r2, r2, r5
 8004f96:	6122      	str	r2, [r4, #16]
 8004f98:	f8cd a000 	str.w	sl, [sp]
 8004f9c:	464b      	mov	r3, r9
 8004f9e:	aa03      	add	r2, sp, #12
 8004fa0:	4621      	mov	r1, r4
 8004fa2:	4640      	mov	r0, r8
 8004fa4:	f7ff fee2 	bl	8004d6c <_printf_common>
 8004fa8:	3001      	adds	r0, #1
 8004faa:	d14c      	bne.n	8005046 <_printf_i+0x1fe>
 8004fac:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb0:	b004      	add	sp, #16
 8004fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fb6:	4835      	ldr	r0, [pc, #212]	; (800508c <_printf_i+0x244>)
 8004fb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004fbc:	6829      	ldr	r1, [r5, #0]
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004fc4:	6029      	str	r1, [r5, #0]
 8004fc6:	061d      	lsls	r5, r3, #24
 8004fc8:	d514      	bpl.n	8004ff4 <_printf_i+0x1ac>
 8004fca:	07df      	lsls	r7, r3, #31
 8004fcc:	bf44      	itt	mi
 8004fce:	f043 0320 	orrmi.w	r3, r3, #32
 8004fd2:	6023      	strmi	r3, [r4, #0]
 8004fd4:	b91e      	cbnz	r6, 8004fde <_printf_i+0x196>
 8004fd6:	6823      	ldr	r3, [r4, #0]
 8004fd8:	f023 0320 	bic.w	r3, r3, #32
 8004fdc:	6023      	str	r3, [r4, #0]
 8004fde:	2310      	movs	r3, #16
 8004fe0:	e7b0      	b.n	8004f44 <_printf_i+0xfc>
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	f043 0320 	orr.w	r3, r3, #32
 8004fe8:	6023      	str	r3, [r4, #0]
 8004fea:	2378      	movs	r3, #120	; 0x78
 8004fec:	4828      	ldr	r0, [pc, #160]	; (8005090 <_printf_i+0x248>)
 8004fee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ff2:	e7e3      	b.n	8004fbc <_printf_i+0x174>
 8004ff4:	0659      	lsls	r1, r3, #25
 8004ff6:	bf48      	it	mi
 8004ff8:	b2b6      	uxthmi	r6, r6
 8004ffa:	e7e6      	b.n	8004fca <_printf_i+0x182>
 8004ffc:	4615      	mov	r5, r2
 8004ffe:	e7bb      	b.n	8004f78 <_printf_i+0x130>
 8005000:	682b      	ldr	r3, [r5, #0]
 8005002:	6826      	ldr	r6, [r4, #0]
 8005004:	6961      	ldr	r1, [r4, #20]
 8005006:	1d18      	adds	r0, r3, #4
 8005008:	6028      	str	r0, [r5, #0]
 800500a:	0635      	lsls	r5, r6, #24
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	d501      	bpl.n	8005014 <_printf_i+0x1cc>
 8005010:	6019      	str	r1, [r3, #0]
 8005012:	e002      	b.n	800501a <_printf_i+0x1d2>
 8005014:	0670      	lsls	r0, r6, #25
 8005016:	d5fb      	bpl.n	8005010 <_printf_i+0x1c8>
 8005018:	8019      	strh	r1, [r3, #0]
 800501a:	2300      	movs	r3, #0
 800501c:	6123      	str	r3, [r4, #16]
 800501e:	4615      	mov	r5, r2
 8005020:	e7ba      	b.n	8004f98 <_printf_i+0x150>
 8005022:	682b      	ldr	r3, [r5, #0]
 8005024:	1d1a      	adds	r2, r3, #4
 8005026:	602a      	str	r2, [r5, #0]
 8005028:	681d      	ldr	r5, [r3, #0]
 800502a:	6862      	ldr	r2, [r4, #4]
 800502c:	2100      	movs	r1, #0
 800502e:	4628      	mov	r0, r5
 8005030:	f7fb f8ce 	bl	80001d0 <memchr>
 8005034:	b108      	cbz	r0, 800503a <_printf_i+0x1f2>
 8005036:	1b40      	subs	r0, r0, r5
 8005038:	6060      	str	r0, [r4, #4]
 800503a:	6863      	ldr	r3, [r4, #4]
 800503c:	6123      	str	r3, [r4, #16]
 800503e:	2300      	movs	r3, #0
 8005040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005044:	e7a8      	b.n	8004f98 <_printf_i+0x150>
 8005046:	6923      	ldr	r3, [r4, #16]
 8005048:	462a      	mov	r2, r5
 800504a:	4649      	mov	r1, r9
 800504c:	4640      	mov	r0, r8
 800504e:	47d0      	blx	sl
 8005050:	3001      	adds	r0, #1
 8005052:	d0ab      	beq.n	8004fac <_printf_i+0x164>
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	079b      	lsls	r3, r3, #30
 8005058:	d413      	bmi.n	8005082 <_printf_i+0x23a>
 800505a:	68e0      	ldr	r0, [r4, #12]
 800505c:	9b03      	ldr	r3, [sp, #12]
 800505e:	4298      	cmp	r0, r3
 8005060:	bfb8      	it	lt
 8005062:	4618      	movlt	r0, r3
 8005064:	e7a4      	b.n	8004fb0 <_printf_i+0x168>
 8005066:	2301      	movs	r3, #1
 8005068:	4632      	mov	r2, r6
 800506a:	4649      	mov	r1, r9
 800506c:	4640      	mov	r0, r8
 800506e:	47d0      	blx	sl
 8005070:	3001      	adds	r0, #1
 8005072:	d09b      	beq.n	8004fac <_printf_i+0x164>
 8005074:	3501      	adds	r5, #1
 8005076:	68e3      	ldr	r3, [r4, #12]
 8005078:	9903      	ldr	r1, [sp, #12]
 800507a:	1a5b      	subs	r3, r3, r1
 800507c:	42ab      	cmp	r3, r5
 800507e:	dcf2      	bgt.n	8005066 <_printf_i+0x21e>
 8005080:	e7eb      	b.n	800505a <_printf_i+0x212>
 8005082:	2500      	movs	r5, #0
 8005084:	f104 0619 	add.w	r6, r4, #25
 8005088:	e7f5      	b.n	8005076 <_printf_i+0x22e>
 800508a:	bf00      	nop
 800508c:	080053c5 	.word	0x080053c5
 8005090:	080053d6 	.word	0x080053d6

08005094 <_sbrk_r>:
 8005094:	b538      	push	{r3, r4, r5, lr}
 8005096:	4d06      	ldr	r5, [pc, #24]	; (80050b0 <_sbrk_r+0x1c>)
 8005098:	2300      	movs	r3, #0
 800509a:	4604      	mov	r4, r0
 800509c:	4608      	mov	r0, r1
 800509e:	602b      	str	r3, [r5, #0]
 80050a0:	f7fc f85e 	bl	8001160 <_sbrk>
 80050a4:	1c43      	adds	r3, r0, #1
 80050a6:	d102      	bne.n	80050ae <_sbrk_r+0x1a>
 80050a8:	682b      	ldr	r3, [r5, #0]
 80050aa:	b103      	cbz	r3, 80050ae <_sbrk_r+0x1a>
 80050ac:	6023      	str	r3, [r4, #0]
 80050ae:	bd38      	pop	{r3, r4, r5, pc}
 80050b0:	20000188 	.word	0x20000188

080050b4 <__sread>:
 80050b4:	b510      	push	{r4, lr}
 80050b6:	460c      	mov	r4, r1
 80050b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050bc:	f000 f8a0 	bl	8005200 <_read_r>
 80050c0:	2800      	cmp	r0, #0
 80050c2:	bfab      	itete	ge
 80050c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80050c6:	89a3      	ldrhlt	r3, [r4, #12]
 80050c8:	181b      	addge	r3, r3, r0
 80050ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80050ce:	bfac      	ite	ge
 80050d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80050d2:	81a3      	strhlt	r3, [r4, #12]
 80050d4:	bd10      	pop	{r4, pc}

080050d6 <__swrite>:
 80050d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050da:	461f      	mov	r7, r3
 80050dc:	898b      	ldrh	r3, [r1, #12]
 80050de:	05db      	lsls	r3, r3, #23
 80050e0:	4605      	mov	r5, r0
 80050e2:	460c      	mov	r4, r1
 80050e4:	4616      	mov	r6, r2
 80050e6:	d505      	bpl.n	80050f4 <__swrite+0x1e>
 80050e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ec:	2302      	movs	r3, #2
 80050ee:	2200      	movs	r2, #0
 80050f0:	f000 f868 	bl	80051c4 <_lseek_r>
 80050f4:	89a3      	ldrh	r3, [r4, #12]
 80050f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050fe:	81a3      	strh	r3, [r4, #12]
 8005100:	4632      	mov	r2, r6
 8005102:	463b      	mov	r3, r7
 8005104:	4628      	mov	r0, r5
 8005106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800510a:	f000 b817 	b.w	800513c <_write_r>

0800510e <__sseek>:
 800510e:	b510      	push	{r4, lr}
 8005110:	460c      	mov	r4, r1
 8005112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005116:	f000 f855 	bl	80051c4 <_lseek_r>
 800511a:	1c43      	adds	r3, r0, #1
 800511c:	89a3      	ldrh	r3, [r4, #12]
 800511e:	bf15      	itete	ne
 8005120:	6560      	strne	r0, [r4, #84]	; 0x54
 8005122:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005126:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800512a:	81a3      	strheq	r3, [r4, #12]
 800512c:	bf18      	it	ne
 800512e:	81a3      	strhne	r3, [r4, #12]
 8005130:	bd10      	pop	{r4, pc}

08005132 <__sclose>:
 8005132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005136:	f000 b813 	b.w	8005160 <_close_r>
	...

0800513c <_write_r>:
 800513c:	b538      	push	{r3, r4, r5, lr}
 800513e:	4d07      	ldr	r5, [pc, #28]	; (800515c <_write_r+0x20>)
 8005140:	4604      	mov	r4, r0
 8005142:	4608      	mov	r0, r1
 8005144:	4611      	mov	r1, r2
 8005146:	2200      	movs	r2, #0
 8005148:	602a      	str	r2, [r5, #0]
 800514a:	461a      	mov	r2, r3
 800514c:	f7fb fd17 	bl	8000b7e <_write>
 8005150:	1c43      	adds	r3, r0, #1
 8005152:	d102      	bne.n	800515a <_write_r+0x1e>
 8005154:	682b      	ldr	r3, [r5, #0]
 8005156:	b103      	cbz	r3, 800515a <_write_r+0x1e>
 8005158:	6023      	str	r3, [r4, #0]
 800515a:	bd38      	pop	{r3, r4, r5, pc}
 800515c:	20000188 	.word	0x20000188

08005160 <_close_r>:
 8005160:	b538      	push	{r3, r4, r5, lr}
 8005162:	4d06      	ldr	r5, [pc, #24]	; (800517c <_close_r+0x1c>)
 8005164:	2300      	movs	r3, #0
 8005166:	4604      	mov	r4, r0
 8005168:	4608      	mov	r0, r1
 800516a:	602b      	str	r3, [r5, #0]
 800516c:	f7fb ffc3 	bl	80010f6 <_close>
 8005170:	1c43      	adds	r3, r0, #1
 8005172:	d102      	bne.n	800517a <_close_r+0x1a>
 8005174:	682b      	ldr	r3, [r5, #0]
 8005176:	b103      	cbz	r3, 800517a <_close_r+0x1a>
 8005178:	6023      	str	r3, [r4, #0]
 800517a:	bd38      	pop	{r3, r4, r5, pc}
 800517c:	20000188 	.word	0x20000188

08005180 <_fstat_r>:
 8005180:	b538      	push	{r3, r4, r5, lr}
 8005182:	4d07      	ldr	r5, [pc, #28]	; (80051a0 <_fstat_r+0x20>)
 8005184:	2300      	movs	r3, #0
 8005186:	4604      	mov	r4, r0
 8005188:	4608      	mov	r0, r1
 800518a:	4611      	mov	r1, r2
 800518c:	602b      	str	r3, [r5, #0]
 800518e:	f7fb ffbe 	bl	800110e <_fstat>
 8005192:	1c43      	adds	r3, r0, #1
 8005194:	d102      	bne.n	800519c <_fstat_r+0x1c>
 8005196:	682b      	ldr	r3, [r5, #0]
 8005198:	b103      	cbz	r3, 800519c <_fstat_r+0x1c>
 800519a:	6023      	str	r3, [r4, #0]
 800519c:	bd38      	pop	{r3, r4, r5, pc}
 800519e:	bf00      	nop
 80051a0:	20000188 	.word	0x20000188

080051a4 <_isatty_r>:
 80051a4:	b538      	push	{r3, r4, r5, lr}
 80051a6:	4d06      	ldr	r5, [pc, #24]	; (80051c0 <_isatty_r+0x1c>)
 80051a8:	2300      	movs	r3, #0
 80051aa:	4604      	mov	r4, r0
 80051ac:	4608      	mov	r0, r1
 80051ae:	602b      	str	r3, [r5, #0]
 80051b0:	f7fb ffbd 	bl	800112e <_isatty>
 80051b4:	1c43      	adds	r3, r0, #1
 80051b6:	d102      	bne.n	80051be <_isatty_r+0x1a>
 80051b8:	682b      	ldr	r3, [r5, #0]
 80051ba:	b103      	cbz	r3, 80051be <_isatty_r+0x1a>
 80051bc:	6023      	str	r3, [r4, #0]
 80051be:	bd38      	pop	{r3, r4, r5, pc}
 80051c0:	20000188 	.word	0x20000188

080051c4 <_lseek_r>:
 80051c4:	b538      	push	{r3, r4, r5, lr}
 80051c6:	4d07      	ldr	r5, [pc, #28]	; (80051e4 <_lseek_r+0x20>)
 80051c8:	4604      	mov	r4, r0
 80051ca:	4608      	mov	r0, r1
 80051cc:	4611      	mov	r1, r2
 80051ce:	2200      	movs	r2, #0
 80051d0:	602a      	str	r2, [r5, #0]
 80051d2:	461a      	mov	r2, r3
 80051d4:	f7fb ffb6 	bl	8001144 <_lseek>
 80051d8:	1c43      	adds	r3, r0, #1
 80051da:	d102      	bne.n	80051e2 <_lseek_r+0x1e>
 80051dc:	682b      	ldr	r3, [r5, #0]
 80051de:	b103      	cbz	r3, 80051e2 <_lseek_r+0x1e>
 80051e0:	6023      	str	r3, [r4, #0]
 80051e2:	bd38      	pop	{r3, r4, r5, pc}
 80051e4:	20000188 	.word	0x20000188

080051e8 <__malloc_lock>:
 80051e8:	4801      	ldr	r0, [pc, #4]	; (80051f0 <__malloc_lock+0x8>)
 80051ea:	f7ff bb1d 	b.w	8004828 <__retarget_lock_acquire_recursive>
 80051ee:	bf00      	nop
 80051f0:	2000017c 	.word	0x2000017c

080051f4 <__malloc_unlock>:
 80051f4:	4801      	ldr	r0, [pc, #4]	; (80051fc <__malloc_unlock+0x8>)
 80051f6:	f7ff bb18 	b.w	800482a <__retarget_lock_release_recursive>
 80051fa:	bf00      	nop
 80051fc:	2000017c 	.word	0x2000017c

08005200 <_read_r>:
 8005200:	b538      	push	{r3, r4, r5, lr}
 8005202:	4d07      	ldr	r5, [pc, #28]	; (8005220 <_read_r+0x20>)
 8005204:	4604      	mov	r4, r0
 8005206:	4608      	mov	r0, r1
 8005208:	4611      	mov	r1, r2
 800520a:	2200      	movs	r2, #0
 800520c:	602a      	str	r2, [r5, #0]
 800520e:	461a      	mov	r2, r3
 8005210:	f7fb ff54 	bl	80010bc <_read>
 8005214:	1c43      	adds	r3, r0, #1
 8005216:	d102      	bne.n	800521e <_read_r+0x1e>
 8005218:	682b      	ldr	r3, [r5, #0]
 800521a:	b103      	cbz	r3, 800521e <_read_r+0x1e>
 800521c:	6023      	str	r3, [r4, #0]
 800521e:	bd38      	pop	{r3, r4, r5, pc}
 8005220:	20000188 	.word	0x20000188

08005224 <_init>:
 8005224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005226:	bf00      	nop
 8005228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800522a:	bc08      	pop	{r3}
 800522c:	469e      	mov	lr, r3
 800522e:	4770      	bx	lr

08005230 <_fini>:
 8005230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005232:	bf00      	nop
 8005234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005236:	bc08      	pop	{r3}
 8005238:	469e      	mov	lr, r3
 800523a:	4770      	bx	lr
